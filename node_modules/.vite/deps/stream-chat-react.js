import {
  StreamChat,
  _arrayWithHoles,
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _defineProperty,
  _getPrototypeOf,
  _inherits,
  _iterableToArray,
  _nonIterableRest,
  _objectWithoutPropertiesLoose,
  _possibleConstructorReturn,
  _typeof,
  _unsupportedIterableToArray,
  logChatPromiseExecution
} from "./chunk-GMB6U3OC.js";
import {
  ln,
  require_dayjs_min,
  require_dist,
  require_extend,
  require_is_buffer,
  require_prop_types
} from "./chunk-C5TDDZQH.js";
import "./chunk-45ZXIL56.js";
import {
  _extends
} from "./chunk-WWKU42RI.js";
import {
  require_react_dom
} from "./chunk-6VWAHX6D.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded") return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options2) {
      return options2.clone !== false && options2.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options2) : value;
    }
    function defaultArrayMerge(target, source, options2) {
      return target.concat(source).map(function(element3) {
        return cloneUnlessOtherwiseSpecified(element3, options2);
      });
    }
    function getMergeFunction(key, options2) {
      if (!options2.customMerge) {
        return deepmerge;
      }
      var customMerge = options2.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_23) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options2) {
      var destination = {};
      if (options2.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options2);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options2.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options2)(target[key], source[key], options2);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options2);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options2) {
      options2 = options2 || {};
      options2.arrayMerge = options2.arrayMerge || defaultArrayMerge;
      options2.isMergeableObject = options2.isMergeableObject || isMergeableObject;
      options2.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options2);
      } else if (sourceIsArray) {
        return options2.arrayMerge(target, source, options2);
      } else {
        return mergeObject(target, source, options2);
      }
    }
    deepmerge.all = function deepmergeAll(array, options2) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options2);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// node_modules/react-player/lib/utils.js
var require_utils = __commonJS({
  "node_modules/react-player/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseStartTime = parseStartTime;
    exports.parseEndTime = parseEndTime;
    exports.randomString = randomString;
    exports.queryString = queryString;
    exports.getSDK = getSDK;
    exports.getConfig = getConfig;
    exports.omit = omit;
    exports.callPlayer = callPlayer;
    exports.isMediaStream = isMediaStream;
    exports.isBlobUrl = isBlobUrl;
    exports.supportsWebKitPresentationMode = supportsWebKitPresentationMode;
    var _loadScript = _interopRequireDefault(require_load_script());
    var _deepmerge = _interopRequireDefault(require_cjs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles4(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
    }
    function _nonIterableRest4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles4(arr) {
      if (Array.isArray(arr)) return arr;
    }
    var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
    var MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;
    var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
    var MATCH_NUMERIC = /^\d+$/;
    function parseTimeParam(url, pattern) {
      if (url instanceof Array) {
        return void 0;
      }
      var match = url.match(pattern);
      if (match) {
        var stamp = match[1];
        if (stamp.match(MATCH_START_STAMP)) {
          return parseTimeString(stamp);
        }
        if (MATCH_NUMERIC.test(stamp)) {
          return parseInt(stamp);
        }
      }
      return void 0;
    }
    function parseTimeString(stamp) {
      var seconds = 0;
      var array = MATCH_START_STAMP.exec(stamp);
      while (array !== null) {
        var _array = array, _array2 = _slicedToArray3(_array, 3), count = _array2[1], period = _array2[2];
        if (period === "h") seconds += parseInt(count, 10) * 60 * 60;
        if (period === "m") seconds += parseInt(count, 10) * 60;
        if (period === "s") seconds += parseInt(count, 10);
        array = MATCH_START_STAMP.exec(stamp);
      }
      return seconds;
    }
    function parseStartTime(url) {
      return parseTimeParam(url, MATCH_START_QUERY);
    }
    function parseEndTime(url) {
      return parseTimeParam(url, MATCH_END_QUERY);
    }
    function randomString() {
      return Math.random().toString(36).substr(2, 5);
    }
    function queryString(object) {
      return Object.keys(object).map(function(key) {
        return "".concat(key, "=").concat(object[key]);
      }).join("&");
    }
    function getGlobal(key) {
      if (window[key]) {
        return window[key];
      }
      if (window.exports && window.exports[key]) {
        return window.exports[key];
      }
      if (window.module && window.module.exports && window.module.exports[key]) {
        return window.module.exports[key];
      }
      return null;
    }
    var requests = {};
    function getSDK(url, sdkGlobal) {
      var sdkReady = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var isLoaded = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : function() {
        return true;
      };
      var fetchScript = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : _loadScript["default"];
      var existingGlobal = getGlobal(sdkGlobal);
      if (existingGlobal && isLoaded(existingGlobal)) {
        return Promise.resolve(existingGlobal);
      }
      return new Promise(function(resolve, reject) {
        if (requests[url]) {
          requests[url].push({
            resolve,
            reject
          });
          return;
        }
        requests[url] = [{
          resolve,
          reject
        }];
        var onLoaded = function onLoaded2(sdk) {
          requests[url].forEach(function(request) {
            return request.resolve(sdk);
          });
        };
        if (sdkReady) {
          var previousOnReady = window[sdkReady];
          window[sdkReady] = function() {
            if (previousOnReady) previousOnReady();
            onLoaded(getGlobal(sdkGlobal));
          };
        }
        fetchScript(url, function(err) {
          if (err) {
            requests[url].forEach(function(request) {
              return request.reject(err);
            });
            requests[url] = null;
          } else if (!sdkReady) {
            onLoaded(getGlobal(sdkGlobal));
          }
        });
      });
    }
    function getConfig(props, defaultProps2) {
      return (0, _deepmerge["default"])(defaultProps2.config, props.config);
    }
    function omit(object) {
      var _ref;
      for (var _len = arguments.length, arrays2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        arrays2[_key - 1] = arguments[_key];
      }
      var omitKeys = (_ref = []).concat.apply(_ref, arrays2);
      var output2 = {};
      var keys2 = Object.keys(object);
      for (var _i2 = 0, _keys = keys2; _i2 < _keys.length; _i2++) {
        var key = _keys[_i2];
        if (omitKeys.indexOf(key) === -1) {
          output2[key] = object[key];
        }
      }
      return output2;
    }
    function callPlayer(method) {
      var _this$player;
      if (!this.player || !this.player[method]) {
        var message = "ReactPlayer: ".concat(this.constructor.displayName, " player could not call %c").concat(method, "%c – ");
        if (!this.player) {
          message += "The player was not available";
        } else if (!this.player[method]) {
          message += "The method was not available";
        }
        console.warn(message, "font-weight: bold", "");
        return null;
      }
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return (_this$player = this.player)[method].apply(_this$player, args);
    }
    function isMediaStream(url) {
      return typeof window !== "undefined" && typeof window.MediaStream !== "undefined" && url instanceof window.MediaStream;
    }
    function isBlobUrl(url) {
      return /^blob:/.test(url);
    }
    function supportsWebKitPresentationMode() {
      var video = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document.createElement("video");
      var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;
      return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === "function" && notMobile;
    }
  }
});

// node_modules/react-player/lib/patterns.js
var require_patterns = __commonJS({
  "node_modules/react-player/lib/patterns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.canPlay = exports.FLV_EXTENSIONS = exports.DASH_EXTENSIONS = exports.HLS_EXTENSIONS = exports.VIDEO_EXTENSIONS = exports.AUDIO_EXTENSIONS = exports.MATCH_URL_KALTURA = exports.MATCH_URL_VIDYARD = exports.MATCH_URL_MIXCLOUD = exports.MATCH_URL_DAILYMOTION = exports.MATCH_URL_TWITCH_CHANNEL = exports.MATCH_URL_TWITCH_VIDEO = exports.MATCH_URL_WISTIA = exports.MATCH_URL_STREAMABLE = exports.MATCH_URL_FACEBOOK_WATCH = exports.MATCH_URL_FACEBOOK = exports.MATCH_URL_VIMEO = exports.MATCH_URL_SOUNDCLOUD = exports.MATCH_URL_YOUTUBE = void 0;
    var _utils = require_utils();
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray4(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = o[Symbol.iterator]();
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var MATCH_URL_YOUTUBE = /(?:youtu\.be\/|youtube(?:-nocookie)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//;
    exports.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;
    var MATCH_URL_SOUNDCLOUD = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/;
    exports.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;
    var MATCH_URL_VIMEO = /vimeo\.com\/(?!progressive_redirect).+/;
    exports.MATCH_URL_VIMEO = MATCH_URL_VIMEO;
    var MATCH_URL_FACEBOOK = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/;
    exports.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;
    var MATCH_URL_FACEBOOK_WATCH = /^https?:\/\/fb\.watch\/.+$/;
    exports.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;
    var MATCH_URL_STREAMABLE = /streamable\.com\/([a-z0-9]+)$/;
    exports.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;
    var MATCH_URL_WISTIA = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?(.*)$/;
    exports.MATCH_URL_WISTIA = MATCH_URL_WISTIA;
    var MATCH_URL_TWITCH_VIDEO = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
    exports.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;
    var MATCH_URL_TWITCH_CHANNEL = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/;
    exports.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;
    var MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/;
    exports.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;
    var MATCH_URL_MIXCLOUD = /mixcloud\.com\/([^/]+\/[^/]+)/;
    exports.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;
    var MATCH_URL_VIDYARD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-_]+)/;
    exports.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;
    var MATCH_URL_KALTURA = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;
    exports.MATCH_URL_KALTURA = MATCH_URL_KALTURA;
    var AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
    exports.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;
    var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
    exports.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;
    var HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
    exports.HLS_EXTENSIONS = HLS_EXTENSIONS;
    var DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
    exports.DASH_EXTENSIONS = DASH_EXTENSIONS;
    var FLV_EXTENSIONS = /\.(flv)($|\?)/i;
    exports.FLV_EXTENSIONS = FLV_EXTENSIONS;
    var canPlayFile = function canPlayFile2(url) {
      if (url instanceof Array) {
        var _iterator = _createForOfIteratorHelper(url), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var item = _step.value;
            if (typeof item === "string" && canPlayFile2(item)) {
              return true;
            }
            if (canPlayFile2(item.src)) {
              return true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return false;
      }
      if ((0, _utils.isMediaStream)(url) || (0, _utils.isBlobUrl)(url)) {
        return true;
      }
      return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);
    };
    var canPlay = {
      youtube: function youtube(url) {
        if (url instanceof Array) {
          return url.every(function(item) {
            return MATCH_URL_YOUTUBE.test(item);
          });
        }
        return MATCH_URL_YOUTUBE.test(url);
      },
      soundcloud: function soundcloud(url) {
        return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);
      },
      vimeo: function vimeo(url) {
        return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);
      },
      facebook: function facebook(url) {
        return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);
      },
      streamable: function streamable(url) {
        return MATCH_URL_STREAMABLE.test(url);
      },
      wistia: function wistia(url) {
        return MATCH_URL_WISTIA.test(url);
      },
      twitch: function twitch(url) {
        return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);
      },
      dailymotion: function dailymotion(url) {
        return MATCH_URL_DAILYMOTION.test(url);
      },
      mixcloud: function mixcloud(url) {
        return MATCH_URL_MIXCLOUD.test(url);
      },
      vidyard: function vidyard(url) {
        return MATCH_URL_VIDYARD.test(url);
      },
      kaltura: function kaltura(url) {
        return MATCH_URL_KALTURA.test(url);
      },
      file: canPlayFile
    };
    exports.canPlay = canPlay;
  }
});

// node_modules/react-player/lib/players/YouTube.js
var require_YouTube = __commonJS({
  "node_modules/react-player/lib/players/YouTube.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles4(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
    }
    function _nonIterableRest4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles4(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://www.youtube.com/iframe_api";
    var SDK_GLOBAL = "YT";
    var SDK_GLOBAL_READY = "onYouTubeIframeAPIReady";
    var MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
    var MATCH_USER_UPLOADS = /user\/([a-zA-Z0-9_-]+)\/?/;
    var MATCH_NOCOOKIE = /youtube-nocookie\.com/;
    var NOCOOKIE_HOST = "https://www.youtube-nocookie.com";
    var YouTube = function(_Component) {
      _inherits2(YouTube2, _Component);
      var _super = _createSuper2(YouTube2);
      function YouTube2() {
        var _this;
        _classCallCheck2(this, YouTube2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "parsePlaylist", function(url) {
          if (url instanceof Array) {
            return {
              listType: "playlist",
              playlist: url.map(_this.getID).join(",")
            };
          }
          if (MATCH_PLAYLIST.test(url)) {
            var _url$match = url.match(MATCH_PLAYLIST), _url$match2 = _slicedToArray3(_url$match, 2), playlistId = _url$match2[1];
            return {
              listType: "playlist",
              list: playlistId.replace(/^UC/, "UU")
            };
          }
          if (MATCH_USER_UPLOADS.test(url)) {
            var _url$match3 = url.match(MATCH_USER_UPLOADS), _url$match4 = _slicedToArray3(_url$match3, 2), username = _url$match4[1];
            return {
              listType: "user_uploads",
              list: username
            };
          }
          return {};
        });
        _defineProperty4(_assertThisInitialized2(_this), "onStateChange", function(event) {
          var data = event.data;
          var _this$props = _this.props, onPlay = _this$props.onPlay, onPause = _this$props.onPause, onBuffer = _this$props.onBuffer, onBufferEnd = _this$props.onBufferEnd, onEnded = _this$props.onEnded, onReady = _this$props.onReady, loop = _this$props.loop, _this$props$config = _this$props.config, playerVars = _this$props$config.playerVars, onUnstarted = _this$props$config.onUnstarted;
          var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState, UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED, PLAYING = _window$SDK_GLOBAL$Pl.PLAYING, PAUSED = _window$SDK_GLOBAL$Pl.PAUSED, BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING, ENDED = _window$SDK_GLOBAL$Pl.ENDED, CUED = _window$SDK_GLOBAL$Pl.CUED;
          if (data === UNSTARTED) onUnstarted();
          if (data === PLAYING) {
            onPlay();
            onBufferEnd();
          }
          if (data === PAUSED) onPause();
          if (data === BUFFERING) onBuffer();
          if (data === ENDED) {
            var isPlaylist = !!_this.callPlayer("getPlaylist");
            if (loop && !isPlaylist) {
              if (playerVars.start) {
                _this.seekTo(playerVars.start);
              } else {
                _this.play();
              }
            }
            onEnded();
          }
          if (data === CUED) onReady();
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unMute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(YouTube2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "getID",
        value: function getID(url) {
          if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {
            return null;
          }
          return url.match(_patterns.MATCH_URL_YOUTUBE)[1];
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _this$props2 = this.props, playing = _this$props2.playing, muted = _this$props2.muted, playsinline = _this$props2.playsinline, controls = _this$props2.controls, loop = _this$props2.loop, config = _this$props2.config, _onError = _this$props2.onError;
          var playerVars = config.playerVars, embedOptions = config.embedOptions;
          var id = this.getID(url);
          if (isReady) {
            if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {
              this.player.loadPlaylist(this.parsePlaylist(url));
              return;
            }
            this.player.cueVideoById({
              videoId: id,
              startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,
              endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(YT) {
            return YT.loaded;
          }).then(function(YT) {
            if (!_this2.container) return;
            _this2.player = new YT.Player(_this2.container, _objectSpread4({
              width: "100%",
              height: "100%",
              videoId: id,
              playerVars: _objectSpread4(_objectSpread4({
                autoplay: playing ? 1 : 0,
                mute: muted ? 1 : 0,
                controls: controls ? 1 : 0,
                start: (0, _utils.parseStartTime)(url),
                end: (0, _utils.parseEndTime)(url),
                origin: window.location.origin,
                playsinline: playsinline ? 1 : 0
              }, _this2.parsePlaylist(url)), playerVars),
              events: {
                onReady: function onReady() {
                  if (loop) {
                    _this2.player.setLoop(true);
                  }
                  _this2.props.onReady();
                },
                onPlaybackRateChange: function onPlaybackRateChange(event) {
                  return _this2.props.onPlaybackRateChange(event.data);
                },
                onStateChange: _this2.onStateChange,
                onError: function onError2(event) {
                  return _onError(event.data);
                }
              },
              host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0
            }, embedOptions));
          }, _onError);
          if (embedOptions.events) {
            console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause");
          }
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("playVideo");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pauseVideo");
        }
      }, {
        key: "stop",
        value: function stop() {
          if (!document.body.contains(this.callPlayer("getIframe"))) return;
          this.callPlayer("stopVideo");
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer("seekTo", amount);
          if (!this.props.playing) {
            this.pause();
          }
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackRate", rate);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.callPlayer("getVideoLoadedFraction") * this.getDuration();
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return YouTube2;
    }(_react.Component);
    exports["default"] = YouTube;
    _defineProperty4(YouTube, "displayName", "YouTube");
    _defineProperty4(YouTube, "canPlay", _patterns.canPlay.youtube);
  }
});

// node_modules/react-player/lib/players/SoundCloud.js
var require_SoundCloud = __commonJS({
  "node_modules/react-player/lib/players/SoundCloud.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://w.soundcloud.com/player/api.js";
    var SDK_GLOBAL = "SC";
    var SoundCloud = function(_Component) {
      _inherits2(SoundCloud2, _Component);
      var _super = _createSuper2(SoundCloud2);
      function SoundCloud2() {
        var _this;
        _classCallCheck2(this, SoundCloud2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "fractionLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(SoundCloud2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(SC) {
            if (!_this2.iframe) return;
            var _SC$Widget$Events = SC.Widget.Events, PLAY = _SC$Widget$Events.PLAY, PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS, PAUSE = _SC$Widget$Events.PAUSE, FINISH = _SC$Widget$Events.FINISH, ERROR = _SC$Widget$Events.ERROR;
            if (!isReady) {
              _this2.player = SC.Widget(_this2.iframe);
              _this2.player.bind(PLAY, _this2.props.onPlay);
              _this2.player.bind(PAUSE, function() {
                var remaining = _this2.duration - _this2.currentTime;
                if (remaining < 0.05) {
                  return;
                }
                _this2.props.onPause();
              });
              _this2.player.bind(PLAY_PROGRESS, function(e) {
                _this2.currentTime = e.currentPosition / 1e3;
                _this2.fractionLoaded = e.loadedProgress;
              });
              _this2.player.bind(FINISH, function() {
                return _this2.props.onEnded();
              });
              _this2.player.bind(ERROR, function(e) {
                return _this2.props.onError(e);
              });
            }
            _this2.player.load(url, _objectSpread4(_objectSpread4({}, _this2.props.config.options), {}, {
              callback: function callback() {
                _this2.player.getDuration(function(duration) {
                  _this2.duration = duration / 1e3;
                  _this2.props.onReady();
                });
              }
            }));
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seekTo", seconds * 1e3);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.fractionLoaded * this.duration;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),
            style,
            frameBorder: 0,
            allow: "autoplay"
          });
        }
      }]);
      return SoundCloud2;
    }(_react.Component);
    exports["default"] = SoundCloud;
    _defineProperty4(SoundCloud, "displayName", "SoundCloud");
    _defineProperty4(SoundCloud, "canPlay", _patterns.canPlay.soundcloud);
    _defineProperty4(SoundCloud, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Vimeo.js
var require_Vimeo = __commonJS({
  "node_modules/react-player/lib/players/Vimeo.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://player.vimeo.com/api/player.js";
    var SDK_GLOBAL = "Vimeo";
    var Vimeo = function(_Component) {
      _inherits2(Vimeo2, _Component);
      var _super = _createSuper2(Vimeo2);
      function Vimeo2() {
        var _this;
        _classCallCheck2(this, Vimeo2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(Vimeo2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          this.duration = null;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo3) {
            if (!_this2.container) return;
            var _this2$props$config = _this2.props.config, playerOptions = _this2$props$config.playerOptions, title = _this2$props$config.title;
            _this2.player = new Vimeo3.Player(_this2.container, _objectSpread4({
              url,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              loop: _this2.props.loop,
              playsinline: _this2.props.playsinline,
              controls: _this2.props.controls
            }, playerOptions));
            _this2.player.ready().then(function() {
              var iframe = _this2.container.querySelector("iframe");
              iframe.style.width = "100%";
              iframe.style.height = "100%";
              if (title) {
                iframe.title = title;
              }
            })["catch"](_this2.props.onError);
            _this2.player.on("loaded", function() {
              _this2.props.onReady();
              _this2.refreshDuration();
            });
            _this2.player.on("play", function() {
              _this2.props.onPlay();
              _this2.refreshDuration();
            });
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", function(e) {
              return _this2.props.onSeek(e.seconds);
            });
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref) {
              var seconds = _ref.seconds;
              _this2.currentTime = seconds;
            });
            _this2.player.on("progress", function(_ref2) {
              var seconds = _ref2.seconds;
              _this2.secondsLoaded = seconds;
            });
            _this2.player.on("bufferstart", _this2.props.onBuffer);
            _this2.player.on("bufferend", _this2.props.onBufferEnd);
          }, this.props.onError);
        }
      }, {
        key: "refreshDuration",
        value: function refreshDuration() {
          var _this3 = this;
          this.player.getDuration().then(function(duration) {
            _this3.duration = duration;
          });
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.callPlayer("play");
          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("unload");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            overflow: "hidden",
            display
          };
          return _react["default"].createElement("div", {
            key: this.props.url,
            ref: this.ref,
            style
          });
        }
      }]);
      return Vimeo2;
    }(_react.Component);
    exports["default"] = Vimeo;
    _defineProperty4(Vimeo, "displayName", "Vimeo");
    _defineProperty4(Vimeo, "canPlay", _patterns.canPlay.vimeo);
    _defineProperty4(Vimeo, "forceLoad", true);
  }
});

// node_modules/react-player/lib/players/Facebook.js
var require_Facebook = __commonJS({
  "node_modules/react-player/lib/players/Facebook.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://connect.facebook.net/en_US/sdk.js";
    var SDK_GLOBAL = "FB";
    var SDK_GLOBAL_READY = "fbAsyncInit";
    var PLAYER_ID_PREFIX = "facebook-player-";
    var Facebook = function(_Component) {
      _inherits2(Facebook2, _Component);
      var _super = _createSuper2(Facebook2);
      function Facebook2() {
        var _this;
        _classCallCheck2(this, Facebook2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        return _this;
      }
      _createClass2(Facebook2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          if (isReady) {
            (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
              return FB.XFBML.parse();
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
            FB.init({
              appId: _this2.props.config.appId,
              xfbml: true,
              version: _this2.props.config.version
            });
            FB.Event.subscribe("xfbml.render", function(msg) {
              _this2.props.onLoaded();
            });
            FB.Event.subscribe("xfbml.ready", function(msg) {
              if (msg.type === "video" && msg.id === _this2.playerID) {
                _this2.player = msg.instance;
                _this2.player.subscribe("startedPlaying", _this2.props.onPlay);
                _this2.player.subscribe("paused", _this2.props.onPause);
                _this2.player.subscribe("finishedPlaying", _this2.props.onEnded);
                _this2.player.subscribe("startedBuffering", _this2.props.onBuffer);
                _this2.player.subscribe("finishedBuffering", _this2.props.onBufferEnd);
                _this2.player.subscribe("error", _this2.props.onError);
                if (_this2.props.muted) {
                  _this2.callPlayer("mute");
                } else {
                  _this2.callPlayer("unmute");
                }
                _this2.props.onReady();
                document.getElementById(_this2.playerID).querySelector("iframe").style.visibility = "visible";
              }
            });
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentPosition");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var attributes = this.props.config.attributes;
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", _extends2({
            style,
            id: this.playerID,
            className: "fb-video",
            "data-href": this.props.url,
            "data-autoplay": this.props.playing ? "true" : "false",
            "data-allowfullscreen": "true",
            "data-controls": this.props.controls ? "true" : "false"
          }, attributes));
        }
      }]);
      return Facebook2;
    }(_react.Component);
    exports["default"] = Facebook;
    _defineProperty4(Facebook, "displayName", "Facebook");
    _defineProperty4(Facebook, "canPlay", _patterns.canPlay.facebook);
    _defineProperty4(Facebook, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Streamable.js
var require_Streamable = __commonJS({
  "node_modules/react-player/lib/players/Streamable.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://cdn.embed.ly/player-0.1.0.min.js";
    var SDK_GLOBAL = "playerjs";
    var Streamable = function(_Component) {
      _inherits2(Streamable2, _Component);
      var _super = _createSuper2(Streamable2);
      function Streamable2() {
        var _this;
        _classCallCheck2(this, Streamable2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(Streamable2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);
            _this2.player.setLoop(_this2.props.loop);
            _this2.player.on("ready", _this2.props.onReady);
            _this2.player.on("play", _this2.props.onPlay);
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", _this2.props.onSeek);
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref) {
              var duration = _ref.duration, seconds = _ref.seconds;
              _this2.duration = duration;
              _this2.currentTime = seconds;
            });
            _this2.player.on("buffered", function(_ref2) {
              var percent = _ref2.percent;
              if (_this2.duration) {
                _this2.secondsLoaded = _this2.duration * percent;
              }
            });
            if (_this2.props.muted) {
              _this2.player.mute();
            }
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var id = this.props.url.match(_patterns.MATCH_URL_STREAMABLE)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://streamable.com/o/".concat(id),
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;"
          });
        }
      }]);
      return Streamable2;
    }(_react.Component);
    exports["default"] = Streamable;
    _defineProperty4(Streamable, "displayName", "Streamable");
    _defineProperty4(Streamable, "canPlay", _patterns.canPlay.streamable);
  }
});

// node_modules/react-player/lib/players/Wistia.js
var require_Wistia = __commonJS({
  "node_modules/react-player/lib/players/Wistia.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://fast.wistia.com/assets/external/E-v1.js";
    var SDK_GLOBAL = "Wistia";
    var PLAYER_ID_PREFIX = "wistia-player-";
    var Wistia = function(_Component) {
      _inherits2(Wistia2, _Component);
      var _super = _createSuper2(Wistia2);
      function Wistia2() {
        var _this;
        _classCallCheck2(this, Wistia2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty4(_assertThisInitialized2(_this), "onPlay", function() {
          var _this$props;
          return (_this$props = _this.props).onPlay.apply(_this$props, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPause", function() {
          var _this$props2;
          return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onSeek", function() {
          var _this$props3;
          return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onEnded", function() {
          var _this$props4;
          return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPlaybackRateChange", function() {
          var _this$props5;
          return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        return _this;
      }
      _createClass2(Wistia2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props6 = this.props, playing = _this$props6.playing, muted = _this$props6.muted, controls = _this$props6.controls, _onReady = _this$props6.onReady, config = _this$props6.config, onError2 = _this$props6.onError;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Wistia3) {
            if (config.customControls) {
              config.customControls.forEach(function(control) {
                return Wistia3.defineControl(control);
              });
            }
            window._wq = window._wq || [];
            window._wq.push({
              id: _this2.playerID,
              options: _objectSpread4({
                autoPlay: playing,
                silentAutoPlay: "allow",
                muted,
                controlsVisibleOnLoad: controls,
                fullscreenButton: controls,
                playbar: controls,
                playbackRateControl: controls,
                qualityControl: controls,
                volumeControl: controls,
                settingsControl: controls,
                smallPlayButton: controls
              }, config.options),
              onReady: function onReady(player) {
                _this2.player = player;
                _this2.unbind();
                _this2.player.bind("play", _this2.onPlay);
                _this2.player.bind("pause", _this2.onPause);
                _this2.player.bind("seek", _this2.onSeek);
                _this2.player.bind("end", _this2.onEnded);
                _this2.player.bind("playbackratechange", _this2.onPlaybackRateChange);
                _onReady();
              }
            });
          }, onError2);
        }
      }, {
        key: "unbind",
        value: function unbind() {
          this.player.unbind("play", this.onPlay);
          this.player.unbind("pause", this.onPause);
          this.player.unbind("seek", this.onSeek);
          this.player.unbind("end", this.onEnded);
          this.player.unbind("playbackratechange", this.onPlaybackRateChange);
        }
        // Proxy methods to prevent listener leaks
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.unbind();
          this.callPlayer("remove");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("time", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("volume", fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("playbackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("duration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("time");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var url = this.props.url;
          var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];
          var className = "wistia_embed wistia_async_".concat(videoID);
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", {
            id: this.playerID,
            key: videoID,
            className,
            style
          });
        }
      }]);
      return Wistia2;
    }(_react.Component);
    exports["default"] = Wistia;
    _defineProperty4(Wistia, "displayName", "Wistia");
    _defineProperty4(Wistia, "canPlay", _patterns.canPlay.wistia);
    _defineProperty4(Wistia, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Twitch.js
var require_Twitch = __commonJS({
  "node_modules/react-player/lib/players/Twitch.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://player.twitch.tv/js/embed/v1.js";
    var SDK_GLOBAL = "Twitch";
    var PLAYER_ID_PREFIX = "twitch-player-";
    var Twitch = function(_Component) {
      _inherits2(Twitch2, _Component);
      var _super = _createSuper2(Twitch2);
      function Twitch2() {
        var _this;
        _classCallCheck2(this, Twitch2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("setMuted", true);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("setMuted", false);
        });
        return _this;
      }
      _createClass2(Twitch2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _this$props = this.props, playsinline = _this$props.playsinline, onError2 = _this$props.onError, config = _this$props.config, controls = _this$props.controls;
          var isChannel2 = _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);
          var id = isChannel2 ? url.match(_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(_patterns.MATCH_URL_TWITCH_VIDEO)[1];
          if (isReady) {
            if (isChannel2) {
              this.player.setChannel(id);
            } else {
              this.player.setVideo("v" + id);
            }
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Twitch3) {
            _this2.player = new Twitch3.Player(_this2.playerID, _objectSpread4({
              video: isChannel2 ? "" : id,
              channel: isChannel2 ? id : "",
              height: "100%",
              width: "100%",
              playsinline,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859
              controls: isChannel2 ? true : controls,
              time: (0, _utils.parseStartTime)(url)
            }, config.options));
            var _Twitch$Player = Twitch3.Player, READY = _Twitch$Player.READY, PLAYING = _Twitch$Player.PLAYING, PAUSE = _Twitch$Player.PAUSE, ENDED = _Twitch$Player.ENDED, ONLINE = _Twitch$Player.ONLINE, OFFLINE = _Twitch$Player.OFFLINE, SEEK = _Twitch$Player.SEEK;
            _this2.player.addEventListener(READY, _this2.props.onReady);
            _this2.player.addEventListener(PLAYING, _this2.props.onPlay);
            _this2.player.addEventListener(PAUSE, _this2.props.onPause);
            _this2.player.addEventListener(ENDED, _this2.props.onEnded);
            _this2.player.addEventListener(SEEK, _this2.props.onSeek);
            _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);
            _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("pause");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", {
            style,
            id: this.playerID
          });
        }
      }]);
      return Twitch2;
    }(_react.Component);
    exports["default"] = Twitch;
    _defineProperty4(Twitch, "displayName", "Twitch");
    _defineProperty4(Twitch, "canPlay", _patterns.canPlay.twitch);
    _defineProperty4(Twitch, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/DailyMotion.js
var require_DailyMotion = __commonJS({
  "node_modules/react-player/lib/players/DailyMotion.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles4(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
    }
    function _nonIterableRest4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles4(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://api.dmcdn.net/all.js";
    var SDK_GLOBAL = "DM";
    var SDK_GLOBAL_READY = "dmAsyncInit";
    var DailyMotion = function(_Component) {
      _inherits2(DailyMotion2, _Component);
      var _super = _createSuper2(DailyMotion2);
      function DailyMotion2() {
        var _this;
        _classCallCheck2(this, DailyMotion2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "onDurationChange", function() {
          var duration = _this.getDuration();
          _this.props.onDuration(duration);
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("setMuted", true);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("setMuted", false);
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(DailyMotion2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props = this.props, controls = _this$props.controls, config = _this$props.config, onError2 = _this$props.onError, playing = _this$props.playing;
          var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION), _url$match2 = _slicedToArray3(_url$match, 2), id = _url$match2[1];
          if (this.player) {
            this.player.load(id, {
              start: (0, _utils.parseStartTime)(url),
              autoplay: playing
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {
            return DM.player;
          }).then(function(DM) {
            if (!_this2.container) return;
            var Player = DM.player;
            _this2.player = new Player(_this2.container, {
              width: "100%",
              height: "100%",
              video: id,
              params: _objectSpread4({
                controls,
                autoplay: _this2.props.playing,
                mute: _this2.props.muted,
                start: (0, _utils.parseStartTime)(url),
                origin: window.location.origin
              }, config.params),
              events: {
                apiready: _this2.props.onReady,
                seeked: function seeked() {
                  return _this2.props.onSeek(_this2.player.currentTime);
                },
                video_end: _this2.props.onEnded,
                durationchange: _this2.onDurationChange,
                pause: _this2.props.onPause,
                playing: _this2.props.onPlay,
                waiting: _this2.props.onBuffer,
                error: function error2(event) {
                  return onError2(event);
                }
              }
            });
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.player.duration || null;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.player.bufferedTime;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return DailyMotion2;
    }(_react.Component);
    exports["default"] = DailyMotion;
    _defineProperty4(DailyMotion, "displayName", "DailyMotion");
    _defineProperty4(DailyMotion, "canPlay", _patterns.canPlay.dailymotion);
    _defineProperty4(DailyMotion, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Mixcloud.js
var require_Mixcloud = __commonJS({
  "node_modules/react-player/lib/players/Mixcloud.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://widget.mixcloud.com/media/js/widgetApi.js";
    var SDK_GLOBAL = "Mixcloud";
    var Mixcloud = function(_Component) {
      _inherits2(Mixcloud2, _Component);
      var _super = _createSuper2(Mixcloud2);
      function Mixcloud2() {
        var _this;
        _classCallCheck2(this, Mixcloud2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(Mixcloud2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Mixcloud3) {
            _this2.player = Mixcloud3.PlayerWidget(_this2.iframe);
            _this2.player.ready.then(function() {
              _this2.player.events.play.on(_this2.props.onPlay);
              _this2.player.events.pause.on(_this2.props.onPause);
              _this2.player.events.ended.on(_this2.props.onEnded);
              _this2.player.events.error.on(_this2.props.error);
              _this2.player.events.progress.on(function(seconds, duration) {
                _this2.currentTime = seconds;
                _this2.duration = duration;
              });
              _this2.props.onReady();
            });
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, url = _this$props.url, config = _this$props.config;
          var id = url.match(_patterns.MATCH_URL_MIXCLOUD)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          var query = (0, _utils.queryString)(_objectSpread4(_objectSpread4({}, config.options), {}, {
            feed: "/".concat(id, "/")
          }));
          return _react["default"].createElement("iframe", {
            key: id,
            ref: this.ref,
            style,
            src: "https://www.mixcloud.com/widget/iframe/?".concat(query),
            frameBorder: "0"
          });
        }
      }]);
      return Mixcloud2;
    }(_react.Component);
    exports["default"] = Mixcloud;
    _defineProperty4(Mixcloud, "displayName", "Mixcloud");
    _defineProperty4(Mixcloud, "canPlay", _patterns.canPlay.mixcloud);
    _defineProperty4(Mixcloud, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Vidyard.js
var require_Vidyard = __commonJS({
  "node_modules/react-player/lib/players/Vidyard.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://play.vidyard.com/embed/v4.js";
    var SDK_GLOBAL = "VidyardV4";
    var SDK_GLOBAL_READY = "onVidyardAPI";
    var Vidyard = function(_Component) {
      _inherits2(Vidyard2, _Component);
      var _super = _createSuper2(Vidyard2);
      function Vidyard2() {
        var _this;
        _classCallCheck2(this, Vidyard2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(Vidyard2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props = this.props, playing = _this$props.playing, config = _this$props.config, onError2 = _this$props.onError, onDuration = _this$props.onDuration;
          var id = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];
          if (this.player) {
            this.stop();
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(Vidyard3) {
            if (!_this2.container) return;
            Vidyard3.api.addReadyListener(function(data, player) {
              if (_this2.player) {
                return;
              }
              _this2.player = player;
              _this2.player.on("ready", _this2.props.onReady);
              _this2.player.on("play", _this2.props.onPlay);
              _this2.player.on("pause", _this2.props.onPause);
              _this2.player.on("seek", _this2.props.onSeek);
              _this2.player.on("playerComplete", _this2.props.onEnded);
            }, id);
            Vidyard3.api.renderPlayer(_objectSpread4({
              uuid: id,
              container: _this2.container,
              autoplay: playing ? 1 : 0
            }, config.options));
            Vidyard3.api.getPlayerMetadata(id).then(function(meta) {
              _this2.duration = meta.length_in_seconds;
              onDuration(meta.length_in_seconds);
            });
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          window.VidyardV4.api.destroyPlayer(this.player);
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer("seek", amount);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackSpeed", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("currentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return Vidyard2;
    }(_react.Component);
    exports["default"] = Vidyard;
    _defineProperty4(Vidyard, "displayName", "Vidyard");
    _defineProperty4(Vidyard, "canPlay", _patterns.canPlay.vidyard);
  }
});

// node_modules/react-player/lib/players/Kaltura.js
var require_Kaltura = __commonJS({
  "node_modules/react-player/lib/players/Kaltura.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://cdn.embed.ly/player-0.1.0.min.js";
    var SDK_GLOBAL = "playerjs";
    var Kaltura = function(_Component) {
      _inherits2(Kaltura2, _Component);
      var _super = _createSuper2(Kaltura2);
      function Kaltura2() {
        var _this;
        _classCallCheck2(this, Kaltura2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(Kaltura2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);
            _this2.player.on("ready", function() {
              setTimeout(function() {
                _this2.player.isReady = true;
                _this2.player.setLoop(_this2.props.loop);
                if (_this2.props.muted) {
                  _this2.player.mute();
                }
                _this2.addListeners(_this2.player, _this2.props);
                _this2.props.onReady();
              }, 500);
            });
          }, this.props.onError);
        }
      }, {
        key: "addListeners",
        value: function addListeners(player, props) {
          var _this3 = this;
          player.on("play", props.onPlay);
          player.on("pause", props.onPause);
          player.on("ended", props.onEnded);
          player.on("error", props.onError);
          player.on("timeupdate", function(_ref) {
            var duration = _ref.duration, seconds = _ref.seconds;
            _this3.duration = duration;
            _this3.currentTime = seconds;
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: this.props.url,
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;",
            referrerPolicy: "no-referrer-when-downgrade"
          });
        }
      }]);
      return Kaltura2;
    }(_react.Component);
    exports["default"] = Kaltura;
    _defineProperty4(Kaltura, "displayName", "Kaltura");
    _defineProperty4(Kaltura, "canPlay", _patterns.canPlay.kaltura);
  }
});

// node_modules/react-player/lib/players/FilePlayer.js
var require_FilePlayer = __commonJS({
  "node_modules/react-player/lib/players/FilePlayer.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var HAS_NAVIGATOR = typeof navigator !== "undefined";
    var IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
    var IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;
    var HLS_SDK_URL = "https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js";
    var HLS_GLOBAL = "Hls";
    var DASH_SDK_URL = "https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js";
    var DASH_GLOBAL = "dashjs";
    var FLV_SDK_URL = "https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js";
    var FLV_GLOBAL = "flvjs";
    var MATCH_DROPBOX_URL = /www\.dropbox\.com\/.+/;
    var MATCH_CLOUDFLARE_STREAM = /https:\/\/watch\.cloudflarestream\.com\/([a-z0-9]+)/;
    var REPLACE_CLOUDFLARE_STREAM = "https://videodelivery.net/{id}/manifest/video.m3u8";
    var FilePlayer = function(_Component) {
      _inherits2(FilePlayer2, _Component);
      var _super = _createSuper2(FilePlayer2);
      function FilePlayer2() {
        var _this;
        _classCallCheck2(this, FilePlayer2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty4(_assertThisInitialized2(_this), "onReady", function() {
          var _this$props;
          return (_this$props = _this.props).onReady.apply(_this$props, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPlay", function() {
          var _this$props2;
          return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onBuffer", function() {
          var _this$props3;
          return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onBufferEnd", function() {
          var _this$props4;
          return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPause", function() {
          var _this$props5;
          return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onEnded", function() {
          var _this$props6;
          return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onError", function() {
          var _this$props7;
          return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPlayBackRateChange", function(event) {
          return _this.props.onPlaybackRateChange(event.target.playbackRate);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onEnablePIP", function() {
          var _this$props8;
          return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onDisablePIP", function(e) {
          var _this$props9 = _this.props, onDisablePIP = _this$props9.onDisablePIP, playing = _this$props9.playing;
          onDisablePIP(e);
          if (playing) {
            _this.play();
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPresentationModeChange", function(e) {
          if (_this.player && (0, _utils.supportsWebKitPresentationMode)(_this.player)) {
            var webkitPresentationMode = _this.player.webkitPresentationMode;
            if (webkitPresentationMode === "picture-in-picture") {
              _this.onEnablePIP(e);
            } else if (webkitPresentationMode === "inline") {
              _this.onDisablePIP(e);
            }
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "onSeek", function(e) {
          _this.props.onSeek(e.target.currentTime);
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.player.muted = true;
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.player.muted = false;
        });
        _defineProperty4(_assertThisInitialized2(_this), "renderSourceElement", function(source, index4) {
          if (typeof source === "string") {
            return _react["default"].createElement("source", {
              key: index4,
              src: source
            });
          }
          return _react["default"].createElement("source", _extends2({
            key: index4
          }, source));
        });
        _defineProperty4(_assertThisInitialized2(_this), "renderTrack", function(track2, index4) {
          return _react["default"].createElement("track", _extends2({
            key: index4
          }, track2));
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(player) {
          if (_this.player) {
            _this.prevPlayer = _this.player;
          }
          _this.player = player;
        });
        return _this;
      }
      _createClass2(FilePlayer2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
          this.addListeners(this.player);
          if (IS_IOS) {
            this.player.load();
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
            this.removeListeners(this.prevPlayer, prevProps.url);
            this.addListeners(this.player);
          }
          if (this.props.url !== prevProps.url && !(0, _utils.isMediaStream)(this.props.url)) {
            this.player.srcObject = null;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.removeListeners(this.player);
          if (this.hls) {
            this.hls.destroy();
          }
        }
      }, {
        key: "addListeners",
        value: function addListeners(player) {
          var _this$props10 = this.props, url = _this$props10.url, playsinline = _this$props10.playsinline;
          player.addEventListener("play", this.onPlay);
          player.addEventListener("waiting", this.onBuffer);
          player.addEventListener("playing", this.onBufferEnd);
          player.addEventListener("pause", this.onPause);
          player.addEventListener("seeked", this.onSeek);
          player.addEventListener("ended", this.onEnded);
          player.addEventListener("error", this.onError);
          player.addEventListener("ratechange", this.onPlayBackRateChange);
          player.addEventListener("enterpictureinpicture", this.onEnablePIP);
          player.addEventListener("leavepictureinpicture", this.onDisablePIP);
          player.addEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
          if (!this.shouldUseHLS(url)) {
            player.addEventListener("canplay", this.onReady);
          }
          if (playsinline) {
            player.setAttribute("playsinline", "");
            player.setAttribute("webkit-playsinline", "");
            player.setAttribute("x5-playsinline", "");
          }
        }
      }, {
        key: "removeListeners",
        value: function removeListeners(player, url) {
          player.removeEventListener("canplay", this.onReady);
          player.removeEventListener("play", this.onPlay);
          player.removeEventListener("waiting", this.onBuffer);
          player.removeEventListener("playing", this.onBufferEnd);
          player.removeEventListener("pause", this.onPause);
          player.removeEventListener("seeked", this.onSeek);
          player.removeEventListener("ended", this.onEnded);
          player.removeEventListener("error", this.onError);
          player.removeEventListener("ratechange", this.onPlayBackRateChange);
          player.removeEventListener("enterpictureinpicture", this.onEnablePIP);
          player.removeEventListener("leavepictureinpicture", this.onDisablePIP);
          player.removeEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
          if (!this.shouldUseHLS(url)) {
            player.removeEventListener("canplay", this.onReady);
          }
        }
        // Proxy methods to prevent listener leaks
      }, {
        key: "shouldUseAudio",
        value: function shouldUseAudio(props) {
          if (props.config.forceVideo) {
            return false;
          }
          if (props.config.attributes.poster) {
            return false;
          }
          return _patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;
        }
      }, {
        key: "shouldUseHLS",
        value: function shouldUseHLS(url) {
          if (this.props.config.forceHLS) {
            return true;
          }
          if (IS_IOS) {
            return false;
          }
          return _patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);
        }
      }, {
        key: "shouldUseDASH",
        value: function shouldUseDASH(url) {
          return _patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;
        }
      }, {
        key: "shouldUseFLV",
        value: function shouldUseFLV(url) {
          return _patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props$config = this.props.config, hlsVersion = _this$props$config.hlsVersion, hlsOptions = _this$props$config.hlsOptions, dashVersion = _this$props$config.dashVersion, flvVersion = _this$props$config.flvVersion;
          if (this.hls) {
            this.hls.destroy();
          }
          if (this.dash) {
            this.dash.reset();
          }
          if (this.shouldUseHLS(url)) {
            (0, _utils.getSDK)(HLS_SDK_URL.replace("VERSION", hlsVersion), HLS_GLOBAL).then(function(Hls) {
              _this2.hls = new Hls(hlsOptions);
              _this2.hls.on(Hls.Events.MANIFEST_PARSED, function() {
                _this2.props.onReady();
              });
              _this2.hls.on(Hls.Events.ERROR, function(e, data) {
                _this2.props.onError(e, data, _this2.hls, Hls);
              });
              if (MATCH_CLOUDFLARE_STREAM.test(url)) {
                var id = url.match(MATCH_CLOUDFLARE_STREAM)[1];
                _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace("{id}", id));
              } else {
                _this2.hls.loadSource(url);
              }
              _this2.hls.attachMedia(_this2.player);
              _this2.props.onLoaded();
            });
          }
          if (this.shouldUseDASH(url)) {
            (0, _utils.getSDK)(DASH_SDK_URL.replace("VERSION", dashVersion), DASH_GLOBAL).then(function(dashjs) {
              _this2.dash = dashjs.MediaPlayer().create();
              _this2.dash.initialize(_this2.player, url, _this2.props.playing);
              _this2.dash.on("error", _this2.props.onError);
              if (parseInt(dashVersion) < 3) {
                _this2.dash.getDebug().setLogToBrowserConsole(false);
              } else {
                _this2.dash.updateSettings({
                  debug: {
                    logLevel: dashjs.Debug.LOG_LEVEL_NONE
                  }
                });
              }
              _this2.props.onLoaded();
            });
          }
          if (this.shouldUseFLV(url)) {
            (0, _utils.getSDK)(FLV_SDK_URL.replace("VERSION", flvVersion), FLV_GLOBAL).then(function(flvjs) {
              _this2.flv = flvjs.createPlayer({
                type: "flv",
                url
              });
              _this2.flv.attachMediaElement(_this2.player);
              _this2.flv.on(flvjs.Events.ERROR, function(e, data) {
                _this2.props.onError(e, data, _this2.flv, flvjs);
              });
              _this2.flv.load();
              _this2.props.onLoaded();
            });
          }
          if (url instanceof Array) {
            this.player.load();
          } else if ((0, _utils.isMediaStream)(url)) {
            try {
              this.player.srcObject = url;
            } catch (e) {
              this.player.src = window.URL.createObjectURL(url);
            }
          }
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.player.play();
          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.player.pause();
        }
      }, {
        key: "stop",
        value: function stop() {
          this.player.removeAttribute("src");
          if (this.dash) {
            this.dash.reset();
          }
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.player.currentTime = seconds;
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.player.volume = fraction;
        }
      }, {
        key: "enablePIP",
        value: function enablePIP() {
          if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {
            this.player.requestPictureInPicture();
          } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== "picture-in-picture") {
            this.player.webkitSetPresentationMode("picture-in-picture");
          }
        }
      }, {
        key: "disablePIP",
        value: function disablePIP() {
          if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {
            document.exitPictureInPicture();
          } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== "inline") {
            this.player.webkitSetPresentationMode("inline");
          }
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          try {
            this.player.playbackRate = rate;
          } catch (error2) {
            this.props.onError(error2);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.player) return null;
          var _this$player = this.player, duration = _this$player.duration, seekable = _this$player.seekable;
          if (duration === Infinity && seekable.length > 0) {
            return seekable.end(seekable.length - 1);
          }
          return duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.player) return null;
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.player) return null;
          var buffered = this.player.buffered;
          if (buffered.length === 0) {
            return 0;
          }
          var end2 = buffered.end(buffered.length - 1);
          var duration = this.getDuration();
          if (end2 > duration) {
            return duration;
          }
          return end2;
        }
      }, {
        key: "getSource",
        value: function getSource(url) {
          var useHLS = this.shouldUseHLS(url);
          var useDASH = this.shouldUseDASH(url);
          var useFLV = this.shouldUseFLV(url);
          if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {
            return void 0;
          }
          if (MATCH_DROPBOX_URL.test(url)) {
            return url.replace("www.dropbox.com", "dl.dropboxusercontent.com");
          }
          return url;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props11 = this.props, url = _this$props11.url, playing = _this$props11.playing, loop = _this$props11.loop, controls = _this$props11.controls, muted = _this$props11.muted, config = _this$props11.config, width = _this$props11.width, height = _this$props11.height;
          var useAudio = this.shouldUseAudio(this.props);
          var Element2 = useAudio ? "audio" : "video";
          var style = {
            width: width === "auto" ? width : "100%",
            height: height === "auto" ? height : "100%"
          };
          return _react["default"].createElement(Element2, _extends2({
            ref: this.ref,
            src: this.getSource(url),
            style,
            preload: "auto",
            autoPlay: playing || void 0,
            controls,
            muted,
            loop
          }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));
        }
      }]);
      return FilePlayer2;
    }(_react.Component);
    exports["default"] = FilePlayer;
    _defineProperty4(FilePlayer, "displayName", "FilePlayer");
    _defineProperty4(FilePlayer, "canPlay", _patterns.canPlay.file);
  }
});

// node_modules/react-player/lib/players/index.js
var require_players = __commonJS({
  "node_modules/react-player/lib/players/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = require_react();
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = [{
      key: "youtube",
      name: "YouTube",
      canPlay: _patterns.canPlay.youtube,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_YouTube());
        });
      })
    }, {
      key: "soundcloud",
      name: "SoundCloud",
      canPlay: _patterns.canPlay.soundcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_SoundCloud());
        });
      })
    }, {
      key: "vimeo",
      name: "Vimeo",
      canPlay: _patterns.canPlay.vimeo,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Vimeo());
        });
      })
    }, {
      key: "facebook",
      name: "Facebook",
      canPlay: _patterns.canPlay.facebook,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Facebook());
        });
      })
    }, {
      key: "streamable",
      name: "Streamable",
      canPlay: _patterns.canPlay.streamable,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Streamable());
        });
      })
    }, {
      key: "wistia",
      name: "Wistia",
      canPlay: _patterns.canPlay.wistia,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Wistia());
        });
      })
    }, {
      key: "twitch",
      name: "Twitch",
      canPlay: _patterns.canPlay.twitch,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Twitch());
        });
      })
    }, {
      key: "dailymotion",
      name: "DailyMotion",
      canPlay: _patterns.canPlay.dailymotion,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_DailyMotion());
        });
      })
    }, {
      key: "mixcloud",
      name: "Mixcloud",
      canPlay: _patterns.canPlay.mixcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Mixcloud());
        });
      })
    }, {
      key: "vidyard",
      name: "Vidyard",
      canPlay: _patterns.canPlay.vidyard,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Vidyard());
        });
      })
    }, {
      key: "kaltura",
      name: "Kaltura",
      canPlay: _patterns.canPlay.kaltura,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Kaltura());
        });
      })
    }, {
      key: "file",
      name: "FilePlayer",
      canPlay: _patterns.canPlay.file,
      canEnablePIP: function canEnablePIP(url) {
        return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);
      },
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_FilePlayer());
        });
      })
    }];
    exports["default"] = _default;
  }
});

// node_modules/memoize-one/dist/memoize-one.esm.js
var memoize_one_esm_exports = {};
__export(memoize_one_esm_exports, {
  default: () => memoize_one_esm_default
});
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual3) {
  if (isEqual3 === void 0) {
    isEqual3 = areInputsEqual;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual3(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var safeIsNaN, memoize_one_esm_default;
var init_memoize_one_esm = __esm({
  "node_modules/memoize-one/dist/memoize-one.esm.js"() {
    safeIsNaN = Number.isNaN || function ponyfill(value) {
      return typeof value === "number" && value !== value;
    };
    memoize_one_esm_default = memoizeOne;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0]))) return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function") return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function") return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i])) return false;
        if (hasElementType && a instanceof Element) return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual3(a, b) {
      try {
        return equal(a, b);
      } catch (error2) {
        if ((error2.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error2;
      }
    };
  }
});

// node_modules/react-player/lib/props.js
var require_props = __commonJS({
  "node_modules/react-player/lib/props.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultProps = exports.propTypes = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var string3 = _propTypes["default"].string;
    var bool = _propTypes["default"].bool;
    var number2 = _propTypes["default"].number;
    var array = _propTypes["default"].array;
    var oneOfType = _propTypes["default"].oneOfType;
    var shape = _propTypes["default"].shape;
    var object = _propTypes["default"].object;
    var func = _propTypes["default"].func;
    var node2 = _propTypes["default"].node;
    var propTypes = {
      url: oneOfType([string3, array, object]),
      playing: bool,
      loop: bool,
      controls: bool,
      volume: number2,
      muted: bool,
      playbackRate: number2,
      width: oneOfType([string3, number2]),
      height: oneOfType([string3, number2]),
      style: object,
      progressInterval: number2,
      playsinline: bool,
      pip: bool,
      stopOnUnmount: bool,
      light: oneOfType([bool, string3]),
      playIcon: node2,
      previewTabIndex: number2,
      fallback: node2,
      oEmbedUrl: string3,
      wrapper: oneOfType([string3, func, shape({
        render: func.isRequired
      })]),
      config: shape({
        soundcloud: shape({
          options: object
        }),
        youtube: shape({
          playerVars: object,
          embedOptions: object,
          onUnstarted: func
        }),
        facebook: shape({
          appId: string3,
          version: string3,
          playerId: string3,
          attributes: object
        }),
        dailymotion: shape({
          params: object
        }),
        vimeo: shape({
          playerOptions: object,
          title: string3
        }),
        file: shape({
          attributes: object,
          tracks: array,
          forceVideo: bool,
          forceAudio: bool,
          forceHLS: bool,
          forceDASH: bool,
          forceFLV: bool,
          hlsOptions: object,
          hlsVersion: string3,
          dashVersion: string3,
          flvVersion: string3
        }),
        wistia: shape({
          options: object,
          playerId: string3,
          customControls: array
        }),
        mixcloud: shape({
          options: object
        }),
        twitch: shape({
          options: object,
          playerId: string3
        }),
        vidyard: shape({
          options: object
        })
      }),
      onReady: func,
      onStart: func,
      onPlay: func,
      onPause: func,
      onBuffer: func,
      onBufferEnd: func,
      onEnded: func,
      onError: func,
      onDuration: func,
      onSeek: func,
      onPlaybackRateChange: func,
      onProgress: func,
      onClickPreview: func,
      onEnablePIP: func,
      onDisablePIP: func
    };
    exports.propTypes = propTypes;
    var noop6 = function noop7() {
    };
    var defaultProps2 = {
      playing: false,
      loop: false,
      controls: false,
      volume: null,
      muted: false,
      playbackRate: 1,
      width: "640px",
      height: "360px",
      style: {},
      progressInterval: 1e3,
      playsinline: false,
      pip: false,
      stopOnUnmount: true,
      light: false,
      fallback: null,
      wrapper: "div",
      previewTabIndex: 0,
      oEmbedUrl: "https://noembed.com/embed?url={url}",
      config: {
        soundcloud: {
          options: {
            visual: true,
            // Undocumented, but makes player fill container and look better
            buying: false,
            liking: false,
            download: false,
            sharing: false,
            show_comments: false,
            show_playcount: false
          }
        },
        youtube: {
          playerVars: {
            playsinline: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1
          },
          embedOptions: {},
          onUnstarted: noop6
        },
        facebook: {
          appId: "1309697205772819",
          version: "v3.3",
          playerId: null,
          attributes: {}
        },
        dailymotion: {
          params: {
            api: 1,
            "endscreen-enable": false
          }
        },
        vimeo: {
          playerOptions: {
            autopause: false,
            byline: false,
            portrait: false,
            title: false
          },
          title: null
        },
        file: {
          attributes: {},
          tracks: [],
          forceVideo: false,
          forceAudio: false,
          forceHLS: false,
          forceDASH: false,
          forceFLV: false,
          hlsOptions: {},
          hlsVersion: "1.1.4",
          dashVersion: "3.1.3",
          flvVersion: "1.5.0"
        },
        wistia: {
          options: {},
          playerId: null,
          customControls: null
        },
        mixcloud: {
          options: {
            hide_cover: 1
          }
        },
        twitch: {
          options: {},
          playerId: null
        },
        vidyard: {
          options: {}
        }
      },
      onReady: noop6,
      onStart: noop6,
      onPlay: noop6,
      onPause: noop6,
      onBuffer: noop6,
      onBufferEnd: noop6,
      onEnded: noop6,
      onError: noop6,
      onDuration: noop6,
      onSeek: noop6,
      onPlaybackRateChange: noop6,
      onProgress: noop6,
      onClickPreview: noop6,
      onEnablePIP: noop6,
      onDisablePIP: noop6
    };
    exports.defaultProps = defaultProps2;
  }
});

// node_modules/react-player/lib/Player.js
var require_Player = __commonJS({
  "node_modules/react-player/lib/Player.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SEEK_ON_PLAY_EXPIRY = 5e3;
    var Player = function(_Component) {
      _inherits2(Player2, _Component);
      var _super = _createSuper2(Player2);
      function Player2() {
        var _this;
        _classCallCheck2(this, Player2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty4(_assertThisInitialized2(_this), "mounted", false);
        _defineProperty4(_assertThisInitialized2(_this), "isReady", false);
        _defineProperty4(_assertThisInitialized2(_this), "isPlaying", false);
        _defineProperty4(_assertThisInitialized2(_this), "isLoading", true);
        _defineProperty4(_assertThisInitialized2(_this), "loadOnReady", null);
        _defineProperty4(_assertThisInitialized2(_this), "startOnPlay", true);
        _defineProperty4(_assertThisInitialized2(_this), "seekOnPlay", null);
        _defineProperty4(_assertThisInitialized2(_this), "onDurationCalled", false);
        _defineProperty4(_assertThisInitialized2(_this), "handlePlayerMount", function(player) {
          if (_this.player) return;
          _this.player = player;
          _this.player.load(_this.props.url);
          _this.progress();
        });
        _defineProperty4(_assertThisInitialized2(_this), "getInternalPlayer", function(key) {
          if (!_this.player) return null;
          return _this.player[key];
        });
        _defineProperty4(_assertThisInitialized2(_this), "progress", function() {
          if (_this.props.url && _this.player && _this.isReady) {
            var playedSeconds = _this.getCurrentTime() || 0;
            var loadedSeconds = _this.getSecondsLoaded();
            var duration = _this.getDuration();
            if (duration) {
              var progress = {
                playedSeconds,
                played: playedSeconds / duration
              };
              if (loadedSeconds !== null) {
                progress.loadedSeconds = loadedSeconds;
                progress.loaded = loadedSeconds / duration;
              }
              if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {
                _this.props.onProgress(progress);
              }
              _this.prevPlayed = progress.playedSeconds;
              _this.prevLoaded = progress.loadedSeconds;
            }
          }
          _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleReady", function() {
          if (!_this.mounted) return;
          _this.isReady = true;
          _this.isLoading = false;
          var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;
          onReady();
          if (!muted && volume !== null) {
            _this.player.setVolume(volume);
          }
          if (_this.loadOnReady) {
            _this.player.load(_this.loadOnReady, true);
            _this.loadOnReady = null;
          } else if (playing) {
            _this.player.play();
          }
          _this.handleDurationCheck();
        });
        _defineProperty4(_assertThisInitialized2(_this), "handlePlay", function() {
          _this.isPlaying = true;
          _this.isLoading = false;
          var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;
          if (_this.startOnPlay) {
            if (_this.player.setPlaybackRate && playbackRate !== 1) {
              _this.player.setPlaybackRate(playbackRate);
            }
            onStart();
            _this.startOnPlay = false;
          }
          onPlay();
          if (_this.seekOnPlay) {
            _this.seekTo(_this.seekOnPlay);
            _this.seekOnPlay = null;
          }
          _this.handleDurationCheck();
        });
        _defineProperty4(_assertThisInitialized2(_this), "handlePause", function(e) {
          _this.isPlaying = false;
          if (!_this.isLoading) {
            _this.props.onPause(e);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleEnded", function() {
          var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;
          if (activePlayer.loopOnEnded && loop) {
            _this.seekTo(0);
          }
          if (!loop) {
            _this.isPlaying = false;
            onEnded();
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleError", function() {
          var _this$props4;
          _this.isLoading = false;
          (_this$props4 = _this.props).onError.apply(_this$props4, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleDurationCheck", function() {
          clearTimeout(_this.durationCheckTimeout);
          var duration = _this.getDuration();
          if (duration) {
            if (!_this.onDurationCalled) {
              _this.props.onDuration(duration);
              _this.onDurationCalled = true;
            }
          } else {
            _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleLoaded", function() {
          _this.isLoading = false;
        });
        return _this;
      }
      _createClass2(Player2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          clearTimeout(this.progressTimeout);
          clearTimeout(this.durationCheckTimeout);
          if (this.isReady && this.props.stopOnUnmount) {
            this.player.stop();
            if (this.player.disablePIP) {
              this.player.disablePIP();
            }
          }
          this.mounted = false;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this2 = this;
          if (!this.player) {
            return;
          }
          var _this$props5 = this.props, url = _this$props5.url, playing = _this$props5.playing, volume = _this$props5.volume, muted = _this$props5.muted, playbackRate = _this$props5.playbackRate, pip = _this$props5.pip, loop = _this$props5.loop, activePlayer = _this$props5.activePlayer, disableDeferredLoading = _this$props5.disableDeferredLoading;
          if (!(0, _reactFastCompare["default"])(prevProps.url, url)) {
            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, _utils.isMediaStream)(url)) {
              console.warn("ReactPlayer: the attempt to load ".concat(url, " is being deferred until the player has loaded"));
              this.loadOnReady = url;
              return;
            }
            this.isLoading = true;
            this.startOnPlay = true;
            this.onDurationCalled = false;
            this.player.load(url, this.isReady);
          }
          if (!prevProps.playing && playing && !this.isPlaying) {
            this.player.play();
          }
          if (prevProps.playing && !playing && this.isPlaying) {
            this.player.pause();
          }
          if (!prevProps.pip && pip && this.player.enablePIP) {
            this.player.enablePIP();
          }
          if (prevProps.pip && !pip && this.player.disablePIP) {
            this.player.disablePIP();
          }
          if (prevProps.volume !== volume && volume !== null) {
            this.player.setVolume(volume);
          }
          if (prevProps.muted !== muted) {
            if (muted) {
              this.player.mute();
            } else {
              this.player.unmute();
              if (volume !== null) {
                setTimeout(function() {
                  return _this2.player.setVolume(volume);
                });
              }
            }
          }
          if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
            this.player.setPlaybackRate(playbackRate);
          }
          if (prevProps.loop !== loop && this.player.setLoop) {
            this.player.setLoop(loop);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.isReady) return null;
          return this.player.getDuration();
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.isReady) return null;
          return this.player.getCurrentTime();
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.isReady) return null;
          return this.player.getSecondsLoaded();
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount, type) {
          var _this3 = this;
          if (!this.isReady) {
            if (amount !== 0) {
              this.seekOnPlay = amount;
              setTimeout(function() {
                _this3.seekOnPlay = null;
              }, SEEK_ON_PLAY_EXPIRY);
            }
            return;
          }
          var isFraction = !type ? amount > 0 && amount < 1 : type === "fraction";
          if (isFraction) {
            var duration = this.player.getDuration();
            if (!duration) {
              console.warn("ReactPlayer: could not seek using fraction – duration not yet available");
              return;
            }
            this.player.seekTo(duration * amount);
            return;
          }
          this.player.seekTo(amount);
        }
      }, {
        key: "render",
        value: function render() {
          var Player3 = this.props.activePlayer;
          if (!Player3) {
            return null;
          }
          return _react["default"].createElement(Player3, _extends2({}, this.props, {
            onMount: this.handlePlayerMount,
            onReady: this.handleReady,
            onPlay: this.handlePlay,
            onPause: this.handlePause,
            onEnded: this.handleEnded,
            onLoaded: this.handleLoaded,
            onError: this.handleError
          }));
        }
      }]);
      return Player2;
    }(_react.Component);
    exports["default"] = Player;
    _defineProperty4(Player, "displayName", "Player");
    _defineProperty4(Player, "propTypes", _props.propTypes);
    _defineProperty4(Player, "defaultProps", _props.defaultProps);
  }
});

// node_modules/react-player/lib/Preview.js
var require_Preview = __commonJS({
  "node_modules/react-player/lib/Preview.js"(exports) {
    "use strict";
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache2 = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache2;
      };
      return cache2;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache2 = _getRequireWildcardCache();
      if (cache2 && cache2.has(obj)) {
        return cache2.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache2) {
        cache2.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var ICON_SIZE = "64px";
    var cache = {};
    var Preview = function(_Component) {
      _inherits2(Preview2, _Component);
      var _super = _createSuper2(Preview2);
      function Preview2() {
        var _this;
        _classCallCheck2(this, Preview2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "mounted", false);
        _defineProperty4(_assertThisInitialized2(_this), "state", {
          image: null
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleKeyPress", function(e) {
          if (e.key === "Enter" || e.key === " ") {
            _this.props.onClick();
          }
        });
        return _this;
      }
      _createClass2(Preview2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
          this.fetchImage(this.props);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props = this.props, url = _this$props.url, light = _this$props.light;
          if (prevProps.url !== url || prevProps.light !== light) {
            this.fetchImage(this.props);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
        }
      }, {
        key: "fetchImage",
        value: function fetchImage(_ref) {
          var _this2 = this;
          var url = _ref.url, light = _ref.light, oEmbedUrl = _ref.oEmbedUrl;
          if (typeof light === "string") {
            this.setState({
              image: light
            });
            return;
          }
          if (cache[url]) {
            this.setState({
              image: cache[url]
            });
            return;
          }
          this.setState({
            image: null
          });
          return window.fetch(oEmbedUrl.replace("{url}", url)).then(function(response) {
            return response.json();
          }).then(function(data) {
            if (data.thumbnail_url && _this2.mounted) {
              var image2 = data.thumbnail_url.replace("height=100", "height=480");
              _this2.setState({
                image: image2
              });
              cache[url] = image2;
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props2 = this.props, onClick = _this$props2.onClick, playIcon = _this$props2.playIcon, previewTabIndex = _this$props2.previewTabIndex;
          var image2 = this.state.image;
          var flexCenter = {
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          };
          var styles = {
            preview: _objectSpread4({
              width: "100%",
              height: "100%",
              backgroundImage: image2 ? "url(".concat(image2, ")") : void 0,
              backgroundSize: "cover",
              backgroundPosition: "center",
              cursor: "pointer"
            }, flexCenter),
            shadow: _objectSpread4({
              background: "radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",
              borderRadius: ICON_SIZE,
              width: ICON_SIZE,
              height: ICON_SIZE
            }, flexCenter),
            playIcon: {
              borderStyle: "solid",
              borderWidth: "16px 0 16px 26px",
              borderColor: "transparent transparent transparent white",
              marginLeft: "7px"
            }
          };
          var defaultPlayIcon = _react["default"].createElement("div", {
            style: styles.shadow,
            className: "react-player__shadow"
          }, _react["default"].createElement("div", {
            style: styles.playIcon,
            className: "react-player__play-icon"
          }));
          return _react["default"].createElement("div", {
            style: styles.preview,
            className: "react-player__preview",
            onClick,
            tabIndex: previewTabIndex,
            onKeyPress: this.handleKeyPress
          }, playIcon || defaultPlayIcon);
        }
      }]);
      return Preview2;
    }(_react.Component);
    exports["default"] = Preview;
  }
});

// node_modules/react-player/lib/ReactPlayer.js
var require_ReactPlayer = __commonJS({
  "node_modules/react-player/lib/ReactPlayer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createReactPlayer = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _memoizeOne = _interopRequireDefault((init_memoize_one_esm(), __toCommonJS(memoize_one_esm_exports)));
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    var _Player3 = _interopRequireDefault(require_Player());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _toConsumableArray3(arr) {
      return _arrayWithoutHoles3(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread3();
    }
    function _nonIterableSpread3() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _iterableToArray4(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    function _arrayWithoutHoles3(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray3(arr);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var Preview = (0, _react.lazy)(function() {
      return Promise.resolve().then(function() {
        return _interopRequireWildcard(require_Preview());
      });
    });
    var IS_BROWSER = typeof window !== "undefined" && window.document;
    var IS_GLOBAL = typeof global !== "undefined" && global.window && global.window.document;
    var SUPPORTED_PROPS = Object.keys(_props.propTypes);
    var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function() {
      return null;
    };
    var customPlayers = [];
    var createReactPlayer = function createReactPlayer2(players, fallback) {
      var _class, _temp;
      return _temp = _class = function(_Component) {
        _inherits2(ReactPlayer4, _Component);
        var _super = _createSuper2(ReactPlayer4);
        function ReactPlayer4() {
          var _this;
          _classCallCheck2(this, ReactPlayer4);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty4(_assertThisInitialized2(_this), "state", {
            showPreview: !!_this.props.light
          });
          _defineProperty4(_assertThisInitialized2(_this), "references", {
            wrapper: function wrapper(_wrapper) {
              _this.wrapper = _wrapper;
            },
            player: function player(_player) {
              _this.player = _player;
            }
          });
          _defineProperty4(_assertThisInitialized2(_this), "handleClickPreview", function(e) {
            _this.setState({
              showPreview: false
            });
            _this.props.onClickPreview(e);
          });
          _defineProperty4(_assertThisInitialized2(_this), "showPreview", function() {
            _this.setState({
              showPreview: true
            });
          });
          _defineProperty4(_assertThisInitialized2(_this), "getDuration", function() {
            if (!_this.player) return null;
            return _this.player.getDuration();
          });
          _defineProperty4(_assertThisInitialized2(_this), "getCurrentTime", function() {
            if (!_this.player) return null;
            return _this.player.getCurrentTime();
          });
          _defineProperty4(_assertThisInitialized2(_this), "getSecondsLoaded", function() {
            if (!_this.player) return null;
            return _this.player.getSecondsLoaded();
          });
          _defineProperty4(_assertThisInitialized2(_this), "getInternalPlayer", function() {
            var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "player";
            if (!_this.player) return null;
            return _this.player.getInternalPlayer(key);
          });
          _defineProperty4(_assertThisInitialized2(_this), "seekTo", function(fraction, type) {
            if (!_this.player) return null;
            _this.player.seekTo(fraction, type);
          });
          _defineProperty4(_assertThisInitialized2(_this), "handleReady", function() {
            _this.props.onReady(_assertThisInitialized2(_this));
          });
          _defineProperty4(_assertThisInitialized2(_this), "getActivePlayer", (0, _memoizeOne["default"])(function(url) {
            for (var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray3(players)); _i < _arr.length; _i++) {
              var player = _arr[_i];
              if (player.canPlay(url)) {
                return player;
              }
            }
            if (fallback) {
              return fallback;
            }
            return null;
          }));
          _defineProperty4(_assertThisInitialized2(_this), "getConfig", (0, _memoizeOne["default"])(function(url, key) {
            var config = _this.props.config;
            return _deepmerge["default"].all([_props.defaultProps.config, _props.defaultProps.config[key] || {}, config, config[key] || {}]);
          }));
          _defineProperty4(_assertThisInitialized2(_this), "getAttributes", (0, _memoizeOne["default"])(function(url) {
            return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);
          }));
          _defineProperty4(_assertThisInitialized2(_this), "renderActivePlayer", function(url) {
            if (!url) return null;
            var player = _this.getActivePlayer(url);
            if (!player) return null;
            var config = _this.getConfig(url, player.key);
            return _react["default"].createElement(_Player3["default"], _extends2({}, _this.props, {
              key: player.key,
              ref: _this.references.player,
              config,
              activePlayer: player.lazyPlayer || player,
              onReady: _this.handleReady
            }));
          });
          return _this;
        }
        _createClass2(ReactPlayer4, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            return !(0, _reactFastCompare["default"])(this.props, nextProps) || !(0, _reactFastCompare["default"])(this.state, nextState);
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var light = this.props.light;
            if (!prevProps.light && light) {
              this.setState({
                showPreview: true
              });
            }
            if (prevProps.light && !light) {
              this.setState({
                showPreview: false
              });
            }
          }
        }, {
          key: "renderPreview",
          value: function renderPreview(url) {
            if (!url) return null;
            var _this$props = this.props, light = _this$props.light, playIcon = _this$props.playIcon, previewTabIndex = _this$props.previewTabIndex, oEmbedUrl = _this$props.oEmbedUrl;
            return _react["default"].createElement(Preview, {
              url,
              light,
              playIcon,
              previewTabIndex,
              oEmbedUrl,
              onClick: this.handleClickPreview
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props2 = this.props, url = _this$props2.url, style = _this$props2.style, width = _this$props2.width, height = _this$props2.height, fallback2 = _this$props2.fallback, Wrapper = _this$props2.wrapper;
            var showPreview = this.state.showPreview;
            var attributes = this.getAttributes(url);
            return _react["default"].createElement(Wrapper, _extends2({
              ref: this.references.wrapper,
              style: _objectSpread4(_objectSpread4({}, style), {}, {
                width,
                height
              })
            }, attributes), _react["default"].createElement(UniversalSuspense, {
              fallback: fallback2
            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
          }
        }]);
        return ReactPlayer4;
      }(_react.Component), _defineProperty4(_class, "displayName", "ReactPlayer"), _defineProperty4(_class, "propTypes", _props.propTypes), _defineProperty4(_class, "defaultProps", _props.defaultProps), _defineProperty4(_class, "addCustomPlayer", function(player) {
        customPlayers.push(player);
      }), _defineProperty4(_class, "removeCustomPlayers", function() {
        customPlayers.length = 0;
      }), _defineProperty4(_class, "canPlay", function(url) {
        for (var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray3(players)); _i2 < _arr2.length; _i2++) {
          var _Player = _arr2[_i2];
          if (_Player.canPlay(url)) {
            return true;
          }
        }
        return false;
      }), _defineProperty4(_class, "canEnablePIP", function(url) {
        for (var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray3(players)); _i3 < _arr3.length; _i3++) {
          var _Player2 = _arr3[_i3];
          if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {
            return true;
          }
        }
        return false;
      }), _temp;
    };
    exports.createReactPlayer = createReactPlayer;
  }
});

// node_modules/react-player/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-player/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _players = _interopRequireDefault(require_players());
    var _ReactPlayer = require_ReactPlayer();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var fallback = _players["default"][_players["default"].length - 1];
    var _default = (0, _ReactPlayer.createReactPlayer)(_players["default"], fallback);
    exports["default"] = _default;
  }
});

// node_modules/dayjs/plugin/calendar.js
var require_calendar = __commonJS({
  "node_modules/dayjs/plugin/calendar.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_calendar = t2();
    }(exports, function() {
      "use strict";
      return function(e, t2, a) {
        var n = "h:mm A", d = { lastDay: "[Yesterday at] " + n, sameDay: "[Today at] " + n, nextDay: "[Tomorrow at] " + n, nextWeek: "dddd [at] " + n, lastWeek: "[Last] dddd [at] " + n, sameElse: "MM/DD/YYYY" };
        t2.prototype.calendar = function(e2, t3) {
          var n2 = t3 || this.$locale().calendar || d, o = a(e2 || void 0).startOf("d"), s = this.diff(o, "d", true), i = "sameElse", f = s < -6 ? i : s < -1 ? "lastWeek" : s < 0 ? "lastDay" : s < 1 ? "sameDay" : s < 2 ? "nextDay" : s < 7 ? "nextWeek" : i, l = n2[f] || d[f];
          return "function" == typeof l ? l.call(this, a()) : this.format(l);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localizedFormat.js
var require_localizedFormat = __commonJS({
  "node_modules/dayjs/plugin/localizedFormat.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_localizedFormat = t2();
    }(exports, function() {
      "use strict";
      var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" };
      return function(t2, o, n) {
        var r2 = o.prototype, i = r2.format;
        n.en.formats = e, r2.format = function(t3) {
          void 0 === t3 && (t3 = "YYYY-MM-DDTHH:mm:ssZ");
          var o2 = this.$locale().formats, n2 = function(t4, o3) {
            return t4.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t5, n3, r3) {
              var i2 = r3 && r3.toUpperCase();
              return n3 || o3[r3] || e[r3] || o3[i2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t6, o4) {
                return t6 || o4.slice(1);
              });
            });
          }(t3, void 0 === o2 ? {} : o2);
          return i.call(this, n2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_updateLocale = n();
    }(exports, function() {
      "use strict";
      return function(e, n, t2) {
        t2.updateLocale = function(e2, n2) {
          var o = t2.Ls[e2];
          if (o) return (n2 ? Object.keys(n2) : []).forEach(function(e3) {
            o[e3] = n2[e3];
          }), o;
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localeData.js
var require_localeData = __commonJS({
  "node_modules/dayjs/plugin/localeData.js"(exports, module) {
    !function(n, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (n = "undefined" != typeof globalThis ? globalThis : n || self).dayjs_plugin_localeData = e();
    }(exports, function() {
      "use strict";
      return function(n, e, t2) {
        var r2 = e.prototype, o = function(n2) {
          return n2 && (n2.indexOf ? n2 : n2.s);
        }, u2 = function(n2, e2, t3, r3, u3) {
          var i2 = n2.name ? n2 : n2.$locale(), a2 = o(i2[e2]), s2 = o(i2[t3]), f = a2 || s2.map(function(n3) {
            return n3.slice(0, r3);
          });
          if (!u3) return f;
          var d = i2.weekStart;
          return f.map(function(n3, e3) {
            return f[(e3 + (d || 0)) % 7];
          });
        }, i = function() {
          return t2.Ls[t2.locale()];
        }, a = function(n2, e2) {
          return n2.formats[e2] || function(n3) {
            return n3.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n4, e3, t3) {
              return e3 || t3.slice(1);
            });
          }(n2.formats[e2.toUpperCase()]);
        }, s = function() {
          var n2 = this;
          return { months: function(e2) {
            return e2 ? e2.format("MMMM") : u2(n2, "months");
          }, monthsShort: function(e2) {
            return e2 ? e2.format("MMM") : u2(n2, "monthsShort", "months", 3);
          }, firstDayOfWeek: function() {
            return n2.$locale().weekStart || 0;
          }, weekdays: function(e2) {
            return e2 ? e2.format("dddd") : u2(n2, "weekdays");
          }, weekdaysMin: function(e2) {
            return e2 ? e2.format("dd") : u2(n2, "weekdaysMin", "weekdays", 2);
          }, weekdaysShort: function(e2) {
            return e2 ? e2.format("ddd") : u2(n2, "weekdaysShort", "weekdays", 3);
          }, longDateFormat: function(e2) {
            return a(n2.$locale(), e2);
          }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
        };
        r2.localeData = function() {
          return s.bind(this)();
        }, t2.localeData = function() {
          var n2 = i();
          return { firstDayOfWeek: function() {
            return n2.weekStart || 0;
          }, weekdays: function() {
            return t2.weekdays();
          }, weekdaysShort: function() {
            return t2.weekdaysShort();
          }, weekdaysMin: function() {
            return t2.weekdaysMin();
          }, months: function() {
            return t2.months();
          }, monthsShort: function() {
            return t2.monthsShort();
          }, longDateFormat: function(e2) {
            return a(n2, e2);
          }, meridiem: n2.meridiem, ordinal: n2.ordinal };
        }, t2.months = function() {
          return u2(i(), "months");
        }, t2.monthsShort = function() {
          return u2(i(), "monthsShort", "months", 3);
        }, t2.weekdays = function(n2) {
          return u2(i(), "weekdays", null, null, n2);
        }, t2.weekdaysShort = function(n2) {
          return u2(i(), "weekdaysShort", "weekdays", 3, n2);
        }, t2.weekdaysMin = function(n2) {
          return u2(i(), "weekdaysMin", "weekdays", 2, n2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (r2 = "undefined" != typeof globalThis ? globalThis : r2 || self).dayjs_plugin_relativeTime = e();
    }(exports, function() {
      "use strict";
      return function(r2, e, t2) {
        r2 = r2 || {};
        var n = e.prototype, o = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i(r3, e2, t3, o2) {
          return n.fromToBase(r3, e2, t3, o2);
        }
        t2.en.relativeTime = o, n.fromToBase = function(e2, n2, i2, d2, u2) {
          for (var f, a, s, l = i2.$locale().relativeTime || o, h = r2.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m = h.length, c = 0; c < m; c += 1) {
            var y = h[c];
            y.d && (f = d2 ? t2(e2).diff(i2, y.d, true) : i2.diff(e2, y.d, true));
            var p = (r2.rounding || Math.round)(Math.abs(f));
            if (s = f > 0, p <= y.r || !y.r) {
              p <= 1 && c > 0 && (y = h[c - 1]);
              var v = l[y.l];
              u2 && (p = u2("" + p)), a = "string" == typeof v ? v.replace("%d", p) : v(p, n2, y.l, s);
              break;
            }
          }
          if (n2) return a;
          var M = s ? l.future : l.past;
          return "function" == typeof M ? M(a) : M.replace("%s", a);
        }, n.to = function(r3, e2) {
          return i(r3, e2, this, true);
        }, n.from = function(r3, e2) {
          return i(r3, e2, this);
        };
        var d = function(r3) {
          return r3.$u ? t2.utc() : t2();
        };
        n.toNow = function(r3) {
          return this.to(d(this), r3);
        }, n.fromNow = function(r3) {
          return this.from(d(this), r3);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/utc.js
var require_utc = __commonJS({
  "node_modules/dayjs/plugin/utc.js"(exports, module) {
    !function(t2, i) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_utc = i();
    }(exports, function() {
      "use strict";
      var t2 = "minute", i = /[+-]\d\d(?::?\d\d)?/g, e = /([+-]|\d\d)/g;
      return function(s, f, n) {
        var u2 = f.prototype;
        n.utc = function(t3) {
          var i2 = { date: t3, utc: true, args: arguments };
          return new f(i2);
        }, u2.utc = function(i2) {
          var e2 = n(this.toDate(), { locale: this.$L, utc: true });
          return i2 ? e2.add(this.utcOffset(), t2) : e2;
        }, u2.local = function() {
          return n(this.toDate(), { locale: this.$L, utc: false });
        };
        var o = u2.parse;
        u2.parse = function(t3) {
          t3.utc && (this.$u = true), this.$utils().u(t3.$offset) || (this.$offset = t3.$offset), o.call(this, t3);
        };
        var r2 = u2.init;
        u2.init = function() {
          if (this.$u) {
            var t3 = this.$d;
            this.$y = t3.getUTCFullYear(), this.$M = t3.getUTCMonth(), this.$D = t3.getUTCDate(), this.$W = t3.getUTCDay(), this.$H = t3.getUTCHours(), this.$m = t3.getUTCMinutes(), this.$s = t3.getUTCSeconds(), this.$ms = t3.getUTCMilliseconds();
          } else r2.call(this);
        };
        var a = u2.utcOffset;
        u2.utcOffset = function(s2, f2) {
          var n2 = this.$utils().u;
          if (n2(s2)) return this.$u ? 0 : n2(this.$offset) ? a.call(this) : this.$offset;
          if ("string" == typeof s2 && (s2 = function(t3) {
            void 0 === t3 && (t3 = "");
            var s3 = t3.match(i);
            if (!s3) return null;
            var f3 = ("" + s3[0]).match(e) || ["-", 0, 0], n3 = f3[0], u4 = 60 * +f3[1] + +f3[2];
            return 0 === u4 ? 0 : "+" === n3 ? u4 : -u4;
          }(s2), null === s2)) return this;
          var u3 = Math.abs(s2) <= 16 ? 60 * s2 : s2, o2 = this;
          if (f2) return o2.$offset = u3, o2.$u = 0 === s2, o2;
          if (0 !== s2) {
            var r3 = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset();
            (o2 = this.local().add(u3 + r3, t2)).$offset = u3, o2.$x.$localOffset = r3;
          } else o2 = this.utc();
          return o2;
        };
        var h = u2.format;
        u2.format = function(t3) {
          var i2 = t3 || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : "");
          return h.call(this, i2);
        }, u2.valueOf = function() {
          var t3 = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || this.$d.getTimezoneOffset());
          return this.$d.valueOf() - 6e4 * t3;
        }, u2.isUTC = function() {
          return !!this.$u;
        }, u2.toISOString = function() {
          return this.toDate().toISOString();
        }, u2.toString = function() {
          return this.toDate().toUTCString();
        };
        var l = u2.toDate;
        u2.toDate = function(t3) {
          return "s" === t3 && this.$offset ? n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : l.call(this);
        };
        var c = u2.diff;
        u2.diff = function(t3, i2, e2) {
          if (t3 && this.$u === t3.$u) return c.call(this, t3, i2, e2);
          var s2 = this.local(), f2 = n(t3).local();
          return c.call(s2, f2, i2, e2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/timezone.js
var require_timezone = __commonJS({
  "node_modules/dayjs/plugin/timezone.js"(exports, module) {
    !function(t2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_timezone = e();
    }(exports, function() {
      "use strict";
      var t2 = { year: 0, month: 1, day: 2, hour: 3, minute: 4, second: 5 }, e = {};
      return function(n, i, o) {
        var r2, a = function(t3, n2, i2) {
          void 0 === i2 && (i2 = {});
          var o2 = new Date(t3), r3 = function(t4, n3) {
            void 0 === n3 && (n3 = {});
            var i3 = n3.timeZoneName || "short", o3 = t4 + "|" + i3, r4 = e[o3];
            return r4 || (r4 = new Intl.DateTimeFormat("en-US", { hour12: false, timeZone: t4, year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit", second: "2-digit", timeZoneName: i3 }), e[o3] = r4), r4;
          }(n2, i2);
          return r3.formatToParts(o2);
        }, u2 = function(e2, n2) {
          for (var i2 = a(e2, n2), r3 = [], u3 = 0; u3 < i2.length; u3 += 1) {
            var f2 = i2[u3], s2 = f2.type, m = f2.value, c = t2[s2];
            c >= 0 && (r3[c] = parseInt(m, 10));
          }
          var d = r3[3], l = 24 === d ? 0 : d, h = r3[0] + "-" + r3[1] + "-" + r3[2] + " " + l + ":" + r3[4] + ":" + r3[5] + ":000", v = +e2;
          return (o.utc(h).valueOf() - (v -= v % 1e3)) / 6e4;
        }, f = i.prototype;
        f.tz = function(t3, e2) {
          void 0 === t3 && (t3 = r2);
          var n2, i2 = this.utcOffset(), a2 = this.toDate(), u3 = a2.toLocaleString("en-US", { timeZone: t3 }), f2 = Math.round((a2 - new Date(u3)) / 1e3 / 60), s2 = 15 * -Math.round(a2.getTimezoneOffset() / 15) - f2;
          if (!Number(s2)) n2 = this.utcOffset(0, e2);
          else if (n2 = o(u3, { locale: this.$L }).$set("millisecond", this.$ms).utcOffset(s2, true), e2) {
            var m = n2.utcOffset();
            n2 = n2.add(i2 - m, "minute");
          }
          return n2.$x.$timezone = t3, n2;
        }, f.offsetName = function(t3) {
          var e2 = this.$x.$timezone || o.tz.guess(), n2 = a(this.valueOf(), e2, { timeZoneName: t3 }).find(function(t4) {
            return "timezonename" === t4.type.toLowerCase();
          });
          return n2 && n2.value;
        };
        var s = f.startOf;
        f.startOf = function(t3, e2) {
          if (!this.$x || !this.$x.$timezone) return s.call(this, t3, e2);
          var n2 = o(this.format("YYYY-MM-DD HH:mm:ss:SSS"), { locale: this.$L });
          return s.call(n2, t3, e2).tz(this.$x.$timezone, true);
        }, o.tz = function(t3, e2, n2) {
          var i2 = n2 && e2, a2 = n2 || e2 || r2, f2 = u2(+o(), a2);
          if ("string" != typeof t3) return o(t3).tz(a2);
          var s2 = function(t4, e3, n3) {
            var i3 = t4 - 60 * e3 * 1e3, o2 = u2(i3, n3);
            if (e3 === o2) return [i3, e3];
            var r3 = u2(i3 -= 60 * (o2 - e3) * 1e3, n3);
            return o2 === r3 ? [i3, o2] : [t4 - 60 * Math.min(o2, r3) * 1e3, Math.max(o2, r3)];
          }(o.utc(t3, i2).valueOf(), f2, a2), m = s2[0], c = s2[1], d = o(m).utcOffset(c);
          return d.$x.$timezone = a2, d;
        }, o.tz.guess = function() {
          return Intl.DateTimeFormat().resolvedOptions().timeZone;
        }, o.tz.setDefault = function(t3) {
          r2 = t3;
        };
      };
    });
  }
});

// node_modules/dayjs/locale/de.js
var require_de = __commonJS({
  "node_modules/dayjs/locale/de.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_de = n(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n(e), a = { s: "ein paar Sekunden", m: ["eine Minute", "einer Minute"], mm: "%d Minuten", h: ["eine Stunde", "einer Stunde"], hh: "%d Stunden", d: ["ein Tag", "einem Tag"], dd: ["%d Tage", "%d Tagen"], M: ["ein Monat", "einem Monat"], MM: ["%d Monate", "%d Monaten"], y: ["ein Jahr", "einem Jahr"], yy: ["%d Jahre", "%d Jahren"] };
      function i(e2, n2, t3) {
        var i2 = a[t3];
        return Array.isArray(i2) && (i2 = i2[n2 ? 0 : 1]), i2.replace("%d", e2);
      }
      var r2 = { name: "de", weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.".split("_"), ordinal: function(e2) {
        return e2 + ".";
      }, weekStart: 1, yearStart: 4, formats: { LTS: "HH:mm:ss", LT: "HH:mm", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, relativeTime: { future: "in %s", past: "vor %s", s: i, m: i, mm: i, h: i, hh: i, d: i, dd: i, M: i, MM: i, y: i, yy: i } };
      return t2.default.locale(r2, null, true), r2;
    });
  }
});

// node_modules/dayjs/locale/es.js
var require_es = __commonJS({
  "node_modules/dayjs/locale/es.js"(exports, module) {
    !function(e, o) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_es = o(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var s = o(e), d = { name: "es", monthsShort: "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), weekStart: 1, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return s.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/fr.js
var require_fr = __commonJS({
  "node_modules/dayjs/locale/fr.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_fr = n(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n(e), i = { name: "fr", weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinal: function(e2) {
        return "" + e2 + (1 === e2 ? "er" : "");
      } };
      return t2.default.locale(i, null, true), i;
    });
  }
});

// node_modules/dayjs/locale/hi.js
var require_hi = __commonJS({
  "node_modules/dayjs/locale/hi.js"(exports, module) {
    !function(_23, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (_23 = "undefined" != typeof globalThis ? globalThis : _23 || self).dayjs_locale_hi = e(_23.dayjs);
    }(exports, function(_23) {
      "use strict";
      function e(_24) {
        return _24 && "object" == typeof _24 && "default" in _24 ? _24 : { default: _24 };
      }
      var t2 = e(_23), d = { name: "hi", weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), ordinal: function(_24) {
        return _24;
      }, formats: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" } };
      return t2.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/it.js
var require_it = __commonJS({
  "node_modules/dayjs/locale/it.js"(exports, module) {
    !function(e, o) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_it = o(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = o(e), n = { name: "it", weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), weekStart: 1, monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "tra %s", past: "%s fa", s: "qualche secondo", m: "un minuto", mm: "%d minuti", h: "un' ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return t2.default.locale(n, null, true), n;
    });
  }
});

// node_modules/dayjs/locale/ja.js
var require_ja = __commonJS({
  "node_modules/dayjs/locale/ja.js"(exports, module) {
    !function(e, _23) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _23(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _23) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ja = _23(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _23(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = _23(e), d = { name: "ja", weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), ordinal: function(e2) {
        return e2 + "日";
      }, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日 dddd HH:mm", l: "YYYY/MM/DD", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日(ddd) HH:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "午前" : "午後";
      }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } };
      return t2.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/ko.js
var require_ko = __commonJS({
  "node_modules/dayjs/locale/ko.js"(exports, module) {
    !function(e, _23) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _23(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _23) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ko = _23(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _23(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d = _23(e), t2 = { name: "ko", weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), ordinal: function(e2) {
        return e2 + "일";
      }, formats: { LT: "A h:mm", LTS: "A h:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h:mm", LLLL: "YYYY년 MMMM D일 dddd A h:mm", l: "YYYY.MM.DD.", ll: "YYYY년 MMMM D일", lll: "YYYY년 MMMM D일 A h:mm", llll: "YYYY년 MMMM D일 dddd A h:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "오전" : "오후";
      }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", m: "1분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" } };
      return d.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/nl.js
var require_nl = __commonJS({
  "node_modules/dayjs/locale/nl.js"(exports, module) {
    !function(e, a) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_nl = a(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d = a(e), n = { name: "nl", weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), ordinal: function(e2) {
        return "[" + e2 + (1 === e2 || 8 === e2 || e2 >= 20 ? "ste" : "de") + "]";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "een minuut", mm: "%d minuten", h: "een uur", hh: "%d uur", d: "een dag", dd: "%d dagen", M: "een maand", MM: "%d maanden", y: "een jaar", yy: "%d jaar" } };
      return d.default.locale(n, null, true), n;
    });
  }
});

// node_modules/dayjs/locale/pt.js
var require_pt = __commonJS({
  "node_modules/dayjs/locale/pt.js"(exports, module) {
    !function(e, a) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_pt = a(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var o = a(e), t2 = { name: "pt", weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sab".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sa".split("_"), months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), ordinal: function(e2) {
        return e2 + "º";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, relativeTime: { future: "em %s", past: "há %s", s: "alguns segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" } };
      return o.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/ru.js
var require_ru = __commonJS({
  "node_modules/dayjs/locale/ru.js"(exports, module) {
    !function(_23, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], t2) : (_23 = "undefined" != typeof globalThis ? globalThis : _23 || self).dayjs_locale_ru = t2(_23.dayjs);
    }(exports, function(_23) {
      "use strict";
      function t2(_24) {
        return _24 && "object" == typeof _24 && "default" in _24 ? _24 : { default: _24 };
      }
      var e = t2(_23), n = "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), s = "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), r2 = "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), o = "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"), i = /D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;
      function d(_24, t3, e2) {
        var n2, s2;
        return "m" === e2 ? t3 ? "минута" : "минуту" : _24 + " " + (n2 = +_24, s2 = { mm: t3 ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }[e2].split("_"), n2 % 10 == 1 && n2 % 100 != 11 ? s2[0] : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? s2[1] : s2[2]);
      }
      var u2 = function(_24, t3) {
        return i.test(t3) ? n[_24.month()] : s[_24.month()];
      };
      u2.s = s, u2.f = n;
      var a = function(_24, t3) {
        return i.test(t3) ? r2[_24.month()] : o[_24.month()];
      };
      a.s = o, a.f = r2;
      var m = { name: "ru", weekdays: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), weekdaysShort: "вск_пнд_втр_срд_чтв_птн_сбт".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), months: u2, monthsShort: a, weekStart: 1, yearStart: 4, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., H:mm", LLLL: "dddd, D MMMM YYYY г., H:mm" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", m: d, mm: d, h: "час", hh: d, d: "день", dd: d, M: "месяц", MM: d, y: "год", yy: d }, ordinal: function(_24) {
        return _24;
      }, meridiem: function(_24) {
        return _24 < 4 ? "ночи" : _24 < 12 ? "утра" : _24 < 17 ? "дня" : "вечера";
      } };
      return e.default.locale(m, null, true), m;
    });
  }
});

// node_modules/dayjs/locale/tr.js
var require_tr = __commonJS({
  "node_modules/dayjs/locale/tr.js"(exports, module) {
    !function(a, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (a = "undefined" != typeof globalThis ? globalThis : a || self).dayjs_locale_tr = e(a.dayjs);
    }(exports, function(a) {
      "use strict";
      function e(a2) {
        return a2 && "object" == typeof a2 && "default" in a2 ? a2 : { default: a2 };
      }
      var t2 = e(a), _23 = { name: "tr", weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekStart: 1, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinal: function(a2) {
        return a2 + ".";
      } };
      return t2.default.locale(_23, null, true), _23;
    });
  }
});

// node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_en = n();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e) {
        var n = ["th", "st", "nd", "rd"], t2 = e % 100;
        return "[" + e + (n[(t2 - 20) % 10] || n[t2] || n[0]) + "]";
      } };
    });
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root2.Date.now();
    };
    function debounce5(func, wait, options2) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options2)) {
        leading = !!options2.leading;
        maxing = "maxWait" in options2;
        maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle8(func, wait, options2) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject2(options2)) {
        leading = "leading" in options2 ? !!options2.leading : leading;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      return debounce5(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle8;
  }
});

// node_modules/react-image-gallery/build/image-gallery.js
var require_image_gallery = __commonJS({
  "node_modules/react-image-gallery/build/image-gallery.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t2(require_react()) : "function" == typeof define && define.amd ? define(["react"], t2) : "object" == typeof exports ? exports.ImageGallery = t2(require_react()) : e.ImageGallery = t2(e.React);
    }(exports, function(e) {
      return (() => {
        var t2 = { 703: (e2, t3, n2) => {
          "use strict";
          var i2 = n2(414);
          function r3() {
          }
          function a() {
          }
          a.resetWarningCache = r3, e2.exports = function() {
            function e3(e4, t5, n4, r4, a2, s) {
              if (s !== i2) {
                var o = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
                throw o.name = "Invariant Violation", o;
              }
            }
            function t4() {
              return e3;
            }
            e3.isRequired = e3;
            var n3 = { array: e3, bool: e3, func: e3, number: e3, object: e3, string: e3, symbol: e3, any: e3, arrayOf: t4, element: e3, elementType: e3, instanceOf: t4, node: e3, objectOf: t4, oneOf: t4, oneOfType: t4, shape: t4, exact: t4, checkPropTypes: a, resetWarningCache: r3 };
            return n3.PropTypes = n3, n3;
          };
        }, 697: (e2, t3, n2) => {
          e2.exports = n2(703)();
        }, 414: (e2) => {
          "use strict";
          e2.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        }, 590: (e2) => {
          var t3 = "undefined" != typeof Element, n2 = "function" == typeof Map, i2 = "function" == typeof Set, r3 = "function" == typeof ArrayBuffer && !!ArrayBuffer.isView;
          function a(e3, s) {
            if (e3 === s) return true;
            if (e3 && s && "object" == typeof e3 && "object" == typeof s) {
              if (e3.constructor !== s.constructor) return false;
              var o, l, u2, c;
              if (Array.isArray(e3)) {
                if ((o = e3.length) != s.length) return false;
                for (l = o; 0 != l--; ) if (!a(e3[l], s[l])) return false;
                return true;
              }
              if (n2 && e3 instanceof Map && s instanceof Map) {
                if (e3.size !== s.size) return false;
                for (c = e3.entries(); !(l = c.next()).done; ) if (!s.has(l.value[0])) return false;
                for (c = e3.entries(); !(l = c.next()).done; ) if (!a(l.value[1], s.get(l.value[0]))) return false;
                return true;
              }
              if (i2 && e3 instanceof Set && s instanceof Set) {
                if (e3.size !== s.size) return false;
                for (c = e3.entries(); !(l = c.next()).done; ) if (!s.has(l.value[0])) return false;
                return true;
              }
              if (r3 && ArrayBuffer.isView(e3) && ArrayBuffer.isView(s)) {
                if ((o = e3.length) != s.length) return false;
                for (l = o; 0 != l--; ) if (e3[l] !== s[l]) return false;
                return true;
              }
              if (e3.constructor === RegExp) return e3.source === s.source && e3.flags === s.flags;
              if (e3.valueOf !== Object.prototype.valueOf) return e3.valueOf() === s.valueOf();
              if (e3.toString !== Object.prototype.toString) return e3.toString() === s.toString();
              if ((o = (u2 = Object.keys(e3)).length) !== Object.keys(s).length) return false;
              for (l = o; 0 != l--; ) if (!Object.prototype.hasOwnProperty.call(s, u2[l])) return false;
              if (t3 && e3 instanceof Element) return false;
              for (l = o; 0 != l--; ) if (("_owner" !== u2[l] && "__v" !== u2[l] && "__o" !== u2[l] || !e3.$$typeof) && !a(e3[u2[l]], s[u2[l]])) return false;
              return true;
            }
            return e3 != e3 && s != s;
          }
          e2.exports = function(e3, t4) {
            try {
              return a(e3, t4);
            } catch (e4) {
              if ((e4.message || "").match(/stack|recursion/i)) return console.warn("react-fast-compare cannot handle circular refs"), false;
              throw e4;
            }
          };
        }, 37: function(e2, t3, n2) {
          !function(e3, t4) {
            function n3() {
              return n3 = Object.assign || function(e4) {
                for (var t5 = 1; t5 < arguments.length; t5++) {
                  var n4 = arguments[t5];
                  for (var i3 in n4) Object.prototype.hasOwnProperty.call(n4, i3) && (e4[i3] = n4[i3]);
                }
                return e4;
              }, n3.apply(this, arguments);
            }
            var i2 = "Left", r3 = "Right", a = "Down", s = { delta: 10, preventDefaultTouchmoveEvent: false, rotationAngle: 0, trackMouse: false, trackTouch: true }, o = { first: true, initial: [0, 0], start: 0, swiping: false, xy: [0, 0] }, l = "mousemove", u2 = "mouseup";
            function c(e4, t5) {
              if (0 === t5) return e4;
              var n4 = Math.PI / 180 * t5;
              return [e4[0] * Math.cos(n4) + e4[1] * Math.sin(n4), e4[1] * Math.cos(n4) - e4[0] * Math.sin(n4)];
            }
            function h(e4, t5) {
              var s2 = function(t6) {
                t6 && "touches" in t6 && t6.touches.length > 1 || e4(function(e5, i3) {
                  i3.trackMouse && (document.addEventListener(l, h2), document.addEventListener(u2, f));
                  var r4 = "touches" in t6 ? t6.touches[0] : t6, a2 = c([r4.clientX, r4.clientY], i3.rotationAngle);
                  return n3({}, e5, o, { initial: [].concat(a2), xy: a2, start: t6.timeStamp || 0 });
                });
              }, h2 = function(t6) {
                e4(function(e5, s3) {
                  if ("touches" in t6 && t6.touches.length > 1) return e5;
                  var o2 = "touches" in t6 ? t6.touches[0] : t6, l2 = c([o2.clientX, o2.clientY], s3.rotationAngle), u3 = l2[0], h3 = l2[1], d2 = u3 - e5.xy[0], f2 = h3 - e5.xy[1], p2 = Math.abs(d2), m2 = Math.abs(f2), g = (t6.timeStamp || 0) - e5.start, v = Math.sqrt(p2 * p2 + m2 * m2) / (g || 1), b = [d2 / (g || 1), f2 / (g || 1)];
                  if (p2 < s3.delta && m2 < s3.delta && !e5.swiping) return e5;
                  var y = function(e6, t7, n4, s4) {
                    return e6 > t7 ? n4 > 0 ? r3 : i2 : s4 > 0 ? a : "Up";
                  }(p2, m2, d2, f2), w = { absX: p2, absY: m2, deltaX: d2, deltaY: f2, dir: y, event: t6, first: e5.first, initial: e5.initial, velocity: v, vxvy: b };
                  s3.onSwiping && s3.onSwiping(w);
                  var T = false;
                  return (s3.onSwiping || s3.onSwiped || "onSwiped" + y in s3) && (T = true), T && s3.preventDefaultTouchmoveEvent && s3.trackTouch && t6.cancelable && t6.preventDefault(), n3({}, e5, { first: false, eventData: w, swiping: true });
                });
              }, d = function(t6) {
                e4(function(e5, i3) {
                  var r4;
                  if (e5.swiping && e5.eventData) {
                    r4 = n3({}, e5.eventData, { event: t6 }), i3.onSwiped && i3.onSwiped(r4);
                    var a2 = "onSwiped" + r4.dir;
                    a2 in i3 && i3[a2](r4);
                  } else i3.onTap && i3.onTap({ event: t6 });
                  return n3({}, e5, o, { eventData: r4 });
                });
              }, f = function(e5) {
                document.removeEventListener(l, h2), document.removeEventListener(u2, f), d(e5);
              }, p = function(e5, t6) {
                var n4 = function() {
                };
                if (e5 && e5.addEventListener) {
                  var i3 = [["touchstart", s2], ["touchmove", h2], ["touchend", d]];
                  i3.forEach(function(n5) {
                    var i4 = n5[0], r4 = n5[1];
                    return e5.addEventListener(i4, r4, { passive: t6 });
                  }), n4 = function() {
                    return i3.forEach(function(t7) {
                      var n5 = t7[0], i4 = t7[1];
                      return e5.removeEventListener(n5, i4);
                    });
                  };
                }
                return n4;
              }, m = { ref: function(t6) {
                null !== t6 && e4(function(e5, i3) {
                  if (e5.el === t6) return e5;
                  var r4 = {};
                  return e5.el && e5.el !== t6 && e5.cleanUpTouch && (e5.cleanUpTouch(), r4.cleanUpTouch = void 0), i3.trackTouch && t6 && (r4.cleanUpTouch = p(t6, !i3.preventDefaultTouchmoveEvent)), n3({}, e5, { el: t6 }, r4);
                });
              } };
              return t5.trackMouse && (m.onMouseDown = s2), [m, p];
            }
            e3.DOWN = a, e3.LEFT = i2, e3.RIGHT = r3, e3.UP = "Up", e3.useSwipeable = function(e4) {
              var i3 = e4.trackMouse, r4 = t4.useRef(n3({}, o)), a2 = t4.useRef(n3({}, s));
              a2.current = n3({}, s, e4);
              var l2 = t4.useMemo(function() {
                return h(function(e5) {
                  return r4.current = e5(r4.current, a2.current);
                }, { trackMouse: i3 });
              }, [i3]), u3 = l2[0], c2 = l2[1];
              return r4.current = function(e5, t5, i4) {
                var r5 = {};
                return !t5.trackTouch && e5.cleanUpTouch ? (e5.cleanUpTouch(), r5.cleanUpTouch = void 0) : t5.trackTouch && !e5.cleanUpTouch && e5.el && (r5.cleanUpTouch = i4(e5.el, !t5.preventDefaultTouchmoveEvent)), n3({}, e5, r5);
              }(r4.current, a2.current, c2), u3;
            };
          }(t3, n2(888));
        }, 888: (t3) => {
          "use strict";
          t3.exports = e;
        } }, n = {};
        function i(e2) {
          var r3 = n[e2];
          if (void 0 !== r3) return r3.exports;
          var a = n[e2] = { exports: {} };
          return t2[e2].call(a.exports, a, a.exports, i), a.exports;
        }
        i.n = (e2) => {
          var t3 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return i.d(t3, { a: t3 }), t3;
        }, i.d = (e2, t3) => {
          for (var n2 in t3) i.o(t3, n2) && !i.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: t3[n2] });
        }, i.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e2) {
            if ("object" == typeof window) return window;
          }
        }(), i.o = (e2, t3) => Object.prototype.hasOwnProperty.call(e2, t3), i.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var r2 = {};
        return (() => {
          "use strict";
          function e2(t4) {
            var n3, i2, r3 = "";
            if ("string" == typeof t4 || "number" == typeof t4) r3 += t4;
            else if ("object" == typeof t4) if (Array.isArray(t4)) for (n3 = 0; n3 < t4.length; n3++) t4[n3] && (i2 = e2(t4[n3])) && (r3 && (r3 += " "), r3 += i2);
            else for (n3 in t4) t4[n3] && (r3 && (r3 += " "), r3 += n3);
            return r3;
          }
          function t3() {
            for (var t4, n3, i2 = 0, r3 = ""; i2 < arguments.length; ) (t4 = arguments[i2++]) && (n3 = e2(t4)) && (r3 && (r3 += " "), r3 += n3);
            return r3;
          }
          i.r(r2), i.d(r2, { default: () => Pe });
          var n2 = i(888), a = i.n(n2);
          const s = function(e3) {
            var t4 = typeof e3;
            return null != e3 && ("object" == t4 || "function" == t4);
          }, o = "object" == typeof global && global && global.Object === Object && global;
          var l = "object" == typeof self && self && self.Object === Object && self;
          const u2 = o || l || Function("return this")(), c = function() {
            return u2.Date.now();
          };
          var h = /\s/;
          var d = /^\s+/;
          const f = function(e3) {
            return e3 ? e3.slice(0, function(e4) {
              for (var t4 = e4.length; t4-- && h.test(e4.charAt(t4)); ) ;
              return t4;
            }(e3) + 1).replace(d, "") : e3;
          }, p = u2.Symbol;
          var m = Object.prototype, g = m.hasOwnProperty, v = m.toString, b = p ? p.toStringTag : void 0;
          var y = Object.prototype.toString;
          var w = p ? p.toStringTag : void 0;
          const T = function(e3) {
            return null == e3 ? void 0 === e3 ? "[object Undefined]" : "[object Null]" : w && w in Object(e3) ? function(e4) {
              var t4 = g.call(e4, b), n3 = e4[b];
              try {
                e4[b] = void 0;
                var i2 = true;
              } catch (e5) {
              }
              var r3 = v.call(e4);
              return i2 && (t4 ? e4[b] = n3 : delete e4[b]), r3;
            }(e3) : function(e4) {
              return y.call(e4);
            }(e3);
          };
          var S = /^[-+]0x[0-9a-f]+$/i, O = /^0b[01]+$/i, E = /^0o[0-7]+$/i, k = parseInt;
          const I = function(e3) {
            if ("number" == typeof e3) return e3;
            if (function(e4) {
              return "symbol" == typeof e4 || function(e5) {
                return null != e5 && "object" == typeof e5;
              }(e4) && "[object Symbol]" == T(e4);
            }(e3)) return NaN;
            if (s(e3)) {
              var t4 = "function" == typeof e3.valueOf ? e3.valueOf() : e3;
              e3 = s(t4) ? t4 + "" : t4;
            }
            if ("string" != typeof e3) return 0 === e3 ? e3 : +e3;
            e3 = f(e3);
            var n3 = O.test(e3);
            return n3 || E.test(e3) ? k(e3.slice(2), n3 ? 2 : 8) : S.test(e3) ? NaN : +e3;
          };
          var x = Math.max, _23 = Math.min;
          const R = function(e3, t4, n3) {
            var i2, r3, a2, o2, l2, u3, h2 = 0, d2 = false, f2 = false, p2 = true;
            if ("function" != typeof e3) throw new TypeError("Expected a function");
            function m2(t5) {
              var n4 = i2, a3 = r3;
              return i2 = r3 = void 0, h2 = t5, o2 = e3.apply(a3, n4);
            }
            function g2(e4) {
              return h2 = e4, l2 = setTimeout(b2, t4), d2 ? m2(e4) : o2;
            }
            function v2(e4) {
              var n4 = e4 - u3;
              return void 0 === u3 || n4 >= t4 || n4 < 0 || f2 && e4 - h2 >= a2;
            }
            function b2() {
              var e4 = c();
              if (v2(e4)) return y2(e4);
              l2 = setTimeout(b2, function(e5) {
                var n4 = t4 - (e5 - u3);
                return f2 ? _23(n4, a2 - (e5 - h2)) : n4;
              }(e4));
            }
            function y2(e4) {
              return l2 = void 0, p2 && i2 ? m2(e4) : (i2 = r3 = void 0, o2);
            }
            function w2() {
              var e4 = c(), n4 = v2(e4);
              if (i2 = arguments, r3 = this, u3 = e4, n4) {
                if (void 0 === l2) return g2(u3);
                if (f2) return clearTimeout(l2), l2 = setTimeout(b2, t4), m2(u3);
              }
              return void 0 === l2 && (l2 = setTimeout(b2, t4)), o2;
            }
            return t4 = I(t4) || 0, s(n3) && (d2 = !!n3.leading, a2 = (f2 = "maxWait" in n3) ? x(I(n3.maxWait) || 0, t4) : a2, p2 = "trailing" in n3 ? !!n3.trailing : p2), w2.cancel = function() {
              void 0 !== l2 && clearTimeout(l2), h2 = 0, i2 = u3 = r3 = l2 = void 0;
            }, w2.flush = function() {
              return void 0 === l2 ? o2 : y2(c());
            }, w2;
          }, L = function(e3, t4, n3) {
            var i2 = true, r3 = true;
            if ("function" != typeof e3) throw new TypeError("Expected a function");
            return s(n3) && (i2 = "leading" in n3 ? !!n3.leading : i2, r3 = "trailing" in n3 ? !!n3.trailing : r3), R(e3, t4, { leading: i2, maxWait: t4, trailing: r3 });
          };
          var P = i(590), M = i.n(P), W = function() {
            if ("undefined" != typeof Map) return Map;
            function e3(e4, t4) {
              var n3 = -1;
              return e4.some(function(e5, i2) {
                return e5[0] === t4 && (n3 = i2, true);
              }), n3;
            }
            return function() {
              function t4() {
                this.__entries__ = [];
              }
              return Object.defineProperty(t4.prototype, "size", { get: function() {
                return this.__entries__.length;
              }, enumerable: true, configurable: true }), t4.prototype.get = function(t5) {
                var n3 = e3(this.__entries__, t5), i2 = this.__entries__[n3];
                return i2 && i2[1];
              }, t4.prototype.set = function(t5, n3) {
                var i2 = e3(this.__entries__, t5);
                ~i2 ? this.__entries__[i2][1] = n3 : this.__entries__.push([t5, n3]);
              }, t4.prototype.delete = function(t5) {
                var n3 = this.__entries__, i2 = e3(n3, t5);
                ~i2 && n3.splice(i2, 1);
              }, t4.prototype.has = function(t5) {
                return !!~e3(this.__entries__, t5);
              }, t4.prototype.clear = function() {
                this.__entries__.splice(0);
              }, t4.prototype.forEach = function(e4, t5) {
                void 0 === t5 && (t5 = null);
                for (var n3 = 0, i2 = this.__entries__; n3 < i2.length; n3++) {
                  var r3 = i2[n3];
                  e4.call(t5, r3[1], r3[0]);
                }
              }, t4;
            }();
          }(), D = "undefined" != typeof window && "undefined" != typeof document && window.document === document, F = void 0 !== i.g && i.g.Math === Math ? i.g : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(), C = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(F) : function(e3) {
            return setTimeout(function() {
              return e3(Date.now());
            }, 1e3 / 60);
          }, N = ["top", "right", "bottom", "left", "width", "height", "size", "weight"], z = "undefined" != typeof MutationObserver, j = function() {
            function e3() {
              this.connected_ = false, this.mutationEventsAdded_ = false, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = /* @__PURE__ */ function(e4, t4) {
                var n3 = false, i2 = false, r3 = 0;
                function a2() {
                  n3 && (n3 = false, e4()), i2 && o2();
                }
                function s2() {
                  C(a2);
                }
                function o2() {
                  var e5 = Date.now();
                  if (n3) {
                    if (e5 - r3 < 2) return;
                    i2 = true;
                  } else n3 = true, i2 = false, setTimeout(s2, 20);
                  r3 = e5;
                }
                return o2;
              }(this.refresh.bind(this));
            }
            return e3.prototype.addObserver = function(e4) {
              ~this.observers_.indexOf(e4) || this.observers_.push(e4), this.connected_ || this.connect_();
            }, e3.prototype.removeObserver = function(e4) {
              var t4 = this.observers_, n3 = t4.indexOf(e4);
              ~n3 && t4.splice(n3, 1), !t4.length && this.connected_ && this.disconnect_();
            }, e3.prototype.refresh = function() {
              this.updateObservers_() && this.refresh();
            }, e3.prototype.updateObservers_ = function() {
              var e4 = this.observers_.filter(function(e5) {
                return e5.gatherActive(), e5.hasActive();
              });
              return e4.forEach(function(e5) {
                return e5.broadcastActive();
              }), e4.length > 0;
            }, e3.prototype.connect_ = function() {
              D && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), z ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, { attributes: true, childList: true, characterData: true, subtree: true })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = true), this.connected_ = true);
            }, e3.prototype.disconnect_ = function() {
              D && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = false, this.connected_ = false);
            }, e3.prototype.onTransitionEnd_ = function(e4) {
              var t4 = e4.propertyName, n3 = void 0 === t4 ? "" : t4;
              N.some(function(e5) {
                return !!~n3.indexOf(e5);
              }) && this.refresh();
            }, e3.getInstance = function() {
              return this.instance_ || (this.instance_ = new e3()), this.instance_;
            }, e3.instance_ = null, e3;
          }(), B = function(e3, t4) {
            for (var n3 = 0, i2 = Object.keys(t4); n3 < i2.length; n3++) {
              var r3 = i2[n3];
              Object.defineProperty(e3, r3, { value: t4[r3], enumerable: false, writable: false, configurable: true });
            }
            return e3;
          }, A = function(e3) {
            return e3 && e3.ownerDocument && e3.ownerDocument.defaultView || F;
          }, G = V(0, 0, 0, 0);
          function U(e3) {
            return parseFloat(e3) || 0;
          }
          function H(e3) {
            for (var t4 = [], n3 = 1; n3 < arguments.length; n3++) t4[n3 - 1] = arguments[n3];
            return t4.reduce(function(t5, n4) {
              return t5 + U(e3["border-" + n4 + "-width"]);
            }, 0);
          }
          var q = "undefined" != typeof SVGGraphicsElement ? function(e3) {
            return e3 instanceof A(e3).SVGGraphicsElement;
          } : function(e3) {
            return e3 instanceof A(e3).SVGElement && "function" == typeof e3.getBBox;
          };
          function K(e3) {
            return D ? q(e3) ? function(e4) {
              var t4 = e4.getBBox();
              return V(0, 0, t4.width, t4.height);
            }(e3) : function(e4) {
              var t4 = e4.clientWidth, n3 = e4.clientHeight;
              if (!t4 && !n3) return G;
              var i2 = A(e4).getComputedStyle(e4), r3 = function(e5) {
                for (var t5 = {}, n4 = 0, i3 = ["top", "right", "bottom", "left"]; n4 < i3.length; n4++) {
                  var r4 = i3[n4], a3 = e5["padding-" + r4];
                  t5[r4] = U(a3);
                }
                return t5;
              }(i2), a2 = r3.left + r3.right, s2 = r3.top + r3.bottom, o2 = U(i2.width), l2 = U(i2.height);
              if ("border-box" === i2.boxSizing && (Math.round(o2 + a2) !== t4 && (o2 -= H(i2, "left", "right") + a2), Math.round(l2 + s2) !== n3 && (l2 -= H(i2, "top", "bottom") + s2)), !function(e5) {
                return e5 === A(e5).document.documentElement;
              }(e4)) {
                var u3 = Math.round(o2 + a2) - t4, c2 = Math.round(l2 + s2) - n3;
                1 !== Math.abs(u3) && (o2 -= u3), 1 !== Math.abs(c2) && (l2 -= c2);
              }
              return V(r3.left, r3.top, o2, l2);
            }(e3) : G;
          }
          function V(e3, t4, n3, i2) {
            return { x: e3, y: t4, width: n3, height: i2 };
          }
          var X = function() {
            function e3(e4) {
              this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = V(0, 0, 0, 0), this.target = e4;
            }
            return e3.prototype.isActive = function() {
              var e4 = K(this.target);
              return this.contentRect_ = e4, e4.width !== this.broadcastWidth || e4.height !== this.broadcastHeight;
            }, e3.prototype.broadcastRect = function() {
              var e4 = this.contentRect_;
              return this.broadcastWidth = e4.width, this.broadcastHeight = e4.height, e4;
            }, e3;
          }(), Y = function(e3, t4) {
            var n3, i2, r3, a2, s2, o2, l2, u3 = (i2 = (n3 = t4).x, r3 = n3.y, a2 = n3.width, s2 = n3.height, o2 = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, l2 = Object.create(o2.prototype), B(l2, { x: i2, y: r3, width: a2, height: s2, top: r3, right: i2 + a2, bottom: s2 + r3, left: i2 }), l2);
            B(this, { target: e3, contentRect: u3 });
          }, $2 = function() {
            function e3(e4, t4, n3) {
              if (this.activeObservations_ = [], this.observations_ = new W(), "function" != typeof e4) throw new TypeError("The callback provided as parameter 1 is not a function.");
              this.callback_ = e4, this.controller_ = t4, this.callbackCtx_ = n3;
            }
            return e3.prototype.observe = function(e4) {
              if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e4 instanceof A(e4).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                var t4 = this.observations_;
                t4.has(e4) || (t4.set(e4, new X(e4)), this.controller_.addObserver(this), this.controller_.refresh());
              }
            }, e3.prototype.unobserve = function(e4) {
              if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e4 instanceof A(e4).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                var t4 = this.observations_;
                t4.has(e4) && (t4.delete(e4), t4.size || this.controller_.removeObserver(this));
              }
            }, e3.prototype.disconnect = function() {
              this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
            }, e3.prototype.gatherActive = function() {
              var e4 = this;
              this.clearActive(), this.observations_.forEach(function(t4) {
                t4.isActive() && e4.activeObservations_.push(t4);
              });
            }, e3.prototype.broadcastActive = function() {
              if (this.hasActive()) {
                var e4 = this.callbackCtx_, t4 = this.activeObservations_.map(function(e5) {
                  return new Y(e5.target, e5.broadcastRect());
                });
                this.callback_.call(e4, t4, e4), this.clearActive();
              }
            }, e3.prototype.clearActive = function() {
              this.activeObservations_.splice(0);
            }, e3.prototype.hasActive = function() {
              return this.activeObservations_.length > 0;
            }, e3;
          }(), J = "undefined" != typeof WeakMap ? /* @__PURE__ */ new WeakMap() : new W(), Q = function e3(t4) {
            if (!(this instanceof e3)) throw new TypeError("Cannot call a class as a function.");
            if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
            var n3 = j.getInstance(), i2 = new $2(t4, n3, this);
            J.set(this, i2);
          };
          ["observe", "unobserve", "disconnect"].forEach(function(e3) {
            Q.prototype[e3] = function() {
              var t4;
              return (t4 = J.get(this))[e3].apply(t4, arguments);
            };
          });
          const Z = void 0 !== F.ResizeObserver ? F.ResizeObserver : Q;
          var ee = i(37), te = i(697), ne = a().memo(function(e3) {
            var t4 = e3.description, n3 = e3.fullscreen, i2 = e3.handleImageLoaded, r3 = e3.isFullscreen, s2 = e3.onImageError, o2 = e3.original, l2 = e3.originalAlt, u3 = e3.originalHeight, c2 = e3.originalWidth, h2 = e3.originalTitle, d2 = e3.sizes, f2 = e3.srcSet, p2 = e3.loading, m2 = r3 && n3 || o2;
            return a().createElement(a().Fragment, null, a().createElement("img", { className: "image-gallery-image", src: m2, alt: l2, srcSet: f2, height: u3, width: c2, sizes: d2, title: h2, onLoad: function(e4) {
              return i2(e4, o2);
            }, onError: s2, loading: p2 }), t4 && a().createElement("span", { className: "image-gallery-description" }, t4));
          });
          ne.displayName = "Item", ne.propTypes = { description: te.string, fullscreen: te.string, handleImageLoaded: te.func.isRequired, isFullscreen: te.bool, onImageError: te.func.isRequired, original: te.string.isRequired, originalAlt: te.string, originalHeight: te.string, originalWidth: te.string, originalTitle: te.string, sizes: te.string, srcSet: te.string, loading: te.string }, ne.defaultProps = { description: "", fullscreen: "", isFullscreen: false, originalAlt: "", originalHeight: "", originalWidth: "", originalTitle: "", sizes: "", srcSet: "", loading: "eager" };
          const ie = ne;
          var re = { left: a().createElement("polyline", { points: "15 18 9 12 15 6" }), right: a().createElement("polyline", { points: "9 18 15 12 9 6" }), maximize: a().createElement("path", { d: "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3" }), minimize: a().createElement("path", { d: "M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3" }), play: a().createElement("polygon", { points: "5 3 19 12 5 21 5 3" }), pause: a().createElement(a().Fragment, null, a().createElement("rect", { x: "6", y: "4", width: "4", height: "16" }), a().createElement("rect", { x: "14", y: "4", width: "4", height: "16" })) }, ae = function(e3) {
            var t4 = e3.strokeWidth, n3 = e3.viewBox, i2 = e3.icon;
            return a().createElement("svg", { className: "image-gallery-svg", xmlns: "http://www.w3.org/2000/svg", viewBox: n3, fill: "none", stroke: "currentColor", strokeWidth: t4, strokeLinecap: "round", strokeLinejoin: "round" }, re[i2]);
          };
          ae.propTypes = { strokeWidth: te.number, viewBox: te.string, icon: (0, te.oneOf)(["left", "right", "maximize", "minimize", "play", "pause"]).isRequired }, ae.defaultProps = { strokeWidth: 1, viewBox: "0 0 24 24" };
          const se = ae;
          var oe = a().memo(function(e3) {
            var t4 = e3.isFullscreen, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-fullscreen-button", onClick: n3, "aria-label": "Open Fullscreen" }, a().createElement(se, { strokeWidth: 2, icon: t4 ? "minimize" : "maximize" }));
          });
          oe.displayName = "Fullscreen", oe.propTypes = { isFullscreen: te.bool.isRequired, onClick: te.func.isRequired };
          const le = oe;
          var ue = a().memo(function(e3) {
            var t4 = e3.disabled, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-left-nav", disabled: t4, onClick: n3, "aria-label": "Previous Slide" }, a().createElement(se, { icon: "left", viewBox: "6 0 12 24" }));
          });
          ue.displayName = "LeftNav", ue.propTypes = { disabled: te.bool.isRequired, onClick: te.func.isRequired };
          const ce = ue;
          var he = a().memo(function(e3) {
            var t4 = e3.disabled, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-right-nav", disabled: t4, onClick: n3, "aria-label": "Next Slide" }, a().createElement(se, { icon: "right", viewBox: "6 0 12 24" }));
          });
          he.displayName = "RightNav", he.propTypes = { disabled: te.bool.isRequired, onClick: te.func.isRequired };
          const de = he;
          var fe = a().memo(function(e3) {
            var t4 = e3.isPlaying, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-play-button", onClick: n3, "aria-label": "Play or Pause Slideshow" }, a().createElement(se, { strokeWidth: 2, icon: t4 ? "pause" : "play" }));
          });
          fe.displayName = "PlayPause", fe.propTypes = { isPlaying: te.bool.isRequired, onClick: te.func.isRequired };
          const pe = fe;
          function me() {
            return me = Object.assign || function(e3) {
              for (var t4 = 1; t4 < arguments.length; t4++) {
                var n3 = arguments[t4];
                for (var i2 in n3) Object.prototype.hasOwnProperty.call(n3, i2) && (e3[i2] = n3[i2]);
              }
              return e3;
            }, me.apply(this, arguments);
          }
          var ge = function(e3) {
            var t4 = e3.children, n3 = e3.className, i2 = e3.delta, r3 = e3.onSwiping, s2 = e3.onSwiped, o2 = (0, ee.useSwipeable)({ delta: i2, onSwiping: r3, onSwiped: s2 });
            return a().createElement("div", me({}, o2, { className: n3 }), t4);
          };
          ge.propTypes = { children: te.node.isRequired, className: te.string, delta: te.number, onSwiped: te.func, onSwiping: te.func }, ge.defaultProps = { className: "", delta: 0, onSwiping: function() {
          }, onSwiped: function() {
          } };
          const ve = ge;
          function be(e3) {
            return be = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            }, be(e3);
          }
          function ye(e3, t4) {
            var n3 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var i2 = Object.getOwnPropertySymbols(e3);
              t4 && (i2 = i2.filter(function(t5) {
                return Object.getOwnPropertyDescriptor(e3, t5).enumerable;
              })), n3.push.apply(n3, i2);
            }
            return n3;
          }
          function we(e3) {
            for (var t4 = 1; t4 < arguments.length; t4++) {
              var n3 = null != arguments[t4] ? arguments[t4] : {};
              t4 % 2 ? ye(Object(n3), true).forEach(function(t5) {
                Te(e3, t5, n3[t5]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : ye(Object(n3)).forEach(function(t5) {
                Object.defineProperty(e3, t5, Object.getOwnPropertyDescriptor(n3, t5));
              });
            }
            return e3;
          }
          function Te(e3, t4, n3) {
            return t4 in e3 ? Object.defineProperty(e3, t4, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t4] = n3, e3;
          }
          function Se(e3, t4) {
            for (var n3 = 0; n3 < t4.length; n3++) {
              var i2 = t4[n3];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e3, i2.key, i2);
            }
          }
          function Oe(e3, t4) {
            return Oe = Object.setPrototypeOf || function(e4, t5) {
              return e4.__proto__ = t5, e4;
            }, Oe(e3, t4);
          }
          function Ee(e3, t4) {
            return !t4 || "object" !== be(t4) && "function" != typeof t4 ? ke(e3) : t4;
          }
          function ke(e3) {
            if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e3;
          }
          function Ie(e3) {
            return Ie = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            }, Ie(e3);
          }
          var xe = ["fullscreenchange", "MSFullscreenChange", "mozfullscreenchange", "webkitfullscreenchange"], _e = (0, te.arrayOf)((0, te.shape)({ srcSet: te.string, media: te.string }));
          function Re(e3) {
            var t4 = parseInt(e3.keyCode || e3.which || 0, 10);
            return 66 === t4 || 62 === t4;
          }
          var Le = function(e3) {
            !function(e4, t4) {
              if ("function" != typeof t4 && null !== t4) throw new TypeError("Super expression must either be null or a function");
              e4.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e4, writable: true, configurable: true } }), t4 && Oe(e4, t4);
            }(l2, e3);
            var n3, i2, r3, s2, o2 = (r3 = l2, s2 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if ("function" == typeof Proxy) return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }(), function() {
              var e4, t4 = Ie(r3);
              if (s2) {
                var n4 = Ie(this).constructor;
                e4 = Reflect.construct(t4, arguments, n4);
              } else e4 = t4.apply(this, arguments);
              return Ee(this, e4);
            });
            function l2(e4) {
              var t4;
              return function(e5, t5) {
                if (!(e5 instanceof t5)) throw new TypeError("Cannot call a class as a function");
              }(this, l2), (t4 = o2.call(this, e4)).state = { currentIndex: e4.startIndex, thumbsTranslate: 0, thumbsSwipedTranslate: 0, currentSlideOffset: 0, galleryWidth: 0, thumbnailsWrapperWidth: 0, thumbnailsWrapperHeight: 0, thumbsStyle: { transition: "all ".concat(e4.slideDuration, "ms ease-out") }, isFullscreen: false, isSwipingThumbnail: false, isPlaying: false }, t4.loadedImages = {}, t4.imageGallery = a().createRef(), t4.thumbnailsWrapper = a().createRef(), t4.thumbnails = a().createRef(), t4.imageGallerySlideWrapper = a().createRef(), t4.handleImageLoaded = t4.handleImageLoaded.bind(ke(t4)), t4.handleKeyDown = t4.handleKeyDown.bind(ke(t4)), t4.handleMouseDown = t4.handleMouseDown.bind(ke(t4)), t4.handleResize = t4.handleResize.bind(ke(t4)), t4.handleTouchMove = t4.handleTouchMove.bind(ke(t4)), t4.handleOnSwiped = t4.handleOnSwiped.bind(ke(t4)), t4.handleScreenChange = t4.handleScreenChange.bind(ke(t4)), t4.handleSwiping = t4.handleSwiping.bind(ke(t4)), t4.handleThumbnailSwiping = t4.handleThumbnailSwiping.bind(ke(t4)), t4.handleOnThumbnailSwiped = t4.handleOnThumbnailSwiped.bind(ke(t4)), t4.onThumbnailMouseLeave = t4.onThumbnailMouseLeave.bind(ke(t4)), t4.handleImageError = t4.handleImageError.bind(ke(t4)), t4.pauseOrPlay = t4.pauseOrPlay.bind(ke(t4)), t4.renderThumbInner = t4.renderThumbInner.bind(ke(t4)), t4.renderItem = t4.renderItem.bind(ke(t4)), t4.slideLeft = t4.slideLeft.bind(ke(t4)), t4.slideRight = t4.slideRight.bind(ke(t4)), t4.toggleFullScreen = t4.toggleFullScreen.bind(ke(t4)), t4.togglePlay = t4.togglePlay.bind(ke(t4)), t4.unthrottledSlideToIndex = t4.slideToIndex, t4.slideToIndex = L(t4.unthrottledSlideToIndex, e4.slideDuration, { trailing: false }), e4.lazyLoad && (t4.lazyLoaded = []), t4;
            }
            return n3 = l2, i2 = [{ key: "componentDidMount", value: function() {
              var e4 = this.props, t4 = e4.autoPlay, n4 = e4.useWindowKeyDown;
              t4 && this.play(), n4 ? window.addEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.addEventListener("keydown", this.handleKeyDown), window.addEventListener("mousedown", this.handleMouseDown), window.addEventListener("touchmove", this.handleTouchMove, { passive: false }), this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper), this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper), this.addScreenChangeEvent();
            } }, { key: "componentDidUpdate", value: function(e4, t4) {
              var n4 = this.props, i3 = n4.items, r4 = n4.lazyLoad, a2 = n4.slideDuration, s3 = n4.slideInterval, o3 = n4.startIndex, l3 = n4.thumbnailPosition, u3 = n4.showThumbnails, c2 = n4.useWindowKeyDown, h2 = this.state, d2 = h2.currentIndex, f2 = h2.isPlaying, p2 = e4.items.length !== i3.length, m2 = !M()(e4.items, i3), g2 = e4.startIndex !== o3, v2 = e4.thumbnailPosition !== l3, b2 = e4.showThumbnails !== u3;
              s3 === e4.slideInterval && a2 === e4.slideDuration || f2 && (this.pause(), this.play()), v2 && (this.removeResizeObserver(), this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper), this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper)), b2 && u3 && this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper), b2 && !u3 && this.removeThumbnailsResizeObserver(), (p2 || b2) && this.handleResize(), t4.currentIndex !== d2 && this.slideThumbnailBar(), e4.slideDuration !== a2 && (this.slideToIndex = L(this.unthrottledSlideToIndex, a2, { trailing: false })), !r4 || e4.lazyLoad && !m2 || (this.lazyLoaded = []), c2 !== e4.useWindowKeyDown && (c2 ? (this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown), window.addEventListener("keydown", this.handleKeyDown)) : (window.removeEventListener("keydown", this.handleKeyDown), this.imageGallery.current.addEventListener("keydown", this.handleKeyDown))), (g2 || m2) && this.setState({ currentIndex: o3, slideStyle: { transition: "none" } });
            } }, { key: "componentWillUnmount", value: function() {
              var e4 = this.props.useWindowKeyDown;
              window.removeEventListener("mousedown", this.handleMouseDown), window.removeEventListener("touchmove", this.handleTouchMove), this.removeScreenChangeEvent(), this.removeResizeObserver(), this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null), this.transitionTimer && window.clearTimeout(this.transitionTimer), e4 ? window.removeEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown);
            } }, { key: "onSliding", value: function() {
              var e4 = this, t4 = this.state, n4 = t4.currentIndex, i3 = t4.isTransitioning, r4 = this.props, a2 = r4.onSlide, s3 = r4.slideDuration;
              this.transitionTimer = window.setTimeout(function() {
                i3 && (e4.setState({ isTransitioning: !i3, isSwipingThumbnail: false }), a2 && a2(n4));
              }, s3 + 50);
            } }, { key: "onThumbnailClick", value: function(e4, t4) {
              var n4 = this.props.onThumbnailClick;
              e4.target.parentNode.parentNode.blur(), this.slideToIndex(t4, e4), n4 && n4(e4, t4);
            } }, { key: "onThumbnailMouseOver", value: function(e4, t4) {
              var n4 = this;
              this.thumbnailMouseOverTimer && (window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null), this.thumbnailMouseOverTimer = window.setTimeout(function() {
                n4.slideToIndex(t4), n4.pause();
              }, 300);
            } }, { key: "onThumbnailMouseLeave", value: function() {
              if (this.thumbnailMouseOverTimer) {
                var e4 = this.props.autoPlay;
                window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null, e4 && this.play();
              }
            } }, { key: "setThumbsTranslate", value: function(e4) {
              this.setState({ thumbsTranslate: e4 });
            } }, { key: "setModalFullscreen", value: function(e4) {
              var t4 = this.props.onScreenChange;
              this.setState({ modalFullscreen: e4 }), t4 && t4(e4);
            } }, { key: "getThumbsTranslate", value: function(e4) {
              var t4, n4 = this.props, i3 = n4.disableThumbnailScroll, r4 = n4.items, a2 = this.state, s3 = a2.thumbnailsWrapperWidth, o3 = a2.thumbnailsWrapperHeight, l3 = this.thumbnails && this.thumbnails.current;
              if (i3) return 0;
              if (l3) {
                if (this.isThumbnailVertical()) {
                  if (l3.scrollHeight <= o3) return 0;
                  t4 = l3.scrollHeight - o3;
                } else {
                  if (l3.scrollWidth <= s3 || s3 <= 0) return 0;
                  t4 = l3.scrollWidth - s3;
                }
                return e4 * (t4 / (r4.length - 1));
              }
              return 0;
            } }, { key: "getThumbnailPositionClassName", value: function(e4) {
              switch (e4) {
                case "left":
                  e4 = " ".concat("image-gallery-thumbnails-left");
                  break;
                case "right":
                  e4 = " ".concat("image-gallery-thumbnails-right");
                  break;
                case "bottom":
                  e4 = " ".concat("image-gallery-thumbnails-bottom");
                  break;
                case "top":
                  e4 = " ".concat("image-gallery-thumbnails-top");
              }
              return e4;
            } }, { key: "getAlignmentClassName", value: function(e4) {
              var t4 = this.state.currentIndex, n4 = this.props, i3 = n4.infinite, r4 = n4.items, a2 = "", s3 = "image-gallery-left", o3 = "image-gallery-right";
              switch (e4) {
                case t4 - 1:
                  a2 = " ".concat(s3);
                  break;
                case t4:
                  a2 = " ".concat("image-gallery-center");
                  break;
                case t4 + 1:
                  a2 = " ".concat(o3);
              }
              return r4.length >= 3 && i3 && (0 === e4 && t4 === r4.length - 1 ? a2 = " ".concat(o3) : e4 === r4.length - 1 && 0 === t4 && (a2 = " ".concat(s3))), a2;
            } }, { key: "getTranslateXForTwoSlide", value: function(e4) {
              var t4 = this.state, n4 = t4.currentIndex, i3 = t4.currentSlideOffset, r4 = t4.previousIndex, a2 = n4 !== r4, s3 = 0 === e4 && 0 === r4, o3 = 1 === e4 && 1 === r4, l3 = 0 === e4 && 1 === n4, u3 = 1 === e4 && 0 === n4, c2 = 0 === i3, h2 = -100 * n4 + 100 * e4 + i3;
              return i3 > 0 ? this.direction = "left" : i3 < 0 && (this.direction = "right"), u3 && i3 > 0 && (h2 = -100 + i3), l3 && i3 < 0 && (h2 = 100 + i3), a2 ? s3 && c2 && "left" === this.direction ? h2 = 100 : o3 && c2 && "right" === this.direction && (h2 = -100) : (u3 && c2 && "left" === this.direction && (h2 = -100), l3 && c2 && "right" === this.direction && (h2 = 100)), h2;
            } }, { key: "getThumbnailBarHeight", value: function() {
              return this.isThumbnailVertical() ? { height: this.state.gallerySlideWrapperHeight } : {};
            } }, { key: "getSlideStyle", value: function(e4) {
              var t4 = this.state, n4 = t4.currentIndex, i3 = t4.currentSlideOffset, r4 = t4.slideStyle, a2 = this.props, s3 = a2.infinite, o3 = a2.items, l3 = a2.useTranslate3D, u3 = a2.isRTL, c2 = -100 * n4, h2 = o3.length - 1, d2 = (c2 + 100 * e4) * (u3 ? -1 : 1) + i3;
              s3 && o3.length > 2 && (0 === n4 && e4 === h2 ? d2 = -100 * (u3 ? -1 : 1) + i3 : n4 === h2 && 0 === e4 && (d2 = 100 * (u3 ? -1 : 1) + i3)), s3 && 2 === o3.length && (d2 = this.getTranslateXForTwoSlide(e4));
              var f2 = "translate(".concat(d2, "%, 0)");
              return l3 && (f2 = "translate3d(".concat(d2, "%, 0, 0)")), we({ display: this.isSlideVisible(e4) ? "inherit" : "none", WebkitTransform: f2, MozTransform: f2, msTransform: f2, OTransform: f2, transform: f2 }, r4);
            } }, { key: "getCurrentIndex", value: function() {
              return this.state.currentIndex;
            } }, { key: "getThumbnailStyle", value: function() {
              var e4, t4 = this.props, n4 = t4.useTranslate3D, i3 = t4.isRTL, r4 = this.state, a2 = r4.thumbsTranslate, s3 = r4.thumbsStyle, o3 = i3 ? -1 * a2 : a2;
              return this.isThumbnailVertical() ? (e4 = "translate(0, ".concat(a2, "px)"), n4 && (e4 = "translate3d(0, ".concat(a2, "px, 0)"))) : (e4 = "translate(".concat(o3, "px, 0)"), n4 && (e4 = "translate3d(".concat(o3, "px, 0, 0)"))), we({ WebkitTransform: e4, MozTransform: e4, msTransform: e4, OTransform: e4, transform: e4 }, s3);
            } }, { key: "getSlideItems", value: function() {
              var e4 = this, n4 = this.state.currentIndex, i3 = this.props, r4 = i3.items, s3 = i3.slideOnThumbnailOver, o3 = i3.onClick, l3 = i3.lazyLoad, u3 = i3.onTouchMove, c2 = i3.onTouchEnd, h2 = i3.onTouchStart, d2 = i3.onMouseOver, f2 = i3.onMouseLeave, p2 = i3.renderItem, m2 = i3.renderThumbInner, g2 = i3.showThumbnails, v2 = i3.showBullets, b2 = [], y2 = [], w2 = [];
              return r4.forEach(function(i4, r5) {
                var T2 = e4.getAlignmentClassName(r5), S2 = i4.originalClass ? " ".concat(i4.originalClass) : "", O2 = i4.thumbnailClass ? " ".concat(i4.thumbnailClass) : "", E2 = i4.renderItem || p2 || e4.renderItem, k2 = i4.renderThumbInner || m2 || e4.renderThumbInner, I2 = !l3 || T2 || e4.lazyLoaded[r5];
                I2 && l3 && !e4.lazyLoaded[r5] && (e4.lazyLoaded[r5] = true);
                var x2 = e4.getSlideStyle(r5), _24 = a().createElement("div", { "aria-label": "Go to Slide ".concat(r5 + 1), key: "slide-".concat(r5), tabIndex: "-1", className: "image-gallery-slide ".concat(T2, " ").concat(S2), style: x2, onClick: o3, onKeyUp: e4.handleSlideKeyUp, onTouchMove: u3, onTouchEnd: c2, onTouchStart: h2, onMouseOver: d2, onFocus: d2, onMouseLeave: f2, role: "button" }, I2 ? E2(i4) : a().createElement("div", { style: { height: "100%" } }));
                if (b2.push(_24), g2 && i4.thumbnail) {
                  var R2 = t3("image-gallery-thumbnail", O2, { active: n4 === r5 });
                  y2.push(a().createElement("button", { key: "thumbnail-".concat(r5), type: "button", tabIndex: "0", "aria-pressed": n4 === r5 ? "true" : "false", "aria-label": "Go to Slide ".concat(r5 + 1), className: R2, onMouseLeave: s3 ? e4.onThumbnailMouseLeave : null, onMouseOver: function(t4) {
                    return e4.handleThumbnailMouseOver(t4, r5);
                  }, onFocus: function(t4) {
                    return e4.handleThumbnailMouseOver(t4, r5);
                  }, onKeyUp: function(t4) {
                    return e4.handleThumbnailKeyUp(t4, r5);
                  }, onClick: function(t4) {
                    return e4.onThumbnailClick(t4, r5);
                  } }, k2(i4)));
                }
                if (v2) {
                  var L2 = t3("image-gallery-bullet", i4.bulletClass, { active: n4 === r5 });
                  w2.push(a().createElement("button", { type: "button", key: "bullet-".concat(r5), className: L2, onClick: function(t4) {
                    return i4.bulletOnClick && i4.bulletOnClick({ item: i4, itemIndex: r5, currentIndex: n4 }), t4.target.blur(), e4.slideToIndex.call(e4, r5, t4);
                  }, "aria-pressed": n4 === r5 ? "true" : "false", "aria-label": "Go to Slide ".concat(r5 + 1) }));
                }
              }), { slides: b2, thumbnails: y2, bullets: w2 };
            } }, { key: "ignoreIsTransitioning", value: function() {
              var e4 = this.props.items, t4 = this.state, n4 = t4.previousIndex, i3 = t4.currentIndex, r4 = e4.length - 1;
              return Math.abs(n4 - i3) > 1 && !(0 === n4 && i3 === r4) && !(n4 === r4 && 0 === i3);
            } }, { key: "isFirstOrLastSlide", value: function(e4) {
              return e4 === this.props.items.length - 1 || 0 === e4;
            } }, { key: "slideIsTransitioning", value: function(e4) {
              var t4 = this.state, n4 = t4.isTransitioning, i3 = t4.previousIndex, r4 = t4.currentIndex;
              return n4 && !(e4 === i3 || e4 === r4);
            } }, { key: "isSlideVisible", value: function(e4) {
              return !this.slideIsTransitioning(e4) || this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(e4);
            } }, { key: "slideThumbnailBar", value: function() {
              var e4 = this.state, t4 = e4.currentIndex, n4 = e4.isSwipingThumbnail, i3 = -this.getThumbsTranslate(t4);
              n4 || (0 === t4 ? this.setState({ thumbsTranslate: 0, thumbsSwipedTranslate: 0 }) : this.setState({ thumbsTranslate: i3, thumbsSwipedTranslate: i3 }));
            } }, { key: "canSlide", value: function() {
              return this.props.items.length >= 2;
            } }, { key: "canSlideLeft", value: function() {
              var e4 = this.props, t4 = e4.infinite, n4 = e4.isRTL;
              return t4 || (n4 ? this.canSlideNext() : this.canSlidePrevious());
            } }, { key: "canSlideRight", value: function() {
              var e4 = this.props, t4 = e4.infinite, n4 = e4.isRTL;
              return t4 || (n4 ? this.canSlidePrevious() : this.canSlideNext());
            } }, { key: "canSlidePrevious", value: function() {
              return this.state.currentIndex > 0;
            } }, { key: "canSlideNext", value: function() {
              return this.state.currentIndex < this.props.items.length - 1;
            } }, { key: "handleSwiping", value: function(e4) {
              var t4 = e4.event, n4 = e4.absX, i3 = e4.dir, r4 = this.props, a2 = r4.disableSwipe, s3 = r4.stopPropagation, o3 = this.state, l3 = o3.galleryWidth, u3 = o3.isTransitioning, c2 = o3.swipingUpDown, h2 = o3.swipingLeftRight;
              if (i3 !== ee.UP && i3 !== ee.DOWN && !c2 || h2) {
                if (i3 !== ee.LEFT && i3 !== ee.RIGHT || h2 || this.setState({ swipingLeftRight: true }), !a2) {
                  var d2 = this.props.swipingTransitionDuration;
                  if (s3 && t4.preventDefault(), u3) this.setState({ currentSlideOffset: 0 });
                  else {
                    var f2 = i3 === ee.RIGHT ? 1 : -1, p2 = n4 / l3 * 100;
                    Math.abs(p2) >= 100 && (p2 = 100);
                    var m2 = { transition: "transform ".concat(d2, "ms ease-out") };
                    this.setState({ currentSlideOffset: f2 * p2, slideStyle: m2 });
                  }
                }
              } else c2 || this.setState({ swipingUpDown: true });
            } }, { key: "handleThumbnailSwiping", value: function(e4) {
              var t4 = e4.event, n4 = e4.absX, i3 = e4.absY, r4 = e4.dir, a2 = this.props, s3 = a2.stopPropagation, o3 = a2.swipingThumbnailTransitionDuration, l3 = this.state, u3 = l3.thumbsSwipedTranslate, c2 = l3.thumbnailsWrapperHeight, h2 = l3.thumbnailsWrapperWidth, d2 = l3.swipingUpDown, f2 = l3.swipingLeftRight;
              if (this.isThumbnailVertical()) {
                if ((r4 === ee.LEFT || r4 === ee.RIGHT || f2) && !d2) return void (f2 || this.setState({ swipingLeftRight: true }));
                r4 !== ee.UP && r4 !== ee.DOWN || d2 || this.setState({ swipingUpDown: true });
              } else {
                if ((r4 === ee.UP || r4 === ee.DOWN || d2) && !f2) return void (d2 || this.setState({ swipingUpDown: true }));
                r4 !== ee.LEFT && r4 !== ee.RIGHT || f2 || this.setState({ swipingLeftRight: true });
              }
              var p2, m2, g2, v2, b2, y2 = this.thumbnails && this.thumbnails.current;
              if (this.isThumbnailVertical() ? (p2 = u3 + (r4 === ee.DOWN ? i3 : -i3), m2 = y2.scrollHeight - c2 + 20, g2 = Math.abs(p2) > m2, v2 = p2 > 20, b2 = y2.scrollHeight <= c2) : (p2 = u3 + (r4 === ee.RIGHT ? n4 : -n4), m2 = y2.scrollWidth - h2 + 20, g2 = Math.abs(p2) > m2, v2 = p2 > 20, b2 = y2.scrollWidth <= h2), !b2 && (r4 !== ee.LEFT && r4 !== ee.UP || !g2) && (r4 !== ee.RIGHT && r4 !== ee.DOWN || !v2)) {
                s3 && t4.stopPropagation();
                var w2 = { transition: "transform ".concat(o3, "ms ease-out") };
                this.setState({ thumbsTranslate: p2, thumbsStyle: w2 });
              }
            } }, { key: "handleOnThumbnailSwiped", value: function() {
              var e4 = this.state.thumbsTranslate, t4 = this.props.slideDuration;
              this.resetSwipingDirection(), this.setState({ isSwipingThumbnail: true, thumbsSwipedTranslate: e4, thumbsStyle: { transition: "all ".concat(t4, "ms ease-out") } });
            } }, { key: "sufficientSwipe", value: function() {
              var e4 = this.state.currentSlideOffset, t4 = this.props.swipeThreshold;
              return Math.abs(e4) > t4;
            } }, { key: "resetSwipingDirection", value: function() {
              var e4 = this.state, t4 = e4.swipingUpDown, n4 = e4.swipingLeftRight;
              t4 && this.setState({ swipingUpDown: false }), n4 && this.setState({ swipingLeftRight: false });
            } }, { key: "handleOnSwiped", value: function(e4) {
              var t4 = e4.event, n4 = e4.dir, i3 = e4.velocity, r4 = this.props, a2 = r4.disableSwipe, s3 = r4.stopPropagation, o3 = r4.flickThreshold;
              if (!a2) {
                var l3 = this.props.isRTL;
                s3 && t4.stopPropagation(), this.resetSwipingDirection();
                var u3 = (n4 === ee.LEFT ? 1 : -1) * (l3 ? -1 : 1), c2 = n4 === ee.UP || n4 === ee.DOWN, h2 = i3 > o3 && !c2;
                this.handleOnSwipedTo(u3, h2);
              }
            } }, { key: "handleOnSwipedTo", value: function(e4, t4) {
              var n4 = this.state, i3 = n4.currentIndex, r4 = n4.isTransitioning, a2 = i3;
              !this.sufficientSwipe() && !t4 || r4 || (a2 += e4), (-1 === e4 && !this.canSlideLeft() || 1 === e4 && !this.canSlideRight()) && (a2 = i3), this.unthrottledSlideToIndex(a2);
            } }, { key: "handleTouchMove", value: function(e4) {
              this.state.swipingLeftRight && e4.preventDefault();
            } }, { key: "handleMouseDown", value: function() {
              this.imageGallery.current.classList.add("image-gallery-using-mouse");
            } }, { key: "handleKeyDown", value: function(e4) {
              var t4 = this.props, n4 = t4.disableKeyDown, i3 = t4.useBrowserFullscreen, r4 = this.state.isFullscreen;
              if (this.imageGallery.current.classList.remove("image-gallery-using-mouse"), !n4) switch (parseInt(e4.keyCode || e4.which || 0, 10)) {
                case 37:
                  this.canSlideLeft() && !this.playPauseIntervalId && this.slideLeft(e4);
                  break;
                case 39:
                  this.canSlideRight() && !this.playPauseIntervalId && this.slideRight(e4);
                  break;
                case 27:
                  r4 && !i3 && this.exitFullScreen();
              }
            } }, { key: "handleImageError", value: function(e4) {
              var t4 = this.props.onErrorImageURL;
              t4 && -1 === e4.target.src.indexOf(t4) && (e4.target.src = t4);
            } }, { key: "removeThumbnailsResizeObserver", value: function() {
              this.resizeThumbnailWrapperObserver && this.thumbnailsWrapper && this.thumbnailsWrapper.current && (this.resizeThumbnailWrapperObserver.unobserve(this.thumbnailsWrapper.current), this.resizeThumbnailWrapperObserver = null);
            } }, { key: "removeResizeObserver", value: function() {
              this.resizeSlideWrapperObserver && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && (this.resizeSlideWrapperObserver.unobserve(this.imageGallerySlideWrapper.current), this.resizeSlideWrapperObserver = null), this.removeThumbnailsResizeObserver();
            } }, { key: "handleResize", value: function() {
              var e4 = this.state.currentIndex;
              this.imageGallery && (this.imageGallery && this.imageGallery.current && this.setState({ galleryWidth: this.imageGallery.current.offsetWidth }), this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && this.setState({ gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight }), this.setThumbsTranslate(-this.getThumbsTranslate(e4)));
            } }, { key: "initSlideWrapperResizeObserver", value: function(e4) {
              var t4 = this;
              e4 && !e4.current || (this.resizeSlideWrapperObserver = new Z(R(function(e5) {
                e5 && e5.forEach(function(e6) {
                  t4.setState({ thumbnailsWrapperWidth: e6.contentRect.width }, t4.handleResize);
                });
              }, 50)), this.resizeSlideWrapperObserver.observe(e4.current));
            } }, { key: "initThumbnailWrapperResizeObserver", value: function(e4) {
              var t4 = this;
              e4 && !e4.current || (this.resizeThumbnailWrapperObserver = new Z(R(function(e5) {
                e5 && e5.forEach(function(e6) {
                  t4.setState({ thumbnailsWrapperHeight: e6.contentRect.height }, t4.handleResize);
                });
              }, 50)), this.resizeThumbnailWrapperObserver.observe(e4.current));
            } }, { key: "toggleFullScreen", value: function() {
              this.state.isFullscreen ? this.exitFullScreen() : this.fullScreen();
            } }, { key: "togglePlay", value: function() {
              this.playPauseIntervalId ? this.pause() : this.play();
            } }, { key: "handleScreenChange", value: function() {
              var e4 = this.props, t4 = e4.onScreenChange, n4 = e4.useBrowserFullscreen, i3 = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement, r4 = this.imageGallery.current === i3;
              t4 && t4(r4), n4 && this.setState({ isFullscreen: r4 });
            } }, { key: "slideToIndex", value: function(e4, t4) {
              var n4 = this.state, i3 = n4.currentIndex, r4 = n4.isTransitioning, a2 = this.props, s3 = a2.items, o3 = a2.slideDuration, l3 = a2.onBeforeSlide;
              if (!r4) {
                t4 && this.playPauseIntervalId && (this.pause(false), this.play(false));
                var u3 = s3.length - 1, c2 = e4;
                e4 < 0 ? c2 = u3 : e4 > u3 && (c2 = 0), l3 && c2 !== i3 && l3(c2), this.setState({ previousIndex: i3, currentIndex: c2, isTransitioning: c2 !== i3, currentSlideOffset: 0, slideStyle: { transition: "all ".concat(o3, "ms ease-out") } }, this.onSliding);
              }
            } }, { key: "slideLeft", value: function(e4) {
              var t4 = this.props.isRTL;
              this.slideTo(e4, t4 ? "right" : "left");
            } }, { key: "slideRight", value: function(e4) {
              var t4 = this.props.isRTL;
              this.slideTo(e4, t4 ? "left" : "right");
            } }, { key: "slideTo", value: function(e4, t4) {
              var n4 = this, i3 = this.state, r4 = i3.currentIndex, a2 = i3.currentSlideOffset, s3 = i3.isTransitioning, o3 = this.props.items, l3 = r4 + ("left" === t4 ? -1 : 1);
              s3 || (2 === o3.length ? this.setState({ currentSlideOffset: a2 + ("left" === t4 ? 1e-3 : -1e-3), slideStyle: { transition: "none" } }, function() {
                window.setTimeout(function() {
                  return n4.slideToIndex(l3, e4);
                }, 25);
              }) : this.slideToIndex(l3, e4));
            } }, { key: "handleThumbnailMouseOver", value: function(e4, t4) {
              this.props.slideOnThumbnailOver && this.onThumbnailMouseOver(e4, t4);
            } }, { key: "handleThumbnailKeyUp", value: function(e4, t4) {
              Re(e4) && this.onThumbnailClick(e4, t4);
            } }, { key: "handleSlideKeyUp", value: function(e4) {
              Re(e4) && (0, this.props.onClick)(e4);
            } }, { key: "isThumbnailVertical", value: function() {
              var e4 = this.props.thumbnailPosition;
              return "left" === e4 || "right" === e4;
            } }, { key: "addScreenChangeEvent", value: function() {
              var e4 = this;
              xe.forEach(function(t4) {
                document.addEventListener(t4, e4.handleScreenChange);
              });
            } }, { key: "removeScreenChangeEvent", value: function() {
              var e4 = this;
              xe.forEach(function(t4) {
                document.removeEventListener(t4, e4.handleScreenChange);
              });
            } }, { key: "fullScreen", value: function() {
              var e4 = this.props.useBrowserFullscreen, t4 = this.imageGallery.current;
              e4 ? t4.requestFullscreen ? t4.requestFullscreen() : t4.msRequestFullscreen ? t4.msRequestFullscreen() : t4.mozRequestFullScreen ? t4.mozRequestFullScreen() : t4.webkitRequestFullscreen ? t4.webkitRequestFullscreen() : this.setModalFullscreen(true) : this.setModalFullscreen(true), this.setState({ isFullscreen: true });
            } }, { key: "exitFullScreen", value: function() {
              var e4 = this.state.isFullscreen, t4 = this.props.useBrowserFullscreen;
              e4 && (t4 ? document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen ? document.msExitFullscreen() : this.setModalFullscreen(false) : this.setModalFullscreen(false), this.setState({ isFullscreen: false }));
            } }, { key: "pauseOrPlay", value: function() {
              var e4 = this.props.infinite, t4 = this.state.currentIndex;
              e4 || this.canSlideRight() ? this.slideToIndex(t4 + 1) : this.pause();
            } }, { key: "play", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t4 = this.props, n4 = t4.onPlay, i3 = t4.slideInterval, r4 = t4.slideDuration, a2 = this.state.currentIndex;
              this.playPauseIntervalId || (this.setState({ isPlaying: true }), this.playPauseIntervalId = window.setInterval(this.pauseOrPlay, Math.max(i3, r4)), n4 && e4 && n4(a2));
            } }, { key: "pause", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t4 = this.props.onPause, n4 = this.state.currentIndex;
              this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null, this.setState({ isPlaying: false }), t4 && e4 && t4(n4));
            } }, { key: "isImageLoaded", value: function(e4) {
              return !!this.loadedImages[e4.original] || (this.loadedImages[e4.original] = true, false);
            } }, { key: "handleImageLoaded", value: function(e4, t4) {
              var n4 = this.props.onImageLoad;
              !this.loadedImages[t4] && n4 && (this.loadedImages[t4] = true, n4(e4));
            } }, { key: "renderItem", value: function(e4) {
              var t4 = this.state.isFullscreen, n4 = this.props.onImageError || this.handleImageError;
              return a().createElement(ie, { description: e4.description, fullscreen: e4.fullscreen, handleImageLoaded: this.handleImageLoaded, isFullscreen: t4, onImageError: n4, original: e4.original, originalAlt: e4.originalAlt, originalHeight: e4.originalHeight, originalWidth: e4.originalWidth, originalTitle: e4.originalTitle, sizes: e4.sizes, loading: e4.loading, srcSet: e4.srcSet });
            } }, { key: "renderThumbInner", value: function(e4) {
              var t4 = this.props.onThumbnailError || this.handleImageError;
              return a().createElement("span", { className: "image-gallery-thumbnail-inner" }, a().createElement("img", { className: "image-gallery-thumbnail-image", src: e4.thumbnail, height: e4.thumbnailHeight, width: e4.thumbnailWidth, alt: e4.thumbnailAlt, title: e4.thumbnailTitle, loading: e4.thumbnailLoading, onError: t4 }), e4.thumbnailLabel && a().createElement("div", { className: "image-gallery-thumbnail-label" }, e4.thumbnailLabel));
            } }, { key: "render", value: function() {
              var e4 = this.state, n4 = e4.currentIndex, i3 = e4.isFullscreen, r4 = e4.modalFullscreen, s3 = e4.isPlaying, o3 = this.props, l3 = o3.additionalClass, u3 = o3.disableThumbnailSwipe, c2 = o3.indexSeparator, h2 = o3.isRTL, d2 = o3.items, f2 = o3.thumbnailPosition, p2 = o3.renderFullscreenButton, m2 = o3.renderCustomControls, g2 = o3.renderLeftNav, v2 = o3.renderRightNav, b2 = o3.showBullets, y2 = o3.showFullscreenButton, w2 = o3.showIndex, T2 = o3.showThumbnails, S2 = o3.showNav, O2 = o3.showPlayButton, E2 = o3.renderPlayPauseButton, k2 = this.getThumbnailStyle(), I2 = this.getSlideItems(), x2 = I2.slides, _24 = I2.thumbnails, R2 = I2.bullets, L2 = t3("image-gallery-slide-wrapper", this.getThumbnailPositionClassName(f2), { "image-gallery-rtl": h2 }), P2 = a().createElement("div", { ref: this.imageGallerySlideWrapper, className: L2 }, m2 && m2(), this.canSlide() ? a().createElement(a().Fragment, null, S2 && a().createElement(a().Fragment, null, g2(this.slideLeft, !this.canSlideLeft()), v2(this.slideRight, !this.canSlideRight())), a().createElement(ve, { className: "image-gallery-swipe", delta: 0, onSwiping: this.handleSwiping, onSwiped: this.handleOnSwiped }, a().createElement("div", { className: "image-gallery-slides" }, x2))) : a().createElement("div", { className: "image-gallery-slides" }, x2), O2 && E2(this.togglePlay, s3), b2 && a().createElement("div", { className: "image-gallery-bullets" }, a().createElement("div", { className: "image-gallery-bullets-container", role: "navigation", "aria-label": "Bullet Navigation" }, R2)), y2 && p2(this.toggleFullScreen, i3), w2 && a().createElement("div", { className: "image-gallery-index" }, a().createElement("span", { className: "image-gallery-index-current" }, n4 + 1), a().createElement("span", { className: "image-gallery-index-separator" }, c2), a().createElement("span", { className: "image-gallery-index-total" }, d2.length))), M2 = t3("image-gallery", l3, { "fullscreen-modal": r4 }), W2 = t3("image-gallery-content", this.getThumbnailPositionClassName(f2), { fullscreen: i3 }), D2 = t3("image-gallery-thumbnails-wrapper", this.getThumbnailPositionClassName(f2), { "thumbnails-wrapper-rtl": !this.isThumbnailVertical() && h2 }, { "thumbnails-swipe-horizontal": !this.isThumbnailVertical() && !u3 }, { "thumbnails-swipe-vertical": this.isThumbnailVertical() && !u3 });
              return a().createElement("div", { ref: this.imageGallery, className: M2, "aria-live": "polite" }, a().createElement("div", { className: W2 }, ("bottom" === f2 || "right" === f2) && P2, T2 && _24.length > 0 ? a().createElement(ve, { className: D2, delta: 0, onSwiping: !u3 && this.handleThumbnailSwiping, onSwiped: !u3 && this.handleOnThumbnailSwiped }, a().createElement("div", { className: "image-gallery-thumbnails", ref: this.thumbnailsWrapper, style: this.getThumbnailBarHeight() }, a().createElement("nav", { ref: this.thumbnails, className: "image-gallery-thumbnails-container", style: k2, "aria-label": "Thumbnail Navigation" }, _24))) : null, ("top" === f2 || "left" === f2) && P2));
            } }], i2 && Se(n3.prototype, i2), l2;
          }(a().Component);
          Le.propTypes = { flickThreshold: te.number, items: (0, te.arrayOf)((0, te.shape)({ bulletClass: te.string, bulletOnClick: te.func, description: te.string, original: te.string, originalHeight: te.number, originalWidth: te.number, loading: te.string, thumbnailHeight: te.number, thumbnailWidth: te.number, thumbnailLoading: te.string, fullscreen: te.string, originalAlt: te.string, originalTitle: te.string, thumbnail: te.string, thumbnailAlt: te.string, thumbnailLabel: te.string, thumbnailTitle: te.string, originalClass: te.string, thumbnailClass: te.string, renderItem: te.func, renderThumbInner: te.func, imageSet: _e, srcSet: te.string, sizes: te.string })).isRequired, showNav: te.bool, autoPlay: te.bool, lazyLoad: te.bool, infinite: te.bool, showIndex: te.bool, showBullets: te.bool, showThumbnails: te.bool, showPlayButton: te.bool, showFullscreenButton: te.bool, disableThumbnailScroll: te.bool, disableKeyDown: te.bool, disableSwipe: te.bool, disableThumbnailSwipe: te.bool, useBrowserFullscreen: te.bool, onErrorImageURL: te.string, indexSeparator: te.string, thumbnailPosition: (0, te.oneOf)(["top", "bottom", "left", "right"]), startIndex: te.number, slideDuration: te.number, slideInterval: te.number, slideOnThumbnailOver: te.bool, swipeThreshold: te.number, swipingTransitionDuration: te.number, swipingThumbnailTransitionDuration: te.number, onSlide: te.func, onBeforeSlide: te.func, onScreenChange: te.func, onPause: te.func, onPlay: te.func, onClick: te.func, onImageLoad: te.func, onImageError: te.func, onTouchMove: te.func, onTouchEnd: te.func, onTouchStart: te.func, onMouseOver: te.func, onMouseLeave: te.func, onThumbnailError: te.func, onThumbnailClick: te.func, renderCustomControls: te.func, renderLeftNav: te.func, renderRightNav: te.func, renderPlayPauseButton: te.func, renderFullscreenButton: te.func, renderItem: te.func, renderThumbInner: te.func, stopPropagation: te.bool, additionalClass: te.string, useTranslate3D: te.bool, isRTL: te.bool, useWindowKeyDown: te.bool }, Le.defaultProps = { onErrorImageURL: "", additionalClass: "", showNav: true, autoPlay: false, lazyLoad: false, infinite: true, showIndex: false, showBullets: false, showThumbnails: true, showPlayButton: true, showFullscreenButton: true, disableThumbnailScroll: false, disableKeyDown: false, disableSwipe: false, disableThumbnailSwipe: false, useTranslate3D: true, isRTL: false, useBrowserFullscreen: true, flickThreshold: 0.4, stopPropagation: false, indexSeparator: " / ", thumbnailPosition: "bottom", startIndex: 0, slideDuration: 450, swipingTransitionDuration: 0, swipingThumbnailTransitionDuration: 0, onSlide: null, onBeforeSlide: null, onScreenChange: null, onPause: null, onPlay: null, onClick: null, onImageLoad: null, onImageError: null, onTouchMove: null, onTouchEnd: null, onTouchStart: null, onMouseOver: null, onMouseLeave: null, onThumbnailError: null, onThumbnailClick: null, renderCustomControls: null, renderThumbInner: null, renderItem: null, slideInterval: 3e3, slideOnThumbnailOver: false, swipeThreshold: 30, renderLeftNav: function(e3, t4) {
            return a().createElement(ce, { onClick: e3, disabled: t4 });
          }, renderRightNav: function(e3, t4) {
            return a().createElement(de, { onClick: e3, disabled: t4 });
          }, renderPlayPauseButton: function(e3, t4) {
            return a().createElement(pe, { onClick: e3, isPlaying: t4 });
          }, renderFullscreenButton: function(e3, t4) {
            return a().createElement(le, { onClick: e3, isFullscreen: t4 });
          }, useWindowKeyDown: true };
          const Pe = Le;
        })(), r2;
      })();
    });
  }
});

// node_modules/attr-accept/dist/es/index.js
var require_es2 = __commonJS({
  "node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        if (acceptedFilesArray.length === 0) {
          return true;
        }
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "node_modules/emoji-regex/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options2) {
      options2 = options2 || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isFinite(val)) {
        return options2.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug2.debug = createDebug2;
      createDebug2.default = createDebug2;
      createDebug2.coerce = coerce;
      createDebug2.disable = disable2;
      createDebug2.enable = enable;
      createDebug2.enabled = enabled;
      createDebug2.humanize = require_ms();
      createDebug2.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug2[key] = env[key];
      });
      createDebug2.names = [];
      createDebug2.skips = [];
      createDebug2.formatters = {};
      function selectColor2(namespace) {
        let hash3 = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash3 = (hash3 << 5) - hash3 + namespace.charCodeAt(i);
          hash3 |= 0;
        }
        return createDebug2.colors[Math.abs(hash3) % createDebug2.colors.length];
      }
      createDebug2.selectColor = selectColor2;
      function createDebug2(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self2 = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug2.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index4 = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index4++;
            const formatter = createDebug2.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index4];
              match = formatter.call(self2, val);
              args.splice(index4, 1);
              index4--;
            }
            return match;
          });
          createDebug2.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug2.log;
          logFn.apply(self2, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug2.useColors();
        debug2.color = createDebug2.selectColor(namespace);
        debug2.extend = extend2;
        debug2.destroy = createDebug2.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug2.namespaces) {
              namespacesCache = createDebug2.namespaces;
              enabledCache = createDebug2.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug2.init === "function") {
          createDebug2.init(debug2);
        }
        return debug2;
      }
      function extend2(namespace, delimiter) {
        const newDebug = createDebug2(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug2.save(namespaces);
        createDebug2.namespaces = namespaces;
        createDebug2.names = [];
        createDebug2.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug2.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug2.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable2() {
        const namespaces = [
          ...createDebug2.names.map(toNamespace),
          ...createDebug2.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug2.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug2.skips.length; i < len; i++) {
          if (createDebug2.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug2.names.length; i < len; i++) {
          if (createDebug2.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp2) {
        return regexp2.toString().substring(2, regexp2.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug2.enable(createDebug2.load());
      return createDebug2;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index4 = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index4++;
        if (match === "%c") {
          lastC = index4;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error2) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports.storage.getItem("debug");
      } catch (error2) {
      }
      if (!r2 && typeof process !== "undefined" && "env" in process) {
        r2 = process.env.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error2) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType3(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment3 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense2 = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement3(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment3;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense2;
        exports.SuspenseList = SuspenseList;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement3;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isSuspenseList = isSuspenseList;
        exports.isValidElementType = isValidElementType3;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/inline-style-parser/index.js
var require_inline_style_parser = __commonJS({
  "node_modules/inline-style-parser/index.js"(exports, module) {
    var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
    var NEWLINE_REGEX = /\n/g;
    var WHITESPACE_REGEX = /^\s*/;
    var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
    var COLON_REGEX = /^:\s*/;
    var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
    var SEMICOLON_REGEX = /^[;\s]*/;
    var TRIM_REGEX = /^\s+|\s+$/g;
    var NEWLINE = "\n";
    var FORWARD_SLASH = "/";
    var ASTERISK2 = "*";
    var EMPTY_STRING = "";
    var TYPE_COMMENT = "comment";
    var TYPE_DECLARATION = "declaration";
    module.exports = function(style, options2) {
      if (typeof style !== "string") {
        throw new TypeError("First argument must be a string");
      }
      if (!style) return [];
      options2 = options2 || {};
      var lineno = 1;
      var column = 1;
      function updatePosition(str) {
        var lines2 = str.match(NEWLINE_REGEX);
        if (lines2) lineno += lines2.length;
        var i = str.lastIndexOf(NEWLINE);
        column = ~i ? str.length - i : column + str.length;
      }
      function position3() {
        var start2 = { line: lineno, column };
        return function(node2) {
          node2.position = new Position(start2);
          whitespace3();
          return node2;
        };
      }
      function Position(start2) {
        this.start = start2;
        this.end = { line: lineno, column };
        this.source = options2.source;
      }
      Position.prototype.content = style;
      var errorsList = [];
      function error2(msg) {
        var err = new Error(
          options2.source + ":" + lineno + ":" + column + ": " + msg
        );
        err.reason = msg;
        err.filename = options2.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options2.silent) {
          errorsList.push(err);
        } else {
          throw err;
        }
      }
      function match(re) {
        var m = re.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
      }
      function whitespace3() {
        match(WHITESPACE_REGEX);
      }
      function comments(rules) {
        var c;
        rules = rules || [];
        while (c = comment()) {
          if (c !== false) {
            rules.push(c);
          }
        }
        return rules;
      }
      function comment() {
        var pos = position3();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK2 != style.charAt(1)) return;
        var i = 2;
        while (EMPTY_STRING != style.charAt(i) && (ASTERISK2 != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {
          ++i;
        }
        i += 2;
        if (EMPTY_STRING === style.charAt(i - 1)) {
          return error2("End of comment missing");
        }
        var str = style.slice(2, i - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i);
        column += 2;
        return pos({
          type: TYPE_COMMENT,
          comment: str
        });
      }
      function declaration() {
        var pos = position3();
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();
        if (!match(COLON_REGEX)) return error2("property missing ':'");
        var val = match(VALUE_REGEX);
        var ret = pos({
          type: TYPE_DECLARATION,
          property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
          value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        match(SEMICOLON_REGEX);
        return ret;
      }
      function declarations() {
        var decls = [];
        comments(decls);
        var decl;
        while (decl = declaration()) {
          if (decl !== false) {
            decls.push(decl);
            comments(decls);
          }
        }
        return decls;
      }
      whitespace3();
      return declarations();
    };
    function trim(str) {
      return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
    }
  }
});

// node_modules/style-to-object/index.js
var require_style_to_object = __commonJS({
  "node_modules/style-to-object/index.js"(exports, module) {
    var parse2 = require_inline_style_parser();
    function StyleToObject2(style, iterator) {
      var output2 = null;
      if (!style || typeof style !== "string") {
        return output2;
      }
      var declaration;
      var declarations = parse2(style);
      var hasIterator = typeof iterator === "function";
      var property;
      var value;
      for (var i = 0, len = declarations.length; i < len; i++) {
        declaration = declarations[i];
        property = declaration.property;
        value = declaration.value;
        if (hasIterator) {
          iterator(property, value, declaration);
        } else if (value) {
          output2 || (output2 = {});
          output2[property] = value;
        }
      }
      return output2;
    }
    module.exports = StyleToObject2;
    module.exports.default = StyleToObject2;
  }
});

// node_modules/lodash.uniqby/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.uniqby/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index4 = -1, length = array ? array.length : 0;
      while (++index4 < length) {
        if (comparator(value, array[index4])) {
          return true;
        }
      }
      return false;
    }
    function arraySome(array, predicate) {
      var index4 = -1, length = array ? array.length : 0;
      while (++index4 < length) {
        if (predicate(array[index4], index4, array)) {
          return true;
        }
      }
      return false;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index4 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index4-- : ++index4 < length) {
        if (predicate(array[index4], index4, array)) {
          return index4;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index4 = fromIndex - 1, length = array.length;
      while (++index4 < length) {
        if (array[index4] === value) {
          return index4;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n, iteratee) {
      var index4 = -1, result = Array(n);
      while (++index4 < n) {
        result[index4] = iteratee(index4);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map2) {
      var index4 = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index4] = [key, value];
      });
      return result;
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    function setToArray(set) {
      var index4 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index4] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root2, "DataView");
    var Map2 = getNative(root2, "Map");
    var Promise2 = getNative(root2, "Promise");
    var Set2 = getNative(root2, "Set");
    var WeakMap2 = getNative(root2, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index4 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index4 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index4 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index4, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      return index4 < 0 ? void 0 : data[index4][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        data.push([key, value]);
      } else {
        data[index4][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index4 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values2) {
      var index4 = -1, length = values2 ? values2.length : 0;
      this.__data__ = new MapCache();
      while (++index4 < length) {
        this.add(values2[index4]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path3) {
      path3 = isKey(path3, object) ? [path3] : castPath(path3);
      var index4 = 0, length = path3.length;
      while (object != null && index4 < length) {
        object = object[toKey(path3[index4++])];
      }
      return index4 && index4 == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject2(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index4 = matchData.length, length = index4, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index4--) {
        var data = matchData[index4];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index4 < length) {
        data = matchData[index4];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty2.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path3, srcValue) {
      if (isKey(path3) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path3), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path3);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path3) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePropertyDeep(path3) {
      return function(object) {
        return baseGet(object, path3);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function baseUniq(array, iteratee, comparator) {
      var index4 = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index4 < length) {
          var value = array[index4], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop6 : function(values2) {
      return new Set2(values2);
    };
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index4 = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index4 < arrLength) {
        var arrValue = array[index4], othValue = other[index4];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index4, other, array, stack) : customizer(arrValue, othValue, index4, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert3 = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert3 || (convert3 = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert3(object), convert3(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys2(object), objLength = objProps.length, othProps = keys2(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index4 = objLength;
      while (index4--) {
        var key = objProps[index4];
        if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index4 < objLength) {
        key = objProps[index4];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys2(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path3, hasFunc) {
      path3 = isKey(path3, object) ? [path3] : castPath(path3);
      var result, index4 = -1, length = path3.length;
      while (++index4 < length) {
        var key = toKey(path3[index4]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject2(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string3) {
      string3 = toString2(string3);
      var result = [];
      if (reLeadingDot.test(string3)) {
        result.push("");
      }
      string3.replace(rePropName, function(match, number2, quote, string4) {
        result.push(quote ? string4.replace(reEscapeChar, "$1") : number2 || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function uniqBy9(array, iteratee) {
      return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
    }
    function memoize(func, resolver2) {
      if (typeof func != "function" || resolver2 && typeof resolver2 != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty2.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    function get2(object, path3, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path3);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path3) {
      return object != null && hasPath(object, path3, baseHasIn);
    }
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function identity(value) {
      return value;
    }
    function noop6() {
    }
    function property(path3) {
      return isKey(path3) ? baseProperty(toKey(path3)) : basePropertyDeep(path3);
    }
    module.exports = uniqBy9;
  }
});

// node_modules/textarea-caret/index.js
var require_textarea_caret = __commonJS({
  "node_modules/textarea-caret/index.js"(exports, module) {
    (function() {
      var properties = [
        "direction",
        // RTL support
        "boxSizing",
        "width",
        // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does
        "height",
        "overflowX",
        "overflowY",
        // copy the scrollbar for IE
        "borderTopWidth",
        "borderRightWidth",
        "borderBottomWidth",
        "borderLeftWidth",
        "borderStyle",
        "paddingTop",
        "paddingRight",
        "paddingBottom",
        "paddingLeft",
        // https://developer.mozilla.org/en-US/docs/Web/CSS/font
        "fontStyle",
        "fontVariant",
        "fontWeight",
        "fontStretch",
        "fontSize",
        "fontSizeAdjust",
        "lineHeight",
        "fontFamily",
        "textAlign",
        "textTransform",
        "textIndent",
        "textDecoration",
        // might not make a difference, but better be safe
        "letterSpacing",
        "wordSpacing",
        "tabSize",
        "MozTabSize"
      ];
      var isBrowser = typeof window !== "undefined";
      var isFirefox = isBrowser && window.mozInnerScreenX != null;
      function getCaretCoordinates2(element3, position3, options2) {
        if (!isBrowser) {
          throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");
        }
        var debug2 = options2 && options2.debug || false;
        if (debug2) {
          var el = document.querySelector("#input-textarea-caret-position-mirror-div");
          if (el) el.parentNode.removeChild(el);
        }
        var div = document.createElement("div");
        div.id = "input-textarea-caret-position-mirror-div";
        document.body.appendChild(div);
        var style = div.style;
        var computed = window.getComputedStyle ? window.getComputedStyle(element3) : element3.currentStyle;
        var isInput = element3.nodeName === "INPUT";
        style.whiteSpace = "pre-wrap";
        if (!isInput)
          style.wordWrap = "break-word";
        style.position = "absolute";
        if (!debug2)
          style.visibility = "hidden";
        properties.forEach(function(prop) {
          if (isInput && prop === "lineHeight") {
            style.lineHeight = computed.height;
          } else {
            style[prop] = computed[prop];
          }
        });
        if (isFirefox) {
          if (element3.scrollHeight > parseInt(computed.height))
            style.overflowY = "scroll";
        } else {
          style.overflow = "hidden";
        }
        div.textContent = element3.value.substring(0, position3);
        if (isInput)
          div.textContent = div.textContent.replace(/\s/g, " ");
        var span = document.createElement("span");
        span.textContent = element3.value.substring(position3) || ".";
        div.appendChild(span);
        var coordinates = {
          top: span.offsetTop + parseInt(computed["borderTopWidth"]),
          left: span.offsetLeft + parseInt(computed["borderLeftWidth"]),
          height: parseInt(computed["lineHeight"])
        };
        if (debug2) {
          span.style.backgroundColor = "#aaa";
        } else {
          document.body.removeChild(div);
        }
        return coordinates;
      }
      if (typeof module != "undefined" && typeof module.exports != "undefined") {
        module.exports = getCaretCoordinates2;
      } else if (isBrowser) {
        window.getCaretCoordinates = getCaretCoordinates2;
      }
    })();
  }
});

// node_modules/lodash.debounce/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root2.Date.now();
    };
    function debounce5(func, wait, options2) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options2)) {
        leading = !!options2.leading;
        maxing = "maxWait" in options2;
        maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce5;
  }
});

// node_modules/lodash.defaultsdeep/index.js
var require_lodash4 = __commonJS({
  "node_modules/lodash.defaultsdeep/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index4 = -1, result = Array(n);
      while (++index4 < n) {
        result[index4] = iteratee(index4);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root2.Buffer : void 0;
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root2, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index4 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index4, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      return index4 < 0 ? void 0 : data[index4][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index4][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string3) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string3),
        "writable": true
      });
    };
    function cloneBuffer(buffer2, isDeep) {
      if (isDeep) {
        return buffer2.slice();
      }
      var length = buffer2.length, result = allocUnsafe ? allocUnsafe(length) : new buffer2.constructor(length);
      buffer2.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index4 = -1, length = source.length;
      array || (array = Array(length));
      while (++index4 < length) {
        array[index4] = source[index4];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index4 = -1, length = props.length;
      while (++index4 < length) {
        var key = props[index4];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index4 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index4 < length) {
          var source = sources[index4];
          if (source) {
            assigner(object, source, index4, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index4 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index4];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject2(objValue) && isObject2(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, void 0, customDefaultsMerge, stack);
        stack["delete"](srcValue);
      }
      return objValue;
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index4, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index4;
      if (type == "number" ? isArrayLike(object) && isIndex(index4, object.length) : type == "string" && index4 in object) {
        return eq(object[index4], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start2, transform3) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index4 = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
        while (++index4 < length) {
          array[index4] = args[start2 + index4];
        }
        index4 = -1;
        var otherArgs = Array(start2 + 1);
        while (++index4 < start2) {
          otherArgs[index4] = args[index4];
        }
        otherArgs[start2] = transform3(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer2 = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    var defaultsDeep2 = baseRest(function(args) {
      args.push(void 0, customDefaultsMerge);
      return apply(mergeWith2, void 0, args);
    });
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = defaultsDeep2;
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning2 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning2 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/fix-webm-duration/fix-webm-duration.js
var require_fix_webm_duration = __commonJS({
  "node_modules/fix-webm-duration/fix-webm-duration.js"(exports, module) {
    (function(name, definition2) {
      if (typeof define === "function" && define.amd) {
        define(definition2);
      } else if (typeof module !== "undefined" && module.exports) {
        module.exports = definition2();
      } else {
        window.ysFixWebmDuration = definition2();
      }
    })("fix-webm-duration", function() {
      var sections = {
        172351395: { name: "EBML", type: "Container" },
        646: { name: "EBMLVersion", type: "Uint" },
        759: { name: "EBMLReadVersion", type: "Uint" },
        754: { name: "EBMLMaxIDLength", type: "Uint" },
        755: { name: "EBMLMaxSizeLength", type: "Uint" },
        642: { name: "DocType", type: "String" },
        647: { name: "DocTypeVersion", type: "Uint" },
        645: { name: "DocTypeReadVersion", type: "Uint" },
        108: { name: "Void", type: "Binary" },
        63: { name: "CRC-32", type: "Binary" },
        190023271: { name: "SignatureSlot", type: "Container" },
        16010: { name: "SignatureAlgo", type: "Uint" },
        16026: { name: "SignatureHash", type: "Uint" },
        16037: { name: "SignaturePublicKey", type: "Binary" },
        16053: { name: "Signature", type: "Binary" },
        15963: { name: "SignatureElements", type: "Container" },
        15995: { name: "SignatureElementList", type: "Container" },
        9522: { name: "SignedElement", type: "Binary" },
        139690087: { name: "Segment", type: "Container" },
        21863284: { name: "SeekHead", type: "Container" },
        3515: { name: "Seek", type: "Container" },
        5035: { name: "SeekID", type: "Binary" },
        5036: { name: "SeekPosition", type: "Uint" },
        88713574: { name: "Info", type: "Container" },
        13220: { name: "SegmentUID", type: "Binary" },
        13188: { name: "SegmentFilename", type: "String" },
        1882403: { name: "PrevUID", type: "Binary" },
        1868715: { name: "PrevFilename", type: "String" },
        2013475: { name: "NextUID", type: "Binary" },
        1999803: { name: "NextFilename", type: "String" },
        1092: { name: "SegmentFamily", type: "Binary" },
        10532: { name: "ChapterTranslate", type: "Container" },
        10748: { name: "ChapterTranslateEditionUID", type: "Uint" },
        10687: { name: "ChapterTranslateCodec", type: "Uint" },
        10661: { name: "ChapterTranslateID", type: "Binary" },
        710577: { name: "TimecodeScale", type: "Uint" },
        1161: { name: "Duration", type: "Float" },
        1121: { name: "DateUTC", type: "Date" },
        15273: { name: "Title", type: "String" },
        3456: { name: "MuxingApp", type: "String" },
        5953: { name: "WritingApp", type: "String" },
        // 0xf43b675: { name: 'Cluster', type: 'Container' },
        103: { name: "Timecode", type: "Uint" },
        6228: { name: "SilentTracks", type: "Container" },
        6359: { name: "SilentTrackNumber", type: "Uint" },
        39: { name: "Position", type: "Uint" },
        43: { name: "PrevSize", type: "Uint" },
        35: { name: "SimpleBlock", type: "Binary" },
        32: { name: "BlockGroup", type: "Container" },
        33: { name: "Block", type: "Binary" },
        34: { name: "BlockVirtual", type: "Binary" },
        13729: { name: "BlockAdditions", type: "Container" },
        38: { name: "BlockMore", type: "Container" },
        110: { name: "BlockAddID", type: "Uint" },
        37: { name: "BlockAdditional", type: "Binary" },
        27: { name: "BlockDuration", type: "Uint" },
        122: { name: "ReferencePriority", type: "Uint" },
        123: { name: "ReferenceBlock", type: "Int" },
        125: { name: "ReferenceVirtual", type: "Int" },
        36: { name: "CodecState", type: "Binary" },
        13730: { name: "DiscardPadding", type: "Int" },
        14: { name: "Slices", type: "Container" },
        104: { name: "TimeSlice", type: "Container" },
        76: { name: "LaceNumber", type: "Uint" },
        77: { name: "FrameNumber", type: "Uint" },
        75: { name: "BlockAdditionID", type: "Uint" },
        78: { name: "Delay", type: "Uint" },
        79: { name: "SliceDuration", type: "Uint" },
        72: { name: "ReferenceFrame", type: "Container" },
        73: { name: "ReferenceOffset", type: "Uint" },
        74: { name: "ReferenceTimeCode", type: "Uint" },
        47: { name: "EncryptedBlock", type: "Binary" },
        106212971: { name: "Tracks", type: "Container" },
        46: { name: "TrackEntry", type: "Container" },
        87: { name: "TrackNumber", type: "Uint" },
        13253: { name: "TrackUID", type: "Uint" },
        3: { name: "TrackType", type: "Uint" },
        57: { name: "FlagEnabled", type: "Uint" },
        8: { name: "FlagDefault", type: "Uint" },
        5546: { name: "FlagForced", type: "Uint" },
        28: { name: "FlagLacing", type: "Uint" },
        11751: { name: "MinCache", type: "Uint" },
        11768: { name: "MaxCache", type: "Uint" },
        254851: { name: "DefaultDuration", type: "Uint" },
        216698: { name: "DefaultDecodedFieldDuration", type: "Uint" },
        209231: { name: "TrackTimecodeScale", type: "Float" },
        4991: { name: "TrackOffset", type: "Int" },
        5614: { name: "MaxBlockAdditionID", type: "Uint" },
        4974: { name: "Name", type: "String" },
        177564: { name: "Language", type: "String" },
        6: { name: "CodecID", type: "String" },
        9122: { name: "CodecPrivate", type: "Binary" },
        362120: { name: "CodecName", type: "String" },
        13382: { name: "AttachmentLink", type: "Uint" },
        1742487: { name: "CodecSettings", type: "String" },
        1785920: { name: "CodecInfoURL", type: "String" },
        438848: { name: "CodecDownloadURL", type: "String" },
        42: { name: "CodecDecodeAll", type: "Uint" },
        12203: { name: "TrackOverlay", type: "Uint" },
        5802: { name: "CodecDelay", type: "Uint" },
        5819: { name: "SeekPreRoll", type: "Uint" },
        9764: { name: "TrackTranslate", type: "Container" },
        9980: { name: "TrackTranslateEditionUID", type: "Uint" },
        9919: { name: "TrackTranslateCodec", type: "Uint" },
        9893: { name: "TrackTranslateTrackID", type: "Binary" },
        96: { name: "Video", type: "Container" },
        26: { name: "FlagInterlaced", type: "Uint" },
        5048: { name: "StereoMode", type: "Uint" },
        5056: { name: "AlphaMode", type: "Uint" },
        5049: { name: "OldStereoMode", type: "Uint" },
        48: { name: "PixelWidth", type: "Uint" },
        58: { name: "PixelHeight", type: "Uint" },
        5290: { name: "PixelCropBottom", type: "Uint" },
        5307: { name: "PixelCropTop", type: "Uint" },
        5324: { name: "PixelCropLeft", type: "Uint" },
        5341: { name: "PixelCropRight", type: "Uint" },
        5296: { name: "DisplayWidth", type: "Uint" },
        5306: { name: "DisplayHeight", type: "Uint" },
        5298: { name: "DisplayUnit", type: "Uint" },
        5299: { name: "AspectRatioType", type: "Uint" },
        963876: { name: "ColourSpace", type: "Binary" },
        1029411: { name: "GammaValue", type: "Float" },
        230371: { name: "FrameRate", type: "Float" },
        97: { name: "Audio", type: "Container" },
        53: { name: "SamplingFrequency", type: "Float" },
        14517: { name: "OutputSamplingFrequency", type: "Float" },
        31: { name: "Channels", type: "Uint" },
        15739: { name: "ChannelPositions", type: "Binary" },
        8804: { name: "BitDepth", type: "Uint" },
        98: { name: "TrackOperation", type: "Container" },
        99: { name: "TrackCombinePlanes", type: "Container" },
        100: { name: "TrackPlane", type: "Container" },
        101: { name: "TrackPlaneUID", type: "Uint" },
        102: { name: "TrackPlaneType", type: "Uint" },
        105: { name: "TrackJoinBlocks", type: "Container" },
        109: { name: "TrackJoinUID", type: "Uint" },
        64: { name: "TrickTrackUID", type: "Uint" },
        65: { name: "TrickTrackSegmentUID", type: "Binary" },
        70: { name: "TrickTrackFlag", type: "Uint" },
        71: { name: "TrickMasterTrackUID", type: "Uint" },
        68: { name: "TrickMasterTrackSegmentUID", type: "Binary" },
        11648: { name: "ContentEncodings", type: "Container" },
        8768: { name: "ContentEncoding", type: "Container" },
        4145: { name: "ContentEncodingOrder", type: "Uint" },
        4146: { name: "ContentEncodingScope", type: "Uint" },
        4147: { name: "ContentEncodingType", type: "Uint" },
        4148: { name: "ContentCompression", type: "Container" },
        596: { name: "ContentCompAlgo", type: "Uint" },
        597: { name: "ContentCompSettings", type: "Binary" },
        4149: { name: "ContentEncryption", type: "Container" },
        2017: { name: "ContentEncAlgo", type: "Uint" },
        2018: { name: "ContentEncKeyID", type: "Binary" },
        2019: { name: "ContentSignature", type: "Binary" },
        2020: { name: "ContentSigKeyID", type: "Binary" },
        2021: { name: "ContentSigAlgo", type: "Uint" },
        2022: { name: "ContentSigHashAlgo", type: "Uint" },
        206814059: { name: "Cues", type: "Container" },
        59: { name: "CuePoint", type: "Container" },
        51: { name: "CueTime", type: "Uint" },
        55: { name: "CueTrackPositions", type: "Container" },
        119: { name: "CueTrack", type: "Uint" },
        113: { name: "CueClusterPosition", type: "Uint" },
        112: { name: "CueRelativePosition", type: "Uint" },
        50: { name: "CueDuration", type: "Uint" },
        4984: { name: "CueBlockNumber", type: "Uint" },
        106: { name: "CueCodecState", type: "Uint" },
        91: { name: "CueReference", type: "Container" },
        22: { name: "CueRefTime", type: "Uint" },
        23: { name: "CueRefCluster", type: "Uint" },
        4959: { name: "CueRefNumber", type: "Uint" },
        107: { name: "CueRefCodecState", type: "Uint" },
        155296873: { name: "Attachments", type: "Container" },
        8615: { name: "AttachedFile", type: "Container" },
        1662: { name: "FileDescription", type: "String" },
        1646: { name: "FileName", type: "String" },
        1632: { name: "FileMimeType", type: "String" },
        1628: { name: "FileData", type: "Binary" },
        1710: { name: "FileUID", type: "Uint" },
        1653: { name: "FileReferral", type: "Binary" },
        1633: { name: "FileUsedStartTime", type: "Uint" },
        1634: { name: "FileUsedEndTime", type: "Uint" },
        4433776: { name: "Chapters", type: "Container" },
        1465: { name: "EditionEntry", type: "Container" },
        1468: { name: "EditionUID", type: "Uint" },
        1469: { name: "EditionFlagHidden", type: "Uint" },
        1499: { name: "EditionFlagDefault", type: "Uint" },
        1501: { name: "EditionFlagOrdered", type: "Uint" },
        54: { name: "ChapterAtom", type: "Container" },
        13252: { name: "ChapterUID", type: "Uint" },
        5716: { name: "ChapterStringUID", type: "String" },
        17: { name: "ChapterTimeStart", type: "Uint" },
        18: { name: "ChapterTimeEnd", type: "Uint" },
        24: { name: "ChapterFlagHidden", type: "Uint" },
        1432: { name: "ChapterFlagEnabled", type: "Uint" },
        11879: { name: "ChapterSegmentUID", type: "Binary" },
        11964: { name: "ChapterSegmentEditionUID", type: "Uint" },
        9155: { name: "ChapterPhysicalEquiv", type: "Uint" },
        15: { name: "ChapterTrack", type: "Container" },
        9: { name: "ChapterTrackNumber", type: "Uint" },
        0: { name: "ChapterDisplay", type: "Container" },
        5: { name: "ChapString", type: "String" },
        892: { name: "ChapLanguage", type: "String" },
        894: { name: "ChapCountry", type: "String" },
        10564: { name: "ChapProcess", type: "Container" },
        10581: { name: "ChapProcessCodecID", type: "Uint" },
        1293: { name: "ChapProcessPrivate", type: "Binary" },
        10513: { name: "ChapProcessCommand", type: "Container" },
        10530: { name: "ChapProcessTime", type: "Uint" },
        10547: { name: "ChapProcessData", type: "Binary" },
        39109479: { name: "Tags", type: "Container" },
        13171: { name: "Tag", type: "Container" },
        9152: { name: "Targets", type: "Container" },
        10442: { name: "TargetTypeValue", type: "Uint" },
        9162: { name: "TargetType", type: "String" },
        9157: { name: "TagTrackUID", type: "Uint" },
        9161: { name: "TagEditionUID", type: "Uint" },
        9156: { name: "TagChapterUID", type: "Uint" },
        9158: { name: "TagAttachmentUID", type: "Uint" },
        10184: { name: "SimpleTag", type: "Container" },
        1443: { name: "TagName", type: "String" },
        1146: { name: "TagLanguage", type: "String" },
        1156: { name: "TagDefault", type: "Uint" },
        1159: { name: "TagString", type: "String" },
        1157: { name: "TagBinary", type: "Binary" }
      };
      function doInherit(newClass, baseClass) {
        newClass.prototype = Object.create(baseClass.prototype);
        newClass.prototype.constructor = newClass;
      }
      function WebmBase(name, type) {
        this.name = name || "Unknown";
        this.type = type || "Unknown";
      }
      WebmBase.prototype.updateBySource = function() {
      };
      WebmBase.prototype.setSource = function(source) {
        this.source = source;
        this.updateBySource();
      };
      WebmBase.prototype.updateByData = function() {
      };
      WebmBase.prototype.setData = function(data) {
        this.data = data;
        this.updateByData();
      };
      function WebmUint(name, type) {
        WebmBase.call(this, name, type || "Uint");
      }
      doInherit(WebmUint, WebmBase);
      function padHex(hex) {
        return hex.length % 2 === 1 ? "0" + hex : hex;
      }
      WebmUint.prototype.updateBySource = function() {
        this.data = "";
        for (var i = 0; i < this.source.length; i++) {
          var hex = this.source[i].toString(16);
          this.data += padHex(hex);
        }
      };
      WebmUint.prototype.updateByData = function() {
        var length = this.data.length / 2;
        this.source = new Uint8Array(length);
        for (var i = 0; i < length; i++) {
          var hex = this.data.substr(i * 2, 2);
          this.source[i] = parseInt(hex, 16);
        }
      };
      WebmUint.prototype.getValue = function() {
        return parseInt(this.data, 16);
      };
      WebmUint.prototype.setValue = function(value) {
        this.setData(padHex(value.toString(16)));
      };
      function WebmFloat(name, type) {
        WebmBase.call(this, name, type || "Float");
      }
      doInherit(WebmFloat, WebmBase);
      WebmFloat.prototype.getFloatArrayType = function() {
        return this.source && this.source.length === 4 ? Float32Array : Float64Array;
      };
      WebmFloat.prototype.updateBySource = function() {
        var byteArray = this.source.reverse();
        var floatArrayType = this.getFloatArrayType();
        var floatArray = new floatArrayType(byteArray.buffer);
        this.data = floatArray[0];
      };
      WebmFloat.prototype.updateByData = function() {
        var floatArrayType = this.getFloatArrayType();
        var floatArray = new floatArrayType([this.data]);
        var byteArray = new Uint8Array(floatArray.buffer);
        this.source = byteArray.reverse();
      };
      WebmFloat.prototype.getValue = function() {
        return this.data;
      };
      WebmFloat.prototype.setValue = function(value) {
        this.setData(value);
      };
      function WebmContainer(name, type) {
        WebmBase.call(this, name, type || "Container");
      }
      doInherit(WebmContainer, WebmBase);
      WebmContainer.prototype.readByte = function() {
        return this.source[this.offset++];
      };
      WebmContainer.prototype.readUint = function() {
        var firstByte = this.readByte();
        var bytes = 8 - firstByte.toString(2).length;
        var value = firstByte - (1 << 7 - bytes);
        for (var i = 0; i < bytes; i++) {
          value *= 256;
          value += this.readByte();
        }
        return value;
      };
      WebmContainer.prototype.updateBySource = function() {
        this.data = [];
        for (this.offset = 0; this.offset < this.source.length; this.offset = end2) {
          var id = this.readUint();
          var len = this.readUint();
          var end2 = Math.min(this.offset + len, this.source.length);
          var data = this.source.slice(this.offset, end2);
          var info = sections[id] || { name: "Unknown", type: "Unknown" };
          var ctr = WebmBase;
          switch (info.type) {
            case "Container":
              ctr = WebmContainer;
              break;
            case "Uint":
              ctr = WebmUint;
              break;
            case "Float":
              ctr = WebmFloat;
              break;
          }
          var section = new ctr(info.name, info.type);
          section.setSource(data);
          this.data.push({
            id,
            idHex: id.toString(16),
            data: section
          });
        }
      };
      WebmContainer.prototype.writeUint = function(x, draft) {
        for (var bytes = 1, flag = 128; x >= flag && bytes < 8; bytes++, flag *= 128) {
        }
        if (!draft) {
          var value = flag + x;
          for (var i = bytes - 1; i >= 0; i--) {
            var c = value % 256;
            this.source[this.offset + i] = c;
            value = (value - c) / 256;
          }
        }
        this.offset += bytes;
      };
      WebmContainer.prototype.writeSections = function(draft) {
        this.offset = 0;
        for (var i = 0; i < this.data.length; i++) {
          var section = this.data[i], content3 = section.data.source, contentLength = content3.length;
          this.writeUint(section.id, draft);
          this.writeUint(contentLength, draft);
          if (!draft) {
            this.source.set(content3, this.offset);
          }
          this.offset += contentLength;
        }
        return this.offset;
      };
      WebmContainer.prototype.updateByData = function() {
        var length = this.writeSections("draft");
        this.source = new Uint8Array(length);
        this.writeSections();
      };
      WebmContainer.prototype.getSectionById = function(id) {
        for (var i = 0; i < this.data.length; i++) {
          var section = this.data[i];
          if (section.id === id) {
            return section.data;
          }
        }
        return null;
      };
      function WebmFile(source) {
        WebmContainer.call(this, "File", "File");
        this.setSource(source);
      }
      doInherit(WebmFile, WebmContainer);
      WebmFile.prototype.fixDuration = function(duration, options2) {
        var logger = options2 && options2.logger;
        if (logger === void 0) {
          logger = function(message) {
            console.log(message);
          };
        } else if (!logger) {
          logger = function() {
          };
        }
        var segmentSection = this.getSectionById(139690087);
        if (!segmentSection) {
          logger("[fix-webm-duration] Segment section is missing");
          return false;
        }
        var infoSection = segmentSection.getSectionById(88713574);
        if (!infoSection) {
          logger("[fix-webm-duration] Info section is missing");
          return false;
        }
        var timeScaleSection = infoSection.getSectionById(710577);
        if (!timeScaleSection) {
          logger("[fix-webm-duration] TimecodeScale section is missing");
          return false;
        }
        var durationSection = infoSection.getSectionById(1161);
        if (durationSection) {
          if (durationSection.getValue() <= 0) {
            logger(`[fix-webm-duration] Duration section is present, but the value is ${durationSection.getValue()}`);
            durationSection.setValue(duration);
          } else {
            logger(`[fix-webm-duration] Duration section is present, and the value is ${durationSection.getValue()}`);
            return false;
          }
        } else {
          logger("[fix-webm-duration] Duration section is missing");
          durationSection = new WebmFloat("Duration", "Float");
          durationSection.setValue(duration);
          infoSection.data.push({
            id: 1161,
            data: durationSection
          });
        }
        timeScaleSection.setValue(1e6);
        infoSection.updateByData();
        segmentSection.updateByData();
        this.updateByData();
        return true;
      };
      WebmFile.prototype.toBlob = function(mimeType) {
        return new Blob([this.source.buffer], { type: mimeType || "video/webm" });
      };
      function fixWebmDuration2(blob, duration, callback, options2) {
        if (typeof callback === "object") {
          options2 = callback;
          callback = void 0;
        }
        if (!callback) {
          return new Promise(function(resolve) {
            fixWebmDuration2(blob, duration, resolve, options2);
          });
        }
        try {
          var reader = new FileReader();
          reader.onloadend = function() {
            try {
              var file = new WebmFile(new Uint8Array(reader.result));
              if (file.fixDuration(duration, options2)) {
                blob = file.toBlob(blob.type);
              }
            } catch (ex) {
            }
            callback(blob);
          };
          reader.readAsArrayBuffer(blob);
        } catch (ex) {
          callback(blob);
        }
      }
      fixWebmDuration2.default = fixWebmDuration2;
      return fixWebmDuration2;
    });
  }
});

// node_modules/lodash.mergewith/index.js
var require_lodash5 = __commonJS({
  "node_modules/lodash.mergewith/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index4 = -1, result = Array(n);
      while (++index4 < n) {
        result[index4] = iteratee(index4);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root2.Buffer : void 0;
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root2, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index4 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index4, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      return index4 < 0 ? void 0 : data[index4][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index4 = assocIndexOf(data, key);
      if (index4 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index4][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index4 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index4 < length) {
        var entry = entries[index4];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string3) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string3),
        "writable": true
      });
    };
    function cloneBuffer(buffer2, isDeep) {
      if (isDeep) {
        return buffer2.slice();
      }
      var length = buffer2.length, result = allocUnsafe ? allocUnsafe(length) : new buffer2.constructor(length);
      buffer2.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index4 = -1, length = source.length;
      array || (array = Array(length));
      while (++index4 < length) {
        array[index4] = source[index4];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index4 = -1, length = props.length;
      while (++index4 < length) {
        var key = props[index4];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index4 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index4 < length) {
          var source = sources[index4];
          if (source) {
            assigner(object, source, index4, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index4 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index4];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index4, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index4;
      if (type == "number" ? isArrayLike(object) && isIndex(index4, object.length) : type == "string" && index4 in object) {
        return eq(object[index4], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start2, transform3) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index4 = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
        while (++index4 < length) {
          array[index4] = args[start2 + index4];
        }
        index4 = -1;
        var otherArgs = Array(start2 + 1);
        while (++index4 < start2) {
          otherArgs[index4] = args[index4];
        }
        otherArgs[start2] = transform3(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer2 = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = mergeWith2;
  }
});

// node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t2 = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _23 = { label: 0, sent: function() {
    if (t2[0] & 1) throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f, y, t2, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_23 = 0)), _23) try {
      if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
      if (y = 0, t2) op = [op[0] & 2, t2.value];
      switch (op[0]) {
        case 0:
        case 1:
          t2 = op;
          break;
        case 4:
          _23.label++;
          return { value: op[1], done: false };
        case 5:
          _23.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _23.ops.pop();
          _23.trys.pop();
          continue;
        default:
          if (!(t2 = _23.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _23 = 0;
            continue;
          }
          if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
            _23.label = op[1];
            break;
          }
          if (op[0] === 6 && _23.label < t2[1]) {
            _23.label = t2[1];
            t2 = op;
            break;
          }
          if (t2 && _23.label < t2[2]) {
            _23.label = t2[2];
            _23.ops.push(op);
            break;
          }
          if (t2[2]) _23.ops.pop();
          _23.trys.pop();
          continue;
      }
      op = body.call(thisArg, _23);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t2 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/stream-chat-react/dist/components/Attachment/Attachment.js
var import_react95 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/utils.js
var import_react91 = __toESM(require_react());
var import_react_player2 = __toESM(require_lib());

// node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t2, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t2 = 0; t2 < o; t2++) e[t2] && (f = r(e[t2])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t2, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t2 = r(e)) && (n && (n += " "), n += t2);
  return n;
}
var clsx_default = clsx;

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentActions.js
var import_react12 = __toESM(require_react());

// node_modules/stream-chat-react/dist/context/ChannelActionContext.js
var import_react = __toESM(require_react());
var ChannelActionContext = import_react.default.createContext(void 0);
var ChannelActionProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react.default.createElement(ChannelActionContext.Provider, { value }, children);
};
var useChannelActionContext = function(componentName) {
  var contextValue = (0, import_react.useContext)(ChannelActionContext);
  if (!contextValue) {
    console.warn("The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withChannelActionContext = function(Component2) {
  var WithChannelActionContextComponent = function(props) {
    var channelActionContext = useChannelActionContext();
    return import_react.default.createElement(Component2, __assign({}, props, channelActionContext));
  };
  WithChannelActionContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelActionContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChannelListContext.js
var import_react2 = __toESM(require_react());
var ChannelListContext = (0, import_react2.createContext)(void 0);
var ChannelListContextProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react2.default.createElement(ChannelListContext.Provider, { value }, children);
};
var useChannelListContext = function(componentName) {
  var contextValue = (0, import_react2.useContext)(ChannelListContext);
  if (!contextValue) {
    console.warn("The useChannelListContext hook was called outside of the ChannelListContext provider. Make sure this hook is called within the ChannelList component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/ChannelStateContext.js
var import_react3 = __toESM(require_react());
var ChannelStateContext = import_react3.default.createContext(void 0);
var ChannelStateProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react3.default.createElement(ChannelStateContext.Provider, { value }, children);
};
var useChannelStateContext = function(componentName) {
  var contextValue = (0, import_react3.useContext)(ChannelStateContext);
  if (!contextValue) {
    console.warn("The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withChannelStateContext = function(Component2) {
  var WithChannelStateContextComponent = function(props) {
    var channelStateContext = useChannelStateContext();
    return import_react3.default.createElement(Component2, __assign({}, props, channelStateContext));
  };
  WithChannelStateContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelStateContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChatContext.js
var import_react4 = __toESM(require_react());

// node_modules/stream-chat-react/dist/context/utils/getDisplayName.js
var getDisplayName = function(Component2) {
  return Component2.displayName || Component2.name || "Component";
};

// node_modules/stream-chat-react/dist/context/ChatContext.js
var ChatContext = import_react4.default.createContext(void 0);
var ChatProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react4.default.createElement(ChatContext.Provider, { value }, children);
};
var useChatContext = function(componentName) {
  var contextValue = (0, import_react4.useContext)(ChatContext);
  if (!contextValue) {
    console.warn("The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withChatContext = function(Component2) {
  var WithChatContextComponent = function(props) {
    var chatContext = useChatContext();
    return import_react4.default.createElement(Component2, __assign({}, props, chatContext));
  };
  WithChatContextComponent.displayName = "WithChatContext".concat(getDisplayName(Component2));
  return WithChatContextComponent;
};

// node_modules/stream-chat-react/dist/context/ComponentContext.js
var import_react5 = __toESM(require_react());
var ComponentContext = import_react5.default.createContext(void 0);
var ComponentProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react5.default.createElement(ComponentContext.Provider, { value }, children);
};
var useComponentContext = function(componentName) {
  var contextValue = (0, import_react5.useContext)(ComponentContext);
  if (!contextValue) {
    console.warn("The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withComponentContext = function(Component2) {
  var WithComponentContextComponent = function(props) {
    var componentContext = useComponentContext();
    return import_react5.default.createElement(Component2, __assign({}, props, componentContext));
  };
  WithComponentContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithComponentContextComponent;
};

// node_modules/stream-chat-react/dist/context/MessageContext.js
var import_react6 = __toESM(require_react());
var MessageContext = import_react6.default.createContext(void 0);
var MessageProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react6.default.createElement(MessageContext.Provider, { value }, children);
};
var useMessageContext = function(componentName) {
  var contextValue = (0, import_react6.useContext)(MessageContext);
  if (!contextValue) {
    console.warn("The useMessageContext hook was called outside of the MessageContext provider. Make sure this hook is called within the Message's UI component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withMessageContext = function(Component2) {
  var WithMessageContextComponent = function(props) {
    var messageContext = useMessageContext();
    return import_react6.default.createElement(Component2, __assign({}, props, messageContext));
  };
  WithMessageContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithMessageContextComponent;
};

// node_modules/stream-chat-react/dist/context/MessageBounceContext.js
var import_react7 = __toESM(require_react());
var MessageBounceContext = (0, import_react7.createContext)(void 0);
function useMessageBounceContext(componentName) {
  var contextValue = (0, import_react7.useContext)(MessageBounceContext);
  if (!contextValue) {
    console.warn("The useMessageBounceContext hook was called outside of the MessageBounceContext provider. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
}
function MessageBounceProvider(_a) {
  var children = _a.children;
  var _b = useMessageContext("MessageBounceProvider"), doHandleRetry = _b.handleRetry, message = _b.message, setEditingState = _b.setEditingState;
  if (!isMessageBounced(message)) {
    console.warn('The MessageBounceProvider was rendered for a message that is not bounced. Have you missed the "isMessageBounced" check?');
  }
  var removeMessage = useChannelActionContext("MessageBounceProvider").removeMessage;
  var handleDelete2 = (0, import_react7.useCallback)(function() {
    removeMessage(message);
  }, [message, removeMessage]);
  var handleEdit = (0, import_react7.useCallback)(function(e) {
    setEditingState(e);
  }, [setEditingState]);
  var handleRetry = (0, import_react7.useCallback)(function() {
    doHandleRetry(message);
  }, [doHandleRetry, message]);
  var value = (0, import_react7.useMemo)(function() {
    return {
      handleDelete: handleDelete2,
      handleEdit,
      handleRetry,
      message
    };
  }, [handleDelete2, handleEdit, handleRetry, message]);
  return import_react7.default.createElement(MessageBounceContext.Provider, { value }, children);
}

// node_modules/stream-chat-react/dist/context/MessageInputContext.js
var import_react8 = __toESM(require_react());
var MessageInputContext = (0, import_react8.createContext)(void 0);
var MessageInputContextProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react8.default.createElement(MessageInputContext.Provider, { value }, children);
};
var useMessageInputContext = function(componentName) {
  var contextValue = (0, import_react8.useContext)(MessageInputContext);
  if (!contextValue) {
    console.warn("The useMessageInputContext hook was called outside of the MessageInputContext provider. Make sure this hook is called within the MessageInput's UI component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/MessageListContext.js
var import_react9 = __toESM(require_react());
var MessageListContext = (0, import_react9.createContext)(void 0);
var MessageListContextProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react9.default.createElement(MessageListContext.Provider, { value }, children);
};
var useMessageListContext = function(componentName) {
  var contextValue = (0, import_react9.useContext)(MessageListContext);
  if (!contextValue) {
    console.warn("The useMessageListContext hook was called outside of the MessageListContext provider. Make sure this hook is called within the MessageList component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/TranslationContext.js
var import_react10 = __toESM(require_react());
var import_dayjs2 = __toESM(require_dayjs_min());
var import_calendar2 = __toESM(require_calendar());
var import_localizedFormat2 = __toESM(require_localizedFormat());

// node_modules/stream-chat-react/dist/i18n/de.json
var de_default = {
  "Allow access to camera": "Zugriff auf Kamera erlauben",
  "Allow access to microphone": "Zugriff auf Mikrofon erlauben",
  "An error has occurred during recording": "Ein Fehler ist während der Aufnahme aufgetreten",
  "An error has occurred during the recording processing": "Ein Fehler ist während der Aufnahmeverarbeitung aufgetreten",
  "Attach files": "Dateien anhängen",
  Cancel: "Stornieren",
  "Cannot seek in the recording": "In der Aufnahme es kann nicht gesucht werden",
  "Channel Missing": "Kanal fehlt",
  Close: "Schließen",
  "Close emoji picker": "Emoji-Picker schließen",
  "Commands matching": "Übereinstimmende Befehle",
  "Connection failure, reconnecting now...": "Verbindungsfehler, Wiederherstellung der Verbindung...",
  Delete: "Löschen",
  Delivered: "Zugestellt",
  "Drag your files here": "Ziehen Sie Ihre Dateien hierher",
  "Drag your files here to add to your post": "Ziehen Sie Ihre Dateien hierher, um sie Ihrem Beitrag hinzuzufügen",
  "Edit Message": "Nachricht bearbeiten",
  "Edit message request failed": "Anfrage zum Bearbeiten der Nachricht fehlgeschlagen",
  Edited: "Bearbeitet",
  "Emoji matching": "Emoji passend",
  "Empty message...": "Leere Nachricht...",
  "Error adding flag": "Fehler beim Hinzufügen des Flags",
  "Error connecting to chat, refresh the page to try again.": "Verbindungsfehler zum Chat, Aktualisiere die Seite um es erneut zu versuchen.",
  "Error deleting message": "Fehler beim Löschen der Nachricht",
  "Error fetching reactions": "Fehler beim Laden von Reaktionen",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fehler beim Markieren der Nachricht als ungelesen. Kann keine älteren ungelesenen Nachrichten markieren als die neuesten 100 Kanalnachrichten.",
  "Error muting a user ...": "Fehler beim Stummschalten eines Nutzers.",
  "Error pinning message": "Fehler beim Pinnen der Nachricht",
  "Error removing message pin": "Fehler beim Entfernen der gepinnten Nachricht",
  "Error reproducing the recording": "Fehler bei der Wiedergabe der Aufnahme",
  "Error starting recording": "Fehler beim Starten der Aufnahme",
  "Error unmuting a user ...": "Stummschaltung des Nutzers fehlgeschlagen ...",
  "Error uploading attachment": "Fehler beim Hochladen des Anhangs",
  "Error uploading file": "Fehler beim Hochladen der Datei",
  "Error uploading image": "Hochladen des Bildes fehlgeschlagen",
  "Error · Unsent": "Fehler nicht gesendet",
  "Error: {{ errorMessage }}": "Fehler: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Fehler beim Springen zur ersten ungelesenen Nachricht",
  "Failed to mark channel as read": "Fehler beim Markieren des Kanals als gelesen",
  "Failed to play the recording": "Wiedergabe der Aufnahme fehlgeschlagen",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Datei ist zu groß: {{ size }}, maximale Upload-Größe beträgt {{ limit }}",
  Flag: "Meldung",
  "Latest Messages": "Neueste Nachrichten",
  "Load more": "Mehr laden",
  "Mark as unread": "Als ungelesen markieren",
  Menu: "Menü",
  "Message Failed · Click to try again": "Nachricht fehlgeschlagen · Klicken, um es erneut zu versuchen",
  "Message Failed · Unauthorized": "Nachricht fehlgeschlagen · Nicht autorisiert",
  "Message deleted": "Nachricht gelöscht",
  "Message has been successfully flagged": "Nachricht wurde erfolgreich gemeldet",
  "Message pinned": "Nachricht gepinnt",
  "Messages have been marked unread.": "Nachrichten wurden als ungelesen markiert.",
  "Missing permissions to upload the attachment": "Berechtigungen zum Hochladen des Anhangs fehlen",
  Mute: "Stumm schalten",
  New: "Neu",
  "New Messages!": "Neue Nachrichten!",
  "No chats here yet…": "Noch keine Chats hier...",
  "No results found": "keine Ergebnisse gefunden",
  "Nothing yet...": "Noch nichts...",
  Ok: "Ok",
  "Open emoji picker": "Emoji-Picker öffnen",
  "People matching": "Passende Personen",
  Pin: "Pin",
  "Pinned by": "Gepinnt von",
  "Recording format is not supported and cannot be reproduced": "Aufnahmeformat wird nicht unterstützt und kann nicht wiedergegeben werden",
  Reply: "Antworten",
  "Reply to Message": "Auf Nachricht antworten",
  Search: "Suche",
  "Searching...": "Suchen...",
  Send: "Senden",
  "Send Anyway": "Trotzdem senden",
  "Send message request failed": "Senden der Nachrichtenanfrage fehlgeschlagen",
  "Sending...": "Senden...",
  Shuffle: "Mischen",
  "Slow Mode ON": "Slow-Mode EIN",
  "Some of the files will not be accepted": "Einige der Dateien werden nicht akzeptiert",
  "This message did not meet our content guidelines": "Diese Nachricht entsprach nicht unseren Inhaltsrichtlinien",
  "This message was deleted...": "Diese Nachricht wurde gelöscht...",
  Thread: "Thread",
  "To start recording, allow the camera access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf die Kamera in Ihrem Browser",
  "To start recording, allow the microphone access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf das Mikrofon in Ihrem Browser",
  "Type your message": "Nachricht eingeben",
  Unmute: "Stummschaltung aufheben",
  Unpin: "Pin entfernen",
  "Unread messages": "Ungelesene Nachrichten",
  "Unsupported attachment": "Nicht unterstützter Anhang",
  'Upload type: "{{ type }}" is not allowed': 'Upload-Typ: "{{ type }}" ist nicht erlaubt',
  "User uploaded content": "Benutzer hochgeladenen Inhalts",
  "Voice message": "Sprachnachricht",
  "Wait until all attachments have uploaded": "Bitte warten, bis alle Anhänge hochgeladen wurden",
  "You have no channels currently": "Du hast momentan noch keinen Channels",
  "You've reached the maximum number of files": "Die maximale Dateianzahl ist erreicht",
  "aria/Attachment": "Anhang",
  "aria/Cancel Reply": "Antwort abbrechen",
  "aria/Cancel upload": "Upload abbrechen",
  "aria/Channel list": "Kanalliste",
  "aria/Channel search results": "Kanalsuchergebnisse",
  "aria/Close thread": "Thread schließen",
  "aria/Emoji picker": "Emoji-Auswahl",
  "aria/File input": "Dateieingabe",
  "aria/File upload": "Datei hochladen",
  "aria/Image input": "Bildeingabe",
  "aria/Load More Channels": "Mehr Kanäle laden",
  "aria/Menu": "Menü",
  "aria/Message Options": "Nachrichtenoptionen",
  "aria/Open Message Actions Menu": "Nachrichtenaktionsmenü öffnen",
  "aria/Open Reaction Selector": "Reaktionsauswahl öffnen",
  "aria/Open Thread": "Thread öffnen",
  "aria/Reaction list": "Reaktionsliste",
  "aria/Retry upload": "Upload erneut versuchen",
  "aria/Send": "Senden",
  "ban-command-args": "[@Benutzername] [Text]",
  "ban-command-description": "Einen Benutzer verbannen",
  "giphy-command-args": "[Text]",
  "giphy-command-description": "Poste ein zufälliges Gif in den Kanal",
  live: "live",
  "mute-command-args": "[@Benutzername]",
  "mute-command-description": "Stummschalten eines Benutzers",
  replyCount_one: "1 Antwort",
  replyCount_other: "{{ count }} Antworten",
  searchResultsCount_one: "1 Ergebnis",
  searchResultsCount_other: "{{ count }} Ergebnisse",
  "this content could not be displayed": "Dieser Inhalt konnte nicht angezeigt werden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@Benutzername]",
  "unban-command-description": "Einen Benutzer entbannen",
  "unmute-command-args": "[@Benutzername]",
  "unmute-command-description": "Stummschaltung eines Benutzers aufheben",
  unreadMessagesSeparatorText_one: "1 ungelesene Nachricht",
  unreadMessagesSeparatorText_other: "{{count}} ungelesene Nachrichten",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} und {{moreCount}} Mehr",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} und {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} und {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mehr",
  "{{ memberCount }} members": "{{ memberCount }} Mitglieder",
  "{{ user }} has been muted": "{{ user }} wurde stummgeschaltet",
  "{{ user }} has been unmuted": "{{ user }} wurde nicht stummgeschaltet",
  "{{ user }} is typing...": "{{ user }} tippt...",
  "{{ users }} and more are typing...": "{{ users }} und mehr tippen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} und {{ user }} tippen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ungelesen",
  "{{count}} unread_other": "{{count}} ungelesen",
  "🏙 Attachment...": "🏙 Anhang..."
};

// node_modules/stream-chat-react/dist/i18n/en.json
var en_default = {
  "Allow access to camera": "Allow access to camera",
  "Allow access to microphone": "Allow access to microphone",
  "An error has occurred during recording": "An error has occurred during recording",
  "An error has occurred during the recording processing": "An error has occurred during the recording processing",
  "Attach files": "Attach files",
  Cancel: "Cancel",
  "Cannot seek in the recording": "Cannot seek in the recording",
  "Channel Missing": "Channel Missing",
  Close: "Close",
  "Close emoji picker": "Close emoji picker",
  "Commands matching": "Commands matching",
  "Connection failure, reconnecting now...": "Connection failure, reconnecting now...",
  Delete: "Delete",
  Delivered: "Delivered",
  "Drag your files here": "Drag your files here",
  "Drag your files here to add to your post": "Drag your files here to add to your post",
  "Edit Message": "Edit Message",
  "Edit message request failed": "Edit message request failed",
  Edited: "Edited",
  "Emoji matching": "Emoji matching",
  "Empty message...": "Empty message...",
  "Error adding flag": "Error adding flag",
  "Error connecting to chat, refresh the page to try again.": "Error connecting to chat, refresh the page to try again.",
  "Error deleting message": "Error deleting message",
  "Error fetching reactions": "Error loading reactions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.",
  "Error muting a user ...": "Error muting a user ...",
  "Error pinning message": "Error pinning message",
  "Error removing message pin": "Error removing message pin",
  "Error reproducing the recording": "Error reproducing the recording",
  "Error starting recording": "Error starting recording",
  "Error unmuting a user ...": "Error unmuting a user ...",
  "Error uploading attachment": "Error uploading attachment",
  "Error uploading file": "Error uploading file",
  "Error uploading image": "Error uploading image",
  "Error · Unsent": "Error · Unsent",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Failed to jump to the first unread message",
  "Failed to mark channel as read": "Failed to mark channel as read",
  "Failed to play the recording": "Failed to play the recording",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "File is too large: {{ size }}, maximum upload size is {{ limit }}",
  Flag: "Flag",
  "Latest Messages": "Latest Messages",
  "Load more": "Load more",
  "Mark as unread": "Mark as unread",
  Menu: "Menu",
  "Message Failed · Click to try again": "Message Failed · Click to try again",
  "Message Failed · Unauthorized": "Message Failed · Unauthorized",
  "Message deleted": "Message deleted",
  "Message has been successfully flagged": "Message has been successfully flagged",
  "Message pinned": "Message pinned",
  "Messages have been marked unread.": "Messages have been marked unread.",
  "Missing permissions to upload the attachment": "Missing permissions to upload the attachment",
  Mute: "Mute",
  New: "New",
  "New Messages!": "New Messages!",
  "No chats here yet…": "No chats here yet…",
  "No results found": "No results found",
  "Nothing yet...": "Nothing yet...",
  Ok: "Ok",
  "Open emoji picker": "Open emoji picker",
  "People matching": "People matching",
  Pin: "Pin",
  "Pinned by": "Pinned by",
  "Recording format is not supported and cannot be reproduced": "Recording format is not supported and cannot be reproduced",
  Reply: "Reply",
  "Reply to Message": "Reply to Message",
  Search: "Search",
  "Searching...": "Searching...",
  Send: "Send",
  "Send Anyway": "Send Anyway",
  "Send message request failed": "Send message request failed",
  "Sending...": "Sending...",
  Shuffle: "Shuffle",
  "Slow Mode ON": "Slow Mode ON",
  "Some of the files will not be accepted": "Some of the files will not be accepted",
  "This message did not meet our content guidelines": "This message did not meet our content guidelines",
  "This message was deleted...": "This message was deleted...",
  Thread: "Thread",
  "To start recording, allow the camera access in your browser": "To start recording, allow the camera access in your browser",
  "To start recording, allow the microphone access in your browser": "To start recording, allow the microphone access in your browser",
  "Type your message": "Type your message",
  Unmute: "Unmute",
  Unpin: "Unpin",
  "Unread messages": "Unread messages",
  "Unsupported attachment": "Unsupported attachment",
  'Upload type: "{{ type }}" is not allowed': 'Upload type: "{{ type }}" is not allowed',
  "User uploaded content": "User uploaded content",
  "Voice message": "Voice message",
  "Wait until all attachments have uploaded": "Wait until all attachments have uploaded",
  "You have no channels currently": "You have no channels currently",
  "You've reached the maximum number of files": "You've reached the maximum number of files",
  "aria/Attachment": "Attachment",
  "aria/Cancel Reply": "Cancel Reply",
  "aria/Cancel upload": "Cancel upload",
  "aria/Channel list": "Channel list",
  "aria/Channel search results": "Channel search results",
  "aria/Close thread": "Close thread",
  "aria/Emoji picker": "Emoji picker",
  "aria/File input": "File input",
  "aria/File upload": "File upload",
  "aria/Image input": "Image input",
  "aria/Load More Channels": "Load More Channels",
  "aria/Menu": "Menu",
  "aria/Message Options": "Message Options",
  "aria/Open Message Actions Menu": "Open Message Actions Menu",
  "aria/Open Reaction Selector": "Open Reaction Selector",
  "aria/Open Thread": "Open Thread",
  "aria/Reaction list": "Reaction list",
  "aria/Retry upload": "Retry upload",
  "aria/Send": "Send",
  live: "live",
  replyCount_one: "1 reply",
  replyCount_other: "{{ count }} replies",
  searchResultsCount_one: "1 result",
  searchResultsCount_other: "{{ count }} results",
  "this content could not be displayed": "this content could not be displayed",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  unreadMessagesSeparatorText_one: "1 unread message",
  unreadMessagesSeparatorText_other: "{{count}} unread messages",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} and {{ moreCount }} more",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, and {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} and {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} more",
  "{{ memberCount }} members": "{{ memberCount }} members",
  "{{ user }} has been muted": "{{ user }} has been muted",
  "{{ user }} has been unmuted": "{{ user }} has been unmuted",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} unread",
  "{{count}} unread_other": "{{count}} unread",
  "🏙 Attachment...": "🏙 Attachment..."
};

// node_modules/stream-chat-react/dist/i18n/es.json
var es_default = {
  "Allow access to camera": "Permitir acceso a la cámara",
  "Allow access to microphone": "Permitir acceso al micrófono",
  "An error has occurred during recording": "Se ha producido un error durante la grabación",
  "An error has occurred during the recording processing": "Se ha producido un error durante el procesamiento de la grabación",
  "Attach files": "Adjuntar archivos",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "No se puede buscar en la grabación",
  "Channel Missing": "Falta canal",
  Close: "Cerca",
  "Close emoji picker": "Cerrar el selector de emojis",
  "Commands matching": "Coincidencia de comandos",
  "Connection failure, reconnecting now...": "Fallo de conexión, reconectando ahora ...",
  Delete: "Borrar",
  Delivered: "Entregado",
  "Drag your files here": "Arrastra tus archivos aquí",
  "Drag your files here to add to your post": "Arrastra tus archivos aquí para agregarlos a tu publicación",
  "Edit Message": "Editar mensaje",
  "Edit message request failed": "Error al editar la solicitud de mensaje",
  Edited: "Editado",
  "Emoji matching": "Coincidencia de emoji",
  "Empty message...": "Mensaje vacío ...",
  "Error adding flag": "Error al agregar la bandera",
  "Error connecting to chat, refresh the page to try again.": "Error al conectarse al chat, actualice la página para volver a intentarlo.",
  "Error deleting message": "Error al eliminar el mensaje",
  "Error fetching reactions": "Error al cargar las reacciones",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error al marcar el mensaje como no leído. No se pueden marcar mensajes no leídos más antiguos que los últimos 100 mensajes del canal.",
  "Error muting a user ...": "Error al silenciar a un usuario ...",
  "Error pinning message": "Mensaje de error al fijar",
  "Error removing message pin": "Error al quitar el pin del mensaje",
  "Error reproducing the recording": "Error al reproducir la grabación",
  "Error starting recording": "Error al iniciar la grabación",
  "Error unmuting a user ...": "Error al activar el silencio de un usuario ...",
  "Error uploading attachment": "Error al subir el archivo adjunto",
  "Error uploading file": "Error al cargar el archivo",
  "Error uploading image": "Error subiendo imagen",
  "Error · Unsent": "Error · No enviado",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Error al saltar al primer mensaje no leído",
  "Failed to mark channel as read": "Error al marcar el canal como leído",
  "Failed to play the recording": "No se pudo reproducir la grabación",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "El archivo es demasiado grande: {{ size }}, el tamaño máximo de carga es de {{ limit }}",
  Flag: "Bandera",
  "Latest Messages": "Últimos mensajes",
  "Load more": "Cargar más",
  "Mark as unread": "Marcar como no leído",
  Menu: "Menú",
  "Message Failed · Click to try again": "Mensaje fallido · Haga clic para volver a intentarlo",
  "Message Failed · Unauthorized": "Mensaje fallido · No autorizado",
  "Message deleted": "Mensaje borrado",
  "Message has been successfully flagged": "El mensaje se marcó correctamente",
  "Message pinned": "Mensaje fijado",
  "Messages have been marked unread.": "Los mensajes han sido marcados como no leídos.",
  "Missing permissions to upload the attachment": "Permisos faltantes para subir el archivo adjunto",
  Mute: "Mudo",
  New: "Nuevo",
  "New Messages!": "¡Nuevos mensajes!",
  "No chats here yet…": "Aún no hay mensajes aquí...",
  "No results found": "No se han encontrado resultados",
  "Nothing yet...": "Nada aún...",
  Ok: "Ok",
  "Open emoji picker": "Selector de emoji abierto",
  "People matching": "Personas que coinciden",
  Pin: "Alfiler",
  "Pinned by": "Fijado por",
  "Recording format is not supported and cannot be reproduced": "El formato de grabación no es compatible y no se puede reproducir",
  Reply: "Respuesta",
  "Reply to Message": "Responder al mensaje",
  Search: "Buscar",
  "Searching...": "Buscando...",
  Send: "Enviar",
  "Send Anyway": "Enviar de todos modos",
  "Send message request failed": "Error al enviar la solicitud de mensaje",
  "Sending...": "Enviando...",
  Shuffle: "Mezclar",
  "Slow Mode ON": "Modo lento activado",
  "Some of the files will not be accepted": "Algunos de los archivos no serán aceptados",
  "This message did not meet our content guidelines": "Este mensaje no cumple nuestras directrices de contenido",
  "This message was deleted...": "Este mensaje fue eliminado ...",
  Thread: "Hilo",
  "To start recording, allow the camera access in your browser": "Para comenzar a grabar, permita el acceso a la cámara en su navegador",
  "To start recording, allow the microphone access in your browser": "Para comenzar a grabar, permita el acceso al micrófono en su navegador",
  "Type your message": "Escribe tu mensaje",
  Unmute: "Activar sonido",
  Unpin: "Desprender",
  "Unread messages": "Mensajes no leídos",
  "Unsupported attachment": "Adjunto no compatible",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de carga: "{{ type }}" no está permitido',
  "User uploaded content": "Contenido subido por el usuario",
  "Voice message": "Mensaje de voz",
  "Wait until all attachments have uploaded": "Espere hasta que se hayan cargado todos los archivos adjuntos",
  "You have no channels currently": "Actualmente no tienes canales",
  "You've reached the maximum number of files": "Has alcanzado el número máximo de archivos",
  "aria/Attachment": "Adjunto",
  "aria/Cancel Reply": "Cancelar respuesta",
  "aria/Cancel upload": "Cancelar carga",
  "aria/Channel list": "Lista de canales",
  "aria/Channel search results": "Resultados de búsqueda de canales",
  "aria/Close thread": "Cerrar hilo",
  "aria/Emoji picker": "Selector de emojis",
  "aria/File input": "Entrada de archivo",
  "aria/File upload": "Carga de archivo",
  "aria/Image input": "Entrada de imagen",
  "aria/Load More Channels": "Cargar más canales",
  "aria/Menu": "Menú",
  "aria/Message Options": "Opciones de mensaje",
  "aria/Open Message Actions Menu": "Abrir menú de acciones de mensaje",
  "aria/Open Reaction Selector": "Abrir selector de reacción",
  "aria/Open Thread": "Abrir hilo",
  "aria/Reaction list": "Lista de reacciones",
  "aria/Retry upload": "Reintentar carga",
  "aria/Send": "Enviar",
  "ban-command-args": "[@usuario] [texto]",
  "ban-command-description": "Prohibir a un usuario",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Publicar un gif aleatorio en el canal",
  live: "En Vivo",
  "mute-command-args": "[@usuario]",
  "mute-command-description": "Silenciar a un usuario",
  replyCount_many: "{{ count }} respuestas",
  replyCount_one: "1 respuesta",
  replyCount_other: "{{ count }} respuestas",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "este contenido no se pudo mostrar",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@usuario]",
  "unban-command-description": "Quitar la prohibición a un usuario",
  "unmute-command-args": "[@usuario]",
  "unmute-command-description": "Anular el silencio de un usuario",
  unreadMessagesSeparatorText_many: "{{count}} mensajes no leídos",
  unreadMessagesSeparatorText_one: "1 mensaje no leído",
  unreadMessagesSeparatorText_other: "{{count}} mensajes no leídos",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} y {{ moreCount }} más",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} y {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} y {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} más",
  "{{ memberCount }} members": "{{ memberCount }} miembros",
  "{{ user }} has been muted": "{{ user }} ha sido silenciado",
  "{{ user }} has been unmuted": "{{ user }} se ha desactivado",
  "{{ user }} is typing...": "{{ user }} está escribiendo...",
  "{{ users }} and more are typing...": "{{ users }} y más están escribiendo...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} y {{ user }} están escribiendo...",
  "{{ watcherCount }} online": "{{ watcherCount }} en línea",
  "{{count}} unread_many": "{{count}} no leídos",
  "{{count}} unread_one": "{{count}} no leído",
  "{{count}} unread_other": "{{count}} no leídos",
  "🏙 Attachment...": "🏙 Adjunto..."
};

// node_modules/stream-chat-react/dist/i18n/fr.json
var fr_default = {
  "Allow access to camera": "Autoriser l'accès à la caméra",
  "Allow access to microphone": "Autoriser l'accès au microphone",
  "An error has occurred during recording": "Une erreur s'est produite pendant l'enregistrement",
  "An error has occurred during the recording processing": "Une erreur s'est produite pendant le traitement de l'enregistrement",
  "Attach files": "Pièces jointes",
  Cancel: "Annuler",
  "Cannot seek in the recording": "Impossible de rechercher dans l'enregistrement",
  "Channel Missing": "Canal Manquant",
  Close: "Fermer",
  "Close emoji picker": "Fermer le sélecteur d'emojis",
  "Commands matching": "Correspondance des commandes",
  "Connection failure, reconnecting now...": "Échec de la connexion, reconnexion en cours...",
  Delete: "Supprimer",
  Delivered: "Publié",
  "Drag your files here": "Glissez vos fichiers ici",
  "Drag your files here to add to your post": "Glissez vos fichiers ici pour les ajouter à votre publication",
  "Edit Message": "Éditer un message",
  "Edit message request failed": "Échec de la demande de modification du message",
  Edited: "Édité",
  "Emoji matching": "Correspondance emoji",
  "Empty message...": "Message vide...",
  "Error adding flag": "Erreur lors de l'ajout du drapeau",
  "Error connecting to chat, refresh the page to try again.": "Erreur de connexion au chat, rafraîchissez la page pour réessayer.",
  "Error deleting message": "Erreur lors de la suppression du message",
  "Error fetching reactions": "Erreur de chargement des réactions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erreur lors de la marque du message comme non lu. Impossible de marquer des messages non lus plus anciens que les 100 derniers messages du canal.",
  "Error muting a user ...": "Erreur de mise en sourdine d'un utilisateur ...",
  "Error pinning message": "Erreur d'épinglage du message",
  "Error removing message pin": "Erreur lors de la suppression du code PIN du message",
  "Error reproducing the recording": "Erreur lors de la reproduction de l'enregistrement",
  "Error starting recording": "Erreur de démarrage de l'enregistrement",
  "Error unmuting a user ...": "Erreur de désactivation de la fonction sourdine pour un utilisateur ...",
  "Error uploading attachment": "Erreur lors du téléchargement de la pièce jointe",
  "Error uploading file": "Erreur lors du téléchargement du fichier",
  "Error uploading image": "Erreur lors de l'envoi de l'image",
  "Error · Unsent": "Erreur - Non envoyé",
  "Error: {{ errorMessage }}": "Erreur : {{ errorMessage }}",
  "Failed to jump to the first unread message": "Échec de saut vers le premier message non lu",
  "Failed to mark channel as read": "Échec de la marque du canal comme lu",
  "Failed to play the recording": "Impossible de lire l'enregistrement",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Le fichier est trop volumineux : {{ size }}, la taille de téléchargement maximale est de {{ limit }}",
  Flag: "Signaler",
  "Latest Messages": "Derniers messages",
  "Load more": "Charger plus",
  "Mark as unread": "Marquer comme non lu",
  Menu: "Menu",
  "Message Failed · Click to try again": "Échec de l'envoi du message - Cliquez pour réessayer",
  "Message Failed · Unauthorized": "Échec de l'envoi du message - Non autorisé",
  "Message deleted": "Message supprimé",
  "Message has been successfully flagged": "Le message a été signalé avec succès",
  "Message pinned": "Message épinglé",
  "Messages have been marked unread.": "Les messages ont été marqués comme non lus.",
  "Missing permissions to upload the attachment": "Autorisations manquantes pour télécharger la pièce jointe",
  Mute: "Muet",
  New: "Nouveaux",
  "New Messages!": "Nouveaux Messages!",
  "No chats here yet…": "Pas encore de messages ici...",
  "No results found": "Aucun résultat trouvé",
  "Nothing yet...": "Aucun message...",
  Ok: "D'accord",
  "Open emoji picker": "Ouvrez le sélecteur d'emoji",
  "People matching": "Correspondance de personnes",
  Pin: "Épingle",
  "Pinned by": "Épinglé par",
  "Recording format is not supported and cannot be reproduced": "Le format d'enregistrement n'est pas pris en charge et ne peut pas être reproduit",
  Reply: "Réponse",
  "Reply to Message": "Répondre au message",
  Search: "Rechercher",
  "Searching...": "Recherche...",
  Send: "Envoyer",
  "Send Anyway": "Envoyer quand même",
  "Send message request failed": "Échec de la demande d'envoi de message",
  "Sending...": "Envoi en cours...",
  Shuffle: "Mélanger",
  "Slow Mode ON": "Mode lent activé",
  "Some of the files will not be accepted": "Certains fichiers ne seront pas acceptés",
  "This message did not meet our content guidelines": "Ce message n'est pas conforme à nos lignes directrices en matière de contenu",
  "This message was deleted...": "Ce message a été supprimé...",
  Thread: "Fil de discussion",
  "To start recording, allow the camera access in your browser": "Pour commencer l'enregistrement, autorisez l'accès à la caméra dans votre navigateur",
  "To start recording, allow the microphone access in your browser": "Pour commencer l'enregistrement, autorisez l'accès au microphone dans votre navigateur",
  "Type your message": "Saisissez votre message",
  Unmute: "Désactiver muet",
  Unpin: "Détacher",
  "Unread messages": "Messages non lus",
  "Unsupported attachment": "Pièce jointe non prise en charge",
  'Upload type: "{{ type }}" is not allowed': `Le type de téléchargement: "{{ type }}" n'est pas autorisé`,
  "User uploaded content": "Contenu téléchargé par l'utilisateur",
  "Voice message": "Message vocal",
  "Wait until all attachments have uploaded": "Attendez que toutes les pièces jointes soient téléchargées",
  "You have no channels currently": "Vous n'avez actuellement aucun canal",
  "You've reached the maximum number of files": "Vous avez atteint le nombre maximum de fichiers",
  "aria/Attachment": "Pièce jointe",
  "aria/Cancel Reply": "Annuler la réponse",
  "aria/Cancel upload": "Annuler le téléchargement",
  "aria/Channel list": "Liste des canaux",
  "aria/Channel search results": "Résultats de la recherche de canaux",
  "aria/Close thread": "Fermer le fil",
  "aria/Emoji picker": "Sélecteur d'émojis",
  "aria/File input": "Entrée de fichier",
  "aria/File upload": "Téléchargement de fichier",
  "aria/Image input": "Entrée d'image",
  "aria/Load More Channels": "Charger plus de canaux",
  "aria/Menu": "Menu",
  "aria/Message Options": "Options de message",
  "aria/Open Message Actions Menu": "Ouvrir le menu des actions de message",
  "aria/Open Reaction Selector": "Ouvrir le sélecteur de réaction",
  "aria/Open Thread": "Ouvrir le fil",
  "aria/Reaction list": "Liste des réactions",
  "aria/Retry upload": "Réessayer le téléchargement",
  "aria/Send": "Envoyer",
  "ban-command-args": "[@nomdutilisateur] [texte]",
  "ban-command-description": "Bannir un utilisateur",
  "giphy-command-args": "[texte]",
  "giphy-command-description": "Poster un GIF aléatoire dans le canal",
  live: "en direct",
  "mute-command-args": "[@nomdutilisateur]",
  "mute-command-description": "Muter un utilisateur",
  replyCount_many: "{{ count }} réponses",
  replyCount_one: "1 réponse",
  replyCount_other: "{{ count }} réponses",
  searchResultsCount_many: "{{ count }} résultats",
  searchResultsCount_one: "1 résultat",
  searchResultsCount_other: "{{ count }} résultats",
  "this content could not be displayed": "ce contenu n'a pu être affiché",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomdutilisateur]",
  "unban-command-description": "Débannir un utilisateur",
  "unmute-command-args": "[@nomdutilisateur]",
  "unmute-command-description": "Démuter un utilisateur",
  unreadMessagesSeparatorText_many: "{{count}} messages non lus",
  unreadMessagesSeparatorText_one: "1 message non lu",
  unreadMessagesSeparatorText_other: "{{count}} messages non lus",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} et {{ moreCount }} autres",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} et {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} et {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} supplémentaires",
  "{{ memberCount }} members": "{{ memberCount }} membres",
  "{{ user }} has been muted": "{{ user }} a été mis en sourdine",
  "{{ user }} has been unmuted": "{{ user }} n'est plus en sourdine",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} en ligne",
  "{{count}} unread_many": "{{count}} non lus",
  "{{count}} unread_one": "{{count}} non lu",
  "{{count}} unread_other": "{{count}} non lus",
  "🏙 Attachment...": "🏙 Pièce jointe..."
};

// node_modules/stream-chat-react/dist/i18n/hi.json
var hi_default = {
  "Allow access to camera": "कैमरा तक पहुँच दें",
  "Allow access to microphone": "माइक्रोफ़ोन तक पहुँच दें",
  "An error has occurred during recording": "रेकॉर्डिंग के दौरान एक त्रुटि आ गई है",
  "An error has occurred during the recording processing": "रेकॉर्डिंग प्रोसेसिंग के दौरान एक त्रुटि आ गई है",
  "Attach files": "फाइल्स अटैच करे",
  Cancel: "रद्द करें",
  "Cannot seek in the recording": "रेकॉर्डिंग में खोज नहीं की जा सकती",
  "Channel Missing": "चैनल उपलब्ध नहीं है",
  Close: "बंद करे",
  "Close emoji picker": "इमोजी पिकर बंद करें",
  "Commands matching": "मेल खाती है",
  "Connection failure, reconnecting now...": "कनेक्शन विफल रहा, अब पुनः कनेक्ट हो रहा है ...",
  Delete: "डिलीट",
  Delivered: "पहुंच गया",
  "Drag your files here": "अपनी फ़ाइलें यहाँ खींचें",
  "Drag your files here to add to your post": "अपनी फ़ाइलें यहाँ खींचें और अपने पोस्ट में जोड़ने के लिए",
  "Edit Message": "मैसेज में बदलाव करे",
  "Edit message request failed": "संदेश संपादित करने का अनुरोध विफल रहा",
  Edited: "संपादित",
  "Emoji matching": "इमोजी मिलान",
  "Empty message...": "खाली संदेश ...",
  "Error adding flag": "ध्वज जोड़ने में त्रुटि",
  "Error connecting to chat, refresh the page to try again.": "चैट से कनेक्ट करने में त्रुटि, पेज को रिफ्रेश करें",
  "Error deleting message": "संदेश हटाने में त्रुटि",
  "Error fetching reactions": "प्रतिक्रियाएँ लोड करने में त्रुटि",
  "Error marking message unread": "संदेश को अपठित चिह्नित करने में त्रुटि",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "संदेश को अपठित मार्क करने में त्रुटि। सबसे नए 100 चैनल संदेश से पहले के सभी अपठित संदेशों को अपठित मार्क नहीं किया जा सकता है।",
  "Error muting a user ...": "यूजर को म्यूट करने का प्रयास फेल हुआ",
  "Error pinning message": "संदेश को पिन करने में त्रुटि",
  "Error removing message pin": "संदेश पिन निकालने में त्रुटि",
  "Error reproducing the recording": "रिकॉर्डिंग पुन: उत्पन्न करने में त्रुटि",
  "Error starting recording": "रेकॉर्डिंग शुरू करने में त्रुटि",
  "Error unmuting a user ...": "यूजर को अनम्यूट करने का प्रयास फेल हुआ",
  "Error uploading attachment": "अटैचमेंट अपलोड करते समय त्रुटि",
  "Error uploading file": "फ़ाइल अपलोड करने में त्रुटि",
  "Error uploading image": "छवि अपलोड करने में त्रुटि",
  "Error · Unsent": "फेल",
  "Error: {{ errorMessage }}": "फेल: {{ errorMessage }}",
  "Failed to jump to the first unread message": "पहले अपठित संदेश पर जाने में विफल",
  "Failed to mark channel as read": "चैनल को पढ़ा हुआ चिह्नित करने में विफल।",
  "Failed to play the recording": "रेकॉर्डिंग प्ले करने में विफल",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "फ़ाइल बहुत बड़ी है: {{ size }}, अधिकतम अपलोड साइज़ {{ limit }} है",
  Flag: "फ्लैग करे",
  "Latest Messages": "नवीनतम संदेश",
  "Load more": "और लोड करें",
  "Mark as unread": "अपठित चिह्नित करें",
  Menu: "मेन्यू",
  "Message Failed · Click to try again": "मैसेज फ़ैल - पुनः कोशिश करें",
  "Message Failed · Unauthorized": "मैसेज फ़ैल - अनधिकृत",
  "Message deleted": "मैसेज हटा दिया गया",
  "Message has been successfully flagged": "मैसेज को फ्लैग कर दिया गया है",
  "Message pinned": "संदेश पिन किया गया",
  "Messages have been marked unread.": "संदेशों को अपठित चिह्नित किया गया है।",
  "Missing permissions to upload the attachment": "अटैचमेंट अपलोड करने के लिए अनुमतियां गायब",
  Mute: "म्यूट करे",
  New: "नए",
  "New Messages!": "नए मैसेज!",
  "No chats here yet…": "यहां अभी तक कोई चैट नहीं...",
  "No results found": "कोई परिणाम नहीं मिला",
  "Nothing yet...": "कोई मैसेज नहीं है",
  Ok: "ठीक है",
  "Open emoji picker": "इमोजी पिकर खोलिये",
  "People matching": "मेल खाते लोग",
  Pin: "पिन",
  "Pinned by": "द्वारा पिन किया गया",
  "Recording format is not supported and cannot be reproduced": "रेकॉर्डिंग फ़ॉर्मेट समर्थित नहीं है और पुनः उत्पन्न नहीं किया जा सकता",
  Reply: "जवाब दे दो",
  "Reply to Message": "संदेश का जवाब दें",
  Search: "खोज",
  "Searching...": "खोज कर...",
  Send: "भेजे",
  "Send Anyway": "वैसे भी भेजें",
  "Send message request failed": "संदेश भेजने का अनुरोध विफल रहा",
  "Sending...": "भेजा जा रहा है",
  Shuffle: "मिश्रित करें",
  "Slow Mode ON": "स्लो मोड ऑन",
  "Some of the files will not be accepted": "कुछ फ़ाइलें स्वीकार नहीं की जाएंगी",
  "This message did not meet our content guidelines": "यह संदेश हमारे सामग्री दिशानिर्देशों के अनुरूप नहीं था",
  "This message was deleted...": "मैसेज हटा दिया गया",
  Thread: "रिप्लाई थ्रेड",
  "To start recording, allow the camera access in your browser": "रिकॉर्डिंग शुरू करने के लिए, अपने ब्राउज़र में कैमरा तक पहुँच दें",
  "To start recording, allow the microphone access in your browser": "Tरिकॉर्डिंग शुरू करने के लिए, अपने ब्राउज़र में माइक्रोफ़ोन तक पहुँच दें",
  "Type your message": "अपना मैसेज लिखे",
  Unmute: "अनम्यूट",
  Unpin: "अनपिन",
  "Unread messages": "अपठित संदेश",
  "Unsupported attachment": "असमर्थित अटैचमेंट",
  'Upload type: "{{ type }}" is not allowed': 'अपलोड प्रकार: "{{ type }}" की अनुमति नहीं है',
  "User uploaded content": "उपयोगकर्ता अपलोड की गई सामग्री",
  "Voice message": "आवाज संदेश",
  "Wait until all attachments have uploaded": "सभी अटैचमेंट अपलोड होने तक प्रतीक्षा करें",
  "You have no channels currently": "आपके पास कोई चैनल नहीं है",
  "You've reached the maximum number of files": "आप अधिकतम फ़ाइलों तक पहुँच गए हैं",
  "aria/Attachment": "अनुलग्नक",
  "aria/Cancel Reply": "उत्तर रद्द करें",
  "aria/Cancel upload": "अपलोड रद्द करें",
  "aria/Channel list": "चैनल सूची",
  "aria/Channel search results": "चैनल खोज परिणाम",
  "aria/Close thread": "थ्रेड बंद करें",
  "aria/Emoji picker": "इमोजी चुनने वाला",
  "aria/File input": "फ़ाइल इनपुट",
  "aria/File upload": "फ़ाइल अपलोड",
  "aria/Image input": "छवि इनपुट",
  "aria/Load More Channels": "और चैनल लोड करें",
  "aria/Menu": "मेन्यू",
  "aria/Message Options": "संदेश विकल्प",
  "aria/Open Message Actions Menu": "संदेश क्रिया मेन्यू खोलें",
  "aria/Open Reaction Selector": "प्रतिक्रिया चयनकर्ता खोलें",
  "aria/Open Thread": "थ्रेड खोलें",
  "aria/Reaction list": "प्रतिक्रिया सूची",
  "aria/Retry upload": "अपलोड पुनः प्रयास करें",
  "aria/Send": "भेजें",
  "ban-command-args": "[@उपयोगकर्तनाम] [पाठ]",
  "ban-command-description": "एक उपयोगकर्ता को प्रतिषेधित करें",
  "giphy-command-args": "[पाठ]",
  "giphy-command-description": "चैनल पर एक क्रॉफिल जीआइएफ पोस्ट करें",
  live: "लाइव",
  "mute-command-args": "[@उपयोगकर्तनाम]",
  "mute-command-description": "एक उपयोगकर्ता को म्यूट करें",
  replyCount_one: "1 रिप्लाई",
  replyCount_other: "{{ count }} रिप्लाई",
  searchResultsCount_one: "1 परिणाम",
  searchResultsCount_other: "{{ count }} परिणाम",
  "this content could not be displayed": "यह कॉन्टेंट लोड नहीं हो पाया",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@उपयोगकर्तनाम]",
  "unban-command-description": "एक उपयोगकर्ता को प्रतिषेध से मुक्त करें",
  "unmute-command-args": "[@उपयोगकर्तनाम]",
  "unmute-command-description": "एक उपयोगकर्ता को अनम्यूट करें",
  unreadMessagesSeparatorText_one: "1 अपठित संदेश",
  unreadMessagesSeparatorText_other: "{{count}} अपठित संदेश",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} और {{ moreCount }} और",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} और {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} और {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} और",
  "{{ memberCount }} members": "{{ memberCount }} मेंबर्स",
  "{{ user }} has been muted": "{{ user }} को म्यूट कर दिया गया है",
  "{{ user }} has been unmuted": "{{ user }} को अनम्यूट कर दिया गया है",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} अपठित",
  "{{count}} unread_other": "{{count}} अपठित",
  "🏙 Attachment...": "🏙 अटैचमेंट"
};

// node_modules/stream-chat-react/dist/i18n/it.json
var it_default = {
  "Allow access to camera": "Consenti l'accesso alla fotocamera",
  "Allow access to microphone": "Consenti l'accesso al microfono",
  "An error has occurred during recording": "Si è verificato un errore durante la registrazione",
  "An error has occurred during the recording processing": "Si è verificato un errore durante l'elaborazione della registrazione",
  "Attach files": "Allega file",
  Cancel: "Annulla",
  "Cannot seek in the recording": "Impossibile cercare nella registrazione",
  "Channel Missing": "Il canale non esiste",
  Close: "Chiudi",
  "Close emoji picker": "Chiudi il selettore di emoji",
  "Commands matching": "Comandi corrispondenti",
  "Connection failure, reconnecting now...": "Connessione fallitta, riconnessione in corso...",
  Delete: "Cancella",
  Delivered: "Consegnato",
  "Drag your files here": "Trascina i tuoi file qui",
  "Drag your files here to add to your post": "Trascina i tuoi file qui per aggiungerli al tuo post",
  "Edit Message": "Modifica messaggio",
  "Edit message request failed": "Richiesta di modifica del messaggio non riuscita",
  Edited: "Modificato",
  "Emoji matching": "Abbinamento emoji",
  "Empty message...": "Message vuoto...",
  "Error adding flag": "Errore durante l'aggiunta del flag",
  "Error connecting to chat, refresh the page to try again.": "Errore di connessione alla chat, aggiorna la pagina per riprovare",
  "Error deleting message": "Errore durante l'eliminazione del messaggio",
  "Error fetching reactions": "Errore nel caricamento delle reazioni",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Errore durante la marcatura del messaggio come non letto. Impossibile marcare messaggi non letti più vecchi dei più recenti 100 messaggi del canale.",
  "Error muting a user ...": "Errore silenziando un utente ...",
  "Error pinning message": "Errore durante il blocco del messaggio",
  "Error removing message pin": "Errore durante la rimozione del PIN del messaggio",
  "Error reproducing the recording": "Errore durante la riproduzione della registrazione",
  "Error starting recording": "Errore durante l'avvio della registrazione",
  "Error unmuting a user ...": "Errore riattivando le notifiche per l'utente ...",
  "Error uploading attachment": "Errore durante il caricamento dell'allegato",
  "Error uploading file": "Errore durante il caricamento del file",
  "Error uploading image": "Errore durante il caricamento dell'immagine",
  "Error · Unsent": "Errore · Non inviato",
  "Error: {{ errorMessage }}": "Errore: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Impossibile passare al primo messaggio non letto",
  "Failed to mark channel as read": "Impossibile contrassegnare il canale come letto",
  "Failed to play the recording": "Impossibile riprodurre la registrazione",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Il file è troppo grande: {{ size }}, la dimensione massima di caricamento è {{ limit }}",
  Flag: "Segnala",
  "Latest Messages": "Ultimi messaggi",
  "Load more": "Carica di più",
  "Mark as unread": "Contrassegna come non letto",
  Menu: "Menù",
  "Message Failed · Click to try again": "Invio messaggio fallito · Clicca per riprovare",
  "Message Failed · Unauthorized": "Invio messaggio fallito · Non autorizzato",
  "Message deleted": "Messaggio cancellato",
  "Message has been successfully flagged": "Il messaggio é stato segnalato con successo",
  "Message pinned": "Messaggio bloccato",
  "Messages have been marked unread.": "I messaggi sono stati contrassegnati come non letti.",
  "Missing permissions to upload the attachment": "Autorizzazioni mancanti per caricare l'allegato",
  Mute: "Silenzia",
  New: "Nuovo",
  "New Messages!": "Nuovo messaggio!",
  "No chats here yet…": "Non ci sono ancora messaggi qui...",
  "No results found": "Nessun risultato trovato",
  "Nothing yet...": "Ancora niente...",
  Ok: "Ok",
  "Open emoji picker": "Apri il selettore dellle emoji",
  "People matching": "Persone che corrispondono",
  Pin: "Pin",
  "Pinned by": "Appuntato da",
  "Recording format is not supported and cannot be reproduced": "Il formato di registrazione non è supportato e non può essere riprodotto",
  Reply: "Rispondere",
  "Reply to Message": "Rispondi al messaggio",
  Search: "Ricerca",
  "Searching...": "Ricerca in corso ...",
  Send: "Invia",
  "Send Anyway": "Invia comunque",
  "Send message request failed": "Invia messaggio di richiesta non riuscito",
  "Sending...": "Invio in corso...",
  Shuffle: "Mescolare",
  "Slow Mode ON": "Modalità lenta attivata",
  "Some of the files will not be accepted": "Alcuni dei file non saranno accettati",
  "This message did not meet our content guidelines": "Questo messaggio non soddisfa le nostre linee guida sui contenuti",
  "This message was deleted...": "Questo messaggio é stato cancellato",
  Thread: "Thread",
  "To start recording, allow the camera access in your browser": "Per iniziare la registrazione, consenti l'accesso alla fotocamera nel tuo browser",
  "To start recording, allow the microphone access in your browser": "Per iniziare la registrazione, consenti l'accesso al microfono nel tuo browser",
  "Type your message": "Scrivi il tuo messaggio",
  Unmute: "Riattiva le notifiche",
  Unpin: "Sblocca",
  "Unread messages": "Messaggi non letti",
  "Unsupported attachment": "Allegato non supportato",
  'Upload type: "{{ type }}" is not allowed': 'Tipo di caricamento: "{{ type }}" non è consentito',
  "User uploaded content": "Contenuto caricato dall'utente",
  "Voice message": "Messaggio vocale",
  "Wait until all attachments have uploaded": "Attendi il caricamento di tutti gli allegati",
  "You have no channels currently": "Al momento non sono presenti canali",
  "You've reached the maximum number of files": "Hai raggiunto il numero massimo di file",
  "aria/Attachment": "Allegato",
  "aria/Cancel Reply": "Annulla risposta",
  "aria/Cancel upload": "Annulla caricamento",
  "aria/Channel list": "Elenco dei canali",
  "aria/Channel search results": "Risultati della ricerca dei canali",
  "aria/Close thread": "Chiudi discussione",
  "aria/Emoji picker": "Selettore di emoji",
  "aria/File input": "Input di file",
  "aria/File upload": "Caricamento di file",
  "aria/Image input": "Input di immagine",
  "aria/Load More Channels": "Carica altri canali",
  "aria/Menu": "Menu",
  "aria/Message Options": "Opzioni di messaggio",
  "aria/Open Message Actions Menu": "Apri il menu delle azioni di messaggio",
  "aria/Open Reaction Selector": "Apri il selettore di reazione",
  "aria/Open Thread": "Apri discussione",
  "aria/Reaction list": "Elenco delle reazioni",
  "aria/Retry upload": "Riprova caricamento",
  "aria/Send": "Invia",
  "ban-command-args": "[@nomeutente] [testo]",
  "ban-command-description": "Vietare un utente",
  "giphy-command-args": "[testo]",
  "giphy-command-description": "Pubblica un gif casuale sul canale",
  live: "live",
  "mute-command-args": "[@nomeutente]",
  "mute-command-description": "Silenzia un utente",
  replyCount_many: "{{ count }} risposte",
  replyCount_one: "Una risposta",
  replyCount_other: "{{ count }} risposte",
  searchResultsCount_many: "{{ count }} risultati",
  searchResultsCount_one: "1 risultato",
  searchResultsCount_other: "{{ count }} risultati",
  "this content could not be displayed": "questo contenuto non puó essere mostrato",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomeutente]",
  "unban-command-description": "Togliere il divieto a un utente",
  "unmute-command-args": "[@nomeutente]",
  "unmute-command-description": "Togliere il silenzio a un utente",
  unreadMessagesSeparatorText_many: "{{count}} messaggi non letti",
  unreadMessagesSeparatorText_one: "1 messaggio non letto",
  unreadMessagesSeparatorText_other: "{{count}} messaggi non letti",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e altri {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "+ {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} membri",
  "{{ user }} has been muted": "{{ user }} é stato silenziato",
  "{{ user }} has been unmuted": "Notifiche riattivate per {{ user }}",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} non letti",
  "{{count}} unread_one": "{{count}} non letto",
  "{{count}} unread_other": "{{count}} non letti",
  "🏙 Attachment...": "🏙 Allegato..."
};

// node_modules/stream-chat-react/dist/i18n/ja.json
var ja_default = {
  "Allow access to camera": "カメラへのアクセスを許可する",
  "Allow access to microphone": "マイクロフォンへのアクセスを許可する",
  "An error has occurred during recording": "録音中にエラーが発生しました",
  "An error has occurred during the recording processing": "録音処理中にエラーが発生しました",
  "Attach files": "ファイルを添付する",
  Cancel: "キャンセル",
  "Cannot seek in the recording": "録音中にシークできません",
  "Channel Missing": "チャネルがありません",
  Close: "閉める",
  "Close emoji picker": "絵文字ピッカーを閉める",
  "Commands matching": "一致するコマンド",
  "Connection failure, reconnecting now...": "接続が失敗しました。再接続中...",
  Delete: "消去",
  Delivered: "配信しました",
  "Drag your files here": "ここにファイルをドラッグ",
  "Drag your files here to add to your post": "投稿に追加するためにここにファイルをドラッグ",
  "Edit Message": "メッセージを編集",
  "Edit message request failed": "メッセージの編集要求が失敗しました",
  Edited: "編集済み",
  "Emoji matching": "絵文字マッチング",
  "Empty message...": "空のメッセージ...",
  "Error adding flag": "フラグを追加のエラーが発生しました",
  "Error connecting to chat, refresh the page to try again.": "チャットへの接続ができませんでした。ページを更新してください。",
  "Error deleting message": "メッセージを削除するエラーが発生しました",
  "Error fetching reactions": "反応の読み込みエラー",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "メッセージを未読にする際にエラーが発生しました。最新の100件のチャンネルメッセージより古い未読メッセージはマークできません。",
  "Error muting a user ...": "ユーザーを無音するエラーが発生しました...",
  "Error pinning message": "メッセージをピンのエラーが発生しました",
  "Error removing message pin": "メッセージのピンを削除のエラーが発生しました",
  "Error reproducing the recording": "録音の再生中にエラーが発生しました",
  "Error starting recording": "録音の開始時にエラーが発生しました",
  "Error unmuting a user ...": "ユーザーの無音解除のエラーが発生しました...",
  "Error uploading attachment": "添付ファイルのアップロード中にエラーが発生しました",
  "Error uploading file": "ファイルをアップロードのエラーが発生しました",
  "Error uploading image": "画像をアップロードのエラーが発生しました",
  "Error · Unsent": "エラー・未送信",
  "Error: {{ errorMessage }}": "エラー: {{ errorMessage }}",
  "Failed to jump to the first unread message": "最初の未読メッセージにジャンプできませんでした",
  "Failed to mark channel as read": "チャンネルを既読にすることができませんでした",
  "Failed to play the recording": "録音の再生に失敗しました",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "ファイルが大きすぎます：{{ size }}、最大アップロードサイズは{{ limit }}です",
  Flag: "フラグ",
  "Latest Messages": "最新のメッセージ",
  "Load more": "もっと読み込む",
  "Mark as unread": "未読としてマーク",
  Menu: "メニュー",
  "Message Failed · Click to try again": "メッセージが失敗しました · クリックして再試行してください",
  "Message Failed · Unauthorized": "メッセージが失敗しました · 許可されていません",
  "Message deleted": "メッセージが削除されました",
  "Message has been successfully flagged": "メッセージに正常にフラグが付けられました",
  "Message pinned": "メッセージにピンが付けられました",
  "Messages have been marked unread.": "メッセージは未読としてマークされました。",
  "Missing permissions to upload the attachment": "添付ファイルをアップロードするための許可がありません",
  Mute: "無音",
  New: "新しい",
  "New Messages!": "新しいメッセージ!",
  "No chats here yet…": "ここにはまだチャットはありません…",
  "No results found": "結果が見つかりません",
  "Nothing yet...": "まだ何もありません...",
  Ok: "OK",
  "Open emoji picker": "絵文字ピッカーを開く",
  "People matching": "一致する人",
  Pin: "ピン",
  "Pinned by": "ピンした方",
  "Recording format is not supported and cannot be reproduced": "録音形式はサポートされておらず、再生できません",
  Reply: "返事",
  "Reply to Message": "メッセージに返信",
  Search: "探す",
  "Searching...": "検索中...",
  Send: "送信",
  "Send Anyway": "とにかく送信する",
  "Send message request failed": "メッセージ送信リクエストが失敗しました",
  "Sending...": "送信中...",
  Shuffle: "シャッフル",
  "Slow Mode ON": "スローモードオン",
  "Some of the files will not be accepted": "一部のファイルは受け付けられません",
  "This message did not meet our content guidelines": "このメッセージはコンテンツガイドラインに適合していません",
  "This message was deleted...": "このメッセージは削除されました...",
  Thread: "スレッド",
  "To start recording, allow the camera access in your browser": "録音を開始するには、ブラウザーでカメラへのアクセスを許可してください",
  "To start recording, allow the microphone access in your browser": "録音を開始するには、ブラウザーでマイクロフォンへのアクセスを許可してください",
  "Type your message": "メッセージを入力してください",
  Unmute: "無音を解除する",
  Unpin: "ピンを解除する",
  "Unread messages": "未読メッセージ",
  "Unsupported attachment": "サポートされていない添付ファイル",
  'Upload type: "{{ type }}" is not allowed': 'アップロードタイプ："{{ type }}"は許可されていません',
  "User uploaded content": "ユーザーがアップロードしたコンテンツ",
  "Voice message": "ボイスメッセージ",
  "Wait until all attachments have uploaded": "すべての添付ファイルがアップロードされるまでお待ちください",
  "You have no channels currently": "現在チャンネルはありません",
  "You've reached the maximum number of files": "ファイルの最大数に達しました",
  "aria/Attachment": "添付ファイル",
  "aria/Cancel Reply": "返信をキャンセル",
  "aria/Cancel upload": "アップロードをキャンセル",
  "aria/Channel list": "チャンネル一覧",
  "aria/Channel search results": "チャンネル検索結果",
  "aria/Close thread": "スレッドを閉じる",
  "aria/Emoji picker": "絵文字ピッカー",
  "aria/File input": "ファイル入力",
  "aria/File upload": "ファイルアップロード",
  "aria/Image input": "画像入力",
  "aria/Load More Channels": "さらにチャンネルを読み込む",
  "aria/Menu": "メニュー",
  "aria/Message Options": "メッセージオプション",
  "aria/Open Message Actions Menu": "メッセージアクションメニューを開く",
  "aria/Open Reaction Selector": "リアクションセレクターを開く",
  "aria/Open Thread": "スレッドを開く",
  "aria/Reaction list": "リアクション一覧",
  "aria/Retry upload": "アップロードを再試行",
  "aria/Send": "送信",
  "ban-command-args": "[@ユーザ名] [テキスト]",
  "ban-command-description": "ユーザーを禁止する",
  "giphy-command-args": "[テキスト]",
  "giphy-command-description": "チャンネルにランダムなGIFを投稿する",
  live: "ライブ",
  "mute-command-args": "[@ユーザ名]",
  "mute-command-description": "ユーザーをミュートする",
  replyCount_one: "1件の返信",
  replyCount_other: "{{ count }} 返信",
  searchResultsCount_one: "1件の結果",
  searchResultsCount_other: "{{ count }}件の結果",
  "this content could not be displayed": "このコンテンツは表示できませんでした",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@ユーザ名]",
  "unban-command-description": "ユーザーの禁止を解除する",
  "unmute-command-args": "[@ユーザ名]",
  "unmute-command-description": "ユーザーのミュートを解除する",
  unreadMessagesSeparatorText_other: "未読メッセージ {{count}} 件",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} と {{ moreCount }} 他人",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} と {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} と {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} イメージ",
  "{{ memberCount }} members": "{{ memberCount }} メンバー",
  "{{ user }} has been muted": "{{ user }} 無音されています",
  "{{ user }} has been unmuted": "{{ user }} 無音されていません",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} オンライン",
  "{{count}} unread_other": "{{count}} 未読",
  "🏙 Attachment...": "🏙 アタッチメント..."
};

// node_modules/stream-chat-react/dist/i18n/ko.json
var ko_default = {
  "Allow access to camera": "카메라에 대한 액세스 허용",
  "Allow access to microphone": "마이크로폰에 대한 액세스 허용",
  "An error has occurred during recording": "녹음 중 오류가 발생했습니다",
  "An error has occurred during the recording processing": "녹음 처리 중 오류가 발생했습니다",
  "Attach files": "파일 첨부",
  Cancel: "취소",
  "Cannot seek in the recording": "녹음에서 찾을 수 없습니다",
  "Channel Missing": "채널 누락",
  Close: "닫기",
  "Close emoji picker": "이모티콘 선택기 닫기",
  "Commands matching": "일치하는 명령",
  "Connection failure, reconnecting now...": "연결 실패, 지금 다시 연결 중...",
  Delete: "삭제",
  Delivered: "배달됨",
  "Drag your files here": "여기로 파일을 끌어다 놓으세요",
  "Drag your files here to add to your post": "게시물에 추가하려면 파일을 여기로 끌어다 놓으세요",
  "Edit Message": "메시지 수정",
  "Edit message request failed": "메시지 수정 요청 실패",
  Edited: "편집됨",
  "Emoji matching": "이모티콘 매칭",
  "Empty message...": "빈 메시지...",
  "Error adding flag": "플래그를 추가하는 동안 오류가 발생했습니다.",
  "Error connecting to chat, refresh the page to try again.": "채팅에 연결하는 동안 오류가 발생했습니다. 페이지를 새로고침하여 다시 시도하세요.",
  "Error deleting message": "메시지를 삭제하는 중에 오류가 발생했습니다.",
  "Error fetching reactions": "반응 로딩 오류.",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "메시지를 읽지 않음으로 표시하는 중 오류가 발생했습니다. 가장 최근 100개의 채널 메시지보다 오래된 읽지 않은 메시지는 표시할 수 없습니다.",
  "Error muting a user ...": "사용자를 음소거하는 중에 오류가 발생했습니다...",
  "Error pinning message": "메시지를 핀하는 중에 오류가 발생했습니다.",
  "Error removing message pin": "메시지 핀을 제거하는 중에 오류가 발생했습니다.",
  "Error reproducing the recording": "녹음 재생 중 오류 발생",
  "Error starting recording": "녹음 시작 중 오류가 발생했습니다",
  "Error unmuting a user ...": "사용자 음소거 해제 중 오류 발생...",
  "Error uploading attachment": "첨부 파일 업로드 중 오류가 발생했습니다",
  "Error uploading file": "파일 업로드 오류",
  "Error uploading image": "이미지를 업로드하는 동안 오류가 발생했습니다.",
  "Error · Unsent": "오류 · 전송되지 않음",
  "Error: {{ errorMessage }}": "오류: {{ errorMessage }}",
  "Failed to jump to the first unread message": "첫 번째 읽지 않은 메시지로 이동하지 못했습니다",
  "Failed to mark channel as read": "채널을 읽음으로 표시하는 데 실패했습니다",
  "Failed to play the recording": "녹음을 재생하지 못했습니다",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "파일이 너무 큽니다: {{ size }}, 최대 업로드 크기는 {{ limit }}입니다",
  Flag: "플래그",
  "Latest Messages": "최신 메시지",
  "Load more": "더 불러오기",
  "Mark as unread": "읽지 않음으로 표시",
  Menu: "메뉴",
  "Message Failed · Click to try again": "메시지 실패 · 다시 시도하려면 클릭하세요.",
  "Message Failed · Unauthorized": "메시지 실패 · 승인되지 않음",
  "Message deleted": "메시지가 삭제되었습니다.",
  "Message has been successfully flagged": "메시지에 플래그가 지정되었습니다.",
  "Message pinned": "메시지 핀했습니다",
  "Messages have been marked unread.": "메시지가 읽지 않음으로 표시되었습니다.",
  "Missing permissions to upload the attachment": "첨부 파일을 업로드하려면 권한이 필요합니다",
  Mute: "무음",
  New: "새로운",
  "New Messages!": "새 메시지!",
  "No chats here yet…": "아직 채팅이 없습니다...",
  "No results found": "검색 결과가 없습니다",
  "Nothing yet...": "아직 아무것도...",
  Ok: "확인",
  "Open emoji picker": "이모티콘 선택기 열기",
  "People matching": "일치하는 사람",
  Pin: "핀",
  "Pinned by": "핀했던 분:",
  "Recording format is not supported and cannot be reproduced": "녹음 형식이 지원되지 않으므로 재생할 수 없습니다",
  Reply: "답장",
  "Reply to Message": "메시지에 답장",
  Search: "찾다",
  "Searching...": "수색...",
  Send: "보내다",
  "Send Anyway": "어쨌든 보내기",
  "Send message request failed": "메시지 보내기 요청 실패",
  "Sending...": "배상중...",
  Shuffle: "셔플",
  "Slow Mode ON": "슬로우 모드 켜짐",
  "Some of the files will not be accepted": "일부 파일은 허용되지 않을 수 있습니다",
  "This message did not meet our content guidelines": "이 메시지는 콘텐츠 가이드라인을 충족하지 않습니다.",
  "This message was deleted...": "이 메시지는 삭제되었습니다...",
  Thread: "스레드",
  "To start recording, allow the camera access in your browser": "브라우저에서 카메라 액세스를 허용하여 녹음을 시작합니다",
  "To start recording, allow the microphone access in your browser": "브라우저에서 마이크로폰 액세스를 허용하여 녹음을 시작합니다",
  "Type your message": "메시지 입력",
  Unmute: "음소거 해제",
  Unpin: "핀 해제",
  "Unread messages": "읽지 않은 메시지",
  "Unsupported attachment": "지원되지 않는 첨부 파일",
  'Upload type: "{{ type }}" is not allowed': '업로드 유형: "{{ type }}"은(는) 허용되지 않습니다.',
  "User uploaded content": "사용자 업로드 콘텐츠",
  "Voice message": "음성 메시지",
  "Wait until all attachments have uploaded": "모든 첨부 파일이 업로드될 때까지 기다립니다.",
  "You have no channels currently": "현재 채널이 없습니다.",
  "You've reached the maximum number of files": "최대 파일 수에 도달했습니다.",
  "aria/Attachment": "첨부 파일",
  "aria/Cancel Reply": "답장 취소",
  "aria/Cancel upload": "업로드 취소",
  "aria/Channel list": "채널 목록",
  "aria/Channel search results": "채널 검색 결과",
  "aria/Close thread": "스레드 닫기",
  "aria/Emoji picker": "이모지 선택기",
  "aria/File input": "파일 입력",
  "aria/File upload": "파일 업로드",
  "aria/Image input": "이미지 입력",
  "aria/Load More Channels": "더 많은 채널 불러오기",
  "aria/Menu": "메뉴",
  "aria/Message Options": "메시지 옵션",
  "aria/Open Message Actions Menu": "메시지 액션 메뉴 열기",
  "aria/Open Reaction Selector": "반응 선택기 열기",
  "aria/Open Thread": "스레드 열기",
  "aria/Reaction list": "반응 목록",
  "aria/Retry upload": "업로드 다시 시도",
  "aria/Send": "보내기",
  "ban-command-args": "[@사용자이름] [텍스트]",
  "ban-command-description": "사용자를 차단",
  "giphy-command-args": "[텍스트]",
  "giphy-command-description": "채널에 무작위 GIF 게시",
  live: "라이브",
  "mute-command-args": "[@사용자이름]",
  "mute-command-description": "사용자 음소거",
  replyCount_one: "답장 1개",
  replyCount_other: "{{ count }} 답장",
  searchResultsCount_one: "1개의 결과",
  searchResultsCount_other: "{{ count }}개 결과",
  "this content could not be displayed": "이 콘텐츠를 표시할 수 없습니다",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@사용자이름]",
  "unban-command-description": "사용자 차단 해제",
  "unmute-command-args": "[@사용자이름]",
  "unmute-command-description": "사용자 음소거 해제",
  unreadMessagesSeparatorText_other: "읽지 않은 메시지 {{count}}개",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} 그리고 {{ moreCount }}명 더",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} 그리고 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} 그리고 {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }}개 더",
  "{{ memberCount }} members": "{{ memberCount }}명",
  "{{ user }} has been muted": "{{ user }} 음소거되었습니다",
  "{{ user }} has been unmuted": "{{ user }} 음소거가 해제되었습니다",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} 온라인",
  "{{count}} unread_other": "{{count}} 읽지 않음",
  "🏙 Attachment...": "🏙 부착..."
};

// node_modules/stream-chat-react/dist/i18n/nl.json
var nl_default = {
  "Allow access to camera": "Toegang tot camera toestaan",
  "Allow access to microphone": "Toegang tot microfoon toestaan",
  "An error has occurred during recording": "Er is een fout opgetreden tijdens het opnemen",
  "An error has occurred during the recording processing": "Er is een fout opgetreden tijdens de verwerking van de opname",
  "Attach files": "Bijlage toevoegen",
  Cancel: "Annuleer",
  "Cannot seek in the recording": "Kan niet zoeken in de opname",
  "Channel Missing": "Kanaal niet gevonden",
  Close: "Sluit",
  "Close emoji picker": "Sluit de emoji-kiezer",
  "Commands matching": "Bijpassende opdrachten",
  "Connection failure, reconnecting now...": "Probleem met de verbinding, opnieuw verbinding maken...",
  Delete: "Verwijder",
  Delivered: "Afgeleverd",
  "Drag your files here": "Sleep je bestanden hier naartoe",
  "Drag your files here to add to your post": "Sleep je bestanden hier naartoe om aan je bericht toe te voegen",
  "Edit Message": "Pas bericht aan",
  "Edit message request failed": "Verzoek om bericht bewerken mislukt",
  Edited: "Bewerkt",
  "Emoji matching": "Emoji-overeenkomsten",
  "Empty message...": "Leeg bericht...",
  "Error adding flag": "Fout bij toevoegen van vlag",
  "Error connecting to chat, refresh the page to try again.": "Fout bij het verbinden, ververs de pagina om nogmaals te proberen",
  "Error deleting message": "Fout bij verwijderen van bericht",
  "Error fetching reactions": "Fout bij het laden van reacties",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fout bij markeren van bericht als ongelezen. Kan geen oudere ongelezen berichten markeren dan de nieuwste 100 kanaalberichten.",
  "Error muting a user ...": "Fout bij het muten van de gebruiker",
  "Error pinning message": "Fout bij vastzetten van bericht",
  "Error removing message pin": "Fout bij verwijderen van berichtpin",
  "Error reproducing the recording": "Fout bij het afspelen van de opname",
  "Error starting recording": "Fout bij het starten van de opname",
  "Error unmuting a user ...": "Fout bij het unmuten van de gebruiker",
  "Error uploading attachment": "Fout bij het uploaden van de bijlage",
  "Error uploading file": "Fout bij uploaden bestand",
  "Error uploading image": "Fout bij uploaden afbeelding",
  "Error · Unsent": "Error: · niet verzonden",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Niet gelukt om naar het eerste ongelezen bericht te springen",
  "Failed to mark channel as read": "Kanaal kon niet als gelezen worden gemarkeerd",
  "Failed to play the recording": "Kan de opname niet afspelen",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Bestand is te groot: {{ size }}, maximale uploadgrootte is {{ limit }}",
  Flag: "Markeer",
  "Latest Messages": "Laatste berichten",
  "Load more": "Meer laden",
  "Mark as unread": "Markeren als ongelezen",
  Menu: "Menu",
  "Message Failed · Click to try again": "Bericht mislukt, klik om het nogmaals te proberen",
  "Message Failed · Unauthorized": "Bericht mislukt, ongeautoriseerd",
  "Message deleted": "Bericht verwijderd",
  "Message has been successfully flagged": "Bericht is succesvol gemarkeerd",
  "Message pinned": "Bericht vastgezet",
  "Messages have been marked unread.": "Berichten zijn gemarkeerd als ongelezen.",
  "Missing permissions to upload the attachment": "Missende toestemmingen om de bijlage te uploaden",
  Mute: "Mute",
  New: "Nieuwe",
  "New Messages!": "Nieuwe Berichten!",
  "No chats here yet…": "Nog geen chats hier...",
  "No results found": "Geen resultaten gevonden",
  "Nothing yet...": "Nog niets ...",
  Ok: "Oké",
  "Open emoji picker": "Open emojipicker",
  "People matching": "Mensen die matchen",
  Pin: "Pin",
  "Pinned by": "Vastgemaakt door",
  "Recording format is not supported and cannot be reproduced": "Opnameformaat wordt niet ondersteund en kan niet worden gereproduceerd",
  Reply: "Antwoord",
  "Reply to Message": "Antwoord op bericht",
  Search: "Zoeken",
  "Searching...": "Zoeken...",
  Send: "Verstuur",
  "Send Anyway": "Toch versturen",
  "Send message request failed": "Verzoek om bericht te verzenden mislukt",
  "Sending...": "Aan het verzenden...",
  Shuffle: "Schudden",
  "Slow Mode ON": "Langzame modus aan",
  "Some of the files will not be accepted": "Sommige bestanden zullen niet worden geaccepteerd",
  "This message did not meet our content guidelines": "Dit bericht voldeed niet aan onze inhoudsrichtlijnen",
  "This message was deleted...": "Dit bericht was verwijderd",
  Thread: "Draadje",
  "To start recording, allow the camera access in your browser": "Om te beginnen met opnemen, sta toegang tot de camera toe in uw browser",
  "To start recording, allow the microphone access in your browser": "Om te beginnen met opnemen, sta toegang tot de microfoon toe in uw browser",
  "Type your message": "Type je bericht",
  Unmute: "Unmute",
  Unpin: "Losmaken",
  "Unread messages": "Ongelezen berichten",
  "Unsupported attachment": "Niet-ondersteunde bijlage",
  'Upload type: "{{ type }}" is not allowed': 'Uploadtype: "{{ type }}" is niet toegestaan',
  "User uploaded content": "Gebruikersgeüploade inhoud",
  "Voice message": "Voicemail",
  "Wait until all attachments have uploaded": "Wacht tot alle bijlagen zijn geüpload",
  "You have no channels currently": "Er zijn geen chats beschikbaar",
  "You've reached the maximum number of files": "Je hebt het maximale aantal bestanden bereikt",
  "aria/Attachment": "Bijlage",
  "aria/Cancel Reply": "Antwoord annuleren",
  "aria/Cancel upload": "Upload annuleren",
  "aria/Channel list": "Kanaallijst",
  "aria/Channel search results": "Zoekresultaten voor kanalen",
  "aria/Close thread": "Draad sluiten",
  "aria/Emoji picker": "Emoji kiezer",
  "aria/File input": "Bestandsinvoer",
  "aria/File upload": "Bestand uploaden",
  "aria/Image input": "Afbeelding invoeren",
  "aria/Load More Channels": "Meer kanalen laden",
  "aria/Menu": "Menu",
  "aria/Message Options": "Berichtopties",
  "aria/Open Message Actions Menu": "Menu voor berichtacties openen",
  "aria/Open Reaction Selector": "Reactiekiezer openen",
  "aria/Open Thread": "Draad openen",
  "aria/Reaction list": "Reactielijst",
  "aria/Retry upload": "Upload opnieuw proberen",
  "aria/Send": "Verzenden",
  "ban-command-args": "[@gebruikersnaam] [tekst]",
  "ban-command-description": "Een gebruiker verbannen",
  "giphy-command-args": "[tekst]",
  "giphy-command-description": "Plaats een willekeurige gif in het kanaal",
  live: "live",
  "mute-command-args": "[@gebruikersnaam]",
  "mute-command-description": "Een gebruiker dempen",
  replyCount_one: "1 antwoord",
  replyCount_other: "{{ count }} antwoorden",
  searchResultsCount_one: "1 resultaat",
  searchResultsCount_other: "{{ count }} resultaten",
  "this content could not be displayed": "Deze inhoud kan niet weergegeven worden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@gebruikersnaam]",
  "unban-command-description": "Een gebruiker debannen",
  "unmute-command-args": "[@gebruikersnaam]",
  "unmute-command-description": "Een gebruiker niet meer dempen",
  unreadMessagesSeparatorText_one: "1 ongelezen bericht",
  unreadMessagesSeparatorText_other: "{{count}} ongelezen berichten",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} en {{ moreCount }} meer",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} en {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} en {{ secondUser }}",
  "{{ imageCount }} more": "+{{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} deelnemers",
  "{{ user }} has been muted": "{{ user }} is muted",
  "{{ user }} has been unmuted": "{{ user }} is unmuted",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ongelezen",
  "{{count}} unread_other": "{{count}} ongelezen",
  "🏙 Attachment...": "🏙 Bijlage..."
};

// node_modules/stream-chat-react/dist/i18n/pt.json
var pt_default = {
  "Allow access to camera": "Permitir acesso à câmera",
  "Allow access to microphone": "Permitir acesso ao microfone",
  "An error has occurred during recording": "Ocorreu um erro durante a gravação",
  "An error has occurred during the recording processing": "Ocorreu um erro durante o processamento da gravação",
  "Attach files": "Anexar arquivos",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "Não é possível buscar na gravação",
  "Channel Missing": "Canal ausente",
  Close: "Fechar",
  "Close emoji picker": "Fechar seletor de emoji",
  "Commands matching": "Comandos correspondentes",
  "Connection failure, reconnecting now...": "Falha de conexão, reconectando agora...",
  Delete: "Excluir",
  Delivered: "Entregue",
  "Drag your files here": "Arraste seus arquivos aqui",
  "Drag your files here to add to your post": "Arraste seus arquivos aqui para adicionar ao seu post",
  "Edit Message": "Editar Mensagem",
  "Edit message request failed": "O pedido de edição da mensagem falhou",
  Edited: "Editada",
  "Emoji matching": "Emoji correspondente",
  "Empty message...": "Mensagem vazia...",
  "Error adding flag": "Erro ao reportar",
  "Error connecting to chat, refresh the page to try again.": "Erro ao conectar ao bate-papo, atualize a página para tentar novamente.",
  "Error deleting message": "Erro ao deletar mensagem",
  "Error fetching reactions": "Erro ao carregar reacções",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erro ao marcar a mensagem como não lida. Não é possível marcar mensagens não lidas mais antigas do que as 100 mensagens mais recentes do canal.",
  "Error muting a user ...": "Erro ao silenciar um usuário...",
  "Error pinning message": "Erro ao fixar mensagem",
  "Error removing message pin": "Erro ao remover o PIN da mensagem",
  "Error reproducing the recording": "Erro ao reproduzir a gravação",
  "Error starting recording": "Erro ao iniciar a gravação",
  "Error unmuting a user ...": "Erro ao ativar o som de um usuário...",
  "Error uploading attachment": "Erro ao carregar o anexo",
  "Error uploading file": "Erro ao enviar arquivo",
  "Error uploading image": "Erro ao carregar a imagem",
  "Error · Unsent": "Erro · Não enviado",
  "Error: {{ errorMessage }}": "Erro: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Falha ao pular para a primeira mensagem não lida",
  "Failed to mark channel as read": "Falha ao marcar o canal como lido",
  "Failed to play the recording": "Permissões faltando para carregar o anexo",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "O arquivo é muito grande: {{ size }}, o tamanho máximo de upload é {{ limit }}",
  Flag: "Reportar",
  "Latest Messages": "Mensagens mais recentes",
  "Load more": "Carregar mais",
  "Mark as unread": "Marcar como não lida",
  Menu: "Menu",
  "Message Failed · Click to try again": "A mensagem falhou · Clique para tentar novamente",
  "Message Failed · Unauthorized": "A mensagem falhou · não autorizado",
  "Message deleted": "Mensagem apagada",
  "Message has been successfully flagged": "A mensagem foi reportada com sucesso",
  "Message pinned": "Mensagem fixada",
  "Messages have been marked unread.": "Mensagens foram marcadas como não lidas.",
  "Missing permissions to upload the attachment": "Missing permissions to upload the attachment",
  Mute: "Mudo",
  New: "Novo",
  "New Messages!": "Novas mensagens!",
  "No chats here yet…": "Ainda não há conversas aqui...",
  "No results found": "Nenhum resultado encontrado",
  "Nothing yet...": "Nada ainda...",
  Ok: "Ok",
  "Open emoji picker": "Abrir seletor de emoji",
  "People matching": "Pessoas correspondentes",
  Pin: "Fixar",
  "Pinned by": "Fixado por",
  "Recording format is not supported and cannot be reproduced": "Formato de gravação não é suportado e não pode ser reproduzido",
  Reply: "Responder",
  "Reply to Message": "Responder a mensagem",
  Search: "Procurar",
  "Searching...": "Procurando...",
  Send: "Enviar",
  "Send Anyway": "Enviar de qualquer forma",
  "Send message request failed": "O pedido de envio de mensagem falhou",
  "Sending...": "Enviando...",
  Shuffle: "Embaralhar",
  "Slow Mode ON": "Modo lento LIGADO",
  "Some of the files will not be accepted": "Alguns dos arquivos não serão aceitos",
  "This message did not meet our content guidelines": "Esta mensagem não corresponde às nossas directrizes de conteúdo",
  "This message was deleted...": "Esta mensagem foi excluída...",
  Thread: "Fio",
  "To start recording, allow the camera access in your browser": "Para começar a gravar, permita o acesso à câmera no seu navegador",
  "To start recording, allow the microphone access in your browser": "Para começar a gravar, permita o acesso ao microfone no seu navegador",
  "Type your message": "Digite sua mensagem",
  Unmute: "Ativar som",
  Unpin: "Liberar",
  "Unread messages": "Mensagens não lidas",
  "Unsupported attachment": "Anexo não suportado",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de upload: "{{ type }}" não é permitido',
  "User uploaded content": "Conteúdo enviado pelo usuário",
  "Voice message": "Mensagem de voz",
  "Wait until all attachments have uploaded": "Espere até que todos os anexos tenham sido carregados",
  "You have no channels currently": "Você não tem canais atualmente",
  "You've reached the maximum number of files": "Você atingiu o número máximo de arquivos",
  "aria/Attachment": "Anexo",
  "aria/Cancel Reply": "Cancelar resposta",
  "aria/Cancel upload": "Cancelar upload",
  "aria/Channel list": "Lista de canais",
  "aria/Channel search results": "Resultados de pesquisa de canais",
  "aria/Close thread": "Fechar tópico",
  "aria/Emoji picker": "Seletor de emojis",
  "aria/File input": "Entrada de arquivo",
  "aria/File upload": "Carregar arquivo",
  "aria/Image input": "Entrada de imagem",
  "aria/Load More Channels": "Carregar mais canais",
  "aria/Menu": "Menu",
  "aria/Message Options": "Opções de mensagem",
  "aria/Open Message Actions Menu": "Abrir menu de ações de mensagem",
  "aria/Open Reaction Selector": "Abrir seletor de reações",
  "aria/Open Thread": "Abrir tópico",
  "aria/Reaction list": "Lista de reações",
  "aria/Retry upload": "Tentar upload novamente",
  "aria/Send": "Enviar",
  "ban-command-args": "[@nomedeusuário] [texto]",
  "ban-command-description": "Banir um usuário",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Postar um gif aleatório no canal",
  live: "ao vivo",
  "mute-command-args": "[@nomedeusuário]",
  "mute-command-description": "Silenciar um usuário",
  replyCount_many: "{{ count }} respostas",
  replyCount_one: "1 resposta",
  replyCount_other: "{{ count }} respostas",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "este conteúdo não pôde ser exibido",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomedeusuário]",
  "unban-command-description": "Desbanir um usuário",
  "unmute-command-args": "[@nomedeusuário]",
  "unmute-command-description": "Retirar o silenciamento de um usuário",
  unreadMessagesSeparatorText_many: "{{count}} mensagens não lidas",
  unreadMessagesSeparatorText_one: "1 mensagem não lida",
  unreadMessagesSeparatorText_other: "{{count}} mensagens não lidas",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e mais {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mais",
  "{{ memberCount }} members": "{{ memberCount }} membros",
  "{{ user }} has been muted": "{{ user }} foi silenciado",
  "{{ user }} has been unmuted": "{{ user }} foi reativado",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} não lidos",
  "{{count}} unread_one": "{{count}} não lido",
  "{{count}} unread_other": "{{count}} não lidos",
  "🏙 Attachment...": "🏙 Anexo..."
};

// node_modules/stream-chat-react/dist/i18n/ru.json
var ru_default = {
  "Allow access to camera": "Разрешить доступ к камере",
  "Allow access to microphone": "Разрешить доступ к микрофон",
  "An error has occurred during recording": "Произошла ошибка во время записи",
  "An error has occurred during the recording processing": "Произошла ошибка во время обработки записи",
  "Attach files": "Прикрепить файлы",
  Cancel: "Отмена",
  "Cannot seek in the recording": "Невозможно осуществить поиск в записи",
  "Channel Missing": "Канал не найден",
  Close: "Закрыть",
  "Close emoji picker": "Закрыть окно выбора смайлов",
  "Commands matching": "Соответствие команд",
  "Connection failure, reconnecting now...": "Ошибка соединения, переподключение...",
  Delete: "Удалить",
  Delivered: "Отправлено",
  "Drag your files here": "Перетащите ваши файлы сюда",
  "Drag your files here to add to your post": "Перетащите ваши файлы сюда, чтобы добавить их в ваш пост",
  "Edit Message": "Редактировать сообщение",
  "Edit message request failed": "Не удалось изменить запрос сообщения",
  Edited: "Отредактировано",
  "Emoji matching": "Соответствие эмодзи",
  "Empty message...": "Пустое сообщение...",
  "Error adding flag": "Ошибка добавления флага",
  "Error connecting to chat, refresh the page to try again.": "Ошибка подключения к чату, обновите страницу чтобы попробовать снова.",
  "Error deleting message": "Ошибка при удалении сообщения",
  "Error fetching reactions": "Ошибка при загрузке реакций",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Ошибка при отметке сообщения как непрочитанного. Невозможно отметить как непрочитанные сообщения старше последних 100 сообщений в канале.",
  "Error muting a user ...": "Ошибка отключения уведомлений от пользователя...",
  "Error pinning message": "Сообщение об ошибке при закреплении",
  "Error removing message pin": "Ошибка при удалении булавки сообщения",
  "Error reproducing the recording": "Ошибка воспроизведения записи",
  "Error starting recording": "Ошибка при запуске записи",
  "Error unmuting a user ...": "Ошибка включения уведомлений...",
  "Error uploading attachment": "Ошибка при загрузке вложения",
  "Error uploading file": "Ошибка при загрузке файла",
  "Error uploading image": "Ошибка загрузки изображения",
  "Error · Unsent": "Ошибка · Не отправлено",
  "Error: {{ errorMessage }}": "Ошибка: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Не удалось перейти к первому непрочитанному сообщению",
  "Failed to mark channel as read": "Не удалось пометить канал как прочитанный",
  "Failed to play the recording": "Не удалось воспроизвести запись",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Файл слишком большой: {{ size }}, максимальный размер загрузки составляет {{ limit }}",
  Flag: "Пожаловаться",
  "Latest Messages": "Последние сообщения",
  "Load more": "Загрузить больше",
  "Mark as unread": "Отметить как непрочитанное",
  Menu: "Меню",
  "Message Failed · Click to try again": "Ошибка отправки сообщения · Нажмите чтобы повторить",
  "Message Failed · Unauthorized": "Ошибка отправки сообщения · Неавторизованный",
  "Message deleted": "Сообщение удалено",
  "Message has been successfully flagged": "Жалоба на сообщение была принята",
  "Message pinned": "Сообщение закреплено",
  "Messages have been marked unread.": "Сообщения были отмечены как непрочитанные.",
  "Missing permissions to upload the attachment": "Отсутствуют разрешения для загрузки вложения",
  Mute: "Отключить уведомления",
  New: "Новые",
  "New Messages!": "Новые сообщения!",
  "No chats here yet…": "Здесь еще нет чатов...",
  "No results found": "результаты не найдены",
  "Nothing yet...": "Пока ничего нет...",
  Ok: "Ok",
  "Open emoji picker": "Выбрать emoji",
  "People matching": "Соответствующие люди",
  Pin: "Штырь",
  "Pinned by": "Закреплено",
  "Recording format is not supported and cannot be reproduced": "Формат записи не поддерживается и не может быть воспроизведен",
  Reply: "Отвечать",
  "Reply to Message": "Ответить на сообщение",
  Search: "Поиск",
  "Searching...": "Ищем...",
  Send: "Отправить",
  "Send Anyway": "Мне всё равно, отправить",
  "Send message request failed": "Не удалось отправить запрос на отправку сообщения",
  "Sending...": "Отправка...",
  Shuffle: "Перемешать",
  "Slow Mode ON": "Медленный режим включен",
  "Some of the files will not be accepted": "Некоторые файлы не будут приняты",
  "This message did not meet our content guidelines": "Сообщение не соответствует правилам",
  "This message was deleted...": "Сообщение было удалено...",
  Thread: "Ветка",
  "To start recording, allow the camera access in your browser": "Для начала записи разрешите доступ к камере в вашем браузере",
  "To start recording, allow the microphone access in your browser": "Для начала записи разрешите доступ к микрофону в вашем браузере",
  "Type your message": "Ваше сообщение",
  Unmute: "Включить уведомления",
  Unpin: "Открепить",
  "Unread messages": "Непрочитанные сообщения",
  "Unsupported attachment": "Неподдерживаемое вложение",
  'Upload type: "{{ type }}" is not allowed': 'Тип загрузки: "{{ type }}" не разрешен',
  "User uploaded content": "Пользователь загрузил контент",
  "Voice message": "Голосовое сообщение",
  "Wait until all attachments have uploaded": "Подождите, пока все вложения загрузятся",
  "You have no channels currently": "У вас нет каналов в данный момент",
  "You've reached the maximum number of files": "Вы достигли максимального количества файлов",
  "aria/Attachment": "Вложение",
  "aria/Cancel Reply": "Отменить ответ",
  "aria/Cancel upload": "Отменить загрузку",
  "aria/Channel list": "Список каналов",
  "aria/Channel search results": "Результаты поиска по каналам",
  "aria/Close thread": "Закрыть тему",
  "aria/Emoji picker": "Выбор эмодзи",
  "aria/File input": "Ввод файла",
  "aria/File upload": "Загрузка файла",
  "aria/Image input": "Ввод изображения",
  "aria/Load More Channels": "Загрузить больше каналов",
  "aria/Menu": "Меню",
  "aria/Message Options": "Параметры сообщения",
  "aria/Open Message Actions Menu": "Открыть меню действий с сообщениями",
  "aria/Open Reaction Selector": "Открыть селектор реакций",
  "aria/Open Thread": "Открыть тему",
  "aria/Reaction list": "Список реакций",
  "aria/Retry upload": "Повторить загрузку",
  "aria/Send": "Отправить",
  "ban-command-args": "[@имяпользователя] [текст]",
  "ban-command-description": "Заблокировать пользователя",
  "giphy-command-args": "[текст]",
  "giphy-command-description": "Опубликовать случайную GIF-анимацию в канале",
  live: "В прямом эфире",
  "mute-command-args": "[@имяпользователя]",
  "mute-command-description": "Выключить микрофон у пользователя",
  replyCount_few: "{{ count }} ответов",
  replyCount_many: "{{ count }} ответов",
  replyCount_one: "1 ответ",
  replyCount_other: "{{ count }} ответов",
  searchResultsCount_few: "{{ count }} результата",
  searchResultsCount_many: "{{ count }} результатов",
  searchResultsCount_one: "1 результат",
  searchResultsCount_other: "{{ count }} результатов",
  "this content could not be displayed": "Этот контент не может быть отображен в данный момент",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@имяпользователя]",
  "unban-command-description": "Разблокировать пользователя",
  "unmute-command-args": "[@имяпользователя]",
  "unmute-command-description": "Включить микрофон у пользователя",
  unreadMessagesSeparatorText_few: "1 непрочитанное сообщения",
  unreadMessagesSeparatorText_many: "{{count}} непрочитанных сообщений",
  unreadMessagesSeparatorText_one: "1 непрочитанное сообщение",
  unreadMessagesSeparatorText_other: "{{count}} непрочитанных сообщений",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} и {{ moreCount }} еще",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} и {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} и {{ secondUser }}",
  "{{ imageCount }} more": "Ещё {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} члены",
  "{{ user }} has been muted": "Вы отписались от уведомлений от {{ user }}",
  "{{ user }} has been unmuted": "Уведомления от {{ user }} были включены",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} в сети",
  "{{count}} unread_few": "{{count}} непрочитанных",
  "{{count}} unread_many": "{{count}} непрочитанных",
  "{{count}} unread_one": "{{count}} непрочитанное",
  "{{count}} unread_other": "{{count}} непрочитанных",
  "🏙 Attachment...": "🏙 Вложение..."
};

// node_modules/stream-chat-react/dist/i18n/tr.json
var tr_default = {
  "Allow access to camera": "Kameraya erişime izin ver",
  "Allow access to microphone": "Mikrofona erişime izin ver",
  "An error has occurred during recording": "Kayıt sırasında bir hata oluştu",
  "An error has occurred during the recording processing": "Kayıt işlemi sırasında bir hata oluştu",
  "Attach files": "Dosya ekle",
  Cancel: "İptal",
  "Cannot seek in the recording": "Kayıtta arama yapılamıyor",
  "Channel Missing": "Kanal bulunamıyor",
  Close: "Kapat",
  "Close emoji picker": "Emoji seçiciyi kapat",
  "Commands matching": "Eşleşen komutlar",
  "Connection failure, reconnecting now...": "Bağlantı hatası, tekrar bağlanılıyor...",
  Delete: "Sil",
  Delivered: "İletildi",
  "Drag your files here": "Dosyalarınızı buraya sürükleyin",
  "Drag your files here to add to your post": "Gönderinize eklemek için dosyalarınızı buraya sürükleyin",
  "Edit Message": "Mesajı Düzenle",
  "Edit message request failed": "Mesaj düzenleme isteği başarısız oldu",
  Edited: "Düzenlendi",
  "Emoji matching": "Emoji eşleştirme",
  "Empty message...": "Boş mesaj...",
  "Error adding flag": "Bayrak eklenirken hata oluştu",
  "Error connecting to chat, refresh the page to try again.": "Bağlantı hatası, sayfayı yenileyip tekrar deneyin.",
  "Error deleting message": "Mesaj silinirken hata oluştu",
  "Error fetching reactions": "Reaksiyonlar alınırken hata oluştu",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Mesajı okunmamış olarak işaretleme hatası. En yeni 100 kanal mesajından daha eski okunmamış mesajları işaretleme yapılamaz.",
  "Error muting a user ...": "Kullanıcıyı sessize alırken hata oluştu ...",
  "Error pinning message": "Mesaj sabitlenirken hata oluştu",
  "Error removing message pin": "Mesaj PIN'i kaldırılırken hata oluştu",
  "Error reproducing the recording": "Kaydı yeniden üretme hatası",
  "Error starting recording": "Kayıt başlatılırken hata oluştu",
  "Error unmuting a user ...": "Kullanıcının sesini açarken hata oluştu ...",
  "Error uploading attachment": "Ek yüklenirken hata oluştu",
  "Error uploading file": "Dosya yüklenirken hata oluştu",
  "Error uploading image": "Resmi yüklerken hata",
  "Error · Unsent": "Hata · Gönderilemedi",
  "Error: {{ errorMessage }}": "Hata: {{ errorMessage }}",
  "Failed to jump to the first unread message": "İlk okunmamış mesaja atlamada hata oluştu",
  "Failed to mark channel as read": "Kanalı okundu olarak işaretleme başarısız oldu",
  "Failed to play the recording": "Kayıt oynatılamadı",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Dosya çok büyük: {{ size }}, maksimum yükleme boyutu {{ limit }}",
  Flag: "Bayrak",
  "Latest Messages": "Son Mesajlar",
  "Load more": "Daha fazla yükle",
  "Mark as unread": "Okunmamış olarak işaretle",
  Menu: "Menü",
  "Message Failed · Click to try again": "Mesaj Başarısız · Tekrar denemek için tıklayın",
  "Message Failed · Unauthorized": "Mesaj Başarısız · Yetkisiz",
  "Message deleted": "Mesaj silindi",
  "Message has been successfully flagged": "Mesaj başarıyla bayraklandı",
  "Message pinned": "Mesaj sabitlendi",
  "Messages have been marked unread.": "Mesajlar okunmamış olarak işaretlendi.",
  "Missing permissions to upload the attachment": "Ek yüklemek için izinler eksik",
  Mute: "Sessiz",
  New: "Yeni",
  "New Messages!": "Yeni Mesajlar!",
  "No chats here yet…": "Henüz burada sohbet yok...",
  "No results found": "Sonuç bulunamadı",
  "Nothing yet...": "Şimdilik hiçbir şey...",
  Ok: "Tamam",
  "Open emoji picker": "Emoji klavyesini aç",
  "People matching": "Eşleşen kişiler",
  Pin: "Toplu iğne",
  "Pinned by": "Sabitleyen",
  "Recording format is not supported and cannot be reproduced": "Kayıt formatı desteklenmiyor ve çoğaltılamıyor",
  Reply: "Cevapla",
  "Reply to Message": "Mesajı Cevapla",
  Search: "Arama",
  "Searching...": "Aranıyor...",
  Send: "Gönder",
  "Send Anyway": "Neyse Gönder",
  "Send message request failed": "Mesaj gönderme isteği başarısız oldu",
  "Sending...": "Gönderiliyor...",
  Shuffle: "Karıştır",
  "Slow Mode ON": "Yavaş Mod Açık",
  "Some of the files will not be accepted": "Bazı dosyalar kabul edilmeyecektir",
  "This message did not meet our content guidelines": "Bu mesaj içerik yönergelerimize uygun değil",
  "This message was deleted...": "Bu mesaj silindi",
  Thread: "Konu",
  "To start recording, allow the camera access in your browser": "Kayıt yapmaya başlamak için tarayıcınızda kameraya erişime izin verin",
  "To start recording, allow the microphone access in your browser": "Kayıt yapmaya başlamak için tarayıcınızda mikrofona erişime izin verin",
  "Type your message": "Mesajınızı yazın",
  Unmute: "Sesini aç",
  Unpin: "Sabitlemeyi kaldır",
  "Unread messages": "Okunmamış mesajlar",
  "Unsupported attachment": "Desteklenmeyen ek",
  'Upload type: "{{ type }}" is not allowed': 'Yükleme türü: "{{ type }}" izin verilmez',
  "User uploaded content": "Kullanıcı tarafından yüklenen içerik",
  "Voice message": "Sesli mesaj",
  "Wait until all attachments have uploaded": "Tüm ekler yüklenene kadar bekleyin",
  "You have no channels currently": "Henüz kanalınız yok",
  "You've reached the maximum number of files": "Maksimum dosya sayısına ulaştınız",
  "aria/Attachment": "Bijlage",
  "aria/Cancel Reply": "Antwoord annuleren",
  "aria/Cancel upload": "Upload annuleren",
  "aria/Channel list": "Kanaallijst",
  "aria/Channel search results": "Zoekresultaten voor kanalen",
  "aria/Close thread": "Draad sluiten",
  "aria/Emoji picker": "Emoji kiezer",
  "aria/File input": "Bestandsinvoer",
  "aria/File upload": "Bestand uploaden",
  "aria/Image input": "Afbeelding invoeren",
  "aria/Load More Channels": "Meer kanalen laden",
  "aria/Menu": "Menu",
  "aria/Message Options": "Berichtopties",
  "aria/Open Message Actions Menu": "Menu voor berichtacties openen",
  "aria/Open Reaction Selector": "Reactiekiezer openen",
  "aria/Open Thread": "Draad openen",
  "aria/Reaction list": "Reactielijst",
  "aria/Retry upload": "Upload opnieuw proberen",
  "aria/Send": "Verzenden",
  "ban-command-args": "[@kullanıcıadı] [metin]",
  "ban-command-description": "Bir kullanıcıyı yasakla",
  "giphy-command-args": "[metin]",
  "giphy-command-description": "Rastgele bir gif'i kanala gönder",
  live: "canlı",
  "mute-command-args": "[@kullanıcıadı]",
  "mute-command-description": "Bir kullanıcının sesini kapat",
  replyCount_one: "1 cevap",
  replyCount_other: "{{ count }} cevaplar",
  searchResultsCount_one: "1 sonuç",
  searchResultsCount_other: "{{ count }} sonuç",
  "this content could not be displayed": "bu içerik gösterilemiyor",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true; format: h:mmA) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@kullanıcıadı]",
  "unban-command-description": "Bir kullanıcının yasağını kaldır",
  "unmute-command-args": "[@kullanıcıadı]",
  "unmute-command-description": "Bir kullanıcının sesini aç",
  unreadMessagesSeparatorText_one: "1 okunmamış mesaj",
  unreadMessagesSeparatorText_other: "{{count}} okunmamış mesaj",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} ve {{ moreCount }} daha",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, ve {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} ve {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} adet daha",
  "{{ memberCount }} members": "{{ memberCount }} üyeler",
  "{{ user }} has been muted": "{{ user }} sessize alındı",
  "{{ user }} has been unmuted": "{{ user }} sesi açıldı",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} çevrimiçi",
  "{{count}} unread_one": "{{count}} okunmamış",
  "{{count}} unread_other": "{{count}} okunmamış",
  "🏙 Attachment...": "🏙 Ek..."
};

// node_modules/@babel/runtime/helpers/esm/toArray.js
function _toArray(r2) {
  return _arrayWithHoles(r2) || _iterableToArray(r2) || _unsupportedIterableToArray(r2) || _nonIterableRest();
}

// node_modules/i18next/dist/esm/i18next.js
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var consoleLogger = {
  type: "logger",
  log: function log(args) {
    this.output("log", args);
  },
  warn: function warn(args) {
    this.output("warn", args);
  },
  error: function error(args) {
    this.output("error", args);
  },
  output: function output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};
var Logger = function() {
  function Logger2(concreteLogger) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, Logger2);
    this.init(concreteLogger, options2);
  }
  _createClass(Logger2, [{
    key: "init",
    value: function init4(concreteLogger) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      this.prefix = options2.prefix || "i18next:";
      this.logger = concreteLogger || consoleLogger;
      this.options = options2;
      this.debug = options2.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool) {
      this.debug = bool;
    }
  }, {
    key: "log",
    value: function log2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return this.forward(args, "log", "", true);
    }
  }, {
    key: "warn",
    value: function warn2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return this.forward(args, "warn", "", true);
    }
  }, {
    key: "error",
    value: function error2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return this.forward(args, "error", "");
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug) return null;
      if (typeof args[0] === "string") args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create2(moduleName) {
      return new Logger2(this.logger, _objectSpread(_objectSpread({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }), this.options));
    }
  }, {
    key: "clone",
    value: function clone(options2) {
      options2 = options2 || this.options;
      options2.prefix = options2.prefix || this.prefix;
      return new Logger2(this.logger, options2);
    }
  }]);
  return Logger2;
}();
var baseLogger = new Logger();
var EventEmitter = function() {
  function EventEmitter2() {
    _classCallCheck(this, EventEmitter2);
    this.observers = {};
  }
  _createClass(EventEmitter2, [{
    key: "on",
    value: function on(events, listener) {
      var _this = this;
      events.split(" ").forEach(function(event) {
        _this.observers[event] = _this.observers[event] || [];
        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event]) return;
      if (!listener) {
        delete this.observers[event];
        return;
      }
      this.observers[event] = this.observers[event].filter(function(l) {
        return l !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function(observer) {
          observer.apply(void 0, args);
        });
      }
      if (this.observers["*"]) {
        var _cloned = [].concat(this.observers["*"]);
        _cloned.forEach(function(observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);
  return EventEmitter2;
}();
function defer() {
  var res;
  var rej;
  var promise = new Promise(function(resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return "";
  return "" + object;
}
function copy(a, s, t2) {
  a.forEach(function(m) {
    if (s[m]) t2[m] = s[m];
  });
}
function getLastOfPath(object, path3, Empty) {
  function cleanKey(key2) {
    return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
  }
  function canNotTraverseDeeper() {
    return !object || typeof object === "string";
  }
  var stack = typeof path3 !== "string" ? [].concat(path3) : path3.split(".");
  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }
  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}
function setPath(object, path3, newValue) {
  var _getLastOfPath = getLastOfPath(object, path3, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
  obj[k] = newValue;
}
function pushPath(object, path3, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path3, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path3) {
  var _getLastOfPath3 = getLastOfPath(object, path3), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
  if (!obj) return void 0;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function escape(data) {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, function(s) {
      return _entityMap[s];
    });
  }
  return data;
}
var isIE10 = typeof window !== "undefined" && window.navigator && typeof window.navigator.userAgentData === "undefined" && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
var chars = [" ", ",", "?", "!", ";"];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  var possibleChars = chars.filter(function(c) {
    return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
  });
  if (possibleChars.length === 0) return true;
  var r2 = new RegExp("(".concat(possibleChars.map(function(c) {
    return c === "?" ? "\\?" : c;
  }).join("|"), ")"));
  var matched = !r2.test(key);
  if (!matched) {
    var ki = key.indexOf(keySeparator);
    if (ki > 0 && !r2.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
}
function ownKeys$1(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function deepFind(obj, path3) {
  var keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj) return void 0;
  if (obj[path3]) return obj[path3];
  var paths = path3.split(keySeparator);
  var current = obj;
  for (var i = 0; i < paths.length; ++i) {
    if (!current) return void 0;
    if (typeof current[paths[i]] === "string" && i + 1 < paths.length) {
      return void 0;
    }
    if (current[paths[i]] === void 0) {
      var j = 2;
      var p = paths.slice(i, i + j).join(keySeparator);
      var mix = current[p];
      while (mix === void 0 && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }
      if (mix === void 0) return void 0;
      if (mix === null) return null;
      if (path3.endsWith(p)) {
        if (typeof mix === "string") return mix;
        if (p && typeof mix[p] === "string") return mix[p];
      }
      var joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
      return void 0;
    }
    current = current[paths[i]];
  }
  return current;
}
var ResourceStore = function(_EventEmitter) {
  _inherits(ResourceStore2, _EventEmitter);
  var _super = _createSuper(ResourceStore2);
  function ResourceStore2(data) {
    var _this;
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    _classCallCheck(this, ResourceStore2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.data = data || {};
    _this.options = options2;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    if (_this.options.ignoreJSONStructure === void 0) {
      _this.options.ignoreJSONStructure = true;
    }
    return _this;
  }
  _createClass(ResourceStore2, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index4 = this.options.ns.indexOf(ns);
      if (index4 > -1) {
        this.options.ns.splice(index4, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
      var ignoreJSONStructure = options2.ignoreJSONStructure !== void 0 ? options2.ignoreJSONStructure : this.options.ignoreJSONStructure;
      var path3 = [lng, ns];
      if (key && typeof key !== "string") path3 = path3.concat(key);
      if (key && typeof key === "string") path3 = path3.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path3 = lng.split(".");
      }
      var result = getPath(this.data, path3);
      if (result || !ignoreJSONStructure || typeof key !== "string") return result;
      return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === void 0) keySeparator = ".";
      var path3 = [lng, ns];
      if (key) path3 = path3.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path3 = lng.split(".");
        value = ns;
        ns = path3[1];
      }
      this.addNamespaces(ns);
      setPath(this.data, path3, value);
      if (!options2.silent) this.emit("added", lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        silent: false
      };
      for (var m in resources) {
        if (typeof resources[m] === "string" || Object.prototype.toString.apply(resources[m]) === "[object Array]") this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
      }
      if (!options2.silent) this.emit("added", lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
        silent: false
      };
      var path3 = [lng, ns];
      if (lng.indexOf(".") > -1) {
        path3 = lng.split(".");
        deep = resources;
        resources = ns;
        ns = path3[1];
      }
      this.addNamespaces(ns);
      var pack = getPath(this.data, path3) || {};
      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
      }
      setPath(this.data, path3, pack);
      if (!options2.silent) this.emit("added", lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }
      this.removeNamespaces(ns);
      this.emit("removed", lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== void 0;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns) ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === "v1") return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "hasLanguageSomeTranslations",
    value: function hasLanguageSomeTranslations(lng) {
      var data = this.getDataByLanguage(lng);
      var n = data && Object.keys(data) || [];
      return !!n.find(function(v) {
        return data[v] && Object.keys(data[v]).length > 0;
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);
  return ResourceStore2;
}(EventEmitter);
var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle(processors, value, key, options2, translator) {
    var _this = this;
    processors.forEach(function(processor) {
      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options2, translator);
    });
    return value;
  }
};
function ownKeys$2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var checkedLoadedFor = {};
var Translator = function(_EventEmitter) {
  _inherits(Translator2, _EventEmitter);
  var _super = _createSuper$1(Translator2);
  function Translator2(services) {
    var _this;
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, Translator2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, _assertThisInitialized(_this));
    _this.options = options2;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    _this.logger = baseLogger.create("translator");
    return _this;
  }
  _createClass(Translator2, [{
    key: "changeLanguage",
    value: function changeLanguage2(lng) {
      if (lng) this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists2(key) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      if (key === void 0 || key === null) {
        return false;
      }
      var resolved = this.resolve(key, options2);
      return resolved && resolved.res !== void 0;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options2) {
      var nsSeparator = options2.nsSeparator !== void 0 ? options2.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === void 0) nsSeparator = ":";
      var keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
      var namespaces = options2.ns || this.options.defaultNS || [];
      var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
      var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options2.keySeparator && !this.options.userDefinedNsSeparator && !options2.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
      if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
        var m = key.match(this.interpolator.nestingRegexp);
        if (m && m.length > 0) {
          return {
            key,
            namespaces
          };
        }
        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
        key = parts.join(keySeparator);
      }
      if (typeof namespaces === "string") namespaces = [namespaces];
      return {
        key,
        namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys2, options2, lastKey) {
      var _this2 = this;
      if (_typeof(options2) !== "object" && this.options.overloadTranslationOptionHandler) {
        options2 = this.options.overloadTranslationOptionHandler(arguments);
      }
      if (!options2) options2 = {};
      if (keys2 === void 0 || keys2 === null) return "";
      if (!Array.isArray(keys2)) keys2 = [String(keys2)];
      var returnDetails = options2.returnDetails !== void 0 ? options2.returnDetails : this.options.returnDetails;
      var keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
      var _this$extractFromKey = this.extractFromKey(keys2[keys2.length - 1], options2), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
      var namespace = namespaces[namespaces.length - 1];
      var lng = options2.lng || this.language;
      var appendNamespaceToCIMode = options2.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
      if (lng && lng.toLowerCase() === "cimode") {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options2.nsSeparator || this.options.nsSeparator;
          if (returnDetails) {
            resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
            return resolved;
          }
          return "".concat(namespace).concat(nsSeparator).concat(key);
        }
        if (returnDetails) {
          resolved.res = key;
          return resolved;
        }
        return key;
      }
      var resolved = this.resolve(keys2, options2);
      var res = resolved && resolved.res;
      var resUsedKey = resolved && resolved.usedKey || key;
      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
      var joinArrays = options2.joinArrays !== void 0 ? options2.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
        if (!options2.returnObjects && !this.options.returnObjects) {
          if (!this.options.returnedObjectHandler) {
            this.logger.warn("accessing an object - but returnObjects options is not enabled!");
          }
          var r2 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options2), {}, {
            ns: namespaces
          })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
          if (returnDetails) {
            resolved.res = r2;
            return resolved;
          }
          return r2;
        }
        if (keySeparator) {
          var resTypeIsArray = resType === "[object Array]";
          var copy2 = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
          for (var m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
              copy2[m] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options2), {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy2[m] === deepKey) copy2[m] = res[m];
            }
          }
          res = copy2;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, keys2, options2, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;
        var needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
        var hasDefaultValue = Translator2.hasDefaultValue(options2);
        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options2.count, options2) : "";
        var defaultValue = options2["defaultValue".concat(defaultValueSuffix)] || options2.defaultValue;
        if (!this.isValidLookup(res) && hasDefaultValue) {
          usedDefault = true;
          res = defaultValue;
        }
        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }
        var missingKeyNoValueFallbackToKey = options2.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
        var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
          if (keySeparator) {
            var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options2), {}, {
              keySeparator: false
            }));
            if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
          }
          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options2.lng || this.language);
          if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === "all") {
            lngs = this.languageUtils.toResolveHierarchy(options2.lng || this.language);
          } else {
            lngs.push(options2.lng || this.language);
          }
          var send = function send2(l, k, specificDefaultValue) {
            var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options2);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options2);
            }
            _this2.emit("missingKey", l, namespace, k, res);
          };
          if (this.options.saveMissing) {
            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function(language) {
                _this2.pluralResolver.getSuffixes(language, options2).forEach(function(suffix) {
                  send([language], key + suffix, options2["defaultValue".concat(suffix)] || defaultValue);
                });
              });
            } else {
              send(lngs, key, defaultValue);
            }
          }
        }
        res = this.extendTranslation(res, keys2, options2, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
        if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
          if (this.options.compatibilityAPI !== "v1") {
            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : void 0);
          } else {
            res = this.options.parseMissingKeyHandler(res);
          }
        }
      }
      if (returnDetails) {
        resolved.res = res;
        return resolved;
      }
      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options2, resolved, lastKey) {
      var _this3 = this;
      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options2), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved
        });
      } else if (!options2.skipInterpolation) {
        if (options2.interpolation) this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options2), {
          interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options2.interpolation)
        }));
        var skipOnVariables = typeof res === "string" && (options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
        var nestBef;
        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }
        var data = options2.replace && typeof options2.replace !== "string" ? options2.replace : options2;
        if (this.options.interpolation.defaultVariables) data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);
        res = this.interpolator.interpolate(res, data, options2.lng || this.language, options2);
        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft) options2.nest = false;
        }
        if (options2.nest !== false) res = this.interpolator.nest(res, function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (lastKey && lastKey[0] === args[0] && !options2.context) {
            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
            return null;
          }
          return _this3.translate.apply(_this3, args.concat([key]));
        }, options2);
        if (options2.interpolation) this.interpolator.reset();
      }
      var postProcess = options2.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
      if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options2.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
          i18nResolved: resolved
        }, options2) : options2, this);
      }
      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys2) {
      var _this4 = this;
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys2 === "string") keys2 = [keys2];
      keys2.forEach(function(k) {
        if (_this4.isValidLookup(found)) return;
        var extracted = _this4.extractFromKey(k, options2);
        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
        var needsZeroSuffixLookup = needsPluralHandling && !options2.ordinal && options2.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
        var needsContextHandling = options2.context !== void 0 && (typeof options2.context === "string" || typeof options2.context === "number") && options2.context !== "";
        var codes2 = options2.lngs ? options2.lngs : _this4.languageUtils.toResolveHierarchy(options2.lng || _this4.language, options2.fallbackLng);
        namespaces.forEach(function(ns) {
          if (_this4.isValidLookup(found)) return;
          usedNS = ns;
          if (!checkedLoadedFor["".concat(codes2[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes2[0], "-").concat(ns)] = true;
            _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes2.join(", "), `" won't get resolved as namespace "`).concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          }
          codes2.forEach(function(code3) {
            if (_this4.isValidLookup(found)) return;
            usedLng = code3;
            var finalKeys = [key];
            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code3, ns, options2);
            } else {
              var pluralSuffix;
              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code3, options2.count, options2);
              var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
              if (needsPluralHandling) {
                finalKeys.push(key + pluralSuffix);
                if (needsZeroSuffixLookup) {
                  finalKeys.push(key + zeroSuffix);
                }
              }
              if (needsContextHandling) {
                var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options2.context);
                finalKeys.push(contextKey);
                if (needsPluralHandling) {
                  finalKeys.push(contextKey + pluralSuffix);
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(contextKey + zeroSuffix);
                  }
                }
              }
            }
            var possibleKey;
            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code3, ns, possibleKey, options2);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey,
        exactUsedKey,
        usedLng,
        usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
    }
  }, {
    key: "getResource",
    value: function getResource(code3, ns, key) {
      var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code3, ns, key, options2);
      return this.resourceStore.getResource(code3, ns, key, options2);
    }
  }], [{
    key: "hasDefaultValue",
    value: function hasDefaultValue(options2) {
      var prefix = "defaultValue";
      for (var option in options2) {
        if (Object.prototype.hasOwnProperty.call(options2, option) && prefix === option.substring(0, prefix.length) && void 0 !== options2[option]) {
          return true;
        }
      }
      return false;
    }
  }]);
  return Translator2;
}(EventEmitter);
function capitalize(string3) {
  return string3.charAt(0).toUpperCase() + string3.slice(1);
}
var LanguageUtil = function() {
  function LanguageUtil2(options2) {
    _classCallCheck(this, LanguageUtil2);
    this.options = options2;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  _createClass(LanguageUtil2, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code3) {
      if (!code3 || code3.indexOf("-") < 0) return null;
      var p = code3.split("-");
      if (p.length === 2) return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === "x") return null;
      return this.formatLanguageCode(p.join("-"));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code3) {
      if (!code3 || code3.indexOf("-") < 0) return code3;
      var p = code3.split("-");
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code3) {
      if (typeof code3 === "string" && code3.indexOf("-") > -1) {
        var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
        var p = code3.split("-");
        if (this.options.lowerCaseLng) {
          p = p.map(function(part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2) p[1] = p[1].toUpperCase();
          if (p[0] !== "sgn" && p[2].length === 2) p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
        }
        return p.join("-");
      }
      return this.options.cleanCode || this.options.lowerCaseLng ? code3.toLowerCase() : code3;
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code3) {
      if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
        code3 = this.getLanguagePartFromCode(code3);
      }
      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code3) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes2) {
      var _this = this;
      if (!codes2) return null;
      var found;
      codes2.forEach(function(code3) {
        if (found) return;
        var cleanedLng = _this.formatLanguageCode(code3);
        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
      });
      if (!found && this.options.supportedLngs) {
        codes2.forEach(function(code3) {
          if (found) return;
          var lngOnly = _this.getLanguagePartFromCode(code3);
          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
          found = _this.options.supportedLngs.find(function(supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
          });
        });
      }
      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code3) {
      if (!fallbacks) return [];
      if (typeof fallbacks === "function") fallbacks = fallbacks(code3);
      if (typeof fallbacks === "string") fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === "[object Array]") return fallbacks;
      if (!code3) return fallbacks["default"] || [];
      var found = fallbacks[code3];
      if (!found) found = fallbacks[this.getScriptPartFromCode(code3)];
      if (!found) found = fallbacks[this.formatLanguageCode(code3)];
      if (!found) found = fallbacks[this.getLanguagePartFromCode(code3)];
      if (!found) found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code3, fallbackCode) {
      var _this2 = this;
      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code3);
      var codes2 = [];
      var addCode = function addCode2(c) {
        if (!c) return;
        if (_this2.isSupportedCode(c)) {
          codes2.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };
      if (typeof code3 === "string" && code3.indexOf("-") > -1) {
        if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code3));
        if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code3));
        if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code3));
      } else if (typeof code3 === "string") {
        addCode(this.formatLanguageCode(code3));
      }
      fallbackCodes.forEach(function(fc) {
        if (codes2.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
      });
      return codes2;
    }
  }]);
  return LanguageUtil2;
}();
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _2(n) {
    return Number(n != 1);
  },
  3: function _3(n) {
    return 0;
  },
  4: function _4(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _5(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _6(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _7(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _8(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _9(n) {
    return Number(n >= 2);
  },
  10: function _10(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _11(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _12(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _13(n) {
    return Number(n !== 0);
  },
  14: function _14(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _15(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _16(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _17(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _18(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _19(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _20(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _21(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _22(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
var deprecatedJsonVersions = ["v1", "v2", "v3"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function createRules() {
  var rules = {};
  sets.forEach(function(set) {
    set.lngs.forEach(function(l) {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}
var PluralResolver = function() {
  function PluralResolver2(languageUtils) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, PluralResolver2);
    this.languageUtils = languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === "v4") && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
  }
  _createClass(PluralResolver2, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.shouldUseIntlApi()) {
        try {
          return new Intl.PluralRules(code3, {
            type: options2.ordinal ? "ordinal" : "cardinal"
          });
        } catch (_unused) {
          return;
        }
      }
      return this.rules[code3] || this.rules[this.languageUtils.getLanguagePartFromCode(code3)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code3, options2);
      if (this.shouldUseIntlApi()) {
        return rule && rule.resolvedOptions().pluralCategories.length > 1;
      }
      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code3, key) {
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this.getSuffixes(code3, options2).map(function(suffix) {
        return "".concat(key).concat(suffix);
      });
    }
  }, {
    key: "getSuffixes",
    value: function getSuffixes(code3) {
      var _this = this;
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code3, options2);
      if (!rule) {
        return [];
      }
      if (this.shouldUseIntlApi()) {
        return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {
          return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
        }).map(function(pluralCategory) {
          return "".concat(_this.options.prepend).concat(pluralCategory);
        });
      }
      return rule.numbers.map(function(number2) {
        return _this.getSuffix(code3, number2, options2);
      });
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code3, count) {
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var rule = this.getRule(code3, options2);
      if (rule) {
        if (this.shouldUseIntlApi()) {
          return "".concat(this.options.prepend).concat(rule.select(count));
        }
        return this.getSuffixRetroCompatible(rule, count);
      }
      this.logger.warn("no plural rule found for: ".concat(code3));
      return "";
    }
  }, {
    key: "getSuffixRetroCompatible",
    value: function getSuffixRetroCompatible(rule, count) {
      var _this2 = this;
      var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
      var suffix = rule.numbers[idx];
      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        if (suffix === 2) {
          suffix = "plural";
        } else if (suffix === 1) {
          suffix = "";
        }
      }
      var returnSuffix = function returnSuffix2() {
        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
      };
      if (this.options.compatibilityJSON === "v1") {
        if (suffix === 1) return "";
        if (typeof suffix === "number") return "_plural_".concat(suffix.toString());
        return returnSuffix();
      } else if (this.options.compatibilityJSON === "v2") {
        return returnSuffix();
      } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        return returnSuffix();
      }
      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
    }
  }, {
    key: "shouldUseIntlApi",
    value: function shouldUseIntlApi() {
      return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
    }
  }]);
  return PluralResolver2;
}();
function ownKeys$3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var Interpolator = function() {
  function Interpolator2() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck(this, Interpolator2);
    this.logger = baseLogger.create("interpolator");
    this.options = options2;
    this.format = options2.interpolation && options2.interpolation.format || function(value) {
      return value;
    };
    this.init(options2);
  }
  _createClass(Interpolator2, [{
    key: "init",
    value: function init4() {
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (!options2.interpolation) options2.interpolation = {
        escapeValue: true
      };
      var iOpts = options2.interpolation;
      this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
      this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
      this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
      this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options) this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, "g");
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options2) {
      var _this = this;
      var match;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
      function regexSafe(val) {
        return val.replace(/\$/g, "$$$$");
      }
      var handleFormat = function handleFormat2(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path3 = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path3, void 0, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options2), data), {}, {
            interpolationkey: key
          })) : path3;
        }
        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options2), data), {}, {
          interpolationkey: k
        }));
      };
      this.resetRegExp();
      var missingInterpolationHandler = options2 && options2.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function(todo) {
        replaces = 0;
        while (match = todo.regex.exec(str)) {
          var matchedVar = match[1].trim();
          value = handleFormat(matchedVar);
          if (value === void 0) {
            if (typeof missingInterpolationHandler === "function") {
              var temp = missingInterpolationHandler(str, match, options2);
              value = typeof temp === "string" ? temp : "";
            } else if (options2 && options2.hasOwnProperty(matchedVar)) {
              value = "";
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
              value = "";
            }
          } else if (typeof value !== "string" && !_this.useRawValueToEscape) {
            value = makeString(value);
          }
          var safeValue = todo.safeValue(value);
          str = str.replace(match[0], safeValue);
          if (skipOnVariables) {
            todo.regex.lastIndex += value.length;
            todo.regex.lastIndex -= match[0].length;
          } else {
            todo.regex.lastIndex = 0;
          }
          replaces++;
          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var match;
      var value;
      var clonedOptions = _objectSpread$3({}, options2);
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0) return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        var matchedSingleQuotes = optionsString.match(/'/g);
        var matchedDoubleQuotes = optionsString.match(/"/g);
        if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
          optionsString = optionsString.replace(/'/g, '"');
        }
        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }
        delete clonedOptions.defaultValue;
        return key;
      }
      while (match = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;
        if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
          var r2 = match[1].split(this.formatSeparator).map(function(elem) {
            return elem.trim();
          });
          match[1] = r2.shift();
          formatters = r2;
          doReduce = true;
        }
        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && typeof value !== "string") return value;
        if (typeof value !== "string") value = makeString(value);
        if (!value) {
          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
          value = "";
        }
        if (doReduce) {
          value = formatters.reduce(function(v, f) {
            return _this2.format(v, f, options2.lng, _objectSpread$3(_objectSpread$3({}, options2), {}, {
              interpolationkey: match[1].trim()
            }));
          }, value.trim());
        }
        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }
      return str;
    }
  }]);
  return Interpolator2;
}();
function ownKeys$4(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$4(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function parseFormatStr(formatStr) {
  var formatName = formatStr.toLowerCase().trim();
  var formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    var p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    var optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      var opts = optStr.split(";");
      opts.forEach(function(opt) {
        if (!opt) return;
        var _opt$split = opt.split(":"), _opt$split2 = _toArray(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);
        var val = rest.join(":").trim().replace(/^'+|'+$/g, "");
        if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
        if (val === "false") formatOptions[key.trim()] = false;
        if (val === "true") formatOptions[key.trim()] = true;
        if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
}
function createCachedFormatter(fn2) {
  var cache = {};
  return function invokeFormatter(val, lng, options2) {
    var key = lng + JSON.stringify(options2);
    var formatter = cache[key];
    if (!formatter) {
      formatter = fn2(lng, options2);
      cache[key] = formatter;
    }
    return formatter(val);
  };
}
var Formatter = function() {
  function Formatter2() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck(this, Formatter2);
    this.logger = baseLogger.create("formatter");
    this.options = options2;
    this.formats = {
      number: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.NumberFormat(lng, options3);
        return function(val) {
          return formatter.format(val);
        };
      }),
      currency: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options3), {}, {
          style: "currency"
        }));
        return function(val) {
          return formatter.format(val);
        };
      }),
      datetime: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4({}, options3));
        return function(val) {
          return formatter.format(val);
        };
      }),
      relativetime: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options3));
        return function(val) {
          return formatter.format(val, options3.range || "day");
        };
      }),
      list: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.ListFormat(lng, _objectSpread$4({}, options3));
        return function(val) {
          return formatter.format(val);
        };
      })
    };
    this.init(options2);
  }
  _createClass(Formatter2, [{
    key: "init",
    value: function init4(services) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      var iOpts = options2.interpolation;
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
    }
  }, {
    key: "add",
    value: function add(name, fc) {
      this.formats[name.toLowerCase().trim()] = fc;
    }
  }, {
    key: "addCached",
    value: function addCached(name, fc) {
      this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
    }
  }, {
    key: "format",
    value: function format(value, _format, lng, options2) {
      var _this = this;
      var formats = _format.split(this.formatSeparator);
      var result = formats.reduce(function(mem, f) {
        var _parseFormatStr = parseFormatStr(f), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;
        if (_this.formats[formatName]) {
          var formatted = mem;
          try {
            var valOptions = options2 && options2.formatParams && options2.formatParams[options2.interpolationkey] || {};
            var l = valOptions.locale || valOptions.lng || options2.locale || options2.lng || lng;
            formatted = _this.formats[formatName](mem, l, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options2), valOptions));
          } catch (error2) {
            _this.logger.warn(error2);
          }
          return formatted;
        } else {
          _this.logger.warn("there was no format function for ".concat(formatName));
        }
        return mem;
      }, value);
      return result;
    }
  }]);
  return Formatter2;
}();
function ownKeys$5(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$5(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$5(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function removePending(q, name) {
  if (q.pending[name] !== void 0) {
    delete q.pending[name];
    q.pendingCount--;
  }
}
var Connector = function(_EventEmitter) {
  _inherits(Connector2, _EventEmitter);
  var _super = _createSuper$2(Connector2);
  function Connector2(backend, store, services) {
    var _this;
    var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    _classCallCheck(this, Connector2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options2;
    _this.logger = baseLogger.create("backendConnector");
    _this.waitingReads = [];
    _this.maxParallelReads = options2.maxParallelReads || 10;
    _this.readingCalls = 0;
    _this.maxRetries = options2.maxRetries >= 0 ? options2.maxRetries : 5;
    _this.retryTimeout = options2.retryTimeout >= 1 ? options2.retryTimeout : 350;
    _this.state = {};
    _this.queue = [];
    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options2.backend, options2);
    }
    return _this;
  }
  _createClass(Connector2, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options2, callback) {
      var _this2 = this;
      var toLoad = {};
      var pending = {};
      var toLoadLanguages = {};
      var toLoadNamespaces = {};
      languages.forEach(function(lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function(ns) {
          var name = "".concat(lng, "|").concat(ns);
          if (!options2.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0) ;
          else if (_this2.state[name] === 1) {
            if (pending[name] === void 0) pending[name] = true;
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending[name] === void 0) pending[name] = true;
            if (toLoad[name] === void 0) toLoad[name] = true;
            if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
          }
        });
        if (!hasAllNamespaces) toLoadLanguages[lng] = true;
      });
      if (Object.keys(toLoad).length || Object.keys(pending).length) {
        this.queue.push({
          pending,
          pendingCount: Object.keys(pending).length,
          loaded: {},
          errors: [],
          callback
        });
      }
      return {
        toLoad: Object.keys(toLoad),
        pending: Object.keys(pending),
        toLoadLanguages: Object.keys(toLoadLanguages),
        toLoadNamespaces: Object.keys(toLoadNamespaces)
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      if (err) this.emit("failedLoading", lng, ns, err);
      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }
      this.state[name] = err ? -1 : 2;
      var loaded2 = {};
      this.queue.forEach(function(q) {
        pushPath(q.loaded, [lng], ns);
        removePending(q, name);
        if (err) q.errors.push(err);
        if (q.pendingCount === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function(l) {
            if (!loaded2[l]) loaded2[l] = {};
            var loadedKeys = q.loaded[l];
            if (loadedKeys.length) {
              loadedKeys.forEach(function(ns2) {
                if (loaded2[l][ns2] === void 0) loaded2[l][ns2] = true;
              });
            }
          });
          q.done = true;
          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit("loaded", loaded2);
      this.queue = this.queue.filter(function(q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read2(lng, ns, fcName) {
      var _this3 = this;
      var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
      var callback = arguments.length > 5 ? arguments[5] : void 0;
      if (!lng.length) return callback(null, {});
      if (this.readingCalls >= this.maxParallelReads) {
        this.waitingReads.push({
          lng,
          ns,
          fcName,
          tried,
          wait,
          callback
        });
        return;
      }
      this.readingCalls++;
      return this.backend[fcName](lng, ns, function(err, data) {
        _this3.readingCalls--;
        if (_this3.waitingReads.length > 0) {
          var next = _this3.waitingReads.shift();
          _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
        }
        if (err && data && tried < _this3.maxRetries) {
          setTimeout(function() {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }
        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : void 0;
      if (!this.backend) {
        this.logger.warn("No backend was added via i18next.use. Will not load resources.");
        return callback && callback();
      }
      if (typeof languages === "string") languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === "string") namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options2, callback);
      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length) callback();
        return null;
      }
      toLoad.toLoad.forEach(function(name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;
      var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, "read", void 0, void 0, function(err, data) {
        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn('did not save key "'.concat(key, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        return;
      }
      if (key === void 0 || key === null || key === "") return;
      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options2), {}, {
          isUpdate
        }));
      }
      if (!languages || !languages[0]) return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);
  return Connector2;
}(EventEmitter);
function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: "all",
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: "fallback",
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle2(args) {
      var ret = {};
      if (_typeof(args[1]) === "object") ret = args[1];
      if (typeof args[1] === "string") ret.defaultValue = args[1];
      if (typeof args[2] === "string") ret.tDescription = args[2];
      if (_typeof(args[2]) === "object" || _typeof(args[3]) === "object") {
        var options2 = args[3] || args[2];
        Object.keys(options2).forEach(function(key) {
          ret[key] = options2[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options2) {
        return value;
      },
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: true
    }
  };
}
function transformOptions(options2) {
  if (typeof options2.ns === "string") options2.ns = [options2.ns];
  if (typeof options2.fallbackLng === "string") options2.fallbackLng = [options2.fallbackLng];
  if (typeof options2.fallbackNS === "string") options2.fallbackNS = [options2.fallbackNS];
  if (options2.supportedLngs && options2.supportedLngs.indexOf("cimode") < 0) {
    options2.supportedLngs = options2.supportedLngs.concat(["cimode"]);
  }
  return options2;
}
function ownKeys$6(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$6(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$6(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function noop() {
}
function bindMemberFunctions(inst) {
  var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(function(mem) {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}
var I18n = function(_EventEmitter) {
  _inherits(I18n2, _EventEmitter);
  var _super = _createSuper$3(I18n2);
  function I18n2() {
    var _this;
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : void 0;
    _classCallCheck(this, I18n2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.options = transformOptions(options2);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };
    bindMemberFunctions(_assertThisInitialized(_this));
    if (callback && !_this.isInitialized && !options2.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options2, callback);
        return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
      }
      setTimeout(function() {
        _this.init(options2, callback);
      }, 0);
    }
    return _this;
  }
  _createClass(I18n2, [{
    key: "init",
    value: function init4() {
      var _this2 = this;
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      if (typeof options2 === "function") {
        callback = options2;
        options2 = {};
      }
      if (!options2.defaultNS && options2.defaultNS !== false && options2.ns) {
        if (typeof options2.ns === "string") {
          options2.defaultNS = options2.ns;
        } else if (options2.ns.indexOf("translation") < 0) {
          options2.defaultNS = options2.ns[0];
        }
      }
      var defOpts = get();
      this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options2));
      if (this.options.compatibilityAPI !== "v1") {
        this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
      }
      if (options2.keySeparator !== void 0) {
        this.options.userDefinedKeySeparator = options2.keySeparator;
      }
      if (options2.nsSeparator !== void 0) {
        this.options.userDefinedNsSeparator = options2.nsSeparator;
      }
      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject) return null;
        if (typeof ClassOrObject === "function") return new ClassOrObject();
        return ClassOrObject;
      }
      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }
        var formatter;
        if (this.modules.formatter) {
          formatter = this.modules.formatter;
        } else if (typeof Intl !== "undefined") {
          formatter = Formatter;
        }
        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
          s.formatter = createClassOnDemand(formatter);
          s.formatter.init(s, this.options);
          this.options.interpolation.format = s.formatter.format.bind(s.formatter);
        }
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on("*", function(event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }
        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init) s.i18nFormat.init(this);
        }
        this.translator = new Translator(this.services, this.options);
        this.translator.on("*", function(event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function(m) {
          if (m.init) m.init(_this2);
        });
      }
      this.format = this.options.interpolation.format;
      if (!callback) callback = noop;
      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var codes2 = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes2.length > 0 && codes2[0] !== "dev") this.options.lng = codes2[0];
      }
      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn("init: no languageDetector is used and no lng is defined");
      }
      var storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
      storeApi.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store;
          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
      storeApiChained.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store2;
          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
          return _this2;
        };
      });
      var deferred = defer();
      var load = function load2() {
        var finish = function finish2(err, t2) {
          if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn("init: i18next is already initialized. You should call init just once!");
          _this2.isInitialized = true;
          if (!_this2.options.isClone) _this2.logger.log("initialized", _this2.options);
          _this2.emit("initialized", _this2.options);
          deferred.resolve(t2);
          callback(err, t2);
        };
        if (_this2.languages && _this2.options.compatibilityAPI !== "v1" && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
        _this2.changeLanguage(_this2.options.lng, finish);
      };
      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }
      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources2(language) {
      var _this3 = this;
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
      var usedCallback = callback;
      var usedLng = typeof language === "string" ? language : this.language;
      if (typeof language === "function") usedCallback = language;
      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === "cimode") return usedCallback();
        var toLoad = [];
        var append = function append2(lng) {
          if (!lng) return;
          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
          lngs.forEach(function(l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };
        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function(l) {
            return append(l);
          });
        } else {
          append(usedLng);
        }
        if (this.options.preload) {
          this.options.preload.forEach(function(l) {
            return append(l);
          });
        }
        this.services.backendConnector.load(toLoad, this.options.ns, function(e) {
          if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
          usedCallback(e);
        });
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources2(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs) lngs = this.languages;
      if (!ns) ns = this.options.ns;
      if (!callback) callback = noop;
      this.services.backendConnector.reload(lngs, ns, function(err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use2(module) {
      if (!module) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
      if (!module.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
      if (module.type === "backend") {
        this.modules.backend = module;
      }
      if (module.type === "logger" || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }
      if (module.type === "languageDetector") {
        this.modules.languageDetector = module;
      }
      if (module.type === "i18nFormat") {
        this.modules.i18nFormat = module;
      }
      if (module.type === "postProcessor") {
        postProcessor.addPostProcessor(module);
      }
      if (module.type === "formatter") {
        this.modules.formatter = module;
      }
      if (module.type === "3rdParty") {
        this.modules.external.push(module);
      }
      return this;
    }
  }, {
    key: "setResolvedLanguage",
    value: function setResolvedLanguage(l) {
      if (!l || !this.languages) return;
      if (["cimode", "dev"].indexOf(l) > -1) return;
      for (var li = 0; li < this.languages.length; li++) {
        var lngInLngs = this.languages[li];
        if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
        if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
          this.resolvedLanguage = lngInLngs;
          break;
        }
      }
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage2(lng, callback) {
      var _this4 = this;
      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit("languageChanging", lng);
      var setLngProps = function setLngProps2(l) {
        _this4.language = l;
        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
        _this4.resolvedLanguage = void 0;
        _this4.setResolvedLanguage(l);
      };
      var done = function done2(err, l) {
        if (l) {
          setLngProps(l);
          _this4.translator.changeLanguage(l);
          _this4.isLanguageChangingTo = void 0;
          _this4.emit("languageChanged", l);
          _this4.logger.log("languageChanged", l);
        } else {
          _this4.isLanguageChangingTo = void 0;
        }
        deferred.resolve(function() {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback) callback(err, function() {
          return _this4.t.apply(_this4, arguments);
        });
      };
      var setLng = function setLng2(lngs) {
        if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
        var l = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
        if (l) {
          if (!_this4.language) {
            setLngProps(l);
          }
          if (!_this4.translator.language) _this4.translator.changeLanguage(l);
          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
        }
        _this4.loadResources(l, function(err) {
          done(err, l);
        });
      };
      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }
      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT2(lng, ns, keyPrefix) {
      var _this5 = this;
      var fixedT = function fixedT2(key, opts) {
        var options2;
        if (_typeof(opts) !== "object") {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }
          options2 = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options2 = _objectSpread$6({}, opts);
        }
        options2.lng = options2.lng || fixedT2.lng;
        options2.lngs = options2.lngs || fixedT2.lngs;
        options2.ns = options2.ns || fixedT2.ns;
        options2.keyPrefix = options2.keyPrefix || keyPrefix || fixedT2.keyPrefix;
        var keySeparator = _this5.options.keySeparator || ".";
        var resultKey = options2.keyPrefix ? "".concat(options2.keyPrefix).concat(keySeparator).concat(key) : key;
        return _this5.t(resultKey, options2);
      };
      if (typeof lng === "string") {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }
      fixedT.ns = ns;
      fixedT.keyPrefix = keyPrefix;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t2() {
      var _this$translator;
      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists2() {
      var _this$translator2;
      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace2(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace2(ns) {
      var _this6 = this;
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!this.isInitialized) {
        this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
        return false;
      }
      if (!this.languages || !this.languages.length) {
        this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
        return false;
      }
      var lng = this.resolvedLanguage || this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === "cimode") return true;
      var loadNotPending = function loadNotPending2(l, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
        return loadState === -1 || loadState === 2;
      };
      if (options2.precheck) {
        var preResult = options2.precheck(this, loadNotPending);
        if (preResult !== void 0) return preResult;
      }
      if (this.hasResourceBundle(lng, ns)) return true;
      if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces2(ns, callback) {
      var _this7 = this;
      var deferred = defer();
      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }
      if (typeof ns === "string") ns = [ns];
      ns.forEach(function(n) {
        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
      });
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages2(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === "string") lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function(lng) {
        return preloaded.indexOf(lng) < 0;
      });
      if (!newLngs.length) {
        if (callback) callback();
        return Promise.resolve();
      }
      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
      if (!lng) return "rtl";
      var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
      var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options2), {
        isClone: true
      });
      var clone = new I18n2(mergedOptions);
      if (options2.debug !== void 0 || options2.prefix !== void 0) {
        clone.logger = clone.logger.clone(options2);
      }
      var membersToCopy = ["store", "services", "language"];
      membersToCopy.forEach(function(m) {
        clone[m] = _this8[m];
      });
      clone.services = _objectSpread$6({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on("*", function(event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        options: this.options,
        store: this.store,
        language: this.language,
        languages: this.languages,
        resolvedLanguage: this.resolvedLanguage
      };
    }
  }]);
  return I18n2;
}(EventEmitter);
_defineProperty(I18n, "createInstance", function() {
  var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var callback = arguments.length > 1 ? arguments[1] : void 0;
  return new I18n(options2, callback);
});
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var init = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace = instance.hasLoadedNamespace;
var loadNamespaces = instance.loadNamespaces;
var loadLanguages = instance.loadLanguages;
var i18next_default = instance;

// node_modules/stream-chat-react/dist/i18n/Streami18n.js
var import_dayjs = __toESM(require_dayjs_min());
var import_calendar = __toESM(require_calendar());
var import_updateLocale = __toESM(require_updateLocale());
var import_localizedFormat = __toESM(require_localizedFormat());
var import_localeData = __toESM(require_localeData());
var import_relativeTime = __toESM(require_relativeTime());
var import_utc = __toESM(require_utc());
var import_timezone = __toESM(require_timezone());

// node_modules/stream-chat-react/dist/i18n/utils.js
var notValidDateWarning = "MessageTimestamp was called without a message, or message has invalid created_at date.";
var noParsingFunctionWarning = "MessageTimestamp was called but there is no datetime parsing function available";
function getDateString(_a) {
  var calendar3 = _a.calendar, calendarFormats = _a.calendarFormats, format = _a.format, formatDate = _a.formatDate, messageCreatedAt = _a.messageCreatedAt, t2 = _a.t, tDateTimeParser = _a.tDateTimeParser, timestampTranslationKey = _a.timestampTranslationKey;
  if (!messageCreatedAt || typeof messageCreatedAt === "string" && !Date.parse(messageCreatedAt)) {
    console.warn(notValidDateWarning);
    return null;
  }
  if (typeof formatDate === "function") {
    return formatDate(new Date(messageCreatedAt));
  }
  if (t2 && timestampTranslationKey) {
    var options2 = {};
    if (typeof calendar3 !== "undefined" && calendar3 !== null)
      options2.calendar = calendar3;
    if (typeof calendarFormats !== "undefined" && calendarFormats !== null)
      options2.calendarFormats = calendarFormats;
    if (typeof format !== "undefined" && format !== null)
      options2.format = format;
    var translatedTimestamp = t2(timestampTranslationKey, __assign(__assign({}, options2), { timestamp: new Date(messageCreatedAt) }));
    var translationKeyFound = timestampTranslationKey !== translatedTimestamp;
    if (translationKeyFound)
      return translatedTimestamp;
  }
  if (!tDateTimeParser) {
    console.warn(noParsingFunctionWarning);
    return null;
  }
  var parsedTime = tDateTimeParser(messageCreatedAt);
  if (isDayOrMoment(parsedTime)) {
    return calendar3 && parsedTime.calendar ? parsedTime.calendar(void 0, calendarFormats || void 0) : parsedTime.format(format || void 0);
  }
  if (isDate(parsedTime)) {
    return parsedTime.toDateString();
  }
  if (isNumberOrString(parsedTime)) {
    return parsedTime;
  }
  return null;
}
var predefinedFormatters = {
  timestampFormatter: function(streamI18n) {
    return function(value, _23, _a) {
      var calendarFormats = _a.calendarFormats, options2 = __rest(_a, ["calendarFormats"]);
      var parsedCalendarFormats;
      try {
        if (!options2.calendar) {
          parsedCalendarFormats = {};
        } else if (typeof calendarFormats === "string") {
          parsedCalendarFormats = JSON.parse(calendarFormats);
        } else if (typeof calendarFormats === "object") {
          parsedCalendarFormats = calendarFormats;
        }
      } catch (e) {
        console.error("[TIMESTAMP FORMATTER]", e);
      }
      var result = getDateString(__assign(__assign({}, options2), { calendarFormats: parsedCalendarFormats, messageCreatedAt: value, tDateTimeParser: streamI18n.tDateTimeParser }));
      if (!result || typeof result === "number") {
        return JSON.stringify(value);
      }
      return result;
    };
  }
};

// node_modules/stream-chat-react/dist/i18n/Streami18n.js
var import_de2 = __toESM(require_de());
var import_es2 = __toESM(require_es());
var import_fr2 = __toESM(require_fr());
var import_hi2 = __toESM(require_hi());
var import_it2 = __toESM(require_it());
var import_ja2 = __toESM(require_ja());
var import_ko2 = __toESM(require_ko());
var import_nl2 = __toESM(require_nl());
var import_pt2 = __toESM(require_pt());
var import_ru2 = __toESM(require_ru());
var import_tr2 = __toESM(require_tr());
var import_en2 = __toESM(require_en());
var defaultNS = "translation";
var defaultLng = "en";
import_dayjs.default.extend(import_updateLocale.default);
import_dayjs.default.extend(import_utc.default);
import_dayjs.default.extend(import_timezone.default);
import_dayjs.default.updateLocale("de", {
  calendar: {
    lastDay: "[gestern um] LT",
    lastWeek: "[letzten] dddd [um] LT",
    nextDay: "[morgen um] LT",
    nextWeek: "dddd [um] LT",
    sameDay: "[heute um] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("es", {
  calendar: {
    lastDay: "[ayer a las] LT",
    lastWeek: "[pasado] dddd [a] LT",
    nextDay: "[mañana a] LT",
    nextWeek: "dddd [a] LT",
    sameDay: "[hoy a las] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("fr", {
  calendar: {
    lastDay: "[Hier à] LT",
    lastWeek: "dddd [dernier à] LT",
    nextDay: "[Demain à] LT",
    nextWeek: "dddd [à] LT",
    sameDay: "[Aujourd’hui à] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("hi", {
  calendar: {
    lastDay: "[कल] LT",
    lastWeek: "[पिछले] dddd, LT",
    nextDay: "[कल] LT",
    nextWeek: "dddd, LT",
    sameDay: "[आज] LT",
    sameElse: "L"
  },
  // Hindi notation for meridiems are quite fuzzy in practice. While there exists
  // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
  meridiem: function(hour) {
    if (hour < 4) {
      return "रात";
    } else if (hour < 10) {
      return "सुबह";
    } else if (hour < 17) {
      return "दोपहर";
    } else if (hour < 20) {
      return "शाम";
    } else {
      return "रात";
    }
  },
  meridiemHour: function(hour, meridiem) {
    if (hour === 12) {
      hour = 0;
    }
    if (meridiem === "रात") {
      return hour < 4 ? hour : hour + 12;
    } else if (meridiem === "सुबह") {
      return hour;
    } else if (meridiem === "दोपहर") {
      return hour >= 10 ? hour : hour + 12;
    } else if (meridiem === "शाम") {
      return hour + 12;
    }
    return hour;
  },
  meridiemParse: /रात|सुबह|दोपहर|शाम/
});
import_dayjs.default.updateLocale("it", {
  calendar: {
    lastDay: "[Ieri alle] LT",
    lastWeek: "[lo scorso] dddd [alle] LT",
    nextDay: "[Domani alle] LT",
    nextWeek: "dddd [alle] LT",
    sameDay: "[Oggi alle] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("ja", {
  calendar: {
    lastDay: "[昨日] LT",
    lastWeek: "dddd LT",
    nextDay: "[明日] LT",
    nextWeek: "[次の] dddd LT",
    sameDay: "[今日] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("ko", {
  calendar: {
    lastDay: "[어제] LT",
    lastWeek: "[지난] dddd LT",
    nextDay: "[내일] LT",
    nextWeek: "dddd LT",
    sameDay: "[오늘] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("nl", {
  calendar: {
    lastDay: "[gisteren om] LT",
    lastWeek: "[afgelopen] dddd [om] LT",
    nextDay: "[morgen om] LT",
    nextWeek: "dddd [om] LT",
    sameDay: "[vandaag om] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("pt", {
  calendar: {
    lastDay: "[ontem às] LT",
    lastWeek: "dddd [passada às] LT",
    nextDay: "[amanhã às] LT",
    nextWeek: "dddd [às] LT",
    sameDay: "[hoje às] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("ru", {
  calendar: {
    lastDay: "[Вчера, в] LT",
    nextDay: "[Завтра, в] LT",
    sameDay: "[Сегодня, в] LT"
  }
});
import_dayjs.default.updateLocale("tr", {
  calendar: {
    lastDay: "[dün] LT",
    lastWeek: "[geçen] dddd [saat] LT",
    nextDay: "[yarın saat] LT",
    nextWeek: "[gelecek] dddd [saat] LT",
    sameDay: "[bugün saat] LT",
    sameElse: "L"
  }
});
var en_locale = {
  formats: {},
  months: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  relativeTime: {},
  weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var isDayJs = function(dateTimeParser) {
  return dateTimeParser.extend !== void 0;
};
var supportsTz = function(dateTimeParser) {
  return dateTimeParser.tz !== void 0;
};
var defaultStreami18nOptions = {
  DateTimeParser: import_dayjs.default,
  dayjsLocaleConfigForLanguage: null,
  debug: false,
  disableDateTimeTranslations: false,
  language: "en",
  logger: function(message) {
    return console.warn(message);
  }
};
var defaultTranslatorFunction = function(key) {
  return key;
};
var Streami18n = (
  /** @class */
  function() {
    function Streami18n2(options2) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      if (options2 === void 0) {
        options2 = {};
      }
      var _this = this;
      this.i18nInstance = i18next_default.createInstance();
      this.Dayjs = null;
      this.setLanguageCallback = function() {
        return null;
      };
      this.initialized = false;
      this.t = defaultTranslatorFunction;
      this.translations = {
        de: (_a = {}, _a[defaultNS] = de_default, _a),
        en: (_b = {}, _b[defaultNS] = en_default, _b),
        es: (_c = {}, _c[defaultNS] = es_default, _c),
        fr: (_d = {}, _d[defaultNS] = fr_default, _d),
        hi: (_e = {}, _e[defaultNS] = hi_default, _e),
        it: (_f = {}, _f[defaultNS] = it_default, _f),
        ja: (_g = {}, _g[defaultNS] = ja_default, _g),
        ko: (_h = {}, _h[defaultNS] = ko_default, _h),
        nl: (_j = {}, _j[defaultNS] = nl_default, _j),
        pt: (_k = {}, _k[defaultNS] = pt_default, _k),
        ru: (_l = {}, _l[defaultNS] = ru_default, _l),
        tr: (_m = {}, _m[defaultNS] = tr_default, _m)
      };
      this.dayjsLocales = {};
      this.formatters = predefinedFormatters;
      this.localeExists = function(language) {
        if (_this.isCustomDateTimeParser)
          return true;
        return Object.keys(import_dayjs.default.Ls).indexOf(language) > -1;
      };
      this.validateCurrentLanguage = function() {
        var availableLanguages = Object.keys(_this.translations);
        if (availableLanguages.indexOf(_this.currentLanguage) === -1) {
          _this.logger("Streami18n: '".concat(_this.currentLanguage, "' language is not registered.") + " Please make sure to call streami18n.registerTranslation('".concat(_this.currentLanguage, "', {...}) or ") + "use one the built-in supported languages - ".concat(_this.getAvailableLanguages()));
          _this.currentLanguage = defaultLng;
        }
      };
      this.geti18Instance = function() {
        return _this.i18nInstance;
      };
      this.getAvailableLanguages = function() {
        return Object.keys(_this.translations);
      };
      this.getTranslations = function() {
        return _this.translations;
      };
      var finalOptions = __assign(__assign({}, defaultStreami18nOptions), options2);
      this.logger = finalOptions.logger;
      this.currentLanguage = finalOptions.language;
      this.DateTimeParser = finalOptions.DateTimeParser;
      this.timezone = finalOptions.timezone;
      this.formatters = __assign(__assign({}, predefinedFormatters), options2 === null || options2 === void 0 ? void 0 : options2.formatters);
      try {
        if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {
          this.DateTimeParser.extend(import_localizedFormat.default);
          this.DateTimeParser.extend(import_calendar.default);
          this.DateTimeParser.extend(import_localeData.default);
          this.DateTimeParser.extend(import_relativeTime.default);
        }
      } catch (error2) {
        throw Error("Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ".concat(error2));
      }
      this.isCustomDateTimeParser = !!options2.DateTimeParser;
      var translationsForLanguage = finalOptions.translationsForLanguage;
      if (translationsForLanguage) {
        this.translations[this.currentLanguage] = (_o = {}, _o[defaultNS] = this.translations[this.currentLanguage] && this.translations[this.currentLanguage][defaultNS] ? __assign(__assign({}, this.translations[this.currentLanguage][defaultNS]), translationsForLanguage) : translationsForLanguage, _o);
      }
      if (!this.translations[this.currentLanguage]) {
        this.translations[this.currentLanguage] = (_p = {}, _p[defaultNS] = {}, _p);
      }
      this.i18nextConfig = {
        debug: finalOptions.debug,
        fallbackLng: false,
        interpolation: { escapeValue: false, formatSeparator: "|" },
        keySeparator: false,
        lng: this.currentLanguage,
        nsSeparator: false
      };
      if (finalOptions.parseMissingKeyHandler) {
        this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;
      }
      this.validateCurrentLanguage();
      var dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;
      if (dayjsLocaleConfigForLanguage) {
        this.addOrUpdateLocale(this.currentLanguage, __assign({}, dayjsLocaleConfigForLanguage));
      } else if (!this.localeExists(this.currentLanguage)) {
        this.logger("Streami18n: Streami18n(...) - Locale config for ".concat(this.currentLanguage, " does not exist in momentjs.") + `Please import the locale file using "import 'moment/locale/`.concat(this.currentLanguage, `';" in your app or `) + "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
      }
      this.tDateTimeParser = function(timestamp) {
        var language = finalOptions.disableDateTimeTranslations || !_this.localeExists(_this.currentLanguage) ? defaultLng : _this.currentLanguage;
        if (isDayJs(_this.DateTimeParser)) {
          return supportsTz(_this.DateTimeParser) ? _this.DateTimeParser(timestamp).tz(_this.timezone).locale(language) : _this.DateTimeParser(timestamp).locale(language);
        }
        if (supportsTz(_this.DateTimeParser) && _this.timezone) {
          return _this.DateTimeParser(timestamp).tz(_this.timezone).locale(language);
        }
        return _this.DateTimeParser(timestamp).locale(language);
      };
    }
    Streami18n2.prototype.init = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a, error_1;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              this.validateCurrentLanguage();
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              _a = this;
              return [4, this.i18nInstance.init(__assign(__assign({}, this.i18nextConfig), { lng: this.currentLanguage, resources: this.translations }))];
            case 2:
              _a.t = _b.sent();
              this.initialized = true;
              if (this.formatters) {
                Object.entries(this.formatters).forEach(function(_a2) {
                  var _b2;
                  var name = _a2[0], formatterFactory = _a2[1];
                  if (!formatterFactory)
                    return;
                  (_b2 = _this.i18nInstance.services.formatter) === null || _b2 === void 0 ? void 0 : _b2.add(name, formatterFactory(_this));
                });
              }
              return [3, 4];
            case 3:
              error_1 = _b.sent();
              this.logger("Something went wrong with init: ".concat(JSON.stringify(error_1)));
              return [3, 4];
            case 4:
              return [2, {
                t: this.t,
                tDateTimeParser: this.tDateTimeParser
              }];
          }
        });
      });
    };
    Streami18n2.prototype.getTranslators = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this.initialized) return [3, 2];
              if (this.dayjsLocales[this.currentLanguage]) {
                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
              }
              return [4, this.init()];
            case 1:
              return [2, _a.sent()];
            case 2:
              return [2, {
                t: this.t,
                tDateTimeParser: this.tDateTimeParser
              }];
          }
        });
      });
    };
    Streami18n2.prototype.registerTranslation = function(language, translation, customDayjsLocale) {
      var _a;
      if (!translation) {
        this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation");
        return;
      }
      if (!this.translations[language]) {
        this.translations[language] = (_a = {}, _a[defaultNS] = translation, _a);
      } else {
        this.translations[language][defaultNS] = translation;
      }
      if (customDayjsLocale) {
        this.dayjsLocales[language] = __assign({}, customDayjsLocale);
      } else if (!this.localeExists(language)) {
        this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) - " + "Locale config for ".concat(language, " does not exist in Dayjs.") + `Please import the locale file using "import 'dayjs/locale/`.concat(language, `';" in your app or `) + "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
      }
      if (this.initialized) {
        this.i18nInstance.addResources(language, defaultNS, translation);
      }
    };
    Streami18n2.prototype.addOrUpdateLocale = function(key, config) {
      if (this.localeExists(key)) {
        import_dayjs.default.updateLocale(key, __assign({}, config));
      } else {
        import_dayjs.default.locale(__assign(__assign({ name: key }, en_locale), config), void 0, true);
      }
    };
    Streami18n2.prototype.setLanguage = function(language) {
      return __awaiter(this, void 0, void 0, function() {
        var t2, error_2;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.currentLanguage = language;
              if (!this.initialized)
                return [
                  2
                  /*return*/
                ];
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.i18nInstance.changeLanguage(language)];
            case 2:
              t2 = _a.sent();
              if (this.dayjsLocales[language]) {
                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
              }
              this.setLanguageCallback(t2);
              return [2, t2];
            case 3:
              error_2 = _a.sent();
              this.logger("Failed to set language: ".concat(JSON.stringify(error_2)));
              return [2, this.t];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Streami18n2.prototype.registerSetLanguageCallback = function(callback) {
      this.setLanguageCallback = callback;
    };
    return Streami18n2;
  }()
);

// node_modules/stream-chat-react/dist/context/TranslationContext.js
import_dayjs2.default.extend(import_calendar2.default);
import_dayjs2.default.extend(import_localizedFormat2.default);
var isLanguageSupported = function(language) {
  var translations = ["de", "en", "es", "fr", "hi", "it", "ja", "ko", "nl", "pt", "ru", "tr"];
  return translations.some(function(translation) {
    return language === translation;
  });
};
var isDayOrMoment = function(output2) {
  return !!(output2 === null || output2 === void 0 ? void 0 : output2.isSame);
};
var isDate = function(output2) {
  return !!(output2 === null || output2 === void 0 ? void 0 : output2.getMonth);
};
var isNumberOrString = function(output2) {
  return typeof output2 === "string" || typeof output2 === "number";
};
var defaultDateTimeParser = function(input) {
  return (0, import_dayjs2.default)(input);
};
var TranslationContext = import_react10.default.createContext({
  t: defaultTranslatorFunction,
  tDateTimeParser: defaultDateTimeParser,
  userLanguage: "en"
});
var TranslationProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react10.default.createElement(TranslationContext.Provider, { value }, children);
};
var useTranslationContext = function(componentName) {
  var contextValue = (0, import_react10.useContext)(TranslationContext);
  if (!contextValue) {
    console.warn("The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withTranslationContext = function(Component2) {
  var WithTranslationContextComponent = function(props) {
    var translationContext = useTranslationContext();
    return import_react10.default.createElement(Component2, __assign({}, props, translationContext));
  };
  WithTranslationContextComponent.displayName = "WithTranslationContext".concat(getDisplayName(Component2));
  return WithTranslationContextComponent;
};

// node_modules/stream-chat-react/dist/context/TypingContext.js
var import_react11 = __toESM(require_react());
var TypingContext = import_react11.default.createContext(void 0);
var TypingProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react11.default.createElement(TypingContext.Provider, { value }, children);
};
var useTypingContext = function(componentName) {
  var contextValue = (0, import_react11.useContext)(TypingContext);
  if (!contextValue) {
    console.warn("The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withTypingContext = function(Component2) {
  var WithTypingContextComponent = function(props) {
    var typingContext = useTypingContext();
    return import_react11.default.createElement(Component2, __assign({}, props, typingContext));
  };
  WithTypingContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithTypingContextComponent;
};

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentActions.js
var UnMemoizedAttachmentActions = function(props) {
  var actionHandler = props.actionHandler, actions = props.actions, id = props.id, text5 = props.text;
  var t2 = useTranslationContext("UnMemoizedAttachmentActions").t;
  var handleActionClick = function(event, name, value) {
    return actionHandler === null || actionHandler === void 0 ? void 0 : actionHandler(name, value, event);
  };
  return import_react12.default.createElement(
    "div",
    { className: "str-chat__message-attachment-actions" },
    import_react12.default.createElement(
      "div",
      { className: "str-chat__message-attachment-actions-form" },
      import_react12.default.createElement("span", null, text5),
      actions.map(function(action) {
        return import_react12.default.createElement("button", { className: "str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--".concat(action.style), "data-testid": "".concat(action.name), "data-value": action.value, key: "".concat(id, "-").concat(action.value), onClick: function(event) {
          return handleActionClick(event, action.name, action.value);
        } }, action.text ? t2(action.text) : null);
      })
    )
  );
};
var AttachmentActions = import_react12.default.memo(UnMemoizedAttachmentActions);

// node_modules/stream-chat-react/dist/components/Attachment/Audio.js
var import_react22 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/components/DownloadButton.js
var import_react15 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/icons.js
var import_react13 = __toESM(require_react());
var DownloadIcon = function(_a) {
  var className = _a.className;
  return import_react13.default.createElement(
    "svg",
    { className, "data-testid": "download", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react13.default.createElement("path", { d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z", fill: "black" })
  );
};
var PlayTriangleIcon = function() {
  return import_react13.default.createElement(
    "svg",
    { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" },
    import_react13.default.createElement("path", { d: "M0.5 0V14L11.5 7L0.5 0Z", fill: "#080707" })
  );
};
var PauseIcon = function() {
  return import_react13.default.createElement(
    "svg",
    { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" },
    import_react13.default.createElement("path", { d: "M0 14H4V0H0V14ZM8 0V14H12V0H8Z", fill: "#080707" })
  );
};

// node_modules/stream-chat-react/dist/components/SafeAnchor/SafeAnchor.js
var import_react14 = __toESM(require_react());
var import_sanitize_url = __toESM(require_dist());
var UnMemoizedSafeAnchor = function(props) {
  var children = props.children, className = props.className, download = props.download, href = props.href, rel = props.rel, target = props.target;
  var t2 = useTranslationContext("SafeAnchor").t;
  if (!href)
    return null;
  var sanitized = (0, import_sanitize_url.sanitizeUrl)(href);
  return import_react14.default.createElement("a", { "aria-label": t2("aria/Attachment"), className, download, href: sanitized, rel, target }, children);
};
var SafeAnchor = import_react14.default.memo(UnMemoizedSafeAnchor);

// node_modules/stream-chat-react/dist/components/Attachment/components/DownloadButton.js
var DownloadButton = function(_a) {
  var assetUrl = _a.assetUrl;
  return import_react15.default.createElement(
    SafeAnchor,
    { className: "str-chat__message-attachment-file--item-download", download: true, href: assetUrl, target: "_blank" },
    import_react15.default.createElement(DownloadIcon, { className: "str-chat__message-attachment-download-icon" })
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/components/FileSizeIndicator.js
var import_react16 = __toESM(require_react());

// node_modules/stream-chat-react/dist/constants/limits.js
var DEFAULT_INITIAL_CHANNEL_PAGE_SIZE = 25;
var DEFAULT_NEXT_CHANNEL_PAGE_SIZE = 100;
var DEFAULT_JUMP_TO_PAGE_SIZE = 100;
var DEFAULT_THREAD_PAGE_SIZE = 50;
var DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD = 250;
var DEFAULT_UPLOAD_SIZE_LIMIT_BYTES = 100 * 1024 * 1024;
var DEFAULT_HIGHLIGHT_DURATION = 500;

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/utils.js
var accentsMap = {
  a: "á|à|ã|â|À|Á|Ã|Â",
  c: "ç|Ç",
  e: "é|è|ê|É|È|Ê",
  i: "í|ì|î|Í|Ì|Î",
  n: "ñ|Ñ",
  o: "ó|ò|ô|ő|õ|Ó|Ò|Ô|Õ",
  u: "ú|ù|û|ü|Ú|Ù|Û|Ü"
};
var removeDiacritics = function(text5) {
  if (!text5)
    return "";
  return Object.keys(accentsMap).reduce(function(acc, current) {
    return acc.replace(new RegExp(accentsMap[current], "g"), current);
  }, text5);
};
var calculateLevenshtein = function(query, name) {
  if (query.length === 0)
    return name.length;
  if (name.length === 0)
    return query.length;
  var matrix = [];
  var i;
  for (i = 0; i <= name.length; i++) {
    matrix[i] = [i];
  }
  var j;
  for (j = 0; j <= query.length; j++) {
    matrix[0][j] = j;
  }
  for (i = 1; i <= name.length; i++) {
    for (j = 1; j <= query.length; j++) {
      if (name.charAt(i - 1) === query.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          // substitution
          Math.min(
            matrix[i][j - 1] + 1,
            // insertion
            matrix[i - 1][j] + 1
          )
        );
      }
    }
  }
  return matrix[name.length][query.length];
};
var searchLocalUsers = function(params) {
  var ownUserId = params.ownUserId, query = params.query, text5 = params.text, useMentionsTransliteration = params.useMentionsTransliteration, users = params.users;
  var matchingUsers = users.filter(function(user) {
    if (user.id === ownUserId)
      return false;
    if (!query)
      return true;
    var updatedId = removeDiacritics(user.id).toLowerCase();
    var updatedName = removeDiacritics(user.name).toLowerCase();
    var updatedQuery = removeDiacritics(query).toLowerCase();
    if (useMentionsTransliteration) {
      (function() {
        return __awaiter(void 0, void 0, void 0, function() {
          var transliterate;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, import("./index.modern-VDIEDWL6.js")];
              case 1:
                transliterate = _a.sent().default;
                updatedName = transliterate(user.name || "").toLowerCase();
                updatedQuery = transliterate(query).toLowerCase();
                updatedId = transliterate(user.id).toLowerCase();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      })();
    }
    var maxDistance = 3;
    var lastDigits = text5.slice(-(maxDistance + 1)).includes("@");
    if (updatedName) {
      var levenshtein_1 = calculateLevenshtein(updatedQuery, updatedName);
      if (updatedName.includes(updatedQuery) || levenshtein_1 <= maxDistance && lastDigits) {
        return true;
      }
    }
    var levenshtein = calculateLevenshtein(updatedQuery, updatedId);
    return updatedId.includes(updatedQuery) || levenshtein <= maxDistance && lastDigits;
  });
  return matchingUsers;
};
var checkUploadPermissions = function(params) {
  return __awaiter(void 0, void 0, void 0, function() {
    var addNotification, file, getAppSettings, t2, uploadType, appSettings, _a, allowed_file_extensions, allowed_mime_types, blocked_file_extensions, blocked_mime_types, size_limit, sendNotAllowedErrorNotification, allowed, blocked, allowed, blocked, sizeLimit;
    var _b, _c;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          addNotification = params.addNotification, file = params.file, getAppSettings = params.getAppSettings, t2 = params.t, uploadType = params.uploadType;
          appSettings = null;
          return [4, getAppSettings()];
        case 1:
          appSettings = _d.sent();
          _a = (uploadType === "image" ? (_b = appSettings === null || appSettings === void 0 ? void 0 : appSettings.app) === null || _b === void 0 ? void 0 : _b.image_upload_config : (_c = appSettings === null || appSettings === void 0 ? void 0 : appSettings.app) === null || _c === void 0 ? void 0 : _c.file_upload_config) || {}, allowed_file_extensions = _a.allowed_file_extensions, allowed_mime_types = _a.allowed_mime_types, blocked_file_extensions = _a.blocked_file_extensions, blocked_mime_types = _a.blocked_mime_types, size_limit = _a.size_limit;
          sendNotAllowedErrorNotification = function() {
            return addNotification(t2('Upload type: "{{ type }}" is not allowed', { type: file.type || "unknown type" }), "error");
          };
          if (allowed_file_extensions === null || allowed_file_extensions === void 0 ? void 0 : allowed_file_extensions.length) {
            allowed = allowed_file_extensions.some(function(ext) {
              return file.name.toLowerCase().endsWith(ext.toLowerCase());
            });
            if (!allowed) {
              sendNotAllowedErrorNotification();
              return [2, false];
            }
          }
          if (blocked_file_extensions === null || blocked_file_extensions === void 0 ? void 0 : blocked_file_extensions.length) {
            blocked = blocked_file_extensions.some(function(ext) {
              return file.name.toLowerCase().endsWith(ext.toLowerCase());
            });
            if (blocked) {
              sendNotAllowedErrorNotification();
              return [2, false];
            }
          }
          if (allowed_mime_types === null || allowed_mime_types === void 0 ? void 0 : allowed_mime_types.length) {
            allowed = allowed_mime_types.some(function(type) {
              var _a2;
              return type.toLowerCase() === ((_a2 = file.type) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase());
            });
            if (!allowed) {
              sendNotAllowedErrorNotification();
              return [2, false];
            }
          }
          if (blocked_mime_types === null || blocked_mime_types === void 0 ? void 0 : blocked_mime_types.length) {
            blocked = blocked_mime_types.some(function(type) {
              var _a2;
              return type.toLowerCase() === ((_a2 = file.type) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase());
            });
            if (blocked) {
              sendNotAllowedErrorNotification();
              return [2, false];
            }
          }
          sizeLimit = size_limit || DEFAULT_UPLOAD_SIZE_LIMIT_BYTES;
          if (file.size && file.size > sizeLimit) {
            addNotification(t2("File is too large: {{ size }}, maximum upload size is {{ limit }}", {
              limit: prettifyFileSize(sizeLimit),
              size: prettifyFileSize(file.size)
            }), "error");
            return [2, false];
          }
          return [2, true];
      }
    });
  });
};
function prettifyFileSize(bytes, precision) {
  if (precision === void 0) {
    precision = 3;
  }
  var units = ["B", "kB", "MB", "GB"];
  var exponent = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), units.length - 1);
  var mantissa = bytes / Math.pow(1024, exponent);
  var formattedMantissa = precision === 0 ? Math.round(mantissa).toString() : mantissa.toPrecision(precision);
  return "".concat(formattedMantissa, " ").concat(units[exponent]);
}

// node_modules/stream-chat-react/dist/components/Attachment/components/FileSizeIndicator.js
var FileSizeIndicator = function(_a) {
  var fileSize = _a.fileSize, maximumFractionDigits = _a.maximumFractionDigits;
  if (!(fileSize && Number.isFinite(Number(fileSize))))
    return null;
  return import_react16.default.createElement("span", { className: "str-chat__message-attachment-file--item-size", "data-testid": "file-size-indicator" }, prettifyFileSize(fileSize, maximumFractionDigits));
};

// node_modules/stream-chat-react/dist/components/Attachment/components/ProgressBar.js
var import_react17 = __toESM(require_react());
var ProgressBar = function(_a) {
  var onClick = _a.onClick, progress = _a.progress;
  return import_react17.default.createElement(
    "div",
    { className: "str-chat__message-attachment-audio-widget--progress-track", "data-progress": progress, "data-testid": "audio-progress", onClick, role: "progressbar", style: {
      "--str-chat__message-attachment-audio-widget-progress": progress + "%"
    } },
    import_react17.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--progress-slider", style: { left: "".concat(progress, "px") } })
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/components/PlaybackRateButton.js
var import_react18 = __toESM(require_react());
var PlaybackRateButton = function(_a) {
  var children = _a.children, onClick = _a.onClick;
  return import_react18.default.createElement("button", { className: "str-chat__message_attachment__playback-rate-button", "data-testid": "playback-rate-button", onClick }, children);
};

// node_modules/stream-chat-react/dist/components/Attachment/components/PlayButton.js
var import_react19 = __toESM(require_react());
var PlayButton = function(_a) {
  var isPlaying = _a.isPlaying, onClick = _a.onClick;
  return import_react19.default.createElement("button", { className: "str-chat__message-attachment-audio-widget--play-button", "data-testid": isPlaying ? "pause-audio" : "play-audio", onClick }, isPlaying ? import_react19.default.createElement(PauseIcon, null) : import_react19.default.createElement(PlayTriangleIcon, null));
};

// node_modules/stream-chat-react/dist/components/Attachment/components/WaveProgressBar.js
var import_lodash = __toESM(require_lodash());
var import_react20 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/audioSampling.js
var resampleWaveformData = function(waveformData, amplitudesCount) {
  return waveformData.length === amplitudesCount ? waveformData : waveformData.length > amplitudesCount ? downSample(waveformData, amplitudesCount) : upSample(waveformData, amplitudesCount);
};
function downSample(data, targetOutputSize) {
  if (data.length <= targetOutputSize || targetOutputSize === 0) {
    return data;
  }
  if (targetOutputSize === 1)
    return [mean(data)];
  var result = [];
  var bucketSize = (data.length - 2) / (targetOutputSize - 2);
  var lastSelectedPointIndex = 0;
  result.push(data[lastSelectedPointIndex]);
  var maxAreaPoint, maxArea, triangleArea;
  for (var bucketIndex = 1; bucketIndex < targetOutputSize - 1; bucketIndex++) {
    var previousBucketRefPoint = data[lastSelectedPointIndex];
    var nextBucketMean = getNextBucketMean(data, bucketIndex, bucketSize);
    var currentBucketStartIndex = Math.floor((bucketIndex - 1) * bucketSize) + 1;
    var nextBucketStartIndex = Math.floor(bucketIndex * bucketSize) + 1;
    var countUnitsBetweenAtoC = 1 + nextBucketStartIndex - currentBucketStartIndex;
    maxArea = triangleArea = -1;
    for (var currentPointIndex = currentBucketStartIndex; currentPointIndex < nextBucketStartIndex; currentPointIndex++) {
      var countUnitsBetweenAtoB = Math.abs(currentPointIndex - currentBucketStartIndex) + 1;
      var countUnitsBetweenBtoC = countUnitsBetweenAtoC - countUnitsBetweenAtoB;
      var currentPointValue = data[currentPointIndex];
      triangleArea = triangleAreaHeron(triangleBase(Math.abs(previousBucketRefPoint - currentPointValue), countUnitsBetweenAtoB), triangleBase(Math.abs(currentPointValue - nextBucketMean), countUnitsBetweenBtoC), triangleBase(Math.abs(previousBucketRefPoint - nextBucketMean), countUnitsBetweenAtoC));
      if (triangleArea > maxArea) {
        maxArea = triangleArea;
        maxAreaPoint = data[currentPointIndex];
        lastSelectedPointIndex = currentPointIndex;
      }
    }
    if (typeof maxAreaPoint !== "undefined")
      result.push(maxAreaPoint);
  }
  result.push(data[data.length - 1]);
  return result;
}
var triangleAreaHeron = function(a, b, c) {
  var s = (a + b + c) / 2;
  return Math.sqrt(s * (s - a) * (s - b) * (s - c));
};
var triangleBase = function(a, b) {
  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
};
var mean = function(values2) {
  return values2.reduce(function(acc, value) {
    return acc + value;
  }, 0) / values2.length;
};
var getNextBucketMean = function(data, currentBucketIndex, bucketSize) {
  var nextBucketStartIndex = Math.floor(currentBucketIndex * bucketSize) + 1;
  var nextNextBucketStartIndex = Math.floor((currentBucketIndex + 1) * bucketSize) + 1;
  nextNextBucketStartIndex = nextNextBucketStartIndex < data.length ? nextNextBucketStartIndex : data.length;
  return mean(data.slice(nextBucketStartIndex, nextNextBucketStartIndex));
};
var upSample = function(values2, targetSize) {
  if (!values2.length) {
    console.warn("Cannot extend empty array of amplitudes.");
    return values2;
  }
  if (values2.length > targetSize) {
    console.warn("Requested to extend the waveformData that is longer than the target list size");
    return values2;
  }
  if (targetSize === values2.length)
    return values2;
  var _a = divMod(targetSize, values2.length), bucketSize = _a[0], remainder = _a[1];
  var result = [];
  for (var i = 0; i < values2.length; i++) {
    var extra = remainder && remainder-- ? 1 : 0;
    result.push.apply(result, Array(bucketSize + extra).fill(values2[i]));
  }
  return result;
};

// node_modules/stream-chat-react/dist/components/Attachment/components/WaveProgressBar.js
var WaveProgressBar = function(_a) {
  var _b = _a.amplitudesCount, amplitudesCount = _b === void 0 ? 40 : _b, _c = _a.progress, progress = _c === void 0 ? 0 : _c, _d = _a.relativeAmplitudeBarWidth, relativeAmplitudeBarWidth = _d === void 0 ? 2 : _d, _e = _a.relativeAmplitudeGap, relativeAmplitudeGap = _e === void 0 ? 1 : _e, seek = _a.seek, waveformData = _a.waveformData;
  var _f = (0, import_react20.useState)(null), progressIndicator = _f[0], setProgressIndicator = _f[1];
  var isDragging = (0, import_react20.useRef)(false);
  var _g = (0, import_react20.useState)(null), root2 = _g[0], setRoot = _g[1];
  var _h = (0, import_react20.useState)(), trackAxisX = _h[0], setTrackAxisX = _h[1];
  var lastRootWidth = (0, import_react20.useRef)();
  var handleDragStart = function(e) {
    e.preventDefault();
    if (!progressIndicator)
      return;
    isDragging.current = true;
    progressIndicator.style.cursor = "grabbing";
  };
  var handleDrag = function(e) {
    if (!isDragging.current)
      return;
    seek(__assign({}, e));
  };
  var handleDragStop = (0, import_react20.useCallback)(function() {
    if (!progressIndicator)
      return;
    isDragging.current = false;
    progressIndicator.style.removeProperty("cursor");
  }, [progressIndicator]);
  var getTrackAxisX = (0, import_react20.useMemo)(function() {
    return (0, import_lodash.default)(function(rootWidth) {
      if (rootWidth === lastRootWidth.current)
        return;
      lastRootWidth.current = rootWidth;
      var possibleAmpCount = Math.floor(rootWidth / (relativeAmplitudeGap + relativeAmplitudeBarWidth));
      var tooManyAmplitudesToRender = possibleAmpCount < amplitudesCount;
      var barCount = tooManyAmplitudesToRender ? possibleAmpCount : amplitudesCount;
      var amplitudeBarWidthToGapRatio = relativeAmplitudeBarWidth / (relativeAmplitudeBarWidth + relativeAmplitudeGap);
      var barWidth = barCount && rootWidth / barCount * amplitudeBarWidthToGapRatio;
      setTrackAxisX({
        barCount,
        barWidth,
        gap: barWidth * (relativeAmplitudeGap / relativeAmplitudeBarWidth)
      });
    }, 1);
  }, [relativeAmplitudeBarWidth, relativeAmplitudeGap, amplitudesCount]);
  var resampledWaveformData = (0, import_react20.useMemo)(function() {
    return trackAxisX ? resampleWaveformData(waveformData, trackAxisX.barCount) : [];
  }, [trackAxisX, waveformData]);
  (0, import_react20.useEffect)(function() {
    document.addEventListener("pointerup", handleDragStop);
    return function() {
      document.removeEventListener("pointerup", handleDragStop);
    };
  }, [handleDragStop]);
  (0, import_react20.useEffect)(function() {
    if (!root2 || typeof ResizeObserver === "undefined")
      return;
    var observer = new ResizeObserver(function(_a2) {
      var entry = _a2[0];
      getTrackAxisX(entry.contentRect.width);
    });
    observer.observe(root2);
    return function() {
      observer.disconnect();
    };
  }, [getTrackAxisX, root2]);
  (0, import_react20.useLayoutEffect)(function() {
    if (!root2)
      return;
    var rootWidth = root2.getBoundingClientRect().width;
    getTrackAxisX(rootWidth);
  }, [getTrackAxisX, root2]);
  if (!waveformData.length || (trackAxisX === null || trackAxisX === void 0 ? void 0 : trackAxisX.barCount) === 0)
    return null;
  return import_react20.default.createElement(
    "div",
    { className: "str-chat__wave-progress-bar__track", "data-testid": "wave-progress-bar-track", onClick: seek, onPointerDown: handleDragStart, onPointerMove: handleDrag, onPointerUp: handleDragStop, ref: setRoot, role: "progressbar", style: {
      "--str-chat__voice-recording-amplitude-bar-gap-width": (trackAxisX === null || trackAxisX === void 0 ? void 0 : trackAxisX.gap) + "px"
    } },
    resampledWaveformData.map(function(amplitude, i) {
      var _a2;
      return import_react20.default.createElement("div", { className: clsx_default("str-chat__wave-progress-bar__amplitude-bar", (_a2 = {}, _a2["str-chat__wave-progress-bar__amplitude-bar--active"] = progress > i / resampledWaveformData.length * 100, _a2)), "data-testid": "amplitude-bar", key: "amplitude-".concat(i), style: {
        "--str-chat__voice-recording-amplitude-bar-width": (trackAxisX === null || trackAxisX === void 0 ? void 0 : trackAxisX.barWidth) + "px",
        "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
      } });
    }),
    import_react20.default.createElement("div", { className: "str-chat__wave-progress-bar__progress-indicator", "data-testid": "wave-progress-bar-progress-indicator", ref: setProgressIndicator, style: { left: "".concat(progress < 0 ? 0 : progress > 100 ? 100 : progress, "%") } })
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/hooks/useAudioController.js
var import_lodash2 = __toESM(require_lodash());
var import_react21 = __toESM(require_react());
var isSeekable = function(audioElement) {
  return !(audioElement.duration === Infinity || isNaN(audioElement.duration));
};
var elementIsPlaying = function(audioElement) {
  return audioElement && !(audioElement.paused || audioElement.ended);
};
var logError = function(e) {
  return console.error("[AUDIO PLAYER]", e);
};
var DEFAULT_PLAYBACK_RATES = [1, 1.5, 2];
var useAudioController = function(_a) {
  var _b = _a === void 0 ? {} : _a, durationSeconds = _b.durationSeconds, mimeType = _b.mimeType, _c = _b.playbackRates, playbackRates = _c === void 0 ? DEFAULT_PLAYBACK_RATES : _c;
  var addNotification = useChannelActionContext("useAudioController").addNotification;
  var t2 = useTranslationContext("useAudioController").t;
  var _d = (0, import_react21.useState)(false), isPlaying = _d[0], setIsPlaying = _d[1];
  var _e = (0, import_react21.useState)(), playbackError = _e[0], setPlaybackError = _e[1];
  var _f = (0, import_react21.useState)(true), canPlayRecord = _f[0], setCanPlayRecord = _f[1];
  var _g = (0, import_react21.useState)(0), secondsElapsed = _g[0], setSecondsElapsed = _g[1];
  var _h = (0, import_react21.useState)(0), playbackRateIndex = _h[0], setPlaybackRateIndex = _h[1];
  var playTimeout = (0, import_react21.useRef)();
  var audioRef = (0, import_react21.useRef)(null);
  var registerError = (0, import_react21.useCallback)(function(e) {
    logError(e);
    setPlaybackError(e);
    addNotification(e.message, "error");
  }, [addNotification]);
  var togglePlay = (0, import_react21.useCallback)(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var e_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!audioRef.current)
              return [
                2
                /*return*/
              ];
            clearTimeout(playTimeout.current);
            playTimeout.current = void 0;
            if (mimeType && !audioRef.current.canPlayType(mimeType)) {
              registerError(new Error(t2("Recording format is not supported and cannot be reproduced")));
              setCanPlayRecord(false);
              return [
                2
                /*return*/
              ];
            }
            if (!elementIsPlaying(audioRef.current)) return [3, 1];
            audioRef.current.pause();
            setIsPlaying(false);
            return [3, 6];
          case 1:
            playTimeout.current = setTimeout(function() {
              if (!audioRef.current)
                return;
              try {
                audioRef.current.pause();
                setIsPlaying(false);
              } catch (e) {
                registerError(new Error(t2("Failed to play the recording")));
              }
            }, 2e3);
            _a2.label = 2;
          case 2:
            _a2.trys.push([2, 4, 5, 6]);
            return [4, audioRef.current.play()];
          case 3:
            _a2.sent();
            setIsPlaying(true);
            return [3, 6];
          case 4:
            e_1 = _a2.sent();
            registerError(e_1);
            setIsPlaying(false);
            return [3, 6];
          case 5:
            clearTimeout(playTimeout.current);
            playTimeout.current = void 0;
            return [
              7
              /*endfinally*/
            ];
          case 6:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [mimeType, registerError, t2]);
  var increasePlaybackRate = function() {
    setPlaybackRateIndex(function(prev) {
      if (!audioRef.current)
        return prev;
      var nextIndex = prev === playbackRates.length - 1 ? 0 : prev + 1;
      audioRef.current.playbackRate = playbackRates[nextIndex];
      return nextIndex;
    });
  };
  var seek = (0, import_react21.useMemo)(function() {
    return (0, import_lodash2.default)(function(_a2) {
      var clientX = _a2.clientX, currentTarget = _a2.currentTarget;
      if (!(currentTarget && audioRef.current))
        return;
      if (!isSeekable(audioRef.current)) {
        registerError(new Error(t2("Cannot seek in the recording")));
        return;
      }
      var _b2 = currentTarget.getBoundingClientRect(), width = _b2.width, x = _b2.x;
      var ratio = (clientX - x) / width;
      if (ratio > 1 || ratio < 0)
        return;
      var currentTime = ratio * audioRef.current.duration;
      setSecondsElapsed(currentTime);
      audioRef.current.currentTime = currentTime;
    }, 16);
  }, [registerError, t2]);
  (0, import_react21.useEffect)(function() {
    if (!audioRef.current)
      return;
    var audioElement = audioRef.current;
    var handleEnded = function() {
      var _a2, _b2;
      setSecondsElapsed((_b2 = (_a2 = audioElement === null || audioElement === void 0 ? void 0 : audioElement.duration) !== null && _a2 !== void 0 ? _a2 : durationSeconds) !== null && _b2 !== void 0 ? _b2 : 0);
      setIsPlaying(false);
    };
    audioElement.addEventListener("ended", handleEnded);
    var handleError = function() {
      addNotification(t2("Error reproducing the recording"), "error");
      setIsPlaying(false);
    };
    audioElement.addEventListener("error", handleError);
    var handleTimeupdate = function() {
      setSecondsElapsed(audioElement === null || audioElement === void 0 ? void 0 : audioElement.currentTime);
    };
    audioElement.addEventListener("timeupdate", handleTimeupdate);
    return function() {
      audioElement.pause();
      audioElement.removeEventListener("ended", handleEnded);
      audioElement.removeEventListener("error", handleError);
      audioElement.removeEventListener("timeupdate", handleTimeupdate);
    };
  }, [addNotification, durationSeconds, t2]);
  return {
    audioRef,
    canPlayRecord,
    increasePlaybackRate,
    isPlaying,
    playbackError,
    playbackRate: playbackRates[playbackRateIndex],
    progress: audioRef.current && secondsElapsed ? secondsElapsed / audioRef.current.duration * 100 : 0,
    secondsElapsed,
    seek,
    togglePlay
  };
};

// node_modules/stream-chat-react/dist/components/Attachment/Audio.js
var AudioV1 = function(_a) {
  var og = _a.og;
  var asset_url = og.asset_url, description = og.description, image_url = og.image_url, mime_type = og.mime_type, text5 = og.text, title = og.title;
  var _b = useAudioController({ mimeType: mime_type }), audioRef = _b.audioRef, isPlaying = _b.isPlaying, progress = _b.progress, togglePlay = _b.togglePlay;
  return import_react22.default.createElement(
    "div",
    { className: "str-chat__audio" },
    import_react22.default.createElement(
      "div",
      { className: "str-chat__audio__wrapper" },
      import_react22.default.createElement(
        "audio",
        { ref: audioRef },
        import_react22.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })
      ),
      import_react22.default.createElement(
        "div",
        { className: "str-chat__audio__image" },
        import_react22.default.createElement("div", { className: "str-chat__audio__image--overlay" }, !isPlaying ? import_react22.default.createElement(
          "button",
          { className: "str-chat__audio__image--button", "data-testid": "play-audio", onClick: togglePlay },
          import_react22.default.createElement(
            "svg",
            { height: "40", viewBox: "0 0 64 64", width: "40", xmlns: "http://www.w3.org/2000/svg" },
            import_react22.default.createElement("path", { d: "M32 58c14.36 0 26-11.64 26-26S46.36 6 32 6 6 17.64 6 32s11.64 26 26 26zm0 6C14.327 64 0 49.673 0 32 0 14.327 14.327 0 32 0c17.673 0 32 14.327 32 32 0 17.673-14.327 32-32 32zm13.237-28.412L26.135 45.625a3.27 3.27 0 0 1-4.426-1.4 3.319 3.319 0 0 1-.372-1.47L21 23.36c-.032-1.823 1.41-3.327 3.222-3.358a3.263 3.263 0 0 1 1.473.322l19.438 9.36a3.311 3.311 0 0 1 .103 5.905z", fillRule: "nonzero" })
          )
        ) : import_react22.default.createElement(
          "button",
          { className: "str-chat__audio__image--button", "data-testid": "pause-audio", onClick: togglePlay },
          import_react22.default.createElement(
            "svg",
            { height: "40", viewBox: "0 0 64 64", width: "40", xmlns: "http://www.w3.org/2000/svg" },
            import_react22.default.createElement("path", { d: "M32 58.215c14.478 0 26.215-11.737 26.215-26.215S46.478 5.785 32 5.785 5.785 17.522 5.785 32 17.522 58.215 32 58.215zM32 64C14.327 64 0 49.673 0 32 0 14.327 14.327 0 32 0c17.673 0 32 14.327 32 32 0 17.673-14.327 32-32 32zm-7.412-45.56h2.892a2.17 2.17 0 0 1 2.17 2.17v23.865a2.17 2.17 0 0 1-2.17 2.17h-2.892a2.17 2.17 0 0 1-2.17-2.17V20.61a2.17 2.17 0 0 1 2.17-2.17zm12.293 0h2.893a2.17 2.17 0 0 1 2.17 2.17v23.865a2.17 2.17 0 0 1-2.17 2.17h-2.893a2.17 2.17 0 0 1-2.17-2.17V20.61a2.17 2.17 0 0 1 2.17-2.17z", fillRule: "nonzero" })
          )
        )),
        image_url && import_react22.default.createElement("img", { alt: "".concat(description), src: image_url })
      ),
      import_react22.default.createElement(
        "div",
        { className: "str-chat__audio__content" },
        import_react22.default.createElement(
          "span",
          { className: "str-chat__audio__content--title" },
          import_react22.default.createElement("strong", null, title)
        ),
        import_react22.default.createElement("span", { className: "str-chat__audio__content--subtitle" }, text5),
        import_react22.default.createElement(
          "div",
          { className: "str-chat__audio__content--progress" },
          import_react22.default.createElement("div", { "data-progress": progress, "data-testid": "audio-progress", role: "progressbar", style: { width: "".concat(progress, "%") } })
        )
      )
    )
  );
};
var AudioV2 = function(_a) {
  var og = _a.og;
  var asset_url = og.asset_url, file_size = og.file_size, mime_type = og.mime_type, title = og.title;
  var _b = useAudioController({
    mimeType: mime_type
  }), audioRef = _b.audioRef, isPlaying = _b.isPlaying, progress = _b.progress, seek = _b.seek, togglePlay = _b.togglePlay;
  if (!asset_url)
    return null;
  var dataTestId = "audio-widget";
  var rootClassName2 = "str-chat__message-attachment-audio-widget";
  return import_react22.default.createElement(
    "div",
    { className: rootClassName2, "data-testid": dataTestId },
    import_react22.default.createElement(
      "audio",
      { ref: audioRef },
      import_react22.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })
    ),
    import_react22.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--play-controls" },
      import_react22.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })
    ),
    import_react22.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--text" },
      import_react22.default.createElement(
        "div",
        { className: "str-chat__message-attachment-audio-widget--text-first-row" },
        import_react22.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title),
        import_react22.default.createElement(DownloadButton, { assetUrl: asset_url })
      ),
      import_react22.default.createElement(
        "div",
        { className: "str-chat__message-attachment-audio-widget--text-second-row" },
        import_react22.default.createElement(FileSizeIndicator, { fileSize: file_size }),
        import_react22.default.createElement(ProgressBar, { onClick: seek, progress })
      )
    )
  );
};
var UnMemoizedAudio = function(props) {
  var themeVersion = useChatContext("Audio").themeVersion;
  return themeVersion === "1" ? import_react22.default.createElement(AudioV1, __assign({}, props)) : import_react22.default.createElement(AudioV2, __assign({}, props));
};
var Audio = import_react22.default.memo(UnMemoizedAudio);

// node_modules/stream-chat-react/dist/components/Attachment/Card.js
var import_react69 = __toESM(require_react());
var import_react_player = __toESM(require_lib());

// node_modules/stream-chat-react/dist/components/Gallery/BaseImage.js
var import_react23 = __toESM(require_react());
var BaseImage = (0, import_react23.forwardRef)(function BaseImage2(_a, ref) {
  var props = __rest(_a, []);
  var propsClassName = props.className, propsOnError = props.onError;
  var _b = (0, import_react23.useState)(false), error2 = _b[0], setError = _b[1];
  (0, import_react23.useEffect)(function() {
    return function() {
      setError(false);
    };
  }, [props.src]);
  return import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement("img", __assign({ "data-testid": "str-chat__base-image" }, props, { className: clsx_default(propsClassName, "str-chat__base-image", {
      "str-chat__base-image--load-failed": error2
    }), onError: function(e) {
      setError(true);
      propsOnError === null || propsOnError === void 0 ? void 0 : propsOnError(e);
    }, ref })),
    error2 && import_react23.default.createElement(DownloadButton, { assetUrl: props.src })
  );
});

// node_modules/stream-chat-react/dist/components/Gallery/Gallery.js
var import_react67 = __toESM(require_react());
var import_sanitize_url2 = __toESM(require_dist());

// node_modules/stream-chat-react/dist/components/Modal/Modal.js
var import_react65 = __toESM(require_react());

// node_modules/@react-aria/utils/dist/useLayoutEffect.mjs
var import_react24 = __toESM(require_react(), 1);
var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? (0, import_react24.default).useLayoutEffect : () => {
};

// node_modules/@react-aria/utils/dist/useEffectEvent.mjs
var import_react25 = __toESM(require_react(), 1);
function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn2) {
  const ref = (0, import_react25.useRef)(null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    ref.current = fn2;
  }, [
    fn2
  ]);
  return (0, import_react25.useCallback)((...args) => {
    const f = ref.current;
    return f === null || f === void 0 ? void 0 : f(...args);
  }, []);
}

// node_modules/@react-aria/utils/dist/useValueEffect.mjs
var import_react26 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useId.mjs
var import_react28 = __toESM(require_react(), 1);

// node_modules/@react-aria/ssr/dist/SSRProvider.mjs
var import_react27 = __toESM(require_react(), 1);
var $b5e257d569688ac6$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
};
var $b5e257d569688ac6$var$SSRContext = (0, import_react27.default).createContext($b5e257d569688ac6$var$defaultContext);
var $b5e257d569688ac6$var$IsSSRContext = (0, import_react27.default).createContext(false);
var $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $b5e257d569688ac6$var$componentIds = /* @__PURE__ */ new WeakMap();
function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
  let ctx = (0, import_react27.useContext)($b5e257d569688ac6$var$SSRContext);
  let ref = (0, import_react27.useRef)(null);
  if (ref.current === null && !isDisabled) {
    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, import_react27.default).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
    if (currentOwner) {
      let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
      if (prevComponentValue == null)
        $b5e257d569688ac6$var$componentIds.set(currentOwner, {
          id: ctx.current,
          state: currentOwner.memoizedState
        });
      else if (currentOwner.memoizedState !== prevComponentValue.state) {
        ctx.current = prevComponentValue.id;
        $b5e257d569688ac6$var$componentIds.delete(currentOwner);
      }
    }
    ref.current = ++ctx.current;
  }
  return ref.current;
}
function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
  let ctx = (0, import_react27.useContext)($b5e257d569688ac6$var$SSRContext);
  if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM && true) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
  let prefix = ctx === $b5e257d569688ac6$var$defaultContext && false ? "react-aria" : `react-aria${ctx.prefix}`;
  return defaultId || `${prefix}-${counter}`;
}
function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
  let id = (0, import_react27.default).useId();
  let [didSSR] = (0, import_react27.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
  let prefix = didSSR || false ? "react-aria" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
  return defaultId || `${prefix}-${id}`;
}
var $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, import_react27.default)["useId"] === "function" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
function $b5e257d569688ac6$var$getSnapshot() {
  return false;
}
function $b5e257d569688ac6$var$getServerSnapshot() {
  return true;
}
function $b5e257d569688ac6$var$subscribe(onStoreChange) {
  return () => {
  };
}
function $b5e257d569688ac6$export$535bd6ca7f90a273() {
  if (typeof (0, import_react27.default)["useSyncExternalStore"] === "function") return (0, import_react27.default)["useSyncExternalStore"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
  return (0, import_react27.useContext)($b5e257d569688ac6$var$IsSSRContext);
}

// node_modules/@react-aria/utils/dist/useId.mjs
var $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $bdb11010cef70236$export$d41a04c74483c6ef = /* @__PURE__ */ new Map();
var $bdb11010cef70236$var$registry;
if (typeof FinalizationRegistry !== "undefined") $bdb11010cef70236$var$registry = new FinalizationRegistry((heldValue) => {
  $bdb11010cef70236$export$d41a04c74483c6ef.delete(heldValue);
});
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdsA = $bdb11010cef70236$export$d41a04c74483c6ef.get(idA);
  if (setIdsA) {
    setIdsA.forEach((ref) => ref.current = idB);
    return idB;
  }
  let setIdsB = $bdb11010cef70236$export$d41a04c74483c6ef.get(idB);
  if (setIdsB) {
    setIdsB.forEach((ref) => ref.current = idA);
    return idA;
  }
  return idB;
}

// node_modules/@react-aria/utils/dist/chain.mjs
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

// node_modules/@react-aria/utils/dist/domHelpers.mjs
var $431fbd86ca7dc216$export$b204af158042fbac = (el) => {
  var _el_ownerDocument;
  return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
};
var $431fbd86ca7dc216$export$f21a1ffae260145a = (el) => {
  if (el && "window" in el && el.window === el) return el;
  const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
  return doc.defaultView || window;
};
function $431fbd86ca7dc216$var$isNode(value) {
  return value !== null && typeof value === "object" && "nodeType" in value && typeof value.nodeType === "number";
}
function $431fbd86ca7dc216$export$af51f0f06c0f328a(node2) {
  return $431fbd86ca7dc216$var$isNode(node2) && node2.nodeType === Node.DOCUMENT_FRAGMENT_NODE && "host" in node2;
}

// node_modules/@react-stately/flags/dist/import.mjs
var $f4e2df6bd15f8569$var$_shadowDOM = false;
function $f4e2df6bd15f8569$export$98658e8c59125e6a() {
  return $f4e2df6bd15f8569$var$_shadowDOM;
}

// node_modules/@react-aria/utils/dist/DOMFunctions.mjs
function $d4ee10de306f2510$export$4282f70798064fe0(node2, otherNode) {
  if (!(0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return otherNode && node2 ? node2.contains(otherNode) : false;
  if (!node2 || !otherNode) return false;
  let currentNode = otherNode;
  while (currentNode !== null) {
    if (currentNode === node2) return true;
    if (currentNode.tagName === "SLOT" && currentNode.assignedSlot)
      currentNode = currentNode.assignedSlot.parentNode;
    else if ((0, $431fbd86ca7dc216$export$af51f0f06c0f328a)(currentNode))
      currentNode = currentNode.host;
    else currentNode = currentNode.parentNode;
  }
  return false;
}
var $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document) => {
  var _activeElement_shadowRoot;
  if (!(0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return doc.activeElement;
  let activeElement = doc.activeElement;
  while (activeElement && "shadowRoot" in activeElement && ((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0 ? void 0 : _activeElement_shadowRoot.activeElement)) activeElement = activeElement.shadowRoot.activeElement;
  return activeElement;
};
function $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {
  if ((0, $f4e2df6bd15f8569$export$98658e8c59125e6a)() && event.target.shadowRoot) {
    if (event.composedPath) return event.composedPath()[0];
  }
  return event.target;
}

// node_modules/@react-aria/utils/dist/ShadowTreeWalker.mjs
var $dfc540311bf7f109$export$63eb3ababa9c55c4 = class {
  get currentNode() {
    return this._currentNode;
  }
  set currentNode(node2) {
    if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(this.root, node2)) throw new Error("Cannot set currentNode to a node that is not contained by the root node.");
    const walkers = [];
    let curNode = node2;
    let currentWalkerCurrentNode = node2;
    this._currentNode = node2;
    while (curNode && curNode !== this.root) if (curNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      const shadowRoot = curNode;
      const walker2 = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      walkers.push(walker2);
      walker2.currentNode = currentWalkerCurrentNode;
      this._currentSetFor.add(walker2);
      curNode = currentWalkerCurrentNode = shadowRoot.host;
    } else curNode = curNode.parentNode;
    const walker = this._doc.createTreeWalker(this.root, this.whatToShow, {
      acceptNode: this._acceptNode
    });
    walkers.push(walker);
    walker.currentNode = currentWalkerCurrentNode;
    this._currentSetFor.add(walker);
    this._walkerStack = walkers;
  }
  get doc() {
    return this._doc;
  }
  firstChild() {
    let currentNode = this.currentNode;
    let newNode = this.nextNode();
    if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(currentNode, newNode)) {
      this.currentNode = currentNode;
      return null;
    }
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  lastChild() {
    let walker = this._walkerStack[0];
    let newNode = walker.lastChild();
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  nextNode() {
    const nextNode = this._walkerStack[0].nextNode();
    if (nextNode) {
      const shadowRoot = nextNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(nextNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(nextNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          this.currentNode = nextNode;
          return nextNode;
        }
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (nextNode) this.currentNode = nextNode;
      return nextNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  previousNode() {
    const currentWalker = this._walkerStack[0];
    if (currentWalker.currentNode === currentWalker.root) {
      if (this._currentSetFor.has(currentWalker)) {
        this._currentSetFor.delete(currentWalker);
        if (this._walkerStack.length > 1) {
          this._walkerStack.shift();
          let newNode = this.previousNode();
          if (newNode) this.currentNode = newNode;
          return newNode;
        } else return null;
      }
      return null;
    }
    const previousNode = currentWalker.previousNode();
    if (previousNode) {
      const shadowRoot = previousNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(previousNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(previousNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          if (previousNode) this.currentNode = previousNode;
          return previousNode;
        }
        let newNode = this.lastChild();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (previousNode) this.currentNode = previousNode;
      return previousNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.previousNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  /**
   * @deprecated
   */
  nextSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  previousSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  parentNode() {
    return null;
  }
  constructor(doc, root2, whatToShow, filter) {
    this._walkerStack = [];
    this._currentSetFor = /* @__PURE__ */ new Set();
    this._acceptNode = (node2) => {
      if (node2.nodeType === Node.ELEMENT_NODE) {
        const shadowRoot2 = node2.shadowRoot;
        if (shadowRoot2) {
          const walker = this._doc.createTreeWalker(shadowRoot2, this.whatToShow, {
            acceptNode: this._acceptNode
          });
          this._walkerStack.unshift(walker);
          return NodeFilter.FILTER_ACCEPT;
        } else {
          var _this_filter;
          if (typeof this.filter === "function") return this.filter(node2);
          else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) return this.filter.acceptNode(node2);
          else if (this.filter === null) return NodeFilter.FILTER_ACCEPT;
        }
      }
      return NodeFilter.FILTER_SKIP;
    };
    this._doc = doc;
    this.root = root2;
    this.filter = filter !== null && filter !== void 0 ? filter : null;
    this.whatToShow = whatToShow !== null && whatToShow !== void 0 ? whatToShow : NodeFilter.SHOW_ALL;
    this._currentNode = root2;
    this._walkerStack.unshift(doc.createTreeWalker(root2, whatToShow, this._acceptNode));
    const shadowRoot = root2.shadowRoot;
    if (shadowRoot) {
      const walker = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      this._walkerStack.unshift(walker);
    }
  }
};
function $dfc540311bf7f109$export$4d0f8be8b12a7ef6(doc, root2, whatToShow, filter) {
  if ((0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return new $dfc540311bf7f109$export$63eb3ababa9c55c4(doc, root2, whatToShow, filter);
  return doc.createTreeWalker(root2, whatToShow, filter);
}

// node_modules/@react-aria/utils/dist/mergeProps.mjs
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      if (typeof a === "function" && typeof b === "function" && // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
      65 && key.charCodeAt(2) <= /* 'Z' */
      90) result[key] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);
      else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, clsx_default)(a, b);
      else if (key === "id" && a && b) result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a, b);
      else result[key] = b !== void 0 ? b : a;
    }
  }
  return result;
}

// node_modules/@react-aria/utils/dist/mergeRefs.mjs
function $5dc95899b306f630$export$c9058316764c140e(...refs) {
  if (refs.length === 1 && refs[0]) return refs[0];
  return (value) => {
    let hasCleanup = false;
    const cleanups = refs.map((ref) => {
      const cleanup = $5dc95899b306f630$var$setRef(ref, value);
      hasCleanup || (hasCleanup = typeof cleanup == "function");
      return cleanup;
    });
    if (hasCleanup) return () => {
      cleanups.forEach((cleanup, i) => {
        if (typeof cleanup === "function") cleanup();
        else $5dc95899b306f630$var$setRef(refs[i], null);
      });
    };
  };
}
function $5dc95899b306f630$var$setRef(ref, value) {
  if (typeof ref === "function") return ref(value);
  else if (ref != null) ref.current = value;
}

// node_modules/@react-aria/utils/dist/focusWithoutScrolling.mjs
function $7215afc6de606d6b$export$de79e2c695e052f3(element3) {
  if ($7215afc6de606d6b$var$supportsPreventScroll()) element3.focus({
    preventScroll: true
  });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element3);
    element3.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      let focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element3) {
  let parent = element3.parentNode;
  let scrollableElements = [];
  let rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element: element3, scrollTop, scrollLeft } of scrollableElements) {
    element3.scrollTop = scrollTop;
    element3.scrollLeft = scrollLeft;
  }
}

// node_modules/@react-aria/utils/dist/platform.mjs
function $c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$var$cached(fn2) {
  if (false) return fn2;
  let res = null;
  return () => {
    if (res == null) res = fn2();
    return res;
  };
}
var $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
});
var $c87311424ea30a05$export$186c6964ca17d99 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
});
var $c87311424ea30a05$export$7bef049ce92e4224 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
});
var $c87311424ea30a05$export$fedb369cb70207f1 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
});
var $c87311424ea30a05$export$e1865c3bedcd822b = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
});
var $c87311424ea30a05$export$78551043582a6a98 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
});
var $c87311424ea30a05$export$6446a186d09e379e = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
});
var $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
});
var $c87311424ea30a05$export$b7d78993b74f766d = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
});

// node_modules/@react-aria/utils/dist/openLink.mjs
var import_react29 = __toESM(require_react(), 1);
var $ea8dcbcb9ea1b556$var$RouterContext = (0, import_react29.createContext)({
  isNative: true,
  open: $ea8dcbcb9ea1b556$var$openSyntheticLink,
  useHref: (href) => href
});
function $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
  var _window_event_type, _window_event;
  let { metaKey, ctrlKey, altKey, shiftKey } = modifiers;
  if ((0, $c87311424ea30a05$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith("key")) && target.target === "_blank") {
    if ((0, $c87311424ea30a05$export$9ac100e40613ea10)()) metaKey = true;
    else ctrlKey = true;
  }
  let event = (0, $c87311424ea30a05$export$78551043582a6a98)() && (0, $c87311424ea30a05$export$9ac100e40613ea10)() && !(0, $c87311424ea30a05$export$7bef049ce92e4224)() && true ? new KeyboardEvent("keydown", {
    keyIdentifier: "Enter",
    metaKey,
    ctrlKey,
    altKey,
    shiftKey
  }) : new MouseEvent("click", {
    metaKey,
    ctrlKey,
    altKey,
    shiftKey,
    bubbles: true,
    cancelable: true
  });
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;
  (0, $7215afc6de606d6b$export$de79e2c695e052f3)(target);
  target.dispatchEvent(event);
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
}
$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
function $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {
  if (target instanceof HTMLAnchorElement) open(target);
  else if (target.hasAttribute("data-href")) {
    let link2 = document.createElement("a");
    link2.href = target.getAttribute("data-href");
    if (target.hasAttribute("data-target")) link2.target = target.getAttribute("data-target");
    if (target.hasAttribute("data-rel")) link2.rel = target.getAttribute("data-rel");
    if (target.hasAttribute("data-download")) link2.download = target.getAttribute("data-download");
    if (target.hasAttribute("data-ping")) link2.ping = target.getAttribute("data-ping");
    if (target.hasAttribute("data-referrer-policy")) link2.referrerPolicy = target.getAttribute("data-referrer-policy");
    target.appendChild(link2);
    open(link2);
    target.removeChild(link2);
  }
}
function $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {
  $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link2) => $ea8dcbcb9ea1b556$export$95185d699e05d4d7(link2, modifiers));
}

// node_modules/@react-aria/utils/dist/runAfterTransition.mjs
var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  function isTransitionEvent(event) {
    return "propertyName" in event;
  }
  let onTransitionStart = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = /* @__PURE__ */ new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      e.target.addEventListener("transitioncancel", onTransitionEnd, {
        once: true
      });
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks) cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") $bbed8b41f857bcc0$var$setupGlobalEvents();
  else document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$var$cleanupDetachedElements() {
  for (const [eventTarget] of $bbed8b41f857bcc0$var$transitionsByElement)
    if ("isConnected" in eventTarget && !eventTarget.isConnected) $bbed8b41f857bcc0$var$transitionsByElement.delete(eventTarget);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn2) {
  requestAnimationFrame(() => {
    $bbed8b41f857bcc0$var$cleanupDetachedElements();
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn2();
    else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn2);
  });
}

// node_modules/@react-aria/utils/dist/useDrag1D.mjs
var import_react30 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useGlobalListeners.mjs
var import_react31 = __toESM(require_react(), 1);
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, import_react31.useRef)(/* @__PURE__ */ new Map());
  let addGlobalListener = (0, import_react31.useCallback)((eventTarget, type, listener, options2) => {
    let fn2 = (options2 === null || options2 === void 0 ? void 0 : options2.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn: fn2,
      options: options2
    });
    eventTarget.addEventListener(type, fn2, options2);
  }, []);
  let removeGlobalListener = (0, import_react31.useCallback)((eventTarget, type, listener, options2) => {
    var _globalListeners_current_get;
    let fn2 = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn2, options2);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, import_react31.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  (0, import_react31.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [
    removeAllGlobalListeners
  ]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}

// node_modules/@react-aria/utils/dist/useObjectRef.mjs
var import_react32 = __toESM(require_react(), 1);
function $df56164dff5785e2$export$4338b53315abf666(ref) {
  const objRef = (0, import_react32.useRef)(null);
  const cleanupRef = (0, import_react32.useRef)(void 0);
  const refEffect = (0, import_react32.useCallback)((instance2) => {
    if (typeof ref === "function") {
      const refCallback = ref;
      const refCleanup = refCallback(instance2);
      return () => {
        if (typeof refCleanup === "function") refCleanup();
        else refCallback(null);
      };
    } else if (ref) {
      ref.current = instance2;
      return () => {
        ref.current = null;
      };
    }
  }, [
    ref
  ]);
  return (0, import_react32.useMemo)(() => ({
    get current() {
      return objRef.current;
    },
    set current(value) {
      objRef.current = value;
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) cleanupRef.current = refEffect(value);
    }
  }), [
    refEffect
  ]);
}

// node_modules/@react-aria/utils/dist/useUpdateEffect.mjs
var import_react33 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useUpdateLayoutEffect.mjs
var import_react34 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useResizeObserver.mjs
var import_react35 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useSyncRef.mjs
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        if (context.ref) context.ref.current = null;
      };
    }
  });
}

// node_modules/@react-aria/utils/dist/useViewportSize.mjs
var import_react36 = __toESM(require_react(), 1);
var $5df64b3807dc15ee$var$visualViewport = typeof document !== "undefined" && window.visualViewport;

// node_modules/@react-aria/utils/dist/useDescription.mjs
var import_react37 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useEvent.mjs
var import_react38 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/isVirtualEvent.mjs
function $6a7db85432448f7f$export$60278871457622de(event) {
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  return !(0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

// node_modules/@react-aria/utils/dist/useDeepMemo.mjs
var import_react39 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useFormReset.mjs
var import_react40 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useLoadMore.mjs
var import_react41 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useLoadMoreSentinel.mjs
var import_react42 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/inertValue.mjs
var import_react43 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/animation.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var import_react44 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/isFocusable.mjs
var $b4b717babfbb907b$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  '[contenteditable]:not([contenteditable^="false"])'
];
var $b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$b4b717babfbb907b$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $b4b717babfbb907b$export$4c063cf1350e6fed(element3) {
  return element3.matches($b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR);
}
function $b4b717babfbb907b$export$bebd5a1431fec25d(element3) {
  return element3.matches($b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR);
}

// node_modules/@react-stately/utils/dist/useControlledState.mjs
var import_react45 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/isElementVisible.mjs
function $645f2e67b85a24c9$var$isStyleVisible(element3) {
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element3);
  if (!(element3 instanceof windowObject.HTMLElement) && !(element3 instanceof windowObject.SVGElement)) return false;
  let { display, visibility } = element3.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const { getComputedStyle: getComputedStyle3 } = element3.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle3(element3);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element3, childElement) {
  return !element3.hasAttribute("hidden") && // Ignore HiddenSelect when tree walking.
  !element3.hasAttribute("data-react-aria-prevent-focus") && (element3.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element3.hasAttribute("open") : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element3, childElement) {
  return element3.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element3) && $645f2e67b85a24c9$var$isAttributeVisible(element3, childElement) && (!element3.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element3.parentElement, element3));
}

// node_modules/@react-aria/interactions/dist/utils.mjs
var import_react46 = __toESM(require_react(), 1);
function $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent) {
  let event = nativeEvent;
  event.nativeEvent = nativeEvent;
  event.isDefaultPrevented = () => event.defaultPrevented;
  event.isPropagationStopped = () => event.cancelBubble;
  event.persist = () => {
  };
  return event;
}
function $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target) {
  Object.defineProperty(event, "target", {
    value: target
  });
  Object.defineProperty(event, "currentTarget", {
    value: target
  });
}
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, import_react46.useRef)({
    isFocused: false,
    observer: null
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  let dispatchBlur = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
  });
  return (0, import_react46.useCallback)((e) => {
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = (e2) => {
        stateRef.current.isFocused = false;
        if (target.disabled) {
          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(e2);
          dispatchBlur(event);
        }
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          var _stateRef_current_observer;
          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", {
            relatedTarget: relatedTargetEl
          }));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true,
            relatedTarget: relatedTargetEl
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, [
    dispatchBlur
  ]);
}
var $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
function $8a9cb279dc87e130$export$cabe61c495ee3649(target) {
  while (target && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(target)) target = target.parentElement;
  let window2 = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(target);
  let activeElement = window2.document.activeElement;
  if (!activeElement || activeElement === target) return;
  $8a9cb279dc87e130$export$fda7da73ab5d4c48 = true;
  let isRefocusing = false;
  let onBlur = (e) => {
    if (e.target === activeElement || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusOut = (e) => {
    if (e.target === activeElement || isRefocusing) {
      e.stopImmediatePropagation();
      if (!target && !isRefocusing) {
        isRefocusing = true;
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(activeElement);
        cleanup();
      }
    }
  };
  let onFocus = (e) => {
    if (e.target === target || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusIn = (e) => {
    if (e.target === target || isRefocusing) {
      e.stopImmediatePropagation();
      if (!isRefocusing) {
        isRefocusing = true;
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(activeElement);
        cleanup();
      }
    }
  };
  window2.addEventListener("blur", onBlur, true);
  window2.addEventListener("focusout", onFocusOut, true);
  window2.addEventListener("focusin", onFocusIn, true);
  window2.addEventListener("focus", onFocus, true);
  let cleanup = () => {
    cancelAnimationFrame(raf);
    window2.removeEventListener("blur", onBlur, true);
    window2.removeEventListener("focusout", onFocusOut, true);
    window2.removeEventListener("focusin", onFocusIn, true);
    window2.removeEventListener("focus", onFocus, true);
    $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
    isRefocusing = false;
  };
  let raf = requestAnimationFrame(cleanup);
  return cleanup;
}

// node_modules/@react-aria/interactions/dist/textSelection.mjs
var $14c0b72509d70225$var$state = "default";
var $14c0b72509d70225$var$savedUserSelect = "";
var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state === "default") {
      const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
      $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;
      documentObject.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style[property]);
    target.style[property] = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state !== "disabled") return;
    $14c0b72509d70225$var$state = "restoring";
    setTimeout(() => {
      (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
        if ($14c0b72509d70225$var$state === "restoring") {
          const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
          if (documentObject.documentElement.style.webkitUserSelect === "none") documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
      let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
      if (target.style[property] === "none") target.style[property] = targetOldUserSelect;
      if (target.getAttribute("style") === "") target.removeAttribute("style");
      $14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
  }
}

// node_modules/@react-aria/interactions/dist/context.mjs
var import_react47 = __toESM(require_react(), 1);
var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, import_react47.default).createContext({
  register: () => {
  }
});
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";

// node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js
function _class_apply_descriptor_get(receiver, descriptor) {
  if (descriptor.get) return descriptor.get.call(receiver);
  return descriptor.value;
}

// node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js
function _class_extract_field_descriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) throw new TypeError("attempted to " + action + " private field on non-instance");
  return privateMap.get(receiver);
}

// node_modules/@swc/helpers/esm/_class_private_field_get.js
function _class_private_field_get(receiver, privateMap) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
  return _class_apply_descriptor_get(receiver, descriptor);
}

// node_modules/@swc/helpers/esm/_check_private_redeclaration.js
function _check_private_redeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_init.js
function _class_private_field_init(obj, privateMap, value) {
  _check_private_redeclaration(obj, privateMap);
  privateMap.set(obj, value);
}

// node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js
function _class_apply_descriptor_set(receiver, descriptor, value) {
  if (descriptor.set) descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_set.js
function _class_private_field_set(receiver, privateMap, value) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
  _class_apply_descriptor_set(receiver, descriptor, value);
  return value;
}

// node_modules/@react-aria/interactions/dist/usePress.mjs
var import_react_dom2 = __toESM(require_react_dom(), 1);
var import_react48 = __toESM(require_react(), 1);
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context = (0, import_react48.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let { register, ...contextProps } = context;
    props = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
    register();
  }
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, props.ref);
  return props;
}
var $f6c31cce2adf654f$var$_shouldStopPropagation = /* @__PURE__ */ new WeakMap();
var $f6c31cce2adf654f$var$PressEvent = class {
  continuePropagation() {
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);
  }
  get shouldStopPropagation() {
    return (0, _class_private_field_get)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);
  }
  constructor(type, pointerType, originalEvent, state) {
    (0, _class_private_field_init)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {
      writable: true,
      value: void 0
    });
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);
    var _state_target;
    let currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;
    const rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();
    let x, y = 0;
    let clientX, clientY = null;
    if (originalEvent.clientX != null && originalEvent.clientY != null) {
      clientX = originalEvent.clientX;
      clientY = originalEvent.clientY;
    }
    if (rect) {
      if (clientX != null && clientY != null) {
        x = clientX - rect.left;
        y = clientY - rect.top;
      } else {
        x = rect.width / 2;
        y = rect.height / 2;
      }
    }
    this.type = type;
    this.pointerType = pointerType;
    this.target = originalEvent.currentTarget;
    this.shiftKey = originalEvent.shiftKey;
    this.metaKey = originalEvent.metaKey;
    this.ctrlKey = originalEvent.ctrlKey;
    this.altKey = originalEvent.altKey;
    this.x = x;
    this.y = y;
  }
};
var $f6c31cce2adf654f$var$LINK_CLICKED = Symbol("linkClicked");
var $f6c31cce2adf654f$var$STYLE_ID = "react-aria-pressable-style";
var $f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE = "data-react-aria-pressable";
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let { onPress, onPressChange, onPressStart, onPressEnd, onPressUp, onClick, isDisabled, isPressed: isPressedProp, preventFocusOnPress, shouldCancelOnPointerExit, allowTextSelectionOnPress, ref: domRef, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let [isPressed, setPressed] = (0, import_react48.useState)(false);
  let ref = (0, import_react48.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    didFirePressStart: false,
    isTriggeringEvent: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null,
    disposables: []
  });
  let { addGlobalListener, removeAllGlobalListeners } = (0, $03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let triggerPressStart = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled || state.didFirePressStart) return false;
    let shouldStopPropagation = true;
    state.isTriggeringEvent = true;
    if (onPressStart) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressstart", pointerType, originalEvent);
      onPressStart(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(true);
    state.isTriggeringEvent = false;
    state.didFirePressStart = true;
    setPressed(true);
    return shouldStopPropagation;
  });
  let triggerPressEnd = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, wasPressed = true) => {
    let state = ref.current;
    if (!state.didFirePressStart) return false;
    state.didFirePressStart = false;
    state.isTriggeringEvent = true;
    let shouldStopPropagation = true;
    if (onPressEnd) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressend", pointerType, originalEvent);
      onPressEnd(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(false);
    setPressed(false);
    if (onPress && wasPressed && !isDisabled) {
      let event = new $f6c31cce2adf654f$var$PressEvent("press", pointerType, originalEvent);
      onPress(event);
      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
    }
    state.isTriggeringEvent = false;
    return shouldStopPropagation;
  });
  let triggerPressUp = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled) return false;
    if (onPressUp) {
      state.isTriggeringEvent = true;
      let event = new $f6c31cce2adf654f$var$PressEvent("pressup", pointerType, originalEvent);
      onPressUp(event);
      state.isTriggeringEvent = false;
      return event.shouldStopPropagation;
    }
    return true;
  });
  let cancel = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    let state = ref.current;
    if (state.isPressed && state.target) {
      if (state.didFirePressStart && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
      state.isPressed = false;
      state.isOverTarget = false;
      state.activePointerId = null;
      state.pointerType = null;
      removeAllGlobalListeners();
      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    }
  });
  let cancelOnPointerExit = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    if (shouldCancelOnPointerExit) cancel(e);
  });
  let triggerClick = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  });
  let triggerSyntheticClick = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e, target) => {
    if (onClick) {
      let event = new MouseEvent("click", e);
      (0, $8a9cb279dc87e130$export$c2b7abe5d61ec696)(event, target);
      onClick((0, $8a9cb279dc87e130$export$525bc4921d56d4a)(event));
    }
  });
  let pressProps = (0, import_react48.useMemo)(() => {
    let state = ref.current;
    let pressProps2 = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && (0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) {
          var _state_metaKeyEvents;
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent), e.key)) e.preventDefault();
          let shouldStopPropagation = true;
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            state.pointerType = "keyboard";
            shouldStopPropagation = triggerPressStart(e, "keyboard");
            let originalTarget = e.currentTarget;
            let pressUp = (e2) => {
              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e2, originalTarget) && !e2.repeat && (0, $d4ee10de306f2510$export$4282f70798064fe0)(originalTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e2)) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e2), "keyboard");
            };
            addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "keyup", (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(pressUp, onKeyUp), true);
          }
          if (shouldStopPropagation) e.stopPropagation();
          if (e.metaKey && (0, $c87311424ea30a05$export$9ac100e40613ea10)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);
        } else if (e.key === "Meta") state.metaKeyEvents = /* @__PURE__ */ new Map();
      },
      onClick(e) {
        if (e && !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) {
          let shouldStopPropagation = true;
          if (isDisabled) e.preventDefault();
          if (!state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === "virtual" || (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
            let stopPressStart = triggerPressStart(e, "virtual");
            let stopPressUp = triggerPressUp(e, "virtual");
            let stopPressEnd = triggerPressEnd(e, "virtual");
            triggerClick(e);
            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
          } else if (state.isPressed && state.pointerType !== "keyboard") {
            let pointerType = state.pointerType || e.nativeEvent.pointerType || "virtual";
            shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createEvent(e.currentTarget, e), pointerType, true);
            state.isOverTarget = false;
            triggerClick(e);
            cancel(e);
          }
          state.ignoreEmulatedMouseEvents = false;
          if (shouldStopPropagation) e.stopPropagation();
        }
      }
    };
    let onKeyUp = (e) => {
      var _state_metaKeyEvents;
      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        var _state_metaKeyEvents1;
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), e.key)) e.preventDefault();
        let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
        let wasPressed = (0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e));
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", wasPressed);
        if (wasPressed) triggerSyntheticClick(e, state.target);
        removeAllGlobalListeners();
        if (e.key !== "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && (0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {
          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;
          (0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7)(state.target, e, false);
        }
        state.isPressed = false;
        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
      } else if (e.key === "Meta" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
        var _state_target;
        let events = state.metaKeyEvents;
        state.metaKeyEvents = void 0;
        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent("keyup", event));
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps2.onPointerDown = (e) => {
        if (e.button !== 0 || !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if ((0, $6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        state.pointerType = e.pointerType;
        let shouldStopPropagation = true;
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
          shouldStopPropagation = triggerPressStart(e, state.pointerType);
          let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent);
          if ("releasePointerCapture" in target) target.releasePointerCapture(e.pointerId);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointerup", onPointerUp, false);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointercancel", onPointerCancel, false);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseDown = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (e.button === 0) {
          if (preventFocusOnPress) {
            let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);
            if (dispose) state.disposables.push(dispose);
          }
          e.stopPropagation();
        }
      };
      pressProps2.onPointerUp = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent)) || state.pointerType === "virtual") return;
        if (e.button === 0) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      pressProps2.onPointerEnter = (e) => {
        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = true;
          triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
        }
      };
      pressProps2.onPointerLeave = (e) => {
        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      let onPointerUp = (e) => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {
          if ((0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e)) && state.pointerType != null) {
            let clicked = false;
            let timeout = setTimeout(() => {
              if (state.isPressed && state.target instanceof HTMLElement) {
                if (clicked) cancel(e);
                else {
                  (0, $7215afc6de606d6b$export$de79e2c695e052f3)(state.target);
                  state.target.click();
                }
              }
            }, 80);
            addGlobalListener(e.currentTarget, "click", () => clicked = true, true);
            state.disposables.push(() => clearTimeout(timeout));
          } else cancel(e);
          state.isOverTarget = false;
        }
      };
      let onPointerCancel = (e) => {
        cancel(e);
      };
      pressProps2.onDragStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        cancel(e);
      };
    } else if (false) {
      pressProps2.onMouseDown = (e) => {
        if (e.button !== 0 || !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (state.ignoreEmulatedMouseEvents) {
          e.stopPropagation();
          return;
        }
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? "virtual" : "mouse";
        let shouldStopPropagation = (0, import_react_dom2.flushSync)(() => triggerPressStart(e, state.pointerType));
        if (shouldStopPropagation) e.stopPropagation();
        if (preventFocusOnPress) {
          let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);
          if (dispose) state.disposables.push(dispose);
        }
        addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "mouseup", onMouseUp, false);
      };
      pressProps2.onMouseEnter = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let shouldStopPropagation = true;
        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
          state.isOverTarget = true;
          shouldStopPropagation = triggerPressStart(e, state.pointerType);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseLeave = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let shouldStopPropagation = true;
        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
          state.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
          cancelOnPointerExit(e);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseUp = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || "mouse");
      };
      let onMouseUp = (e) => {
        if (e.button !== 0) return;
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (state.target && state.target.contains(e.target) && state.pointerType != null) ;
        else cancel(e);
        state.isOverTarget = false;
      };
      pressProps2.onTouchStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
        let shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
        if (shouldStopPropagation) e.stopPropagation();
        addGlobalListener((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e.currentTarget), "scroll", onScroll, true);
      };
      pressProps2.onTouchMove = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget && state.pointerType != null) {
            state.isOverTarget = true;
            shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onTouchEnd = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {
          triggerPressUp($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          triggerSyntheticClick(e.nativeEvent, state.target);
        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
        if (shouldStopPropagation) e.stopPropagation();
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps2.onTouchCancel = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        e.stopPropagation();
        if (state.isPressed) cancel($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
      };
      let onScroll = (e) => {
        if (state.isPressed && (0, $d4ee10de306f2510$export$4282f70798064fe0)((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps2.onDragStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        cancel(e);
      };
    }
    return pressProps2;
  }, [
    addGlobalListener,
    isDisabled,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress,
    cancel,
    cancelOnPointerExit,
    triggerPressEnd,
    triggerPressStart,
    triggerPressUp,
    triggerClick,
    triggerSyntheticClick
  ]);
  (0, import_react48.useEffect)(() => {
    if (!domRef || false) return;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(domRef.current);
    if (!ownerDocument || !ownerDocument.head || ownerDocument.getElementById($f6c31cce2adf654f$var$STYLE_ID)) return;
    const style = ownerDocument.createElement("style");
    style.id = $f6c31cce2adf654f$var$STYLE_ID;
    style.textContent = `
@layer {
  [${$f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE}] {
    touch-action: pan-x pan-y pinch-zoom;
  }
}
    `.trim();
    ownerDocument.head.prepend(style);
  }, [
    domRef
  ]);
  (0, import_react48.useEffect)(() => {
    let state = ref.current;
    return () => {
      var _state_target;
      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_state_target = state.target) !== null && _state_target !== void 0 ? _state_target : void 0);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    };
  }, [
    allowTextSelectionOnPress
  ]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps, {
      [$f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE]: true
    })
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const { key, code: code3 } = event;
  const element3 = currentTarget;
  const role = element3.getAttribute("role");
  return (key === "Enter" || key === " " || key === "Spacebar" || code3 === "Space") && !(element3 instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element3).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element3, key) || element3 instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element3).HTMLTextAreaElement || element3.isContentEditable) && // Links should only trigger with Enter key
  !((role === "link" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element3)) && key !== "Enter");
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
  let clientX = e.clientX;
  let clientY = e.clientY;
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey,
    clientX,
    clientY
  };
}
function $f6c31cce2adf654f$var$shouldPreventDefaultUp(target) {
  if (target instanceof HTMLInputElement) return false;
  if (target instanceof HTMLButtonElement) return target.type !== "submit" && target.type !== "reset";
  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;
  return true;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
  return $f6c31cce2adf654f$var$shouldPreventDefaultUp(target);
}
var $f6c31cce2adf654f$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
  return target.type === "checkbox" || target.type === "radio" ? key === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}

// node_modules/@react-aria/interactions/dist/useFocusVisible.mjs
var import_react49 = __toESM(require_react(), 1);
var $507fabe10e71c6fb$var$currentModality = null;
var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
var $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map();
var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
function $507fabe10e71c6fb$var$isValidKey(e) {
  return !(e.metaKey || !(0, $c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, $6a7db85432448f7f$export$60278871457622de)(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  if (e.target === window || e.target === document || (0, $8a9cb279dc87e130$export$fda7da73ab5d4c48) || !e.isTrusted) return;
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  if (0, $8a9cb279dc87e130$export$fda7da73ab5d4c48) return;
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element3) {
  if (typeof window === "undefined" || typeof document === "undefined" || $507fabe10e71c6fb$export$d90243b58daecda7.get((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element3))) return;
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element3);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element3);
  let focus = windowObject.HTMLElement.prototype.focus;
  windowObject.HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  documentObject.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else if (false) {
    documentObject.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  windowObject.addEventListener("beforeunload", () => {
    $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element3);
  }, {
    once: true
  });
  $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
    focus
  });
}
var $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element3, loadListener) => {
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element3);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element3);
  if (loadListener) documentObject.removeEventListener("DOMContentLoaded", loadListener);
  if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
  windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
  documentObject.removeEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.removeEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.removeEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.removeEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else if (false) {
    documentObject.removeEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
};
function $507fabe10e71c6fb$export$2f1888112f558a7d(element3) {
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element3);
  let loadListener;
  if (documentObject.readyState !== "loading") $507fabe10e71c6fb$var$setupGlobalFocusEvents(element3);
  else {
    loadListener = () => {
      $507fabe10e71c6fb$var$setupGlobalFocusEvents(element3);
    };
    documentObject.addEventListener("DOMContentLoaded", loadListener);
  }
  return () => $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element3, loadListener);
}
if (typeof document !== "undefined") $507fabe10e71c6fb$export$2f1888112f558a7d();
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}

// node_modules/@react-aria/interactions/dist/focusSafely.mjs
function $3ad3f6e1647bc98d$export$80f3e147d781571c(element3) {
  const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element3);
  const activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
  if ((0, $507fabe10e71c6fb$export$630ff653c5ada6a9)() === "virtual") {
    let lastFocusedElement = activeElement;
    (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
      if ((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument) === lastFocusedElement && element3.isConnected) (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element3);
    });
  } else (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element3);
}

// node_modules/@react-aria/interactions/dist/useFocus.mjs
var import_react50 = __toESM(require_react(), 1);
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
  const onBlur = (0, import_react50.useCallback)((e) => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [
    onBlurProp,
    onFocusChange
  ]);
  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, import_react50.useCallback)((e) => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(e.target);
    const activeElement = ownerDocument ? (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument) : (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)();
    if (e.target === e.currentTarget && activeElement === (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent)) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [
    onFocusChange,
    onFocusProp,
    onSyntheticFocus
  ]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
    }
  };
}

// node_modules/@react-aria/interactions/dist/createEventHandler.mjs
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return void 0;
  let shouldStopPropagation = true;
  return (e) => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        if (shouldStopPropagation && true) console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
        else shouldStopPropagation = true;
      },
      continuePropagation() {
        shouldStopPropagation = false;
      },
      isPropagationStopped() {
        return shouldStopPropagation;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}

// node_modules/@react-aria/interactions/dist/useKeyboard.mjs
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

// node_modules/@react-aria/interactions/dist/useFocusable.mjs
var import_react51 = __toESM(require_react(), 1);
var $f645667febf57a63$export$f9762fab77588ecb = (0, import_react51.default).createContext(null);
function $f645667febf57a63$var$useFocusableContext(ref) {
  let context = (0, import_react51.useContext)($f645667febf57a63$export$f9762fab77588ecb) || {};
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, ref);
  let { ref: _23, ...otherProps } = context;
  return otherProps;
}
var $f645667febf57a63$export$13f3202a3e5ddd5 = (0, import_react51.default).forwardRef(function FocusableProvider(props, ref) {
  let { children, ...otherProps } = props;
  let objRef = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let context = {
    ...otherProps,
    ref: objRef
  };
  return (0, import_react51.default).createElement($f645667febf57a63$export$f9762fab77588ecb.Provider, {
    value: context
  }, children);
});
function $f645667febf57a63$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
  let { keyboardProps } = (0, $46d819fcbaf35654$export$8f71654801c2f7cd)(props);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
  let domProps = $f645667febf57a63$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, import_react51.useRef)(props.autoFocus);
  (0, import_react51.useEffect)(() => {
    if (autoFocusRef.current && domRef.current) (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(domRef.current);
    autoFocusRef.current = false;
  }, [
    domRef
  ]);
  let tabIndex = props.excludeFromTabOrder ? -1 : 0;
  if (props.isDisabled) tabIndex = void 0;
  return {
    focusableProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)({
      ...interactions,
      tabIndex
    }, interactionProps)
  };
}
var $f645667febf57a63$export$35a3bebf7ef2d934 = (0, import_react51.forwardRef)(({ children, ...props }, ref) => {
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let { focusableProps } = $f645667febf57a63$export$4c014de7c8940b4c(props, ref);
  let child = (0, import_react51.default).Children.only(children);
  (0, import_react51.useEffect)(() => {
    if (false) return;
    let el = ref.current;
    if (!el || !(el instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(el).Element)) {
      console.error("<Focusable> child must forward its ref to a DOM element.");
      return;
    }
    if (!props.isDisabled && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(el)) {
      console.warn("<Focusable> child must be focusable. Please ensure the tabIndex prop is passed through.");
      return;
    }
    if (el.localName !== "button" && el.localName !== "input" && el.localName !== "select" && el.localName !== "textarea" && el.localName !== "a" && el.localName !== "area" && el.localName !== "summary" && el.localName !== "img" && el.localName !== "svg") {
      let role = el.getAttribute("role");
      if (!role) console.warn("<Focusable> child must have an interactive ARIA role.");
      else if (
        // https://w3c.github.io/aria/#widget_roles
        role !== "application" && role !== "button" && role !== "checkbox" && role !== "combobox" && role !== "gridcell" && role !== "link" && role !== "menuitem" && role !== "menuitemcheckbox" && role !== "menuitemradio" && role !== "option" && role !== "radio" && role !== "searchbox" && role !== "separator" && role !== "slider" && role !== "spinbutton" && role !== "switch" && role !== "tab" && role !== "tabpanel" && role !== "textbox" && role !== "treeitem" && // aria-describedby is also announced on these roles
        role !== "img" && role !== "meter" && role !== "progressbar"
      ) console.warn(`<Focusable> child must have an interactive ARIA role. Got "${role}".`);
    }
  }, [
    ref,
    props.isDisabled
  ]);
  let childRef = parseInt((0, import_react51.default).version, 10) < 19 ? child.ref : child.props.ref;
  return (0, import_react51.default).cloneElement(child, {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, child.props),
    // @ts-ignore
    ref: (0, $5dc95899b306f630$export$c9058316764c140e)(childRef, ref)
  });
});

// node_modules/@react-aria/interactions/dist/Pressable.mjs
var import_react52 = __toESM(require_react(), 1);
var $3b117e43dc0ca95d$export$27c701ed9e449e99 = (0, import_react52.default).forwardRef(({ children, ...props }, ref) => {
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let { pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref
  });
  let { focusableProps } = (0, $f645667febf57a63$export$4c014de7c8940b4c)(props, ref);
  let child = (0, import_react52.default).Children.only(children);
  (0, import_react52.useEffect)(() => {
    if (false) return;
    let el = ref.current;
    if (!el || !(el instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(el).Element)) {
      console.error("<Pressable> child must forward its ref to a DOM element.");
      return;
    }
    if (!props.isDisabled && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(el)) {
      console.warn("<Pressable> child must be focusable. Please ensure the tabIndex prop is passed through.");
      return;
    }
    if (el.localName !== "button" && el.localName !== "input" && el.localName !== "select" && el.localName !== "textarea" && el.localName !== "a" && el.localName !== "area" && el.localName !== "summary") {
      let role = el.getAttribute("role");
      if (!role) console.warn("<Pressable> child must have an interactive ARIA role.");
      else if (
        // https://w3c.github.io/aria/#widget_roles
        role !== "application" && role !== "button" && role !== "checkbox" && role !== "combobox" && role !== "gridcell" && role !== "link" && role !== "menuitem" && role !== "menuitemcheckbox" && role !== "menuitemradio" && role !== "option" && role !== "radio" && role !== "searchbox" && role !== "separator" && role !== "slider" && role !== "spinbutton" && role !== "switch" && role !== "tab" && role !== "textbox" && role !== "treeitem"
      ) console.warn(`<Pressable> child must have an interactive ARIA role. Got "${role}".`);
    }
  }, [
    ref,
    props.isDisabled
  ]);
  let childRef = parseInt((0, import_react52.default).version, 10) < 19 ? child.ref : child.props.ref;
  return (0, import_react52.default).cloneElement(child, {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps, child.props),
    // @ts-ignore
    ref: (0, $5dc95899b306f630$export$c9058316764c140e)(childRef, ref)
  });
});

// node_modules/@react-aria/interactions/dist/PressResponder.mjs
var import_react53 = __toESM(require_react(), 1);
var $f1ab8c75478c6f73$export$3351871ee4b288b8 = (0, import_react53.default).forwardRef(({ children, ...props }, ref) => {
  let isRegistered = (0, import_react53.useRef)(false);
  let prevContext = (0, import_react53.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref));
  let context = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(prevContext || {}, {
    ...props,
    ref,
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(prevContext, ref);
  (0, import_react53.useEffect)(() => {
    if (!isRegistered.current) {
      if (true) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
      isRegistered.current = true;
    }
  }, []);
  return (0, import_react53.default).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
});

// node_modules/@react-aria/interactions/dist/useFocusWithin.mjs
var import_react54 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useHover.mjs
var import_react55 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useInteractOutside.mjs
var import_react56 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useMove.mjs
var import_react57 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useScrollWheel.mjs
var import_react58 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useLongPress.mjs
var import_react59 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/FocusScope.mjs
var import_react60 = __toESM(require_react(), 1);
var $9bf71ea28793e738$var$FocusContext = (0, import_react60.default).createContext(null);
var $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = "react-aria-focus-scope-restore";
var $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = (0, import_react60.useRef)(null);
  let endRef = (0, import_react60.useRef)(null);
  let scopeRef = (0, import_react60.useRef)([]);
  let { parentNode } = (0, import_react60.useContext)($9bf71ea28793e738$var$FocusContext) || {};
  let node2 = (0, import_react60.useMemo)(() => new $9bf71ea28793e738$var$TreeNode({
    scopeRef
  }), [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
      if (activeNode) parent = activeNode;
    }
    parent.addChild(node2);
    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node2);
  }, [
    node2,
    parentNode
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let node3 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (node3) node3.contain = !!contain;
  }, [
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    var _startRef_current;
    let node3 = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
    let nodes = [];
    let stopPropagation = (e) => e.stopPropagation();
    while (node3 && node3 !== endRef.current) {
      nodes.push(node3);
      node3.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
      node3 = node3.nextSibling;
    }
    scopeRef.current = nodes;
    return () => {
      for (let node4 of nodes) node4.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
    };
  }, [
    children
  ]);
  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  (0, import_react60.useEffect)(() => {
    const activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0));
    let scope = null;
    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
      for (let node3 of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node3.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node3.scopeRef.current)) scope = node3;
      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;
    }
  }, [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
      var _focusScopeTree_getTreeNode_parent_scopeRef;
      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
    };
  }, [
    scopeRef
  ]);
  let focusManager = (0, import_react60.useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
  let value = (0, import_react60.useMemo)(() => ({
    focusManager,
    parentNode: node2
  }), [
    node2,
    focusManager
  ]);
  return (0, import_react60.default).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value
  }, (0, import_react60.default).createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, (0, import_react60.default).createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap: wrap3, accept } = opts;
      var _scope_;
      let node2 = from || (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[0].previousElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node2, scope) ? node2 : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap3) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap: wrap3, accept } = opts;
      var _scope_;
      let node2 = from || (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node2, scope) ? node2 : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap3) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain) return false;
    scope = scope.parent;
  }
  return true;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, import_react60.useRef)(void 0);
  let raf = (0, import_react60.useRef)(void 0);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    if (!contain) {
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = void 0;
      }
      return;
    }
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
      let scope2 = scopeRef.current;
      if (!scope2 || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope2)) return;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope2);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable: true
      }, scope2);
      if (!focusedElement) return;
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = (e) => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), scopeRef.current)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), scopeRef)) {
        if (focusedNode.current) focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
    };
    let onBlur = (e) => {
      if (raf.current) cancelAnimationFrame(raf.current);
      raf.current = requestAnimationFrame(() => {
        let modality = (0, $507fabe10e71c6fb$export$630ff653c5ada6a9)();
        let shouldSkipFocusRestore = (modality === "virtual" || modality === null) && (0, $c87311424ea30a05$export$a11b0059900ceec8)() && (0, $c87311424ea30a05$export$6446a186d09e379e)();
        let activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
        if (!shouldSkipFocusRestore && activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
          if (target && target.isConnected) {
            var _focusedNode_current;
            focusedNode.current = target;
            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    ownerDocument.addEventListener("keydown", onKeyDown, false);
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.addEventListener("focusin", onFocus, false));
    scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.addEventListener("focusout", onBlur, false));
    return () => {
      ownerDocument.removeEventListener("keydown", onKeyDown, false);
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.removeEventListener("focusin", onFocus, false));
      scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.removeEventListener("focusout", onBlur, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element3) {
  return $9bf71ea28793e738$var$isElementInChildScope(element3);
}
function $9bf71ea28793e738$var$isElementInScope(element3, scope) {
  if (!element3) return false;
  if (!scope) return false;
  return scope.some((node2) => node2.contains(element3));
}
function $9bf71ea28793e738$var$isElementInChildScope(element3, scope = null) {
  if (element3 instanceof Element && element3.closest("[data-react-aria-top-layer]")) return true;
  for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if (s && $9bf71ea28793e738$var$isElementInScope(element3, s.current)) return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var _focusScopeTree_getTreeNode;
  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
  while (parent) {
    if (parent.scopeRef === ancestor) return true;
    parent = parent.parent;
  }
  return false;
}
function $9bf71ea28793e738$var$focusElement(element3, scroll = false) {
  if (element3 != null && !scroll) try {
    (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(element3);
  } catch {
  }
  else if (element3 != null) try {
    element3.focus();
  } catch {
  }
}
function $9bf71ea28793e738$var$getFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
    tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  if (tabbable && !nextNode) {
    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  return nextNode;
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = (0, import_react60.default).useRef(autoFocus);
  (0, import_react60.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
      if (!$9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument), $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [
    scopeRef
  ]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (restore || contain) return;
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onFocus = (e) => {
      let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
      else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    restore,
    contain
  ]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.nodeToRestore) return false;
    scope = scope.parent;
  }
  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = (0, import_react60.useRef)(typeof document !== "undefined" ? (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0)) : null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    if (!restoreFocus || contain) return;
    let onFocus = () => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument), scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element3) => element3.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = ownerDocument.activeElement;
      if (!$9bf71ea28793e738$var$isElementInChildScope(focusedElement, scopeRef) || !$9bf71ea28793e738$var$shouldRestoreFocus(scopeRef)) return;
      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode) return;
      let nodeToRestore = treeNode.nodeToRestore;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {
        nodeToRestore = void 0;
        treeNode.nodeToRestore = void 0;
      }
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();
        else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain) ownerDocument.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain) ownerDocument.removeEventListener("keydown", onKeyDown, true);
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (!treeNode) return;
    var _nodeToRestoreRef_current;
    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : void 0;
    return () => {
      let treeNode2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode2) return;
      let nodeToRestore = treeNode2.nodeToRestore;
      let activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
      if (restoreFocus && nodeToRestore && (activeElement && $9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef) || activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          if (ownerDocument.activeElement === ownerDocument.body) {
            let treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.nodeToRestore && treeNode3.nodeToRestore.isConnected) {
                $9bf71ea28793e738$var$restoreFocusToElement(treeNode3.nodeToRestore);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
            treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.scopeRef && treeNode3.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode3.scopeRef)) {
                let node2 = $9bf71ea28793e738$var$getFirstInScope(treeNode3.scopeRef.current, true);
                $9bf71ea28793e738$var$restoreFocusToElement(node2);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
          }
        });
      }
    };
  }, [
    scopeRef,
    restoreFocus
  ]);
}
function $9bf71ea28793e738$var$restoreFocusToElement(node2) {
  if (node2.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {
    bubbles: true,
    cancelable: true
  }))) $9bf71ea28793e738$var$focusElement(node2);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root2, opts, scope) {
  let filter = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? (0, $b4b717babfbb907b$export$bebd5a1431fec25d) : (0, $b4b717babfbb907b$export$4c063cf1350e6fed);
  let rootElement = (root2 === null || root2 === void 0 ? void 0 : root2.nodeType) === Node.ELEMENT_NODE ? root2 : null;
  let doc = (0, $431fbd86ca7dc216$export$b204af158042fbac)(rootElement);
  let walker = (0, $dfc540311bf7f109$export$4d0f8be8b12a7ef6)(doc, root2 || doc, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node2) {
      var _opts_from;
      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node2)) return NodeFilter.FILTER_REJECT;
      if (filter(node2) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node2) && (!scope || $9bf71ea28793e738$var$isElementInScope(node2, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node2))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
  return walker;
}
var $9bf71ea28793e738$var$Tree = class _$9bf71ea28793e738$var$Tree {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    if (!parentNode) return;
    let node2 = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node2);
    node2.parent = parentNode;
    this.fastMap.set(scopeRef, node2);
    if (nodeToRestore) node2.nodeToRestore = nodeToRestore;
  }
  addNode(node2) {
    this.fastMap.set(node2.scopeRef, node2);
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null) return;
    let node2 = this.fastMap.get(scopeRef);
    if (!node2) return;
    let parentNode = node2.parent;
    for (let current of this.traverse()) if (current !== node2 && node2.nodeToRestore && current.nodeToRestore && node2.scopeRef && node2.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node2.scopeRef.current)) current.nodeToRestore = node2.nodeToRestore;
    let children = node2.children;
    if (parentNode) {
      parentNode.removeChild(node2);
      if (children.size > 0) children.forEach((child) => parentNode && parentNode.addChild(child));
    }
    this.fastMap.delete(node2.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node2 = this.root) {
    if (node2.scopeRef != null) yield node2;
    if (node2.children.size > 0) for (let child of node2.children) yield* this.traverse(child);
  }
  clone() {
    var _node_parent;
    let newTree = new _$9bf71ea28793e738$var$Tree();
    var _node_parent_scopeRef;
    for (let node2 of this.traverse()) newTree.addTreeNode(node2.scopeRef, (_node_parent_scopeRef = (_node_parent = node2.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node2.nodeToRestore);
    return newTree;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map();
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
};
var $9bf71ea28793e738$var$TreeNode = class {
  addChild(node2) {
    this.children.add(node2);
    node2.parent = this;
  }
  removeChild(node2) {
    this.children.delete(node2);
    node2.parent = void 0;
  }
  constructor(props) {
    this.children = /* @__PURE__ */ new Set();
    this.contain = false;
    this.scopeRef = props.scopeRef;
  }
};
var $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();

// node_modules/@react-aria/focus/dist/useFocusRing.mjs
var import_react61 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/FocusRing.mjs
var import_react62 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/useHasTabbableChild.mjs
var import_react63 = __toESM(require_react(), 1);

// node_modules/stream-chat-react/dist/components/Modal/icons.js
var import_react64 = __toESM(require_react());
var CloseIconRound = function() {
  return import_react64.default.createElement(
    "svg",
    { "data-testid": "close-icon-round", fill: "none", height: "28", viewBox: "0 0 28 28", width: "28", xmlns: "http://www.w3.org/2000/svg" },
    import_react64.default.createElement("rect", { fill: "#72767E", height: "28", rx: "14", width: "28" }),
    import_react64.default.createElement("circle", { cx: "14", cy: "14", fill: "#72767E", r: "12" }),
    import_react64.default.createElement("path", { clipRule: "evenodd", d: "M28 14C28 21.732 21.732 28 14 28C6.26801 28 0 21.732 0 14C0 6.26801 6.26801 0 14 0C21.732 0 28 6.26801 28 14ZM26 14C26 20.6274 20.6274 26 14 26C7.37258 26 2 20.6274 2 14C2 7.37258 7.37258 2 14 2C20.6274 2 26 7.37258 26 14ZM19.59 7L21 8.41L15.41 14L21 19.59L19.59 21L14 15.41L8.41 21L7 19.59L12.59 14L7 8.41L8.41 7L14 12.59L19.59 7Z", fill: "white", fillRule: "evenodd" })
  );
};

// node_modules/stream-chat-react/dist/components/Modal/Modal.js
var Modal = function(_a) {
  var children = _a.children, className = _a.className, onClose = _a.onClose, open = _a.open;
  var t2 = useTranslationContext("Modal").t;
  var themeVersion = useChatContext("Modal").themeVersion;
  var innerRef = (0, import_react65.useRef)(null);
  var closeRef = (0, import_react65.useRef)(null);
  var handleClick = function(event) {
    var target = event.target;
    if (!innerRef.current || !closeRef.current)
      return;
    if (!innerRef.current.contains(target) || closeRef.current.contains(target))
      onClose === null || onClose === void 0 ? void 0 : onClose(event);
  };
  (0, import_react65.useEffect)(function() {
    if (!open)
      return;
    var handleKeyDown = function(event) {
      if (event.key === "Escape")
        onClose === null || onClose === void 0 ? void 0 : onClose(event);
    };
    document.addEventListener("keydown", handleKeyDown);
    return function() {
      return document.removeEventListener("keydown", handleKeyDown);
    };
  }, [onClose, open]);
  if (!open)
    return null;
  return import_react65.default.createElement(
    "div",
    { className: clsx_default("str-chat__modal str-chat__modal--open", className), onClick: handleClick },
    import_react65.default.createElement(
      $9bf71ea28793e738$export$20e40289641fbbb6,
      { autoFocus: true, contain: true },
      import_react65.default.createElement(
        "button",
        { className: "str-chat__modal__close-button", ref: closeRef, title: t2("Close") },
        themeVersion === "2" && import_react65.default.createElement(CloseIconRound, null),
        themeVersion === "1" && import_react65.default.createElement(
          import_react65.default.Fragment,
          null,
          t2("Close"),
          import_react65.default.createElement(
            "svg",
            { height: "10", width: "10", xmlns: "http://www.w3.org/2000/svg" },
            import_react65.default.createElement("path", { d: "M9.916 1.027L8.973.084 5 4.058 1.027.084l-.943.943L4.058 5 .084 8.973l.943.943L5 5.942l3.973 3.974.943-.943L5.942 5z", fillRule: "evenodd" })
          )
        )
      ),
      import_react65.default.createElement("div", { className: "str-chat__modal__inner str-chat-react__modal__inner", ref: innerRef }, children)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Gallery/ModalGallery.js
var import_react66 = __toESM(require_react());
var import_react_image_gallery = __toESM(require_image_gallery());
var onError = function(e) {
  e.target.alt = "";
};
var renderItem = function(_a) {
  var original = _a.original, originalAlt = _a.originalAlt;
  return import_react66.default.createElement(BaseImage, { alt: originalAlt, className: "image-gallery-image", onError, src: original });
};
var ModalGallery = function(props) {
  var images = props.images, index4 = props.index;
  var t2 = useTranslationContext("ModalGallery").t;
  var formattedArray = (0, import_react66.useMemo)(
    function() {
      return images.map(function(image2) {
        var imageSrc = image2.image_url || image2.thumb_url || "";
        return {
          original: imageSrc,
          originalAlt: t2("User uploaded content"),
          source: imageSrc
        };
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [images]
  );
  return import_react66.default.createElement(import_react_image_gallery.default, { items: formattedArray, renderItem, showIndex: true, showPlayButton: false, showThumbnails: false, startIndex: index4 });
};

// node_modules/stream-chat-react/dist/components/Gallery/Gallery.js
var UnMemoizedGallery = function(props) {
  var images = props.images, innerRefs = props.innerRefs;
  var _a = (0, import_react67.useState)(0), index4 = _a[0], setIndex = _a[1];
  var _b = (0, import_react67.useState)(false), modalOpen = _b[0], setModalOpen = _b[1];
  var _c = useComponentContext("Gallery"), _d = _c.BaseImage, BaseImage3 = _d === void 0 ? BaseImage : _d, _e = _c.ModalGallery, ModalGallery2 = _e === void 0 ? ModalGallery : _e;
  var t2 = useTranslationContext("Gallery").t;
  var imageFallbackTitle = t2("User uploaded content");
  var countImagesDisplayedInPreview = 4;
  var lastImageIndexInPreview = countImagesDisplayedInPreview - 1;
  var toggleModal = function(selectedIndex) {
    if (modalOpen) {
      setModalOpen(false);
    } else {
      setIndex(selectedIndex);
      setModalOpen(true);
    }
  };
  var renderImages = images.slice(0, countImagesDisplayedInPreview).map(function(image2, i) {
    return i === lastImageIndexInPreview && images.length > countImagesDisplayedInPreview ? import_react67.default.createElement(
      "button",
      __assign({ className: "str-chat__gallery-placeholder", "data-testid": "gallery-image-last", key: "gallery-image-".concat(i), onClick: function() {
        return toggleModal(i);
      }, style: __assign({ backgroundImage: "url(".concat(images[lastImageIndexInPreview].previewUrl || images[lastImageIndexInPreview].image_url || images[lastImageIndexInPreview].thumb_url, ")") }, image2.style) }, (innerRefs === null || innerRefs === void 0 ? void 0 : innerRefs.current) && { ref: function(r2) {
        return innerRefs.current[i] = r2;
      } }),
      import_react67.default.createElement("p", null, t2("{{ imageCount }} more", {
        imageCount: images.length - countImagesDisplayedInPreview
      }))
    ) : import_react67.default.createElement(
      "button",
      { className: "str-chat__gallery-image", "data-testid": "gallery-image", key: "gallery-image-".concat(i), onClick: function() {
        return toggleModal(i);
      } },
      import_react67.default.createElement(BaseImage3, __assign({ alt: (image2 === null || image2 === void 0 ? void 0 : image2.fallback) || imageFallbackTitle, src: (0, import_sanitize_url2.sanitizeUrl)(image2.previewUrl || image2.image_url || image2.thumb_url), style: image2.style, title: (image2 === null || image2 === void 0 ? void 0 : image2.fallback) || imageFallbackTitle }, (innerRefs === null || innerRefs === void 0 ? void 0 : innerRefs.current) && { ref: function(r2) {
        return innerRefs.current[i] = r2;
      } }))
    );
  });
  var className = clsx_default("str-chat__gallery", {
    "str-chat__gallery--square": images.length > lastImageIndexInPreview,
    "str-chat__gallery-two-rows": images.length > 2
  });
  return import_react67.default.createElement(
    "div",
    { className },
    renderImages,
    import_react67.default.createElement(
      Modal,
      { className: "str-chat__gallery-modal", onClose: function() {
        return setModalOpen(function(modalOpen2) {
          return !modalOpen2;
        });
      }, open: modalOpen },
      import_react67.default.createElement(ModalGallery2, { images, index: index4 })
    )
  );
};
var Gallery = import_react67.default.memo(UnMemoizedGallery);

// node_modules/stream-chat-react/dist/components/Gallery/Image.js
var import_react68 = __toESM(require_react());
var import_sanitize_url3 = __toESM(require_dist());
var ImageComponent = function(props) {
  var _a = props.dimensions, dimensions = _a === void 0 ? {} : _a, fallback = props.fallback, image_url = props.image_url, thumb_url = props.thumb_url, innerRef = props.innerRef, previewUrl = props.previewUrl, style = props.style;
  var _b = (0, import_react68.useState)(false), modalIsOpen = _b[0], setModalIsOpen = _b[1];
  var _c = useComponentContext("ImageComponent"), _d = _c.BaseImage, BaseImage3 = _d === void 0 ? BaseImage : _d, _e = _c.ModalGallery, ModalGallery2 = _e === void 0 ? ModalGallery : _e;
  var imageSrc = (0, import_sanitize_url3.sanitizeUrl)(previewUrl || image_url || thumb_url);
  var toggleModal = function() {
    return setModalIsOpen(function(modalIsOpen2) {
      return !modalIsOpen2;
    });
  };
  return import_react68.default.createElement(
    import_react68.default.Fragment,
    null,
    import_react68.default.createElement(BaseImage3, __assign({ alt: fallback, className: "str-chat__message-attachment--img", "data-testid": "image-test", onClick: toggleModal, src: imageSrc, style, tabIndex: 0, title: fallback }, dimensions, innerRef && { ref: innerRef })),
    import_react68.default.createElement(
      Modal,
      { className: "str-chat__image-modal", onClose: toggleModal, open: modalIsOpen },
      import_react68.default.createElement(ModalGallery2, { images: [props], index: 0 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/Card.js
var getHostFromURL = function(url) {
  if (url !== void 0 && url !== null) {
    var trimmedUrl = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "").split("/")[0];
    return trimmedUrl;
  }
  return null;
};
var UnableToRenderCard = function(_a) {
  var _b;
  var type = _a.type;
  var t2 = useTranslationContext("Card").t;
  return import_react69.default.createElement(
    "div",
    { className: clsx_default("str-chat__message-attachment-card", (_b = {}, _b["str-chat__message-attachment-card--".concat(type)] = type, _b)) },
    import_react69.default.createElement(
      "div",
      { className: "str-chat__message-attachment-card--content" },
      import_react69.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, t2("this content could not be displayed"))
    )
  );
};
var CardV1 = function(props) {
  var asset_url = props.asset_url, giphy = props.giphy, image_url = props.image_url, og_scrape_url = props.og_scrape_url, text5 = props.text, thumb_url = props.thumb_url, title = props.title, title_link = props.title_link, type = props.type;
  var giphyVersionName = useChannelStateContext("Card").giphyVersion;
  var image2 = thumb_url || image_url;
  var dimensions = {};
  if (type === "giphy" && typeof giphy !== "undefined") {
    var giphyVersion = giphy[giphyVersionName];
    image2 = giphyVersion.url;
    dimensions.height = giphyVersion.height;
    dimensions.width = giphyVersion.width;
  }
  if (!title && !title_link && !asset_url && !image2) {
    return import_react69.default.createElement(UnableToRenderCard, { type });
  }
  if (!title_link && !og_scrape_url) {
    return null;
  }
  return import_react69.default.createElement(
    "div",
    { className: "str-chat__message-attachment-card str-chat__message-attachment-card--".concat(type) },
    import_react69.default.createElement(CardHeader, __assign({}, props, { dimensions, image: image2 })),
    type !== "video" && import_react69.default.createElement(
      "div",
      { className: "str-chat__message-attachment-card--content" },
      import_react69.default.createElement(
        "div",
        { className: "str-chat__message-attachment-card--flex" },
        title && import_react69.default.createElement("div", { className: "str-chat__message-attachment-card--title" }, title),
        text5 && import_react69.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, text5),
        (title_link || og_scrape_url) && import_react69.default.createElement(SafeAnchor, { className: "str-chat__message-attachment-card--url", href: title_link || og_scrape_url, rel: "noopener noreferrer", target: "_blank" }, getHostFromURL(title_link || og_scrape_url))
      )
    )
  );
};
var SourceLink = function(_a) {
  var author_name = _a.author_name, url = _a.url;
  return import_react69.default.createElement(
    "div",
    { className: "str-chat__message-attachment-card--source-link", "data-testid": "card-source-link" },
    import_react69.default.createElement(SafeAnchor, { className: "str-chat__message-attachment-card--url", href: url, rel: "noopener noreferrer", target: "_blank" }, author_name || getHostFromURL(url))
  );
};
var CardHeader = function(props) {
  var asset_url = props.asset_url, dimensions = props.dimensions, image2 = props.image, image_url = props.image_url, thumb_url = props.thumb_url, title = props.title, type = props.type;
  var visual = null;
  if (asset_url && type === "video") {
    visual = import_react69.default.createElement(import_react_player.default, { className: "react-player", controls: true, height: "100%", url: asset_url, width: "100%" });
  } else if (image2) {
    visual = import_react69.default.createElement(ImageComponent, { dimensions, fallback: title || image2, image_url, thumb_url });
  }
  return visual ? import_react69.default.createElement("div", { className: "str-chat__message-attachment-card--header str-chat__message-attachment-card-react--header", "data-testid": "card-header" }, visual) : null;
};
var CardContent = function(props) {
  var author_name = props.author_name, og_scrape_url = props.og_scrape_url, text5 = props.text, title = props.title, title_link = props.title_link, type = props.type;
  var url = title_link || og_scrape_url;
  return import_react69.default.createElement("div", { className: "str-chat__message-attachment-card--content" }, type === "audio" ? import_react69.default.createElement(CardAudio, { og: props }) : import_react69.default.createElement(
    "div",
    { className: "str-chat__message-attachment-card--flex" },
    url && import_react69.default.createElement(SourceLink, { author_name, url }),
    title && import_react69.default.createElement("div", { className: "str-chat__message-attachment-card--title" }, title),
    text5 && import_react69.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, text5)
  ));
};
var CardV2 = function(props) {
  var asset_url = props.asset_url, giphy = props.giphy, image_url = props.image_url, thumb_url = props.thumb_url, title = props.title, title_link = props.title_link, type = props.type;
  var giphyVersionName = useChannelStateContext("CardHeader").giphyVersion;
  var image2 = thumb_url || image_url;
  var dimensions = {};
  if (type === "giphy" && typeof giphy !== "undefined") {
    var giphyVersion = giphy[giphyVersionName];
    image2 = giphyVersion.url;
    dimensions.height = giphyVersion.height;
    dimensions.width = giphyVersion.width;
  }
  if (!title && !title_link && !asset_url && !image2) {
    return import_react69.default.createElement(UnableToRenderCard, null);
  }
  return import_react69.default.createElement(
    "div",
    { className: "str-chat__message-attachment-card str-chat__message-attachment-card--".concat(type) },
    import_react69.default.createElement(CardHeader, __assign({}, props, { dimensions, image: image2 })),
    import_react69.default.createElement(CardContent, __assign({}, props))
  );
};
var CardAudio = function(_a) {
  var _b = _a.og, asset_url = _b.asset_url, author_name = _b.author_name, mime_type = _b.mime_type, og_scrape_url = _b.og_scrape_url, text5 = _b.text, title = _b.title, title_link = _b.title_link;
  var _c = useAudioController({
    mimeType: mime_type
  }), audioRef = _c.audioRef, isPlaying = _c.isPlaying, progress = _c.progress, seek = _c.seek, togglePlay = _c.togglePlay;
  var url = title_link || og_scrape_url;
  var dataTestId = "card-audio-widget";
  var rootClassName2 = "str-chat__message-attachment-card-audio-widget";
  return import_react69.default.createElement(
    "div",
    { className: rootClassName2, "data-testid": dataTestId },
    asset_url && import_react69.default.createElement(
      import_react69.default.Fragment,
      null,
      import_react69.default.createElement(
        "audio",
        { ref: audioRef },
        import_react69.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })
      ),
      import_react69.default.createElement(
        "div",
        { className: "str-chat__message-attachment-card-audio-widget--first-row" },
        import_react69.default.createElement(
          "div",
          { className: "str-chat__message-attachment-audio-widget--play-controls" },
          import_react69.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })
        ),
        import_react69.default.createElement(ProgressBar, { onClick: seek, progress })
      )
    ),
    import_react69.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--second-row" },
      url && import_react69.default.createElement(SourceLink, { author_name, url }),
      title && import_react69.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title),
      text5 && import_react69.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--description" }, text5)
    )
  );
};
var UnMemoizedCard = function(props) {
  var themeVersion = useChatContext("Card").themeVersion;
  return themeVersion === "2" ? import_react69.default.createElement(CardV2, __assign({}, props)) : import_react69.default.createElement(CardV1, __assign({}, props));
};
var Card = import_react69.default.memo(UnMemoizedCard);

// node_modules/stream-chat-react/dist/components/Attachment/FileAttachment.js
var import_react90 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIcon.js
var import_react72 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIconSet/v1.js
var import_react70 = __toESM(require_react());
var DEFAULT_SIZE = 20;
var FilePdfIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-pdf", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm250.2-143.7c-12.2-12-47-8.7-64.4-6.5-17.2-10.5-28.7-25-36.8-46.3 3.9-16.1 10.1-40.6 5.4-56-4.2-26.2-37.8-23.6-42.6-5.9-4.4 16.1-.4 38.5 7 67.1-10 23.9-24.9 56-35.4 74.4-20 10.3-47 26.2-51 46.2-3.3 15.8 26 55.2 76.1-31.2 22.4-7.4 46.8-16.5 68.4-20.1 18.9 10.2 41 17 55.8 17 25.5 0 28-28.2 17.5-38.7zm-198.1 77.8c5.1-13.7 24.5-29.5 30.4-35-19 30.3-30.4 35.7-30.4 35zm81.6-190.6c7.4 0 6.7 32.1 1.8 40.8-4.4-13.9-4.3-40.8-1.8-40.8zm-24.4 136.6c9.7-16.9 18-37 24.7-54.7 8.3 15.1 18.9 27.2 30.1 35.5-20.8 4.3-38.9 13.1-54.8 19.2zm131.6-5s-5 6-37.3-7.8c35.1-2.6 40.9 5.4 37.3 7.8z", fill: "#f82903" })
  );
};
var FileWordIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-word", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm220.1-208c-5.7 0-10.6 4-11.7 9.5-20.6 97.7-20.4 95.4-21 103.5-.2-1.2-.4-2.6-.7-4.3-.8-5.1.3.2-23.6-99.5-1.3-5.4-6.1-9.2-11.7-9.2h-13.3c-5.5 0-10.3 3.8-11.7 9.1-24.4 99-24 96.2-24.8 103.7-.1-1.1-.2-2.5-.5-4.2-.7-5.2-14.1-73.3-19.1-99-1.1-5.6-6-9.7-11.8-9.7h-16.8c-7.8 0-13.5 7.3-11.7 14.8 8 32.6 26.7 109.5 33.2 136 1.3 5.4 6.1 9.1 11.7 9.1h25.2c5.5 0 10.3-3.7 11.6-9.1l17.9-71.4c1.5-6.2 2.5-12 3-17.3l2.9 17.3c.1.4 12.6 50.5 17.9 71.4 1.3 5.3 6.1 9.1 11.6 9.1h24.7c5.5 0 10.3-3.7 11.6-9.1 20.8-81.9 30.2-119 34.5-136 1.9-7.6-3.8-14.9-11.6-14.9h-15.8z", fill: "#2c599d" })
  );
};
var FilePowerPointIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-powerpoint", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm72-60V236c0-6.6 5.4-12 12-12h69.2c36.7 0 62.8 27 62.8 66.3 0 74.3-68.7 66.5-95.5 66.5V404c0 6.6-5.4 12-12 12H132c-6.6 0-12-5.4-12-12zm48.5-87.4h23c7.9 0 13.9-2.4 18.1-7.2 8.5-9.8 8.4-28.5.1-37.8-4.1-4.6-9.9-7-17.4-7h-23.9v52z", fill: "#cb4a32" })
  );
};
var FileExcelIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-excel", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm212-240h-28.8c-4.4 0-8.4 2.4-10.5 6.3-18 33.1-22.2 42.4-28.6 57.7-13.9-29.1-6.9-17.3-28.6-57.7-2.1-3.9-6.2-6.3-10.6-6.3H124c-9.3 0-15 10-10.4 18l46.3 78-46.3 78c-4.7 8 1.1 18 10.4 18h28.9c4.4 0 8.4-2.4 10.5-6.3 21.7-40 23-45 28.6-57.7 14.9 30.2 5.9 15.9 28.6 57.7 2.1 3.9 6.2 6.3 10.6 6.3H260c9.3 0 15-10 10.4-18L224 320c.7-1.1 30.3-50.5 46.3-78 4.7-8-1.1-18-10.3-18z", fill: "#207245" })
  );
};
var FileArchiveIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-archive", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M128.3 160v32h32v-32zm64-96h-32v32h32zm-64 32v32h32V96zm64 32h-32v32h32zm177.6-30.1L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM256 51.9l76.1 76.1H256zM336 464H48V48h79.7v16h32V48H208v104c0 13.3 10.7 24 24 24h104zM194.2 265.7c-1.1-5.6-6-9.7-11.8-9.7h-22.1v-32h-32v32l-19.7 97.1C102 385.6 126.8 416 160 416c33.1 0 57.9-30.2 51.5-62.6zm-33.9 124.4c-17.9 0-32.4-12.1-32.4-27s14.5-27 32.4-27 32.4 12.1 32.4 27-14.5 27-32.4 27zm32-198.1h-32v32h32z", fill: "#414D54" })
  );
};
var FileCodeIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-code", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M149.9 349.1l-.2-.2-32.8-28.9 32.8-28.9c3.6-3.2 4-8.8.8-12.4l-.2-.2-17.4-18.6c-3.4-3.6-9-3.7-12.4-.4l-57.7 54.1c-3.7 3.5-3.7 9.4 0 12.8l57.7 54.1c1.6 1.5 3.8 2.4 6 2.4 2.4 0 4.8-1 6.4-2.8l17.4-18.6c3.3-3.5 3.1-9.1-.4-12.4zm220-251.2L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM256 51.9l76.1 76.1H256zM336 464H48V48h160v104c0 13.3 10.7 24 24 24h104zM209.6 214c-4.7-1.4-9.5 1.3-10.9 6L144 408.1c-1.4 4.7 1.3 9.6 6 10.9l24.4 7.1c4.7 1.4 9.6-1.4 10.9-6L240 231.9c1.4-4.7-1.3-9.6-6-10.9zm24.5 76.9l.2.2 32.8 28.9-32.8 28.9c-3.6 3.2-4 8.8-.8 12.4l.2.2 17.4 18.6c3.3 3.5 8.9 3.7 12.4.4l57.7-54.1c3.7-3.5 3.7-9.4 0-12.8l-57.7-54.1c-3.5-3.3-9.1-3.2-12.4.4l-17.4 18.6c-3.3 3.5-3.1 9.1.4 12.4z", fill: "#414D54" })
  );
};
var FileAudioIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-audio", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.941 97.941l-83.882-83.882A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48V131.882a48 48 0 0 0-14.059-33.941zM332.118 128H256V51.882L332.118 128zM48 464V48h160v104c0 13.255 10.745 24 24 24h104v288H48zm144-76.024c0 10.691-12.926 16.045-20.485 8.485L136 360.486h-28c-6.627 0-12-5.373-12-12v-56c0-6.627 5.373-12 12-12h28l35.515-36.947c7.56-7.56 20.485-2.206 20.485 8.485v135.952zm41.201-47.13c9.051-9.297 9.06-24.133.001-33.439-22.149-22.752 12.235-56.246 34.395-33.481 27.198 27.94 27.212 72.444.001 100.401-21.793 22.386-56.947-10.315-34.397-33.481z", fill: "#414D54" })
  );
};
var FileVideoIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-video", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.941 97.941l-83.882-83.882A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48V131.882a48 48 0 0 0-14.059-33.941zM332.118 128H256V51.882L332.118 128zM48 464V48h160v104c0 13.255 10.745 24 24 24h104v288H48zm228.687-211.303L224 305.374V268c0-11.046-8.954-20-20-20H100c-11.046 0-20 8.954-20 20v104c0 11.046 8.954 20 20 20h104c11.046 0 20-8.954 20-20v-37.374l52.687 52.674C286.704 397.318 304 390.28 304 375.986V264.011c0-14.311-17.309-21.319-27.313-11.314z", fill: "#414D54" })
  );
};
var FileImageIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-image", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z", fill: "#414D54" })
  );
};
var FileAltIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-alt", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M288 248v28c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-28c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm-12 72H108c-6.6 0-12 5.4-12 12v28c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-28c0-6.6-5.4-12-12-12zm108-188.1V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V48C0 21.5 21.5 0 48 0h204.1C264.8 0 277 5.1 286 14.1L369.9 98c9 8.9 14.1 21.2 14.1 33.9zm-128-80V128h76.1L256 51.9zM336 464V176H232c-13.3 0-24-10.7-24-24V48H48v416h288z", fill: "#414D54" })
  );
};
var FileFallbackIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b, props = __rest(_a, ["size"]);
  return import_react70.default.createElement(
    "svg",
    __assign({ className: "rfu-file-icon--small fa-file-fallback", height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react70.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z", fill: "#414D54" })
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIconSet/v2.js
var import_react71 = __toESM(require_react());
var DEFAULT_SIZE2 = 40;
var FilePdfIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-pdf ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#E71A01" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M16.39 8.90641C16.215 8.27341 15.787 7.95841 15.426 8.00441C14.99 8.06141 14.526 8.32041 14.34 8.72941C13.854 9.82141 14.768 12.8934 15.028 13.7674L15.073 13.9194C14.015 17.1134 10.394 23.4264 8.62002 23.8534C8.58302 23.4364 8.80602 22.2294 11.146 20.7244C11.266 20.5944 11.406 20.4374 11.471 20.3344C9.49302 21.3004 6.93108 22.8514 8.47102 24.0114C8.55602 24.0774 8.68502 24.1314 8.83402 24.1874C10.014 24.6244 11.666 23.1954 13.327 19.9544C15.157 19.3504 16.633 18.8964 18.722 18.5804C21.005 20.1304 22.538 20.4464 23.578 20.0474C23.866 19.9354 24.32 19.5734 24.45 19.1004C24.515 18.8774 24.608 18.5154 24.432 18.2274C23.842 17.2664 21.452 17.5954 20.032 17.7904C19.779 17.8254 19.557 17.8564 19.381 17.8744C17.552 16.7704 16.289 14.8014 15.778 13.3804C15.857 13.0784 15.936 12.7894 16.012 12.5124C16.397 11.1124 16.701 10.0064 16.392 8.90641H16.39ZM24.45 19.1004C23.605 20.1404 21.628 19.4164 20.05 18.4224C21.507 18.2644 23.01 18.1724 23.661 18.3764C24.488 18.6364 24.459 19.0444 24.451 19.1004H24.45ZM15.601 12.7404C15.296 11.6544 14.868 9.24041 15.555 8.46041C16.701 9.11641 16.266 10.5384 15.825 11.9834C15.748 12.2364 15.671 12.4894 15.601 12.7404ZM13.439 19.5834C15.156 18.9054 16.354 18.4494 18.118 18.1254C16.818 16.9554 16.028 15.6834 15.378 14.3834C14.915 16.0554 13.948 18.5894 13.438 19.5834H13.439Z", fill: "#E71A01", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { d: "M13.1719 33.0127V37.4219H12.1875V32.3018H13.1001L13.1719 33.0127ZM15.5132 34.1099V34.1816C15.5132 34.4505 15.4813 34.7 15.4175 34.9302C15.356 35.1603 15.2648 35.3608 15.144 35.5317C15.0233 35.7004 14.8729 35.8325 14.6929 35.9282C14.5151 36.0216 14.3101 36.0684 14.0776 36.0684C13.8521 36.0684 13.6561 36.0228 13.4897 35.9316C13.3234 35.8405 13.1833 35.7129 13.0693 35.5488C12.9577 35.3825 12.8677 35.1899 12.7993 34.9712C12.731 34.7524 12.6785 34.5177 12.6421 34.2671V34.0791C12.6785 33.8102 12.731 33.5641 12.7993 33.3408C12.8677 33.1152 12.9577 32.9204 13.0693 32.7563C13.1833 32.59 13.3223 32.4613 13.4863 32.3701C13.6527 32.279 13.8475 32.2334 14.0708 32.2334C14.3055 32.2334 14.5117 32.2778 14.6895 32.3667C14.8695 32.4556 15.0199 32.5832 15.1406 32.7495C15.2637 32.9159 15.356 33.1141 15.4175 33.3442C15.4813 33.5744 15.5132 33.8296 15.5132 34.1099ZM14.5254 34.1816V34.1099C14.5254 33.9526 14.5117 33.8079 14.4844 33.6758C14.4593 33.5413 14.4183 33.424 14.3613 33.3237C14.3066 33.2235 14.2337 33.146 14.1426 33.0913C14.0537 33.0343 13.9455 33.0059 13.8179 33.0059C13.6834 33.0059 13.5684 33.0275 13.4727 33.0708C13.3792 33.1141 13.3029 33.1768 13.2437 33.2588C13.1844 33.3408 13.14 33.4388 13.1104 33.5527C13.0807 33.6667 13.0625 33.7954 13.0557 33.939V34.4141C13.0671 34.5827 13.099 34.7342 13.1514 34.8687C13.2038 35.0008 13.2847 35.1056 13.394 35.1831C13.5034 35.2606 13.647 35.2993 13.8247 35.2993C13.9546 35.2993 14.064 35.2708 14.1528 35.2139C14.2417 35.1546 14.3135 35.0737 14.3682 34.9712C14.4251 34.8687 14.465 34.7502 14.4878 34.6157C14.5129 34.4813 14.5254 34.3366 14.5254 34.1816ZM18.3091 35.1934V30.75H19.3003V36H18.4082L18.3091 35.1934ZM15.9712 34.1953V34.1235C15.9712 33.841 16.0031 33.5846 16.0669 33.3545C16.1307 33.1221 16.2241 32.9227 16.3472 32.7563C16.4702 32.59 16.6217 32.4613 16.8018 32.3701C16.9818 32.279 17.1868 32.2334 17.417 32.2334C17.6335 32.2334 17.8226 32.279 17.9844 32.3701C18.1484 32.4613 18.2874 32.5911 18.4014 32.7598C18.5176 32.9261 18.611 33.1232 18.6816 33.3511C18.7523 33.5767 18.8035 33.8239 18.8354 34.0928V34.25C18.8035 34.5075 18.7523 34.7467 18.6816 34.9678C18.611 35.1888 18.5176 35.3825 18.4014 35.5488C18.2874 35.7129 18.1484 35.8405 17.9844 35.9316C17.8203 36.0228 17.6289 36.0684 17.4102 36.0684C17.18 36.0684 16.9749 36.0216 16.7949 35.9282C16.6172 35.8348 16.4668 35.7038 16.3438 35.5352C16.223 35.3665 16.1307 35.1683 16.0669 34.9404C16.0031 34.7126 15.9712 34.4642 15.9712 34.1953ZM16.9556 34.1235V34.1953C16.9556 34.348 16.967 34.4904 16.9897 34.6226C17.0148 34.7547 17.0547 34.8721 17.1094 34.9746C17.1663 35.0749 17.2393 35.1535 17.3281 35.2104C17.4193 35.2651 17.5298 35.2925 17.6597 35.2925C17.8283 35.2925 17.9673 35.2549 18.0767 35.1797C18.186 35.1022 18.2692 34.9963 18.3262 34.8618C18.3854 34.7274 18.4196 34.5724 18.4287 34.397V33.9492C18.4219 33.8057 18.4014 33.6769 18.3672 33.563C18.3353 33.4468 18.2874 33.3477 18.2236 33.2656C18.1621 33.1836 18.0846 33.1198 17.9912 33.0742C17.9001 33.0286 17.7918 33.0059 17.6665 33.0059C17.5389 33.0059 17.4295 33.0355 17.3384 33.0947C17.2472 33.1517 17.1732 33.2303 17.1162 33.3306C17.0615 33.4308 17.0205 33.5493 16.9932 33.686C16.9681 33.8205 16.9556 33.9663 16.9556 34.1235ZM21.3237 36H20.3325V31.9736C20.3325 31.6934 20.3872 31.4575 20.4966 31.2661C20.6082 31.0724 20.7643 30.9266 20.9648 30.8286C21.1676 30.7284 21.408 30.6782 21.686 30.6782C21.7772 30.6782 21.8649 30.6851 21.9492 30.6987C22.0335 30.7101 22.1156 30.7249 22.1953 30.7432L22.1851 31.4849C22.1418 31.4735 22.0962 31.4655 22.0483 31.4609C22.0005 31.4564 21.9447 31.4541 21.8809 31.4541C21.7624 31.4541 21.661 31.4746 21.5767 31.5156C21.4946 31.5544 21.432 31.6125 21.3887 31.6899C21.3454 31.7674 21.3237 31.862 21.3237 31.9736V36ZM22.062 32.3018V32.999H19.7822V32.3018H22.062Z", fill: "white" })
  );
};
var FileWordIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-word ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#4285F4" }),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#4285F4", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#4285F4", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#4285F4", fillRule: "evenodd" })
  );
};
var FileWordIconAlt = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-word-alt ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_64)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#3670D3" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#C1D8FF", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#C1D8FF", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#C1D8FF", fillRule: "evenodd" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_64", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "#79A4F2" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#3375E2" })
      )
    )
  );
};
var FilePowerPointIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-powerpoint ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#D65537" }),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z", fill: "#D65537", fillRule: "evenodd" })
  );
};
var FilePowerPointIconAlt = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-powerpoint-alt ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_76)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#AB381D" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z", fill: "#FFB3A0", fillRule: "evenodd" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_76", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "#DC7259" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#D14423" })
      )
    )
  );
};
var FileExcelIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-excel ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#0F9D58" }),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z", fill: "#0F9D58", fillRule: "evenodd" })
  );
};
var FileExcelIconAlt = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-excel-alt ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_326)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#0C864B" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z", fill: "#A8E7C9", fillRule: "evenodd" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_326", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "#64AD8A" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#0C864B" })
      )
    )
  );
};
var FileArchiveIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-archive ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#F8B859" }),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z", fill: "#F8B859", fillRule: "evenodd" })
  );
};
var FileArchiveIconAlt = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-archive-alt ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_246)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#B67A24" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z", fill: "#FFE9C8", fillRule: "evenodd" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_246", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "#FFC775" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#E69E34" })
      )
    )
  );
};
var FileCodeIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-code ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#00ACA1" }),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z", fill: "#00ACA1", fillRule: "evenodd" })
  );
};
var FileCodeIconAlt = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-code-alt ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_611)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#00ACA1" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z", fill: "#A3DCD8", fillRule: "evenodd" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_611", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "#7FC4BD" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#00ACA1" })
      )
    )
  );
};
var FileAudioIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-audio ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#2727B0" }),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z", fill: "#2727B0", fillRule: "evenodd" })
  );
};
var FileAudioIconAlt = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-audio-alt ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_420)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#1919A5" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z", fill: "#AAAAFF", fillRule: "evenodd" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_420", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "#4A4AB8" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#2727B0" })
      )
    )
  );
};
var FileVideoIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-video ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#9D27B0" }),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z", fill: "#9D27B0" })
  );
};
var FileVideoIconAlt = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-video-alt ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_18604_164254)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#7A1589" }),
    import_react71.default.createElement("path", { d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z", fill: "#F3A8FF" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear_18604_164254", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "#A94AB8" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#9D27B0" })
      )
    )
  );
};
var FileFallbackIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-fallback ".concat(className).trim(), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear)" }),
    import_react71.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#CFCFCF", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#CFCFCF", fillRule: "evenodd" }),
    import_react71.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#CFCFCF", fillRule: "evenodd" }),
    import_react71.default.createElement(
      "defs",
      null,
      import_react71.default.createElement(
        "linearGradient",
        { gradientUnits: "userSpaceOnUse", id: "paint0_linear", x1: "0", x2: "0", y1: "0", y2: "40" },
        import_react71.default.createElement("stop", { stopColor: "white" }),
        import_react71.default.createElement("stop", { offset: "1", stopColor: "#DBDBDB" })
      )
    )
  );
};
var FileImageIcon2 = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE2 : _c, props = __rest(_a, ["className", "size"]);
  return import_react71.default.createElement(
    "svg",
    __assign({ className: "rfu-file-image  ".concat(className).trim(), height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react71.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z", fill: "#414D54" })
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/mimeTypes.js
var wordMimeTypes = [
  // Microsoft Word
  // .doc .dot
  "application/msword",
  // .doc .dot
  "application/msword-template",
  // .docx
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  // .dotx (no test)
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
  // .docm
  "application/vnd.ms-word.document.macroEnabled.12",
  // .dotm (no test)
  "application/vnd.ms-word.template.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odt
  "application/vnd.oasis.opendocument.text",
  // .ott
  "application/vnd.oasis.opendocument.text-template",
  // .fodt
  "application/vnd.oasis.opendocument.text-flat-xml"
  // .uot
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var excelMimeTypes = [
  // .csv
  "text/csv",
  // TODO: maybe more data files
  // Microsoft Excel
  // .xls .xlt .xla (no test for .xla)
  "application/vnd.ms-excel",
  // .xlsx
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  // .xltx (no test)
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
  // .xlsm
  "application/vnd.ms-excel.sheet.macroEnabled.12",
  // .xltm (no test)
  "application/vnd.ms-excel.template.macroEnabled.12",
  // .xlam (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // .xlsb (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // LibreOffice/OpenOffice Calc
  // .ods
  "application/vnd.oasis.opendocument.spreadsheet",
  // .ots
  "application/vnd.oasis.opendocument.spreadsheet-template",
  // .fods
  "application/vnd.oasis.opendocument.spreadsheet-flat-xml"
  // .uos
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var powerpointMimeTypes = [
  // Microsoft Word
  // .ppt .pot .pps .ppa (no test for .ppa)
  "application/vnd.ms-powerpoint",
  // .pptx
  "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  // .potx (no test)
  "application/vnd.openxmlformats-officedocument.presentationml.template",
  // .ppsx
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
  // .ppam
  "application/vnd.ms-powerpoint.addin.macroEnabled.12",
  // .pptm
  "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
  // .potm
  "application/vnd.ms-powerpoint.template.macroEnabled.12",
  // .ppsm
  "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odp
  "application/vnd.oasis.opendocument.presentation",
  // .otp
  "application/vnd.oasis.opendocument.presentation-template",
  // .fodp
  "application/vnd.oasis.opendocument.presentation-flat-xml"
  // .uop
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var archiveFileTypes = [
  // .zip
  "application/zip",
  // .z7
  "application/x-7z-compressed",
  // .ar
  "application/x-archive",
  // .tar
  "application/x-tar",
  // .tar.gz
  "application/gzip",
  // .tar.Z
  "application/x-compress",
  // .tar.bz2
  "application/x-bzip",
  // .tar.lz
  "application/x-lzip",
  // .tar.lz4
  "application/x-lz4",
  // .tar.lzma
  "application/x-lzma",
  // .tar.lzo (no test)
  "application/x-lzop",
  // .tar.xz
  "application/x-xz",
  // .war
  "application/x-webarchive",
  // .rar
  "application/vnd.rar"
];
var codeFileTypes = [
  // .html .htm
  "text/html",
  // .css
  "text/css",
  // .js
  "application/x-javascript",
  "text/javascript",
  // .json
  "application/json",
  // .py
  "text/x-python",
  // .go
  "text/x-go",
  // .c
  "text/x-csrc",
  // .cpp
  "text/x-c++src",
  // .rb
  "application/x-ruby",
  // .rust
  "text/rust",
  // .java
  "text/x-java",
  // .php
  "application/x-php",
  // .cs
  "text/x-csharp",
  // .scala
  "text/x-scala",
  // .erl
  "text/x-erlang",
  // .sh
  "application/x-shellscript"
];

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/iconMap.js
function generateMimeTypeToIconMap(_a) {
  var FileArchiveIcon3 = _a.FileArchiveIcon, FileCodeIcon3 = _a.FileCodeIcon, FileExcelIcon3 = _a.FileExcelIcon, FilePdfIcon3 = _a.FilePdfIcon, FilePowerPointIcon3 = _a.FilePowerPointIcon, FileWordIcon3 = _a.FileWordIcon;
  var mimeTypeToIconMap = {
    "application/pdf": FilePdfIcon3
  };
  for (var _i = 0, wordMimeTypes_1 = wordMimeTypes; _i < wordMimeTypes_1.length; _i++) {
    var type = wordMimeTypes_1[_i];
    mimeTypeToIconMap[type] = FileWordIcon3;
  }
  for (var _b = 0, excelMimeTypes_1 = excelMimeTypes; _b < excelMimeTypes_1.length; _b++) {
    var type = excelMimeTypes_1[_b];
    mimeTypeToIconMap[type] = FileExcelIcon3;
  }
  for (var _c = 0, powerpointMimeTypes_1 = powerpointMimeTypes; _c < powerpointMimeTypes_1.length; _c++) {
    var type = powerpointMimeTypes_1[_c];
    mimeTypeToIconMap[type] = FilePowerPointIcon3;
  }
  for (var _d = 0, archiveFileTypes_1 = archiveFileTypes; _d < archiveFileTypes_1.length; _d++) {
    var type = archiveFileTypes_1[_d];
    mimeTypeToIconMap[type] = FileArchiveIcon3;
  }
  for (var _e = 0, codeFileTypes_1 = codeFileTypes; _e < codeFileTypes_1.length; _e++) {
    var type = codeFileTypes_1[_e];
    mimeTypeToIconMap[type] = FileCodeIcon3;
  }
  return mimeTypeToIconMap;
}
function generateGeneralTypeToIconMap(_a) {
  var FileAltIcon2 = _a.FileAltIcon, FileAudioIcon3 = _a.FileAudioIcon, FileImageIcon3 = _a.FileImageIcon, FileVideoIcon3 = _a.FileVideoIcon;
  return {
    "audio/": FileAudioIcon3,
    "image/": FileImageIcon3,
    "text/": FileAltIcon2,
    "video/": FileVideoIcon3
  };
}
var iconMap = {
  "1": {
    alt: {},
    standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({
      FileArchiveIcon,
      FileCodeIcon,
      FileExcelIcon,
      FilePdfIcon,
      FilePowerPointIcon,
      FileWordIcon
    })), generateGeneralTypeToIconMap({
      FileAltIcon,
      FileAudioIcon,
      FileImageIcon,
      FileVideoIcon
    })), { fallback: FileFallbackIcon })
  },
  "2": {
    alt: __assign(__assign(__assign({}, generateMimeTypeToIconMap({
      FileArchiveIcon: FileArchiveIconAlt,
      FileCodeIcon: FileCodeIconAlt,
      FileExcelIcon: FileExcelIconAlt,
      FilePdfIcon: FilePdfIcon2,
      FilePowerPointIcon: FilePowerPointIconAlt,
      FileWordIcon: FileWordIconAlt
    })), generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon2,
      FileAudioIcon: FileAudioIconAlt,
      FileImageIcon: FileImageIcon2,
      FileVideoIcon: FileVideoIconAlt
    })), { fallback: FileFallbackIcon2 }),
    standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({
      FileArchiveIcon: FileArchiveIcon2,
      FileCodeIcon: FileCodeIcon2,
      FileExcelIcon: FileExcelIcon2,
      FilePdfIcon: FilePdfIcon2,
      FilePowerPointIcon: FilePowerPointIcon2,
      FileWordIcon: FileWordIcon2
    })), generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon2,
      FileAudioIcon: FileAudioIcon2,
      FileImageIcon: FileImageIcon2,
      FileVideoIcon: FileVideoIcon2
    })), { fallback: FileFallbackIcon2 })
  }
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIcon.js
function mimeTypeToIcon(type, version2, mimeType) {
  var _a;
  if (type === void 0) {
    type = "standard";
  }
  if (version2 === void 0) {
    version2 = "1";
  }
  var theMap = ((_a = iconMap[version2]) === null || _a === void 0 ? void 0 : _a[type]) || iconMap[version2]["standard"];
  if (!mimeType)
    return theMap.fallback;
  var icon = theMap[mimeType];
  if (icon)
    return icon;
  if (mimeType.startsWith("audio/"))
    return theMap["audio/"];
  if (mimeType.startsWith("video/"))
    return theMap["video/"];
  if (mimeType.startsWith("image/"))
    return theMap["image/"];
  if (mimeType.startsWith("text/"))
    return theMap["text/"];
  return theMap.fallback;
}
var FileIcon = function(props) {
  var _a = props.big, big = _a === void 0 ? false : _a, mimeType = props.mimeType, _b = props.size, size = _b === void 0 ? 50 : _b, _c = props.sizeSmall, sizeSmall = _c === void 0 ? 20 : _c, _d = props.type, type = _d === void 0 ? "standard" : _d, _e = props.version, version2 = _e === void 0 ? "1" : _e, rest = __rest(props, ["big", "mimeType", "size", "sizeSmall", "type", "version"]);
  var Icon = mimeTypeToIcon(type, version2, mimeType);
  return import_react72.default.createElement(Icon, __assign({}, rest, { size: big ? size : sizeSmall }));
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FilePreviewer.js
var import_react74 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/LoadingIndicator.js
var import_react73 = __toESM(require_react());
var LoadingIndicator = function(_a) {
  var backgroundColor = _a.backgroundColor, color6 = _a.color, _b = _a.size, size = _b === void 0 ? 20 : _b, _c = _a.width, width = _c === void 0 ? 2 : _c;
  return import_react73.default.createElement("div", { className: "rfu-loading-indicator__spinner", style: {
    borderColor: backgroundColor ? backgroundColor : "",
    borderTopColor: color6 ? color6 : "",
    borderWidth: width ? width : "",
    height: size ? size : "",
    margin: "0 auto",
    width: size ? size : ""
  } });
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FilePreviewer.js
var FilePreviewer = function(_a) {
  var _b = _a.fileIconProps, fileIconProps = _b === void 0 ? {} : _b, uploads = _a.uploads, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry;
  return import_react74.default.createElement(
    "div",
    { className: "rfu-file-previewer" },
    import_react74.default.createElement("ol", null, uploads === null || uploads === void 0 ? void 0 : uploads.map(function(upload) {
      return import_react74.default.createElement(
        "li",
        { className: "rfu-file-previewer__file ".concat(upload.state === "uploading" ? "rfu-file-previewer__file--uploading" : "", " ").concat(upload.state === "failed" ? "rfu-file-previewer__file--failed" : ""), key: upload.id },
        import_react74.default.createElement(FileIcon, __assign({ mimeType: upload.file.type }, fileIconProps)),
        import_react74.default.createElement(
          "a",
          { download: true, href: upload.url },
          upload.file.name,
          upload.state === "failed" && import_react74.default.createElement(
            import_react74.default.Fragment,
            null,
            import_react74.default.createElement("div", { className: "rfu-file-previewer__failed", onClick: function() {
              return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(upload.id);
            } }, "failed"),
            import_react74.default.createElement("div", { className: "rfu-file-previewer__retry", onClick: function() {
              return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(upload.id);
            } }, "retry")
          )
        ),
        import_react74.default.createElement("span", { className: "rfu-file-previewer__close-button", onClick: handleRemove && function() {
          return handleRemove(upload.id);
        } }, "✘"),
        upload.state === "uploading" && import_react74.default.createElement(
          "div",
          { className: "rfu-file-previewer__loading-indicator" },
          import_react74.default.createElement(LoadingIndicator, null)
        )
      );
    }))
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileUploadButton.js
var import_react82 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/icons/AttachmentIcon.js
var import_react75 = __toESM(require_react());
var AttachmentIcon = function() {
  return import_react75.default.createElement(
    "svg",
    { height: "20", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react75.default.createElement("path", { d: "M16.5 6v11.5c0 2.21-1.79 4-4 4s-4-1.79-4-4V5a2.5 2.5 0 0 1 5 0v10.5c0 .55-.45 1-1 1s-1-.45-1-1V6H10v9.5a2.5 2.5 0 0 0 5 0V5c0-2.21-1.79-4-4-4S7 2.79 7 5v12.5c0 3.04 2.46 5.5 5.5 5.5s5.5-2.46 5.5-5.5V6h-1.5z" }),
    import_react75.default.createElement("path", { d: "M0 0h24v24H0z", fill: "none" })
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/icons/CloseIcon.js
var import_react76 = __toESM(require_react());
var CloseIcon = function() {
  return import_react76.default.createElement(
    "svg",
    { height: "28", viewBox: "0 0 28 28", width: "28", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink" },
    import_react76.default.createElement(
      "defs",
      null,
      import_react76.default.createElement("path", { d: "M465 5c5.53 0 10 4.47 10 10s-4.47 10-10 10-10-4.47-10-10 4.47-10 10-10zm3.59 5L465 13.59 461.41 10 460 11.41l3.59 3.59-3.59 3.59 1.41 1.41 3.59-3.59 3.59 3.59 1.41-1.41-3.59-3.59 3.59-3.59-1.41-1.41z", id: "b" }),
      import_react76.default.createElement(
        "filter",
        { filterUnits: "objectBoundingBox", height: "160%", id: "a", width: "160%", x: "-30%", y: "-30%" },
        import_react76.default.createElement("feOffset", { in: "SourceAlpha", result: "shadowOffsetOuter1" }),
        import_react76.default.createElement("feGaussianBlur", { in: "shadowOffsetOuter1", result: "shadowBlurOuter1", stdDeviation: "2" }),
        import_react76.default.createElement("feColorMatrix", { in: "shadowBlurOuter1", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0" })
      )
    ),
    import_react76.default.createElement(
      "g",
      { fill: "none", fillRule: "nonzero", transform: "translate(-451 -1)" },
      import_react76.default.createElement("use", { fill: "#000", filter: "url(#a)", xlinkHref: "#b" }),
      import_react76.default.createElement("use", { fill: "#FFF", fillRule: "evenodd", xlinkHref: "#b" })
    )
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/icons/FilePlaceholderIcon.js
var import_react77 = __toESM(require_react());
var FilePlaceholderIcon = function(props) {
  return import_react77.default.createElement(
    "svg",
    __assign({ role: "img", viewBox: "0 0 400 400", xmlns: "http://www.w3.org/2000/svg" }, props),
    import_react77.default.createElement(
      "g",
      null,
      import_react77.default.createElement("path", { d: "M0.000 200.000 L 0.000 400.000 200.000 400.000 L 400.000 400.000 400.000 200.000 L 400.000 0.000 200.000 0.000 L 0.000 0.000 0.000 200.000 M243.085 68.180 C 251.168 72.240,252.758 82.164,246.332 88.456 C 242.609 92.102,249.072 91.774,176.600 92.000 L 112.600 92.200 111.000 93.165 C 107.620 95.203,105.382 98.131,104.780 101.304 C 104.548 102.526,104.400 132.258,104.400 177.461 C 104.400 261.065,104.646 254.561,101.340 258.340 C 95.134 265.435,84.540 263.898,80.562 255.326 L 79.600 253.251 79.600 170.356 L 79.600 87.460 80.613 84.526 C 83.246 76.897,91.469 68.511,96.439 68.386 C 96.747 68.378,97.450 68.114,98.000 67.800 C 98.856 67.311,109.214 67.226,170.067 67.214 L 241.134 67.200 243.085 68.180 M230.400 116.002 C 236.845 117.273,237.603 117.566,242.024 120.500 C 243.269 121.327,256.977 134.788,274.002 151.902 C 299.664 177.700,305.143 183.306,307.142 185.815 C 307.838 186.688,309.600 190.497,309.602 191.133 C 309.604 191.500,309.919 192.340,310.302 193.000 C 310.956 194.125,311.007 197.998,311.108 254.600 L 311.215 315.000 310.241 318.000 C 307.327 326.967,302.400 332.072,293.800 335.031 L 291.000 335.994 219.630 335.997 L 148.260 336.000 145.430 335.018 C 140.319 333.244,139.684 332.841,134.862 328.318 C 132.616 326.212,129.907 321.565,129.427 318.997 C 129.263 318.118,128.920 317.147,128.664 316.839 C 128.315 316.416,128.200 294.170,128.200 227.039 L 128.200 137.800 129.067 134.600 C 129.543 132.840,130.393 130.590,130.954 129.600 C 131.515 128.610,132.247 127.320,132.580 126.733 C 134.155 123.961,138.478 120.313,143.000 117.940 C 144.003 117.414,146.644 116.725,151.000 115.853 C 152.661 115.520,228.681 115.664,230.400 116.002 M226.250 137.650 C 225.849 139.656,225.987 187.508,226.403 190.713 C 227.174 196.647,230.700 200.107,237.136 201.245 C 239.519 201.666,290.972 201.562,291.398 201.135 C 291.727 200.807,227.629 136.400,226.974 136.400 C 226.713 136.400,226.388 136.963,226.250 137.650", fill: "#fcfcfc", fillRule: "evenodd", stroke: "none" }),
      import_react77.default.createElement("path", { d: "M98.000 67.800 C 97.450 68.114,96.747 68.378,96.439 68.386 C 91.469 68.511,83.246 76.897,80.613 84.526 L 79.600 87.460 79.600 170.356 L 79.600 253.251 80.562 255.326 C 84.540 263.898,95.134 265.435,101.340 258.340 C 104.646 254.561,104.400 261.065,104.400 177.461 C 104.400 132.258,104.548 102.526,104.780 101.304 C 105.382 98.131,107.620 95.203,111.000 93.165 L 112.600 92.200 176.600 92.000 C 249.072 91.774,242.609 92.102,246.332 88.456 C 252.758 82.164,251.168 72.240,243.085 68.180 L 241.134 67.200 170.067 67.214 C 109.214 67.226,98.856 67.311,98.000 67.800 M151.000 115.853 C 146.644 116.725,144.003 117.414,143.000 117.940 C 138.478 120.313,134.155 123.961,132.580 126.733 C 132.247 127.320,131.515 128.610,130.954 129.600 C 130.393 130.590,129.543 132.840,129.067 134.600 L 128.200 137.800 128.200 227.039 C 128.200 294.170,128.315 316.416,128.664 316.839 C 128.920 317.147,129.263 318.118,129.427 318.997 C 129.907 321.565,132.616 326.212,134.862 328.318 C 139.684 332.841,140.319 333.244,145.430 335.018 L 148.260 336.000 219.630 335.997 L 291.000 335.994 293.800 335.031 C 302.400 332.072,307.327 326.967,310.241 318.000 L 311.215 315.000 311.108 254.600 C 311.007 197.998,310.956 194.125,310.302 193.000 C 309.919 192.340,309.604 191.500,309.602 191.133 C 309.600 190.497,307.838 186.688,307.142 185.815 C 305.143 183.306,299.664 177.700,274.002 151.902 C 238.906 116.622,240.594 118.012,230.400 116.002 C 228.681 115.664,152.661 115.520,151.000 115.853 M259.556 168.635 C 277.215 186.364,291.544 200.989,291.398 201.135 C 290.972 201.562,239.519 201.666,237.136 201.245 C 230.700 200.107,227.174 196.647,226.403 190.713 C 225.460 183.450,225.955 136.400,226.974 136.400 C 227.235 136.400,241.897 150.906,259.556 168.635", fill: "#e4e4e4", fillRule: "evenodd", stroke: "none" })
    )
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/icons/PictureIcon.js
var import_react78 = __toESM(require_react());
var PictureIcon = function() {
  return import_react78.default.createElement(
    "svg",
    { height: "20", viewBox: "0 0 20 20", width: "20", xmlns: "http://www.w3.org/2000/svg" },
    import_react78.default.createElement("path", { d: "M2 0h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm3 2a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM2 16v2h16v-6l-3-3-6 6-3-3-4 4z", fillRule: "nonzero" })
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/icons/RetryIcon.js
var import_react79 = __toESM(require_react());
var RetryIcon = function() {
  return import_react79.default.createElement(
    "svg",
    { height: "20", viewBox: "0 0 22 20", width: "22", xmlns: "http://www.w3.org/2000/svg" },
    import_react79.default.createElement("path", { d: "M20 5.535V2a1 1 0 0 1 2 0v6a1 1 0 0 1-1 1h-6a1 1 0 0 1 0-2h3.638l-2.975-2.653a8 8 0 1 0 1.884 8.32 1 1 0 1 1 1.886.666A10 10 0 1 1 5.175 1.245c3.901-2.15 8.754-1.462 11.88 1.667L20 5.535z", fill: "#FFF", fillRule: "nonzero" })
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/UploadButton.js
var import_react81 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/utils.js
var import_react80 = __toESM(require_react());
var useHandleFileChangeWrapper = function(resetOnChange, handler) {
  if (resetOnChange === void 0) {
    resetOnChange = false;
  }
  return (0, import_react80.useCallback)(function(_a) {
    var currentTarget = _a.currentTarget;
    var files = currentTarget.files;
    if (!files)
      return;
    try {
      handler === null || handler === void 0 ? void 0 : handler(Array.from(files));
    } catch (error2) {
      console.error(error2);
    }
    if (resetOnChange)
      currentTarget.value = "";
  }, [handler, resetOnChange]);
};
function dataTransferItemsHaveFiles(items) {
  if (!items || !items.length) {
    return false;
  }
  for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
    var item = items_1[_i];
    if (item.kind === "file" || item.type === "text/html") {
      return true;
    }
  }
  return false;
}
function dataTransferItemsToFiles(items) {
  return __awaiter(this, void 0, void 0, function() {
    var fileLikes, blobPromises, _loop_1, _i, items_2, item;
    var _this = this;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!items || !items.length) {
            return [2, []];
          }
          fileLikes = getFileLikes(items);
          if (fileLikes.length) {
            return [2, fileLikes];
          }
          blobPromises = [];
          _loop_1 = function(item2) {
            if (item2.type === "text/html") {
              blobPromises.push(new Promise(function(accept) {
                item2.getAsString(function(s) {
                  return __awaiter(_this, void 0, void 0, function() {
                    var imagePromises;
                    return __generator(this, function(_a2) {
                      switch (_a2.label) {
                        case 0:
                          imagePromises = extractImageSources(s).map(function(src) {
                            return getImageSource(fileLikes, src);
                          });
                          return [4, Promise.all(imagePromises)];
                        case 1:
                          _a2.sent();
                          accept();
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                });
              }));
            }
          };
          for (_i = 0, items_2 = items; _i < items_2.length; _i++) {
            item = items_2[_i];
            _loop_1(item);
          }
          return [4, Promise.all(blobPromises)];
        case 1:
          _a.sent();
          return [2, fileLikes];
      }
    });
  });
}
function getFileLikes(items) {
  var fileLikes = [];
  for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
    var item = items_3[_i];
    if (item.kind === "file") {
      var file = item.getAsFile();
      if (file) {
        fileLikes.push(file);
      }
    }
  }
  return fileLikes;
}
function getImageSource(fileLikes, src) {
  return __awaiter(this, void 0, void 0, function() {
    var res, e_1, contentType, buf, blob;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2, , 3]);
          return [4, fetch(src)];
        case 1:
          res = _a.sent();
          return [3, 3];
        case 2:
          e_1 = _a.sent();
          return [
            2
            /*return*/
          ];
        case 3:
          contentType = res.headers.get("Content-type") || "application/octet-stream";
          return [4, res.arrayBuffer()];
        case 4:
          buf = _a.sent();
          blob = new Blob([buf], { type: contentType });
          fileLikes.push(blob);
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
var extractImageSources = function(s) {
  var imageTags = new DOMParser().parseFromString(s, "text/html").getElementsByTagName("img");
  return Array.from(imageTags, function(tag) {
    return tag.src;
  }).filter(function(tag) {
    return tag;
  });
};
var createFileFromBlobs = function(_a) {
  var blobsArray = _a.blobsArray, fileName = _a.fileName, mimeType = _a.mimeType;
  var concatenatedBlob = new Blob(blobsArray, { type: mimeType });
  return new File([concatenatedBlob], fileName, { type: concatenatedBlob.type });
};
var getExtensionFromMimeType = function(mimeType) {
  var match = mimeType.match(/\/([^/;]+)/);
  return match && match[1];
};
var getRecordedMediaTypeFromMimeType = function(mimeType) {
  var match = mimeType.match(/^(audio|video)\/.*$/);
  return match && match[1];
};
var readFileAsArrayBuffer = function(file) {
  return new Promise(function(resolve, reject) {
    var fileReader = new FileReader();
    fileReader.onload = function() {
      resolve(fileReader.result);
    };
    fileReader.onerror = function() {
      reject(fileReader.error);
    };
    fileReader.readAsArrayBuffer(file);
  });
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/UploadButton.js
var UploadButton = function(_a) {
  var onFileChange = _a.onFileChange, _b = _a.resetOnChange, resetOnChange = _b === void 0 ? true : _b, rest = __rest(_a, ["onFileChange", "resetOnChange"]);
  var handleInputChange = useHandleFileChangeWrapper(resetOnChange, onFileChange);
  return import_react81.default.createElement("input", __assign({ onChange: handleInputChange, type: "file" }, rest));
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileUploadButton.js
var FileUploadButton = function(_a) {
  var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.multiple, multiple = _c === void 0 ? false : _c, _d = _a.children, children = _d === void 0 ? import_react82.default.createElement(AttachmentIcon, null) : _d, handleFiles = _a.handleFiles, accepts2 = _a.accepts, _e = _a.resetOnChange, resetOnChange = _e === void 0 ? true : _e;
  var t2 = useTranslationContext("FileUploadButton").t;
  var className = "rfu-file-upload-button";
  if (disabled) {
    className = "".concat(className, " rfu-file-upload-button--disabled");
  }
  return import_react82.default.createElement(
    "div",
    { className },
    import_react82.default.createElement(
      "label",
      null,
      import_react82.default.createElement(UploadButton, { accept: Array.isArray(accepts2) ? accepts2.join(",") : accepts2, "aria-label": t2("aria/File input"), className: "rfu-file-input", disabled, multiple, onFileChange: handleFiles, resetOnChange }),
      children
    )
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ImageDropzone.js
var import_react84 = __toESM(require_react());

// node_modules/react-dropzone/dist/es/index.js
var import_react83 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/file-selector/dist/es2015/file.js
var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
  // https://github.com/guzzle/psr7/blob/2d9260799e713f1c475d3c5fdc3d6561ff7441b2/src/MimeType.php
  ["1km", "application/vnd.1000minds.decision-model+xml"],
  ["3dml", "text/vnd.in3d.3dml"],
  ["3ds", "image/x-3ds"],
  ["3g2", "video/3gpp2"],
  ["3gp", "video/3gp"],
  ["3gpp", "video/3gpp"],
  ["3mf", "model/3mf"],
  ["7z", "application/x-7z-compressed"],
  ["7zip", "application/x-7z-compressed"],
  ["123", "application/vnd.lotus-1-2-3"],
  ["aab", "application/x-authorware-bin"],
  ["aac", "audio/x-acc"],
  ["aam", "application/x-authorware-map"],
  ["aas", "application/x-authorware-seg"],
  ["abw", "application/x-abiword"],
  ["ac", "application/vnd.nokia.n-gage.ac+xml"],
  ["ac3", "audio/ac3"],
  ["acc", "application/vnd.americandynamics.acc"],
  ["ace", "application/x-ace-compressed"],
  ["acu", "application/vnd.acucobol"],
  ["acutc", "application/vnd.acucorp"],
  ["adp", "audio/adpcm"],
  ["aep", "application/vnd.audiograph"],
  ["afm", "application/x-font-type1"],
  ["afp", "application/vnd.ibm.modcap"],
  ["ahead", "application/vnd.ahead.space"],
  ["ai", "application/pdf"],
  ["aif", "audio/x-aiff"],
  ["aifc", "audio/x-aiff"],
  ["aiff", "audio/x-aiff"],
  ["air", "application/vnd.adobe.air-application-installer-package+zip"],
  ["ait", "application/vnd.dvb.ait"],
  ["ami", "application/vnd.amiga.ami"],
  ["amr", "audio/amr"],
  ["apk", "application/vnd.android.package-archive"],
  ["apng", "image/apng"],
  ["appcache", "text/cache-manifest"],
  ["application", "application/x-ms-application"],
  ["apr", "application/vnd.lotus-approach"],
  ["arc", "application/x-freearc"],
  ["arj", "application/x-arj"],
  ["asc", "application/pgp-signature"],
  ["asf", "video/x-ms-asf"],
  ["asm", "text/x-asm"],
  ["aso", "application/vnd.accpac.simply.aso"],
  ["asx", "video/x-ms-asf"],
  ["atc", "application/vnd.acucorp"],
  ["atom", "application/atom+xml"],
  ["atomcat", "application/atomcat+xml"],
  ["atomdeleted", "application/atomdeleted+xml"],
  ["atomsvc", "application/atomsvc+xml"],
  ["atx", "application/vnd.antix.game-component"],
  ["au", "audio/x-au"],
  ["avi", "video/x-msvideo"],
  ["avif", "image/avif"],
  ["aw", "application/applixware"],
  ["azf", "application/vnd.airzip.filesecure.azf"],
  ["azs", "application/vnd.airzip.filesecure.azs"],
  ["azv", "image/vnd.airzip.accelerator.azv"],
  ["azw", "application/vnd.amazon.ebook"],
  ["b16", "image/vnd.pco.b16"],
  ["bat", "application/x-msdownload"],
  ["bcpio", "application/x-bcpio"],
  ["bdf", "application/x-font-bdf"],
  ["bdm", "application/vnd.syncml.dm+wbxml"],
  ["bdoc", "application/x-bdoc"],
  ["bed", "application/vnd.realvnc.bed"],
  ["bh2", "application/vnd.fujitsu.oasysprs"],
  ["bin", "application/octet-stream"],
  ["blb", "application/x-blorb"],
  ["blorb", "application/x-blorb"],
  ["bmi", "application/vnd.bmi"],
  ["bmml", "application/vnd.balsamiq.bmml+xml"],
  ["bmp", "image/bmp"],
  ["book", "application/vnd.framemaker"],
  ["box", "application/vnd.previewsystems.box"],
  ["boz", "application/x-bzip2"],
  ["bpk", "application/octet-stream"],
  ["bpmn", "application/octet-stream"],
  ["bsp", "model/vnd.valve.source.compiled-map"],
  ["btif", "image/prs.btif"],
  ["buffer", "application/octet-stream"],
  ["bz", "application/x-bzip"],
  ["bz2", "application/x-bzip2"],
  ["c", "text/x-c"],
  ["c4d", "application/vnd.clonk.c4group"],
  ["c4f", "application/vnd.clonk.c4group"],
  ["c4g", "application/vnd.clonk.c4group"],
  ["c4p", "application/vnd.clonk.c4group"],
  ["c4u", "application/vnd.clonk.c4group"],
  ["c11amc", "application/vnd.cluetrust.cartomobile-config"],
  ["c11amz", "application/vnd.cluetrust.cartomobile-config-pkg"],
  ["cab", "application/vnd.ms-cab-compressed"],
  ["caf", "audio/x-caf"],
  ["cap", "application/vnd.tcpdump.pcap"],
  ["car", "application/vnd.curl.car"],
  ["cat", "application/vnd.ms-pki.seccat"],
  ["cb7", "application/x-cbr"],
  ["cba", "application/x-cbr"],
  ["cbr", "application/x-cbr"],
  ["cbt", "application/x-cbr"],
  ["cbz", "application/x-cbr"],
  ["cc", "text/x-c"],
  ["cco", "application/x-cocoa"],
  ["cct", "application/x-director"],
  ["ccxml", "application/ccxml+xml"],
  ["cdbcmsg", "application/vnd.contact.cmsg"],
  ["cda", "application/x-cdf"],
  ["cdf", "application/x-netcdf"],
  ["cdfx", "application/cdfx+xml"],
  ["cdkey", "application/vnd.mediastation.cdkey"],
  ["cdmia", "application/cdmi-capability"],
  ["cdmic", "application/cdmi-container"],
  ["cdmid", "application/cdmi-domain"],
  ["cdmio", "application/cdmi-object"],
  ["cdmiq", "application/cdmi-queue"],
  ["cdr", "application/cdr"],
  ["cdx", "chemical/x-cdx"],
  ["cdxml", "application/vnd.chemdraw+xml"],
  ["cdy", "application/vnd.cinderella"],
  ["cer", "application/pkix-cert"],
  ["cfs", "application/x-cfs-compressed"],
  ["cgm", "image/cgm"],
  ["chat", "application/x-chat"],
  ["chm", "application/vnd.ms-htmlhelp"],
  ["chrt", "application/vnd.kde.kchart"],
  ["cif", "chemical/x-cif"],
  ["cii", "application/vnd.anser-web-certificate-issue-initiation"],
  ["cil", "application/vnd.ms-artgalry"],
  ["cjs", "application/node"],
  ["cla", "application/vnd.claymore"],
  ["class", "application/octet-stream"],
  ["clkk", "application/vnd.crick.clicker.keyboard"],
  ["clkp", "application/vnd.crick.clicker.palette"],
  ["clkt", "application/vnd.crick.clicker.template"],
  ["clkw", "application/vnd.crick.clicker.wordbank"],
  ["clkx", "application/vnd.crick.clicker"],
  ["clp", "application/x-msclip"],
  ["cmc", "application/vnd.cosmocaller"],
  ["cmdf", "chemical/x-cmdf"],
  ["cml", "chemical/x-cml"],
  ["cmp", "application/vnd.yellowriver-custom-menu"],
  ["cmx", "image/x-cmx"],
  ["cod", "application/vnd.rim.cod"],
  ["coffee", "text/coffeescript"],
  ["com", "application/x-msdownload"],
  ["conf", "text/plain"],
  ["cpio", "application/x-cpio"],
  ["cpp", "text/x-c"],
  ["cpt", "application/mac-compactpro"],
  ["crd", "application/x-mscardfile"],
  ["crl", "application/pkix-crl"],
  ["crt", "application/x-x509-ca-cert"],
  ["crx", "application/x-chrome-extension"],
  ["cryptonote", "application/vnd.rig.cryptonote"],
  ["csh", "application/x-csh"],
  ["csl", "application/vnd.citationstyles.style+xml"],
  ["csml", "chemical/x-csml"],
  ["csp", "application/vnd.commonspace"],
  ["csr", "application/octet-stream"],
  ["css", "text/css"],
  ["cst", "application/x-director"],
  ["csv", "text/csv"],
  ["cu", "application/cu-seeme"],
  ["curl", "text/vnd.curl"],
  ["cww", "application/prs.cww"],
  ["cxt", "application/x-director"],
  ["cxx", "text/x-c"],
  ["dae", "model/vnd.collada+xml"],
  ["daf", "application/vnd.mobius.daf"],
  ["dart", "application/vnd.dart"],
  ["dataless", "application/vnd.fdsn.seed"],
  ["davmount", "application/davmount+xml"],
  ["dbf", "application/vnd.dbf"],
  ["dbk", "application/docbook+xml"],
  ["dcr", "application/x-director"],
  ["dcurl", "text/vnd.curl.dcurl"],
  ["dd2", "application/vnd.oma.dd2+xml"],
  ["ddd", "application/vnd.fujixerox.ddd"],
  ["ddf", "application/vnd.syncml.dmddf+xml"],
  ["dds", "image/vnd.ms-dds"],
  ["deb", "application/x-debian-package"],
  ["def", "text/plain"],
  ["deploy", "application/octet-stream"],
  ["der", "application/x-x509-ca-cert"],
  ["dfac", "application/vnd.dreamfactory"],
  ["dgc", "application/x-dgc-compressed"],
  ["dic", "text/x-c"],
  ["dir", "application/x-director"],
  ["dis", "application/vnd.mobius.dis"],
  ["disposition-notification", "message/disposition-notification"],
  ["dist", "application/octet-stream"],
  ["distz", "application/octet-stream"],
  ["djv", "image/vnd.djvu"],
  ["djvu", "image/vnd.djvu"],
  ["dll", "application/octet-stream"],
  ["dmg", "application/x-apple-diskimage"],
  ["dmn", "application/octet-stream"],
  ["dmp", "application/vnd.tcpdump.pcap"],
  ["dms", "application/octet-stream"],
  ["dna", "application/vnd.dna"],
  ["doc", "application/msword"],
  ["docm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
  ["dot", "application/msword"],
  ["dotm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"],
  ["dp", "application/vnd.osgi.dp"],
  ["dpg", "application/vnd.dpgraph"],
  ["dra", "audio/vnd.dra"],
  ["drle", "image/dicom-rle"],
  ["dsc", "text/prs.lines.tag"],
  ["dssc", "application/dssc+der"],
  ["dtb", "application/x-dtbook+xml"],
  ["dtd", "application/xml-dtd"],
  ["dts", "audio/vnd.dts"],
  ["dtshd", "audio/vnd.dts.hd"],
  ["dump", "application/octet-stream"],
  ["dvb", "video/vnd.dvb.file"],
  ["dvi", "application/x-dvi"],
  ["dwd", "application/atsc-dwd+xml"],
  ["dwf", "model/vnd.dwf"],
  ["dwg", "image/vnd.dwg"],
  ["dxf", "image/vnd.dxf"],
  ["dxp", "application/vnd.spotfire.dxp"],
  ["dxr", "application/x-director"],
  ["ear", "application/java-archive"],
  ["ecelp4800", "audio/vnd.nuera.ecelp4800"],
  ["ecelp7470", "audio/vnd.nuera.ecelp7470"],
  ["ecelp9600", "audio/vnd.nuera.ecelp9600"],
  ["ecma", "application/ecmascript"],
  ["edm", "application/vnd.novadigm.edm"],
  ["edx", "application/vnd.novadigm.edx"],
  ["efif", "application/vnd.picsel"],
  ["ei6", "application/vnd.pg.osasli"],
  ["elc", "application/octet-stream"],
  ["emf", "image/emf"],
  ["eml", "message/rfc822"],
  ["emma", "application/emma+xml"],
  ["emotionml", "application/emotionml+xml"],
  ["emz", "application/x-msmetafile"],
  ["eol", "audio/vnd.digital-winds"],
  ["eot", "application/vnd.ms-fontobject"],
  ["eps", "application/postscript"],
  ["epub", "application/epub+zip"],
  ["es", "application/ecmascript"],
  ["es3", "application/vnd.eszigno3+xml"],
  ["esa", "application/vnd.osgi.subsystem"],
  ["esf", "application/vnd.epson.esf"],
  ["et3", "application/vnd.eszigno3+xml"],
  ["etx", "text/x-setext"],
  ["eva", "application/x-eva"],
  ["evy", "application/x-envoy"],
  ["exe", "application/octet-stream"],
  ["exi", "application/exi"],
  ["exp", "application/express"],
  ["exr", "image/aces"],
  ["ext", "application/vnd.novadigm.ext"],
  ["ez", "application/andrew-inset"],
  ["ez2", "application/vnd.ezpix-album"],
  ["ez3", "application/vnd.ezpix-package"],
  ["f", "text/x-fortran"],
  ["f4v", "video/mp4"],
  ["f77", "text/x-fortran"],
  ["f90", "text/x-fortran"],
  ["fbs", "image/vnd.fastbidsheet"],
  ["fcdt", "application/vnd.adobe.formscentral.fcdt"],
  ["fcs", "application/vnd.isac.fcs"],
  ["fdf", "application/vnd.fdf"],
  ["fdt", "application/fdt+xml"],
  ["fe_launch", "application/vnd.denovo.fcselayout-link"],
  ["fg5", "application/vnd.fujitsu.oasysgp"],
  ["fgd", "application/x-director"],
  ["fh", "image/x-freehand"],
  ["fh4", "image/x-freehand"],
  ["fh5", "image/x-freehand"],
  ["fh7", "image/x-freehand"],
  ["fhc", "image/x-freehand"],
  ["fig", "application/x-xfig"],
  ["fits", "image/fits"],
  ["flac", "audio/x-flac"],
  ["fli", "video/x-fli"],
  ["flo", "application/vnd.micrografx.flo"],
  ["flv", "video/x-flv"],
  ["flw", "application/vnd.kde.kivio"],
  ["flx", "text/vnd.fmi.flexstor"],
  ["fly", "text/vnd.fly"],
  ["fm", "application/vnd.framemaker"],
  ["fnc", "application/vnd.frogans.fnc"],
  ["fo", "application/vnd.software602.filler.form+xml"],
  ["for", "text/x-fortran"],
  ["fpx", "image/vnd.fpx"],
  ["frame", "application/vnd.framemaker"],
  ["fsc", "application/vnd.fsc.weblaunch"],
  ["fst", "image/vnd.fst"],
  ["ftc", "application/vnd.fluxtime.clip"],
  ["fti", "application/vnd.anser-web-funds-transfer-initiation"],
  ["fvt", "video/vnd.fvt"],
  ["fxp", "application/vnd.adobe.fxp"],
  ["fxpl", "application/vnd.adobe.fxp"],
  ["fzs", "application/vnd.fuzzysheet"],
  ["g2w", "application/vnd.geoplan"],
  ["g3", "image/g3fax"],
  ["g3w", "application/vnd.geospace"],
  ["gac", "application/vnd.groove-account"],
  ["gam", "application/x-tads"],
  ["gbr", "application/rpki-ghostbusters"],
  ["gca", "application/x-gca-compressed"],
  ["gdl", "model/vnd.gdl"],
  ["gdoc", "application/vnd.google-apps.document"],
  ["geo", "application/vnd.dynageo"],
  ["geojson", "application/geo+json"],
  ["gex", "application/vnd.geometry-explorer"],
  ["ggb", "application/vnd.geogebra.file"],
  ["ggt", "application/vnd.geogebra.tool"],
  ["ghf", "application/vnd.groove-help"],
  ["gif", "image/gif"],
  ["gim", "application/vnd.groove-identity-message"],
  ["glb", "model/gltf-binary"],
  ["gltf", "model/gltf+json"],
  ["gml", "application/gml+xml"],
  ["gmx", "application/vnd.gmx"],
  ["gnumeric", "application/x-gnumeric"],
  ["gpg", "application/gpg-keys"],
  ["gph", "application/vnd.flographit"],
  ["gpx", "application/gpx+xml"],
  ["gqf", "application/vnd.grafeq"],
  ["gqs", "application/vnd.grafeq"],
  ["gram", "application/srgs"],
  ["gramps", "application/x-gramps-xml"],
  ["gre", "application/vnd.geometry-explorer"],
  ["grv", "application/vnd.groove-injector"],
  ["grxml", "application/srgs+xml"],
  ["gsf", "application/x-font-ghostscript"],
  ["gsheet", "application/vnd.google-apps.spreadsheet"],
  ["gslides", "application/vnd.google-apps.presentation"],
  ["gtar", "application/x-gtar"],
  ["gtm", "application/vnd.groove-tool-message"],
  ["gtw", "model/vnd.gtw"],
  ["gv", "text/vnd.graphviz"],
  ["gxf", "application/gxf"],
  ["gxt", "application/vnd.geonext"],
  ["gz", "application/gzip"],
  ["gzip", "application/gzip"],
  ["h", "text/x-c"],
  ["h261", "video/h261"],
  ["h263", "video/h263"],
  ["h264", "video/h264"],
  ["hal", "application/vnd.hal+xml"],
  ["hbci", "application/vnd.hbci"],
  ["hbs", "text/x-handlebars-template"],
  ["hdd", "application/x-virtualbox-hdd"],
  ["hdf", "application/x-hdf"],
  ["heic", "image/heic"],
  ["heics", "image/heic-sequence"],
  ["heif", "image/heif"],
  ["heifs", "image/heif-sequence"],
  ["hej2", "image/hej2k"],
  ["held", "application/atsc-held+xml"],
  ["hh", "text/x-c"],
  ["hjson", "application/hjson"],
  ["hlp", "application/winhlp"],
  ["hpgl", "application/vnd.hp-hpgl"],
  ["hpid", "application/vnd.hp-hpid"],
  ["hps", "application/vnd.hp-hps"],
  ["hqx", "application/mac-binhex40"],
  ["hsj2", "image/hsj2"],
  ["htc", "text/x-component"],
  ["htke", "application/vnd.kenameaapp"],
  ["htm", "text/html"],
  ["html", "text/html"],
  ["hvd", "application/vnd.yamaha.hv-dic"],
  ["hvp", "application/vnd.yamaha.hv-voice"],
  ["hvs", "application/vnd.yamaha.hv-script"],
  ["i2g", "application/vnd.intergeo"],
  ["icc", "application/vnd.iccprofile"],
  ["ice", "x-conference/x-cooltalk"],
  ["icm", "application/vnd.iccprofile"],
  ["ico", "image/x-icon"],
  ["ics", "text/calendar"],
  ["ief", "image/ief"],
  ["ifb", "text/calendar"],
  ["ifm", "application/vnd.shana.informed.formdata"],
  ["iges", "model/iges"],
  ["igl", "application/vnd.igloader"],
  ["igm", "application/vnd.insors.igm"],
  ["igs", "model/iges"],
  ["igx", "application/vnd.micrografx.igx"],
  ["iif", "application/vnd.shana.informed.interchange"],
  ["img", "application/octet-stream"],
  ["imp", "application/vnd.accpac.simply.imp"],
  ["ims", "application/vnd.ms-ims"],
  ["in", "text/plain"],
  ["ini", "text/plain"],
  ["ink", "application/inkml+xml"],
  ["inkml", "application/inkml+xml"],
  ["install", "application/x-install-instructions"],
  ["iota", "application/vnd.astraea-software.iota"],
  ["ipfix", "application/ipfix"],
  ["ipk", "application/vnd.shana.informed.package"],
  ["irm", "application/vnd.ibm.rights-management"],
  ["irp", "application/vnd.irepository.package+xml"],
  ["iso", "application/x-iso9660-image"],
  ["itp", "application/vnd.shana.informed.formtemplate"],
  ["its", "application/its+xml"],
  ["ivp", "application/vnd.immervision-ivp"],
  ["ivu", "application/vnd.immervision-ivu"],
  ["jad", "text/vnd.sun.j2me.app-descriptor"],
  ["jade", "text/jade"],
  ["jam", "application/vnd.jam"],
  ["jar", "application/java-archive"],
  ["jardiff", "application/x-java-archive-diff"],
  ["java", "text/x-java-source"],
  ["jhc", "image/jphc"],
  ["jisp", "application/vnd.jisp"],
  ["jls", "image/jls"],
  ["jlt", "application/vnd.hp-jlyt"],
  ["jng", "image/x-jng"],
  ["jnlp", "application/x-java-jnlp-file"],
  ["joda", "application/vnd.joost.joda-archive"],
  ["jp2", "image/jp2"],
  ["jpe", "image/jpeg"],
  ["jpeg", "image/jpeg"],
  ["jpf", "image/jpx"],
  ["jpg", "image/jpeg"],
  ["jpg2", "image/jp2"],
  ["jpgm", "video/jpm"],
  ["jpgv", "video/jpeg"],
  ["jph", "image/jph"],
  ["jpm", "video/jpm"],
  ["jpx", "image/jpx"],
  ["js", "application/javascript"],
  ["json", "application/json"],
  ["json5", "application/json5"],
  ["jsonld", "application/ld+json"],
  // https://jsonlines.org/
  ["jsonl", "application/jsonl"],
  ["jsonml", "application/jsonml+json"],
  ["jsx", "text/jsx"],
  ["jxr", "image/jxr"],
  ["jxra", "image/jxra"],
  ["jxrs", "image/jxrs"],
  ["jxs", "image/jxs"],
  ["jxsc", "image/jxsc"],
  ["jxsi", "image/jxsi"],
  ["jxss", "image/jxss"],
  ["kar", "audio/midi"],
  ["karbon", "application/vnd.kde.karbon"],
  ["kdb", "application/octet-stream"],
  ["kdbx", "application/x-keepass2"],
  ["key", "application/x-iwork-keynote-sffkey"],
  ["kfo", "application/vnd.kde.kformula"],
  ["kia", "application/vnd.kidspiration"],
  ["kml", "application/vnd.google-earth.kml+xml"],
  ["kmz", "application/vnd.google-earth.kmz"],
  ["kne", "application/vnd.kinar"],
  ["knp", "application/vnd.kinar"],
  ["kon", "application/vnd.kde.kontour"],
  ["kpr", "application/vnd.kde.kpresenter"],
  ["kpt", "application/vnd.kde.kpresenter"],
  ["kpxx", "application/vnd.ds-keypoint"],
  ["ksp", "application/vnd.kde.kspread"],
  ["ktr", "application/vnd.kahootz"],
  ["ktx", "image/ktx"],
  ["ktx2", "image/ktx2"],
  ["ktz", "application/vnd.kahootz"],
  ["kwd", "application/vnd.kde.kword"],
  ["kwt", "application/vnd.kde.kword"],
  ["lasxml", "application/vnd.las.las+xml"],
  ["latex", "application/x-latex"],
  ["lbd", "application/vnd.llamagraphics.life-balance.desktop"],
  ["lbe", "application/vnd.llamagraphics.life-balance.exchange+xml"],
  ["les", "application/vnd.hhe.lesson-player"],
  ["less", "text/less"],
  ["lgr", "application/lgr+xml"],
  ["lha", "application/octet-stream"],
  ["link66", "application/vnd.route66.link66+xml"],
  ["list", "text/plain"],
  ["list3820", "application/vnd.ibm.modcap"],
  ["listafp", "application/vnd.ibm.modcap"],
  ["litcoffee", "text/coffeescript"],
  ["lnk", "application/x-ms-shortcut"],
  ["log", "text/plain"],
  ["lostxml", "application/lost+xml"],
  ["lrf", "application/octet-stream"],
  ["lrm", "application/vnd.ms-lrm"],
  ["ltf", "application/vnd.frogans.ltf"],
  ["lua", "text/x-lua"],
  ["luac", "application/x-lua-bytecode"],
  ["lvp", "audio/vnd.lucent.voice"],
  ["lwp", "application/vnd.lotus-wordpro"],
  ["lzh", "application/octet-stream"],
  ["m1v", "video/mpeg"],
  ["m2a", "audio/mpeg"],
  ["m2v", "video/mpeg"],
  ["m3a", "audio/mpeg"],
  ["m3u", "text/plain"],
  ["m3u8", "application/vnd.apple.mpegurl"],
  ["m4a", "audio/x-m4a"],
  ["m4p", "application/mp4"],
  ["m4s", "video/iso.segment"],
  ["m4u", "application/vnd.mpegurl"],
  ["m4v", "video/x-m4v"],
  ["m13", "application/x-msmediaview"],
  ["m14", "application/x-msmediaview"],
  ["m21", "application/mp21"],
  ["ma", "application/mathematica"],
  ["mads", "application/mads+xml"],
  ["maei", "application/mmt-aei+xml"],
  ["mag", "application/vnd.ecowin.chart"],
  ["maker", "application/vnd.framemaker"],
  ["man", "text/troff"],
  ["manifest", "text/cache-manifest"],
  ["map", "application/json"],
  ["mar", "application/octet-stream"],
  ["markdown", "text/markdown"],
  ["mathml", "application/mathml+xml"],
  ["mb", "application/mathematica"],
  ["mbk", "application/vnd.mobius.mbk"],
  ["mbox", "application/mbox"],
  ["mc1", "application/vnd.medcalcdata"],
  ["mcd", "application/vnd.mcd"],
  ["mcurl", "text/vnd.curl.mcurl"],
  ["md", "text/markdown"],
  ["mdb", "application/x-msaccess"],
  ["mdi", "image/vnd.ms-modi"],
  ["mdx", "text/mdx"],
  ["me", "text/troff"],
  ["mesh", "model/mesh"],
  ["meta4", "application/metalink4+xml"],
  ["metalink", "application/metalink+xml"],
  ["mets", "application/mets+xml"],
  ["mfm", "application/vnd.mfmp"],
  ["mft", "application/rpki-manifest"],
  ["mgp", "application/vnd.osgeo.mapguide.package"],
  ["mgz", "application/vnd.proteus.magazine"],
  ["mid", "audio/midi"],
  ["midi", "audio/midi"],
  ["mie", "application/x-mie"],
  ["mif", "application/vnd.mif"],
  ["mime", "message/rfc822"],
  ["mj2", "video/mj2"],
  ["mjp2", "video/mj2"],
  ["mjs", "application/javascript"],
  ["mk3d", "video/x-matroska"],
  ["mka", "audio/x-matroska"],
  ["mkd", "text/x-markdown"],
  ["mks", "video/x-matroska"],
  ["mkv", "video/x-matroska"],
  ["mlp", "application/vnd.dolby.mlp"],
  ["mmd", "application/vnd.chipnuts.karaoke-mmd"],
  ["mmf", "application/vnd.smaf"],
  ["mml", "text/mathml"],
  ["mmr", "image/vnd.fujixerox.edmics-mmr"],
  ["mng", "video/x-mng"],
  ["mny", "application/x-msmoney"],
  ["mobi", "application/x-mobipocket-ebook"],
  ["mods", "application/mods+xml"],
  ["mov", "video/quicktime"],
  ["movie", "video/x-sgi-movie"],
  ["mp2", "audio/mpeg"],
  ["mp2a", "audio/mpeg"],
  ["mp3", "audio/mpeg"],
  ["mp4", "video/mp4"],
  ["mp4a", "audio/mp4"],
  ["mp4s", "application/mp4"],
  ["mp4v", "video/mp4"],
  ["mp21", "application/mp21"],
  ["mpc", "application/vnd.mophun.certificate"],
  ["mpd", "application/dash+xml"],
  ["mpe", "video/mpeg"],
  ["mpeg", "video/mpeg"],
  ["mpg", "video/mpeg"],
  ["mpg4", "video/mp4"],
  ["mpga", "audio/mpeg"],
  ["mpkg", "application/vnd.apple.installer+xml"],
  ["mpm", "application/vnd.blueice.multipass"],
  ["mpn", "application/vnd.mophun.application"],
  ["mpp", "application/vnd.ms-project"],
  ["mpt", "application/vnd.ms-project"],
  ["mpy", "application/vnd.ibm.minipay"],
  ["mqy", "application/vnd.mobius.mqy"],
  ["mrc", "application/marc"],
  ["mrcx", "application/marcxml+xml"],
  ["ms", "text/troff"],
  ["mscml", "application/mediaservercontrol+xml"],
  ["mseed", "application/vnd.fdsn.mseed"],
  ["mseq", "application/vnd.mseq"],
  ["msf", "application/vnd.epson.msf"],
  ["msg", "application/vnd.ms-outlook"],
  ["msh", "model/mesh"],
  ["msi", "application/x-msdownload"],
  ["msl", "application/vnd.mobius.msl"],
  ["msm", "application/octet-stream"],
  ["msp", "application/octet-stream"],
  ["msty", "application/vnd.muvee.style"],
  ["mtl", "model/mtl"],
  ["mts", "model/vnd.mts"],
  ["mus", "application/vnd.musician"],
  ["musd", "application/mmt-usd+xml"],
  ["musicxml", "application/vnd.recordare.musicxml+xml"],
  ["mvb", "application/x-msmediaview"],
  ["mvt", "application/vnd.mapbox-vector-tile"],
  ["mwf", "application/vnd.mfer"],
  ["mxf", "application/mxf"],
  ["mxl", "application/vnd.recordare.musicxml"],
  ["mxmf", "audio/mobile-xmf"],
  ["mxml", "application/xv+xml"],
  ["mxs", "application/vnd.triscape.mxs"],
  ["mxu", "video/vnd.mpegurl"],
  ["n-gage", "application/vnd.nokia.n-gage.symbian.install"],
  ["n3", "text/n3"],
  ["nb", "application/mathematica"],
  ["nbp", "application/vnd.wolfram.player"],
  ["nc", "application/x-netcdf"],
  ["ncx", "application/x-dtbncx+xml"],
  ["nfo", "text/x-nfo"],
  ["ngdat", "application/vnd.nokia.n-gage.data"],
  ["nitf", "application/vnd.nitf"],
  ["nlu", "application/vnd.neurolanguage.nlu"],
  ["nml", "application/vnd.enliven"],
  ["nnd", "application/vnd.noblenet-directory"],
  ["nns", "application/vnd.noblenet-sealer"],
  ["nnw", "application/vnd.noblenet-web"],
  ["npx", "image/vnd.net-fpx"],
  ["nq", "application/n-quads"],
  ["nsc", "application/x-conference"],
  ["nsf", "application/vnd.lotus-notes"],
  ["nt", "application/n-triples"],
  ["ntf", "application/vnd.nitf"],
  ["numbers", "application/x-iwork-numbers-sffnumbers"],
  ["nzb", "application/x-nzb"],
  ["oa2", "application/vnd.fujitsu.oasys2"],
  ["oa3", "application/vnd.fujitsu.oasys3"],
  ["oas", "application/vnd.fujitsu.oasys"],
  ["obd", "application/x-msbinder"],
  ["obgx", "application/vnd.openblox.game+xml"],
  ["obj", "model/obj"],
  ["oda", "application/oda"],
  ["odb", "application/vnd.oasis.opendocument.database"],
  ["odc", "application/vnd.oasis.opendocument.chart"],
  ["odf", "application/vnd.oasis.opendocument.formula"],
  ["odft", "application/vnd.oasis.opendocument.formula-template"],
  ["odg", "application/vnd.oasis.opendocument.graphics"],
  ["odi", "application/vnd.oasis.opendocument.image"],
  ["odm", "application/vnd.oasis.opendocument.text-master"],
  ["odp", "application/vnd.oasis.opendocument.presentation"],
  ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
  ["odt", "application/vnd.oasis.opendocument.text"],
  ["oga", "audio/ogg"],
  ["ogex", "model/vnd.opengex"],
  ["ogg", "audio/ogg"],
  ["ogv", "video/ogg"],
  ["ogx", "application/ogg"],
  ["omdoc", "application/omdoc+xml"],
  ["onepkg", "application/onenote"],
  ["onetmp", "application/onenote"],
  ["onetoc", "application/onenote"],
  ["onetoc2", "application/onenote"],
  ["opf", "application/oebps-package+xml"],
  ["opml", "text/x-opml"],
  ["oprc", "application/vnd.palm"],
  ["opus", "audio/ogg"],
  ["org", "text/x-org"],
  ["osf", "application/vnd.yamaha.openscoreformat"],
  ["osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml"],
  ["osm", "application/vnd.openstreetmap.data+xml"],
  ["otc", "application/vnd.oasis.opendocument.chart-template"],
  ["otf", "font/otf"],
  ["otg", "application/vnd.oasis.opendocument.graphics-template"],
  ["oth", "application/vnd.oasis.opendocument.text-web"],
  ["oti", "application/vnd.oasis.opendocument.image-template"],
  ["otp", "application/vnd.oasis.opendocument.presentation-template"],
  ["ots", "application/vnd.oasis.opendocument.spreadsheet-template"],
  ["ott", "application/vnd.oasis.opendocument.text-template"],
  ["ova", "application/x-virtualbox-ova"],
  ["ovf", "application/x-virtualbox-ovf"],
  ["owl", "application/rdf+xml"],
  ["oxps", "application/oxps"],
  ["oxt", "application/vnd.openofficeorg.extension"],
  ["p", "text/x-pascal"],
  ["p7a", "application/x-pkcs7-signature"],
  ["p7b", "application/x-pkcs7-certificates"],
  ["p7c", "application/pkcs7-mime"],
  ["p7m", "application/pkcs7-mime"],
  ["p7r", "application/x-pkcs7-certreqresp"],
  ["p7s", "application/pkcs7-signature"],
  ["p8", "application/pkcs8"],
  ["p10", "application/x-pkcs10"],
  ["p12", "application/x-pkcs12"],
  ["pac", "application/x-ns-proxy-autoconfig"],
  ["pages", "application/x-iwork-pages-sffpages"],
  ["pas", "text/x-pascal"],
  ["paw", "application/vnd.pawaafile"],
  ["pbd", "application/vnd.powerbuilder6"],
  ["pbm", "image/x-portable-bitmap"],
  ["pcap", "application/vnd.tcpdump.pcap"],
  ["pcf", "application/x-font-pcf"],
  ["pcl", "application/vnd.hp-pcl"],
  ["pclxl", "application/vnd.hp-pclxl"],
  ["pct", "image/x-pict"],
  ["pcurl", "application/vnd.curl.pcurl"],
  ["pcx", "image/x-pcx"],
  ["pdb", "application/x-pilot"],
  ["pde", "text/x-processing"],
  ["pdf", "application/pdf"],
  ["pem", "application/x-x509-user-cert"],
  ["pfa", "application/x-font-type1"],
  ["pfb", "application/x-font-type1"],
  ["pfm", "application/x-font-type1"],
  ["pfr", "application/font-tdpfr"],
  ["pfx", "application/x-pkcs12"],
  ["pgm", "image/x-portable-graymap"],
  ["pgn", "application/x-chess-pgn"],
  ["pgp", "application/pgp"],
  ["php", "application/x-httpd-php"],
  ["php3", "application/x-httpd-php"],
  ["php4", "application/x-httpd-php"],
  ["phps", "application/x-httpd-php-source"],
  ["phtml", "application/x-httpd-php"],
  ["pic", "image/x-pict"],
  ["pkg", "application/octet-stream"],
  ["pki", "application/pkixcmp"],
  ["pkipath", "application/pkix-pkipath"],
  ["pkpass", "application/vnd.apple.pkpass"],
  ["pl", "application/x-perl"],
  ["plb", "application/vnd.3gpp.pic-bw-large"],
  ["plc", "application/vnd.mobius.plc"],
  ["plf", "application/vnd.pocketlearn"],
  ["pls", "application/pls+xml"],
  ["pm", "application/x-perl"],
  ["pml", "application/vnd.ctc-posml"],
  ["png", "image/png"],
  ["pnm", "image/x-portable-anymap"],
  ["portpkg", "application/vnd.macports.portpkg"],
  ["pot", "application/vnd.ms-powerpoint"],
  ["potm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["potx", "application/vnd.openxmlformats-officedocument.presentationml.template"],
  ["ppa", "application/vnd.ms-powerpoint"],
  ["ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"],
  ["ppd", "application/vnd.cups-ppd"],
  ["ppm", "image/x-portable-pixmap"],
  ["pps", "application/vnd.ms-powerpoint"],
  ["ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"],
  ["ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"],
  ["ppt", "application/powerpoint"],
  ["pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
  ["pqa", "application/vnd.palm"],
  ["prc", "application/x-pilot"],
  ["pre", "application/vnd.lotus-freelance"],
  ["prf", "application/pics-rules"],
  ["provx", "application/provenance+xml"],
  ["ps", "application/postscript"],
  ["psb", "application/vnd.3gpp.pic-bw-small"],
  ["psd", "application/x-photoshop"],
  ["psf", "application/x-font-linux-psf"],
  ["pskcxml", "application/pskc+xml"],
  ["pti", "image/prs.pti"],
  ["ptid", "application/vnd.pvi.ptid1"],
  ["pub", "application/x-mspublisher"],
  ["pvb", "application/vnd.3gpp.pic-bw-var"],
  ["pwn", "application/vnd.3m.post-it-notes"],
  ["pya", "audio/vnd.ms-playready.media.pya"],
  ["pyv", "video/vnd.ms-playready.media.pyv"],
  ["qam", "application/vnd.epson.quickanime"],
  ["qbo", "application/vnd.intu.qbo"],
  ["qfx", "application/vnd.intu.qfx"],
  ["qps", "application/vnd.publishare-delta-tree"],
  ["qt", "video/quicktime"],
  ["qwd", "application/vnd.quark.quarkxpress"],
  ["qwt", "application/vnd.quark.quarkxpress"],
  ["qxb", "application/vnd.quark.quarkxpress"],
  ["qxd", "application/vnd.quark.quarkxpress"],
  ["qxl", "application/vnd.quark.quarkxpress"],
  ["qxt", "application/vnd.quark.quarkxpress"],
  ["ra", "audio/x-realaudio"],
  ["ram", "audio/x-pn-realaudio"],
  ["raml", "application/raml+yaml"],
  ["rapd", "application/route-apd+xml"],
  ["rar", "application/x-rar"],
  ["ras", "image/x-cmu-raster"],
  ["rcprofile", "application/vnd.ipunplugged.rcprofile"],
  ["rdf", "application/rdf+xml"],
  ["rdz", "application/vnd.data-vision.rdz"],
  ["relo", "application/p2p-overlay+xml"],
  ["rep", "application/vnd.businessobjects"],
  ["res", "application/x-dtbresource+xml"],
  ["rgb", "image/x-rgb"],
  ["rif", "application/reginfo+xml"],
  ["rip", "audio/vnd.rip"],
  ["ris", "application/x-research-info-systems"],
  ["rl", "application/resource-lists+xml"],
  ["rlc", "image/vnd.fujixerox.edmics-rlc"],
  ["rld", "application/resource-lists-diff+xml"],
  ["rm", "audio/x-pn-realaudio"],
  ["rmi", "audio/midi"],
  ["rmp", "audio/x-pn-realaudio-plugin"],
  ["rms", "application/vnd.jcp.javame.midlet-rms"],
  ["rmvb", "application/vnd.rn-realmedia-vbr"],
  ["rnc", "application/relax-ng-compact-syntax"],
  ["rng", "application/xml"],
  ["roa", "application/rpki-roa"],
  ["roff", "text/troff"],
  ["rp9", "application/vnd.cloanto.rp9"],
  ["rpm", "audio/x-pn-realaudio-plugin"],
  ["rpss", "application/vnd.nokia.radio-presets"],
  ["rpst", "application/vnd.nokia.radio-preset"],
  ["rq", "application/sparql-query"],
  ["rs", "application/rls-services+xml"],
  ["rsa", "application/x-pkcs7"],
  ["rsat", "application/atsc-rsat+xml"],
  ["rsd", "application/rsd+xml"],
  ["rsheet", "application/urc-ressheet+xml"],
  ["rss", "application/rss+xml"],
  ["rtf", "text/rtf"],
  ["rtx", "text/richtext"],
  ["run", "application/x-makeself"],
  ["rusd", "application/route-usd+xml"],
  ["rv", "video/vnd.rn-realvideo"],
  ["s", "text/x-asm"],
  ["s3m", "audio/s3m"],
  ["saf", "application/vnd.yamaha.smaf-audio"],
  ["sass", "text/x-sass"],
  ["sbml", "application/sbml+xml"],
  ["sc", "application/vnd.ibm.secure-container"],
  ["scd", "application/x-msschedule"],
  ["scm", "application/vnd.lotus-screencam"],
  ["scq", "application/scvp-cv-request"],
  ["scs", "application/scvp-cv-response"],
  ["scss", "text/x-scss"],
  ["scurl", "text/vnd.curl.scurl"],
  ["sda", "application/vnd.stardivision.draw"],
  ["sdc", "application/vnd.stardivision.calc"],
  ["sdd", "application/vnd.stardivision.impress"],
  ["sdkd", "application/vnd.solent.sdkm+xml"],
  ["sdkm", "application/vnd.solent.sdkm+xml"],
  ["sdp", "application/sdp"],
  ["sdw", "application/vnd.stardivision.writer"],
  ["sea", "application/octet-stream"],
  ["see", "application/vnd.seemail"],
  ["seed", "application/vnd.fdsn.seed"],
  ["sema", "application/vnd.sema"],
  ["semd", "application/vnd.semd"],
  ["semf", "application/vnd.semf"],
  ["senmlx", "application/senml+xml"],
  ["sensmlx", "application/sensml+xml"],
  ["ser", "application/java-serialized-object"],
  ["setpay", "application/set-payment-initiation"],
  ["setreg", "application/set-registration-initiation"],
  ["sfd-hdstx", "application/vnd.hydrostatix.sof-data"],
  ["sfs", "application/vnd.spotfire.sfs"],
  ["sfv", "text/x-sfv"],
  ["sgi", "image/sgi"],
  ["sgl", "application/vnd.stardivision.writer-global"],
  ["sgm", "text/sgml"],
  ["sgml", "text/sgml"],
  ["sh", "application/x-sh"],
  ["shar", "application/x-shar"],
  ["shex", "text/shex"],
  ["shf", "application/shf+xml"],
  ["shtml", "text/html"],
  ["sid", "image/x-mrsid-image"],
  ["sieve", "application/sieve"],
  ["sig", "application/pgp-signature"],
  ["sil", "audio/silk"],
  ["silo", "model/mesh"],
  ["sis", "application/vnd.symbian.install"],
  ["sisx", "application/vnd.symbian.install"],
  ["sit", "application/x-stuffit"],
  ["sitx", "application/x-stuffitx"],
  ["siv", "application/sieve"],
  ["skd", "application/vnd.koan"],
  ["skm", "application/vnd.koan"],
  ["skp", "application/vnd.koan"],
  ["skt", "application/vnd.koan"],
  ["sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12"],
  ["sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"],
  ["slim", "text/slim"],
  ["slm", "text/slim"],
  ["sls", "application/route-s-tsid+xml"],
  ["slt", "application/vnd.epson.salt"],
  ["sm", "application/vnd.stepmania.stepchart"],
  ["smf", "application/vnd.stardivision.math"],
  ["smi", "application/smil"],
  ["smil", "application/smil"],
  ["smv", "video/x-smv"],
  ["smzip", "application/vnd.stepmania.package"],
  ["snd", "audio/basic"],
  ["snf", "application/x-font-snf"],
  ["so", "application/octet-stream"],
  ["spc", "application/x-pkcs7-certificates"],
  ["spdx", "text/spdx"],
  ["spf", "application/vnd.yamaha.smaf-phrase"],
  ["spl", "application/x-futuresplash"],
  ["spot", "text/vnd.in3d.spot"],
  ["spp", "application/scvp-vp-response"],
  ["spq", "application/scvp-vp-request"],
  ["spx", "audio/ogg"],
  ["sql", "application/x-sql"],
  ["src", "application/x-wais-source"],
  ["srt", "application/x-subrip"],
  ["sru", "application/sru+xml"],
  ["srx", "application/sparql-results+xml"],
  ["ssdl", "application/ssdl+xml"],
  ["sse", "application/vnd.kodak-descriptor"],
  ["ssf", "application/vnd.epson.ssf"],
  ["ssml", "application/ssml+xml"],
  ["sst", "application/octet-stream"],
  ["st", "application/vnd.sailingtracker.track"],
  ["stc", "application/vnd.sun.xml.calc.template"],
  ["std", "application/vnd.sun.xml.draw.template"],
  ["stf", "application/vnd.wt.stf"],
  ["sti", "application/vnd.sun.xml.impress.template"],
  ["stk", "application/hyperstudio"],
  ["stl", "model/stl"],
  ["stpx", "model/step+xml"],
  ["stpxz", "model/step-xml+zip"],
  ["stpz", "model/step+zip"],
  ["str", "application/vnd.pg.format"],
  ["stw", "application/vnd.sun.xml.writer.template"],
  ["styl", "text/stylus"],
  ["stylus", "text/stylus"],
  ["sub", "text/vnd.dvb.subtitle"],
  ["sus", "application/vnd.sus-calendar"],
  ["susp", "application/vnd.sus-calendar"],
  ["sv4cpio", "application/x-sv4cpio"],
  ["sv4crc", "application/x-sv4crc"],
  ["svc", "application/vnd.dvb.service"],
  ["svd", "application/vnd.svd"],
  ["svg", "image/svg+xml"],
  ["svgz", "image/svg+xml"],
  ["swa", "application/x-director"],
  ["swf", "application/x-shockwave-flash"],
  ["swi", "application/vnd.aristanetworks.swi"],
  ["swidtag", "application/swid+xml"],
  ["sxc", "application/vnd.sun.xml.calc"],
  ["sxd", "application/vnd.sun.xml.draw"],
  ["sxg", "application/vnd.sun.xml.writer.global"],
  ["sxi", "application/vnd.sun.xml.impress"],
  ["sxm", "application/vnd.sun.xml.math"],
  ["sxw", "application/vnd.sun.xml.writer"],
  ["t", "text/troff"],
  ["t3", "application/x-t3vm-image"],
  ["t38", "image/t38"],
  ["taglet", "application/vnd.mynfc"],
  ["tao", "application/vnd.tao.intent-module-archive"],
  ["tap", "image/vnd.tencent.tap"],
  ["tar", "application/x-tar"],
  ["tcap", "application/vnd.3gpp2.tcap"],
  ["tcl", "application/x-tcl"],
  ["td", "application/urc-targetdesc+xml"],
  ["teacher", "application/vnd.smart.teacher"],
  ["tei", "application/tei+xml"],
  ["teicorpus", "application/tei+xml"],
  ["tex", "application/x-tex"],
  ["texi", "application/x-texinfo"],
  ["texinfo", "application/x-texinfo"],
  ["text", "text/plain"],
  ["tfi", "application/thraud+xml"],
  ["tfm", "application/x-tex-tfm"],
  ["tfx", "image/tiff-fx"],
  ["tga", "image/x-tga"],
  ["tgz", "application/x-tar"],
  ["thmx", "application/vnd.ms-officetheme"],
  ["tif", "image/tiff"],
  ["tiff", "image/tiff"],
  ["tk", "application/x-tcl"],
  ["tmo", "application/vnd.tmobile-livetv"],
  ["toml", "application/toml"],
  ["torrent", "application/x-bittorrent"],
  ["tpl", "application/vnd.groove-tool-template"],
  ["tpt", "application/vnd.trid.tpt"],
  ["tr", "text/troff"],
  ["tra", "application/vnd.trueapp"],
  ["trig", "application/trig"],
  ["trm", "application/x-msterminal"],
  ["ts", "video/mp2t"],
  ["tsd", "application/timestamped-data"],
  ["tsv", "text/tab-separated-values"],
  ["ttc", "font/collection"],
  ["ttf", "font/ttf"],
  ["ttl", "text/turtle"],
  ["ttml", "application/ttml+xml"],
  ["twd", "application/vnd.simtech-mindmapper"],
  ["twds", "application/vnd.simtech-mindmapper"],
  ["txd", "application/vnd.genomatix.tuxedo"],
  ["txf", "application/vnd.mobius.txf"],
  ["txt", "text/plain"],
  ["u8dsn", "message/global-delivery-status"],
  ["u8hdr", "message/global-headers"],
  ["u8mdn", "message/global-disposition-notification"],
  ["u8msg", "message/global"],
  ["u32", "application/x-authorware-bin"],
  ["ubj", "application/ubjson"],
  ["udeb", "application/x-debian-package"],
  ["ufd", "application/vnd.ufdl"],
  ["ufdl", "application/vnd.ufdl"],
  ["ulx", "application/x-glulx"],
  ["umj", "application/vnd.umajin"],
  ["unityweb", "application/vnd.unity"],
  ["uoml", "application/vnd.uoml+xml"],
  ["uri", "text/uri-list"],
  ["uris", "text/uri-list"],
  ["urls", "text/uri-list"],
  ["usdz", "model/vnd.usdz+zip"],
  ["ustar", "application/x-ustar"],
  ["utz", "application/vnd.uiq.theme"],
  ["uu", "text/x-uuencode"],
  ["uva", "audio/vnd.dece.audio"],
  ["uvd", "application/vnd.dece.data"],
  ["uvf", "application/vnd.dece.data"],
  ["uvg", "image/vnd.dece.graphic"],
  ["uvh", "video/vnd.dece.hd"],
  ["uvi", "image/vnd.dece.graphic"],
  ["uvm", "video/vnd.dece.mobile"],
  ["uvp", "video/vnd.dece.pd"],
  ["uvs", "video/vnd.dece.sd"],
  ["uvt", "application/vnd.dece.ttml+xml"],
  ["uvu", "video/vnd.uvvu.mp4"],
  ["uvv", "video/vnd.dece.video"],
  ["uvva", "audio/vnd.dece.audio"],
  ["uvvd", "application/vnd.dece.data"],
  ["uvvf", "application/vnd.dece.data"],
  ["uvvg", "image/vnd.dece.graphic"],
  ["uvvh", "video/vnd.dece.hd"],
  ["uvvi", "image/vnd.dece.graphic"],
  ["uvvm", "video/vnd.dece.mobile"],
  ["uvvp", "video/vnd.dece.pd"],
  ["uvvs", "video/vnd.dece.sd"],
  ["uvvt", "application/vnd.dece.ttml+xml"],
  ["uvvu", "video/vnd.uvvu.mp4"],
  ["uvvv", "video/vnd.dece.video"],
  ["uvvx", "application/vnd.dece.unspecified"],
  ["uvvz", "application/vnd.dece.zip"],
  ["uvx", "application/vnd.dece.unspecified"],
  ["uvz", "application/vnd.dece.zip"],
  ["vbox", "application/x-virtualbox-vbox"],
  ["vbox-extpack", "application/x-virtualbox-vbox-extpack"],
  ["vcard", "text/vcard"],
  ["vcd", "application/x-cdlink"],
  ["vcf", "text/x-vcard"],
  ["vcg", "application/vnd.groove-vcard"],
  ["vcs", "text/x-vcalendar"],
  ["vcx", "application/vnd.vcx"],
  ["vdi", "application/x-virtualbox-vdi"],
  ["vds", "model/vnd.sap.vds"],
  ["vhd", "application/x-virtualbox-vhd"],
  ["vis", "application/vnd.visionary"],
  ["viv", "video/vnd.vivo"],
  ["vlc", "application/videolan"],
  ["vmdk", "application/x-virtualbox-vmdk"],
  ["vob", "video/x-ms-vob"],
  ["vor", "application/vnd.stardivision.writer"],
  ["vox", "application/x-authorware-bin"],
  ["vrml", "model/vrml"],
  ["vsd", "application/vnd.visio"],
  ["vsf", "application/vnd.vsf"],
  ["vss", "application/vnd.visio"],
  ["vst", "application/vnd.visio"],
  ["vsw", "application/vnd.visio"],
  ["vtf", "image/vnd.valve.source.texture"],
  ["vtt", "text/vtt"],
  ["vtu", "model/vnd.vtu"],
  ["vxml", "application/voicexml+xml"],
  ["w3d", "application/x-director"],
  ["wad", "application/x-doom"],
  ["wadl", "application/vnd.sun.wadl+xml"],
  ["war", "application/java-archive"],
  ["wasm", "application/wasm"],
  ["wav", "audio/x-wav"],
  ["wax", "audio/x-ms-wax"],
  ["wbmp", "image/vnd.wap.wbmp"],
  ["wbs", "application/vnd.criticaltools.wbs+xml"],
  ["wbxml", "application/wbxml"],
  ["wcm", "application/vnd.ms-works"],
  ["wdb", "application/vnd.ms-works"],
  ["wdp", "image/vnd.ms-photo"],
  ["weba", "audio/webm"],
  ["webapp", "application/x-web-app-manifest+json"],
  ["webm", "video/webm"],
  ["webmanifest", "application/manifest+json"],
  ["webp", "image/webp"],
  ["wg", "application/vnd.pmi.widget"],
  ["wgt", "application/widget"],
  ["wks", "application/vnd.ms-works"],
  ["wm", "video/x-ms-wm"],
  ["wma", "audio/x-ms-wma"],
  ["wmd", "application/x-ms-wmd"],
  ["wmf", "image/wmf"],
  ["wml", "text/vnd.wap.wml"],
  ["wmlc", "application/wmlc"],
  ["wmls", "text/vnd.wap.wmlscript"],
  ["wmlsc", "application/vnd.wap.wmlscriptc"],
  ["wmv", "video/x-ms-wmv"],
  ["wmx", "video/x-ms-wmx"],
  ["wmz", "application/x-msmetafile"],
  ["woff", "font/woff"],
  ["woff2", "font/woff2"],
  ["word", "application/msword"],
  ["wpd", "application/vnd.wordperfect"],
  ["wpl", "application/vnd.ms-wpl"],
  ["wps", "application/vnd.ms-works"],
  ["wqd", "application/vnd.wqd"],
  ["wri", "application/x-mswrite"],
  ["wrl", "model/vrml"],
  ["wsc", "message/vnd.wfa.wsc"],
  ["wsdl", "application/wsdl+xml"],
  ["wspolicy", "application/wspolicy+xml"],
  ["wtb", "application/vnd.webturbo"],
  ["wvx", "video/x-ms-wvx"],
  ["x3d", "model/x3d+xml"],
  ["x3db", "model/x3d+fastinfoset"],
  ["x3dbz", "model/x3d+binary"],
  ["x3dv", "model/x3d-vrml"],
  ["x3dvz", "model/x3d+vrml"],
  ["x3dz", "model/x3d+xml"],
  ["x32", "application/x-authorware-bin"],
  ["x_b", "model/vnd.parasolid.transmit.binary"],
  ["x_t", "model/vnd.parasolid.transmit.text"],
  ["xaml", "application/xaml+xml"],
  ["xap", "application/x-silverlight-app"],
  ["xar", "application/vnd.xara"],
  ["xav", "application/xcap-att+xml"],
  ["xbap", "application/x-ms-xbap"],
  ["xbd", "application/vnd.fujixerox.docuworks.binder"],
  ["xbm", "image/x-xbitmap"],
  ["xca", "application/xcap-caps+xml"],
  ["xcs", "application/calendar+xml"],
  ["xdf", "application/xcap-diff+xml"],
  ["xdm", "application/vnd.syncml.dm+xml"],
  ["xdp", "application/vnd.adobe.xdp+xml"],
  ["xdssc", "application/dssc+xml"],
  ["xdw", "application/vnd.fujixerox.docuworks"],
  ["xel", "application/xcap-el+xml"],
  ["xenc", "application/xenc+xml"],
  ["xer", "application/patch-ops-error+xml"],
  ["xfdf", "application/vnd.adobe.xfdf"],
  ["xfdl", "application/vnd.xfdl"],
  ["xht", "application/xhtml+xml"],
  ["xhtml", "application/xhtml+xml"],
  ["xhvml", "application/xv+xml"],
  ["xif", "image/vnd.xiff"],
  ["xl", "application/excel"],
  ["xla", "application/vnd.ms-excel"],
  ["xlam", "application/vnd.ms-excel.addin.macroEnabled.12"],
  ["xlc", "application/vnd.ms-excel"],
  ["xlf", "application/xliff+xml"],
  ["xlm", "application/vnd.ms-excel"],
  ["xls", "application/vnd.ms-excel"],
  ["xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"],
  ["xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"],
  ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  ["xlt", "application/vnd.ms-excel"],
  ["xltm", "application/vnd.ms-excel.template.macroEnabled.12"],
  ["xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"],
  ["xlw", "application/vnd.ms-excel"],
  ["xm", "audio/xm"],
  ["xml", "application/xml"],
  ["xns", "application/xcap-ns+xml"],
  ["xo", "application/vnd.olpc-sugar"],
  ["xop", "application/xop+xml"],
  ["xpi", "application/x-xpinstall"],
  ["xpl", "application/xproc+xml"],
  ["xpm", "image/x-xpixmap"],
  ["xpr", "application/vnd.is-xpr"],
  ["xps", "application/vnd.ms-xpsdocument"],
  ["xpw", "application/vnd.intercon.formnet"],
  ["xpx", "application/vnd.intercon.formnet"],
  ["xsd", "application/xml"],
  ["xsl", "application/xml"],
  ["xslt", "application/xslt+xml"],
  ["xsm", "application/vnd.syncml+xml"],
  ["xspf", "application/xspf+xml"],
  ["xul", "application/vnd.mozilla.xul+xml"],
  ["xvm", "application/xv+xml"],
  ["xvml", "application/xv+xml"],
  ["xwd", "image/x-xwindowdump"],
  ["xyz", "chemical/x-xyz"],
  ["xz", "application/x-xz"],
  ["yaml", "text/yaml"],
  ["yang", "application/yang"],
  ["yin", "application/yin+xml"],
  ["yml", "text/yaml"],
  ["ymp", "text/x-suse-ymp"],
  ["z", "application/x-compress"],
  ["z1", "application/x-zmachine"],
  ["z2", "application/x-zmachine"],
  ["z3", "application/x-zmachine"],
  ["z4", "application/x-zmachine"],
  ["z5", "application/x-zmachine"],
  ["z6", "application/x-zmachine"],
  ["z7", "application/x-zmachine"],
  ["z8", "application/x-zmachine"],
  ["zaz", "application/vnd.zzazz.deck+xml"],
  ["zip", "application/zip"],
  ["zir", "application/vnd.zul"],
  ["zirz", "application/vnd.zul"],
  ["zmm", "application/vnd.handheld-entertainment+xml"],
  ["zsh", "text/x-scriptzsh"]
]);
function toFileWithPath(file, path3, h) {
  const f = withMimeType(file);
  const { webkitRelativePath } = file;
  const p = typeof path3 === "string" ? path3 : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : `./${file.name}`;
  if (typeof f.path !== "string") {
    setObjProp(f, "path", p);
  }
  if (h !== void 0) {
    Object.defineProperty(f, "handle", {
      value: h,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  setObjProp(f, "relativePath", p);
  return f;
}
function withMimeType(file) {
  const { name } = file;
  const hasExtension = name && name.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    const ext = name.split(".").pop().toLowerCase();
    const type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}
function setObjProp(f, key, value) {
  Object.defineProperty(f, key, {
    value,
    writable: false,
    configurable: false,
    enumerable: true
  });
}

// node_modules/file-selector/dist/es2015/file-selector.js
var FILES_TO_IGNORE = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  // macOs
  "Thumbs.db"
  // Windows
];
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function* () {
    if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {
      return getDataTransferFiles(evt.dataTransfer, evt.type);
    } else if (isChangeEvt(evt)) {
      return getInputFiles(evt);
    } else if (Array.isArray(evt) && evt.every((item) => "getFile" in item && typeof item.getFile === "function")) {
      return getFsHandleFiles(evt);
    }
    return [];
  });
}
function isDataTransfer(value) {
  return isObject(value);
}
function isChangeEvt(value) {
  return isObject(value) && isObject(value.target);
}
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function getInputFiles(evt) {
  return fromList(evt.target.files).map((file) => toFileWithPath(file));
}
function getFsHandleFiles(handles) {
  return __awaiter(this, void 0, void 0, function* () {
    const files = yield Promise.all(handles.map((h) => h.getFile()));
    return files.map((file) => toFileWithPath(file));
  });
}
function getDataTransferFiles(dt, type) {
  return __awaiter(this, void 0, void 0, function* () {
    if (dt.items) {
      const items = fromList(dt.items).filter((item) => item.kind === "file");
      if (type !== "drop") {
        return items;
      }
      const files = yield Promise.all(items.map(toFilePromises));
      return noIgnoredFiles(flatten(files));
    }
    return noIgnoredFiles(fromList(dt.files).map((file) => toFileWithPath(file)));
  });
}
function noIgnoredFiles(files) {
  return files.filter((file) => FILES_TO_IGNORE.indexOf(file.name) === -1);
}
function fromList(items) {
  if (items === null) {
    return [];
  }
  const files = [];
  for (let i = 0; i < items.length; i++) {
    const file = items[i];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  const entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item, entry);
}
function flatten(items) {
  return items.reduce((acc, files) => [
    ...acc,
    ...Array.isArray(files) ? flatten(files) : [files]
  ], []);
}
function fromDataTransferItem(item, entry) {
  return __awaiter(this, void 0, void 0, function* () {
    var _a;
    if (globalThis.isSecureContext && typeof item.getAsFileSystemHandle === "function") {
      const h = yield item.getAsFileSystemHandle();
      if (h === null) {
        throw new Error(`${item} is not a File`);
      }
      if (h !== void 0) {
        const file2 = yield h.getFile();
        file2.handle = h;
        return toFileWithPath(file2);
      }
    }
    const file = item.getAsFile();
    if (!file) {
      throw new Error(`${item} is not a File`);
    }
    const fwp = toFileWithPath(file, (_a = entry === null || entry === void 0 ? void 0 : entry.fullPath) !== null && _a !== void 0 ? _a : void 0);
    return fwp;
  });
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry);
  });
}
function fromDirEntry(entry) {
  const reader = entry.createReader();
  return new Promise((resolve, reject) => {
    const entries = [];
    function readEntries() {
      reader.readEntries((batch) => __awaiter(this, void 0, void 0, function* () {
        if (!batch.length) {
          try {
            const files = yield Promise.all(entries);
            resolve(files);
          } catch (err) {
            reject(err);
          }
        } else {
          const items = Promise.all(batch.map(fromEntry));
          entries.push(items);
          readEntries();
        }
      }), (err) => {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      entry.file((file) => {
        const fwp = toFileWithPath(file, entry.fullPath);
        resolve(fwp);
      }, (err) => {
        reject(err);
      });
    });
  });
}

// node_modules/react-dropzone/dist/es/utils/index.js
var import_attr_accept = __toESM(require_es2(), 1);
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function ownKeys2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr)) return arr;
}
var accepts = typeof import_attr_accept.default === "function" ? import_attr_accept.default : import_attr_accept.default.default;
var FILE_INVALID_TYPE = "file-invalid-type";
var FILE_TOO_LARGE = "file-too-large";
var FILE_TOO_SMALL = "file-too-small";
var TOO_MANY_FILES = "too-many-files";
var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2() {
  var accept = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var acceptArr = accept.split(",");
  var msg = acceptArr.length > 1 ? "one of ".concat(acceptArr.join(", ")) : acceptArr[0];
  return {
    code: FILE_INVALID_TYPE,
    message: "File type must be ".concat(msg)
  };
};
var getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
  return {
    code: FILE_TOO_LARGE,
    message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
  };
};
var getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
  return {
    code: FILE_TOO_SMALL,
    message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
  };
};
var TOO_MANY_FILES_REJECTION = {
  code: TOO_MANY_FILES,
  message: "Too many files"
};
function fileAccepted(file, accept) {
  var isAcceptable = file.type === "application/x-moz-file" || accepts(file, accept);
  return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize)) {
      if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
  }
  return [true, null];
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
  if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
    return false;
  }
  return files.every(function(file) {
    var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
    var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
    var customErrors = validator ? validator(file) : null;
    return accepted && sizeMatch && !customErrors;
  });
}
function isPropagationStopped(event) {
  if (typeof event.isPropagationStopped === "function") {
    return event.isPropagationStopped();
  } else if (typeof event.cancelBubble !== "undefined") {
    return event.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event) {
  if (!event.dataTransfer) {
    return !!event.target && !!event.target.files;
  }
  return Array.prototype.some.call(event.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event) {
  event.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn2) {
      if (!isPropagationStopped(event) && fn2) {
        fn2.apply(void 0, [event].concat(args));
      }
      return isPropagationStopped(event);
    });
  };
}
function canUseFileSystemAccessAPI() {
  return "showOpenFilePicker" in window;
}
function pickerOptionsFromAccept(accept) {
  if (isDefined(accept)) {
    var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
      var ok4 = true;
      if (!isMIMEType(mimeType)) {
        console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
        ok4 = false;
      }
      if (!Array.isArray(ext) || !ext.every(isExt)) {
        console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
        ok4 = false;
      }
      return ok4;
    }).reduce(function(agg, _ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
      return _objectSpread2(_objectSpread2({}, agg), {}, _defineProperty2({}, mimeType, ext));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: acceptForPicker
    }];
  }
  return accept;
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce(function(a, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
      return [].concat(_toConsumableArray(a), [mimeType], _toConsumableArray(ext));
    }, []).filter(function(v) {
      return isMIMEType(v) || isExt(v);
    }).join(",");
  }
  return void 0;
}
function isAbort(v) {
  return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
}
function isSecurityError(v) {
  return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
}
function isMIMEType(v) {
  return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || v === "application/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
  return /^.*\.[\w]+$/.test(v);
}

// node_modules/react-dropzone/dist/es/index.js
var _excluded = ["children"];
var _excluded2 = ["open"];
var _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"];
var _excluded4 = ["refKey", "onChange", "onClick"];
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var Dropzone = (0, import_react83.forwardRef)(function(_ref, ref) {
  var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);
  var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);
  (0, import_react83.useImperativeHandle)(ref, function() {
    return {
      open
    };
  }, [open]);
  return import_react83.default.createElement(import_react83.Fragment, null, children(_objectSpread3(_objectSpread3({}, props), {}, {
    open
  })));
});
Dropzone.displayName = "Dropzone";
var defaultProps = {
  disabled: false,
  getFilesFromEvent: fromEvent,
  maxSize: Infinity,
  minSize: 0,
  multiple: true,
  maxFiles: 0,
  preventDropOnDocument: true,
  noClick: false,
  noKeyboard: false,
  noDrag: false,
  noDragEventsBubbling: false,
  validator: null,
  useFsAccessApi: false,
  autoFocus: false
};
Dropzone.defaultProps = defaultProps;
Dropzone.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */
  children: import_prop_types.default.func,
  /**
   * Set accepted file types.
   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
   */
  accept: import_prop_types.default.objectOf(import_prop_types.default.arrayOf(import_prop_types.default.string)),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: import_prop_types.default.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: import_prop_types.default.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: import_prop_types.default.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: import_prop_types.default.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: import_prop_types.default.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: import_prop_types.default.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: import_prop_types.default.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: import_prop_types.default.number,
  /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */
  maxFiles: import_prop_types.default.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: import_prop_types.default.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event|Array<FileSystemFileHandle>)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: import_prop_types.default.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: import_prop_types.default.func,
  /**
   * Cb for when opening the file dialog
   */
  onFileDialogOpen: import_prop_types.default.func,
  /**
   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
   * to open the file picker instead of using an `<input type="file">` click event.
   */
  useFsAccessApi: import_prop_types.default.bool,
  /**
   * Set to true to focus the root element on render
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: import_prop_types.default.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: import_prop_types.default.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: import_prop_types.default.func,
  /**
   * Cb for when there's some error from any of the promises.
   *
   * @param {Error} error
   */
  onError: import_prop_types.default.func,
  /**
   * Custom validation function. It must return null if there's no errors.
   * @param {File} file
   * @returns {FileError|FileError[]|null}
   */
  validator: import_prop_types.default.func
};
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  acceptedFiles: [],
  fileRejections: []
};
function useDropzone() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _defaultProps$props = _objectSpread3(_objectSpread3({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError2 = _defaultProps$props.onError, validator = _defaultProps$props.validator;
  var acceptAttr = (0, import_react83.useMemo)(function() {
    return acceptPropAsAcceptAttr(accept);
  }, [accept]);
  var pickerTypes = (0, import_react83.useMemo)(function() {
    return pickerOptionsFromAccept(accept);
  }, [accept]);
  var onFileDialogOpenCb = (0, import_react83.useMemo)(function() {
    return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop2;
  }, [onFileDialogOpen]);
  var onFileDialogCancelCb = (0, import_react83.useMemo)(function() {
    return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop2;
  }, [onFileDialogCancel]);
  var rootRef = (0, import_react83.useRef)(null);
  var inputRef = (0, import_react83.useRef)(null);
  var _useReducer = (0, import_react83.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
  var fsAccessApiWorksRef = (0, import_react83.useRef)(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
  var onWindowFocus = function onWindowFocus2() {
    if (!fsAccessApiWorksRef.current && isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            onFileDialogCancelCb();
          }
        }
      }, 300);
    }
  };
  (0, import_react83.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
  var dragTargetsRef = (0, import_react83.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event) {
    if (rootRef.current && rootRef.current.contains(event.target)) {
      return;
    }
    event.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react83.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  (0, import_react83.useEffect)(function() {
    if (!disabled && autoFocus && rootRef.current) {
      rootRef.current.focus();
    }
    return function() {
    };
  }, [rootRef, autoFocus, disabled]);
  var onErrCb = (0, import_react83.useCallback)(function(e) {
    if (onError2) {
      onError2(e);
    } else {
      console.error(e);
    }
  }, [onError2]);
  var onDragEnterCb = (0, import_react83.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [].concat(_toConsumableArray2(dragTargetsRef.current), [event.target]);
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        var fileCount = files.length;
        var isDragAccept = fileCount > 0 && allFilesAccepted({
          files,
          accept: acceptAttr,
          minSize,
          maxSize,
          multiple,
          maxFiles,
          validator
        });
        var isDragReject = fileCount > 0 && !isDragAccept;
        dispatch({
          isDragAccept,
          isDragReject,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event);
        }
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
  }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
  var onDragOverCb = (0, import_react83.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var hasFiles = isEvtWithFiles(event);
    if (hasFiles && event.dataTransfer) {
      try {
        event.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (hasFiles && onDragOver) {
      onDragOver(event);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react83.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var targets = dragTargetsRef.current.filter(function(target) {
      return rootRef.current && rootRef.current.contains(target);
    });
    var targetIdx = targets.indexOf(event.target);
    if (targetIdx !== -1) {
      targets.splice(targetIdx, 1);
    }
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      type: "setDraggedFiles",
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false
    });
    if (isEvtWithFiles(event) && onDragLeave) {
      onDragLeave(event);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var setFiles = (0, import_react83.useCallback)(function(files, event) {
    var acceptedFiles = [];
    var fileRejections = [];
    files.forEach(function(file) {
      var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray2(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
      var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray2(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
      var customErrors = validator ? validator(file) : null;
      if (accepted && sizeMatch && !customErrors) {
        acceptedFiles.push(file);
      } else {
        var errors = [acceptError, sizeError];
        if (customErrors) {
          errors = errors.concat(customErrors);
        }
        fileRejections.push({
          file,
          errors: errors.filter(function(e) {
            return e;
          })
        });
      }
    });
    if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
      acceptedFiles.forEach(function(file) {
        fileRejections.push({
          file,
          errors: [TOO_MANY_FILES_REJECTION]
        });
      });
      acceptedFiles.splice(0);
    }
    dispatch({
      acceptedFiles,
      fileRejections,
      isDragReject: fileRejections.length > 0,
      type: "setFiles"
    });
    if (onDrop) {
      onDrop(acceptedFiles, fileRejections, event);
    }
    if (fileRejections.length > 0 && onDropRejected) {
      onDropRejected(fileRejections, event);
    }
    if (acceptedFiles.length > 0 && onDropAccepted) {
      onDropAccepted(acceptedFiles, event);
    }
  }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
  var onDropCb = (0, import_react83.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        setFiles(files, event);
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
    dispatch({
      type: "reset"
    });
  }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
  var openFileDialog = (0, import_react83.useCallback)(function() {
    if (fsAccessApiWorksRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      var opts = {
        multiple,
        types: pickerTypes
      };
      window.showOpenFilePicker(opts).then(function(handles) {
        return getFilesFromEvent(handles);
      }).then(function(files) {
        setFiles(files, null);
        dispatch({
          type: "closeDialog"
        });
      }).catch(function(e) {
        if (isAbort(e)) {
          onFileDialogCancelCb(e);
          dispatch({
            type: "closeDialog"
          });
        } else if (isSecurityError(e)) {
          fsAccessApiWorksRef.current = false;
          if (inputRef.current) {
            inputRef.current.value = null;
            inputRef.current.click();
          } else {
            onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
          }
        } else {
          onErrCb(e);
        }
      });
      return;
    }
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
  var onKeyDownCb = (0, import_react83.useCallback)(function(event) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
      return;
    }
    if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
      event.preventDefault();
      openFileDialog();
    }
  }, [rootRef, openFileDialog]);
  var onFocusCb = (0, import_react83.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react83.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react83.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [noClick, openFileDialog]);
  var composeHandler = function composeHandler2(fn2) {
    return disabled ? null : fn2;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn2) {
    return noKeyboard ? null : composeHandler(fn2);
  };
  var composeDragHandler = function composeDragHandler2(fn2) {
    return noDrag ? null : composeHandler(fn2);
  };
  var stopPropagation = function stopPropagation2(event) {
    if (noDragEventsBubbling) {
      event.stopPropagation();
    }
  };
  var getRootProps = (0, import_react83.useMemo)(function() {
    return function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);
      return _objectSpread3(_objectSpread3(_defineProperty3({
        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb)),
        role: typeof role === "string" && role !== "" ? role : "presentation"
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}), rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react83.useCallback)(function(event) {
    event.stopPropagation();
  }, []);
  var getInputProps = (0, import_react83.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
      var inputProps = _defineProperty3({
        accept: acceptAttr,
        multiple,
        type: "file",
        style: {
          border: 0,
          clip: "rect(0, 0, 0, 0)",
          clipPath: "inset(50%)",
          height: "1px",
          margin: "0 -1px -1px 0",
          overflow: "hidden",
          padding: 0,
          position: "absolute",
          width: "1px",
          whiteSpace: "nowrap"
        },
        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread3(_objectSpread3({}, inputProps), rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  return _objectSpread3(_objectSpread3({}, state), {}, {
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFocused: true
      });
    case "blur":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread3(_objectSpread3({}, initialState), {}, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isDragActive: action.isDragActive,
        isDragAccept: action.isDragAccept,
        isDragReject: action.isDragReject
      });
    case "setFiles":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        acceptedFiles: action.acceptedFiles,
        fileRejections: action.fileRejections,
        isDragReject: action.isDragReject
      });
    case "reset":
      return _objectSpread3({}, initialState);
    default:
      return state;
  }
}
function noop2() {
}

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ImageDropzone.js
var ImageDropzone = function(_a) {
  var _b = _a.accept, acceptedFiles = _b === void 0 ? [] : _b, children = _a.children, disabled = _a.disabled, handleFiles = _a.handleFiles, maxNumberOfFiles = _a.maxNumberOfFiles, multiple = _a.multiple;
  var t2 = useTranslationContext("ImageDropzone").t;
  var handleDrop = (0, import_react84.useCallback)(function(accepted) {
    if (!handleFiles) {
      return;
    }
    if (accepted && accepted.length) {
      handleFiles(accepted);
    }
  }, [handleFiles]);
  var accept = (0, import_react84.useMemo)(function() {
    return (typeof acceptedFiles === "string" ? acceptedFiles.split(",") : acceptedFiles).reduce(function(mediaTypeMap, mediaType) {
      var _a2;
      (_a2 = mediaTypeMap[mediaType]) !== null && _a2 !== void 0 ? _a2 : mediaTypeMap[mediaType] = [];
      return mediaTypeMap;
    }, {});
  }, [acceptedFiles]);
  var _c = useDropzone({
    accept,
    disabled,
    maxFiles: maxNumberOfFiles,
    multiple,
    noClick: true,
    onDrop: handleDrop
  }), getRootProps = _c.getRootProps, isDragAccept = _c.isDragAccept, isDragReject = _c.isDragReject;
  return import_react84.default.createElement(
    "div",
    __assign({}, getRootProps({
      className: clsx_default("rfu-dropzone", {
        "rfu-dropzone--accept": isDragAccept,
        "rfu-dropzone--reject": isDragReject
      }),
      style: { position: "relative" }
    }), { tabIndex: -1 }),
    import_react84.default.createElement(
      "div",
      { className: "rfu-dropzone__notifier" },
      import_react84.default.createElement(
        "div",
        { className: "rfu-dropzone__inner" },
        import_react84.default.createElement(
          "svg",
          { height: "41", viewBox: "0 0 41 41", width: "41", xmlns: "http://www.w3.org/2000/svg" },
          import_react84.default.createElement("path", { d: "M40.517 28.002V3.997c0-2.197-1.808-3.992-4.005-3.992H12.507a4.004 4.004 0 0 0-3.992 3.993v24.004a4.004 4.004 0 0 0 3.992 3.993h24.005c2.197 0 4.005-1.795 4.005-3.993zm-22.002-7.997l4.062 5.42 5.937-7.423 7.998 10H12.507l6.008-7.997zM.517 8.003V36c0 2.198 1.795 4.005 3.993 4.005h27.997V36H4.51V8.002H.517z", fill: "#000", fillRule: "nonzero" })
        ),
        import_react84.default.createElement("p", null, t2("Drag your files here to add to your post"))
      )
    ),
    children
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ImagePreviewer.js
var import_react89 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/Thumbnail.js
var import_react86 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/IconButton.js
var import_react85 = __toESM(require_react());
var IconButton = function(_a) {
  var children = _a.children, onClick = _a.onClick;
  var t2 = useTranslationContext("IconButton").t;
  return import_react85.default.createElement("button", { "aria-label": t2("aria/Cancel upload"), className: "rfu-icon-button", "data-testid": "cancel-upload-button", onClick, type: "button" }, children);
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/Thumbnail.js
var Thumbnail = function(_a) {
  var alt = _a.alt, handleClose = _a.handleClose, image2 = _a.image, _b = _a.size, size = _b === void 0 ? 100 : _b;
  var onClose = (0, import_react86.useCallback)(function(event) {
    return handleClose === null || handleClose === void 0 ? void 0 : handleClose(event);
  }, [handleClose]);
  return import_react86.default.createElement(
    "div",
    { className: "rfu-thumbnail__wrapper", style: { height: size, width: size } },
    import_react86.default.createElement("div", { className: "rfu-thumbnail__overlay" }, handleClose ? import_react86.default.createElement(
      IconButton,
      { onClick: onClose },
      import_react86.default.createElement(CloseIcon, null)
    ) : null),
    image2 ? import_react86.default.createElement("img", { alt: alt !== null && alt !== void 0 ? alt : "", className: "rfu-thumbnail__image", src: image2 }) : import_react86.default.createElement(FilePlaceholderIcon, { className: "rfu-thumbnail__image", preserveAspectRatio: "xMinYMin slice" })
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ThumbnailPlaceholder.js
var import_react88 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ImageUploadButton.js
var import_react87 = __toESM(require_react());
var ImageUploadButton = function(_a) {
  var _b = _a.multiple, multiple = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, handleFiles = _a.handleFiles, _d = _a.children, children = _d === void 0 ? import_react87.default.createElement(PictureIcon, null) : _d, _e = _a.resetOnChange, resetOnChange = _e === void 0 ? false : _e;
  var t2 = useTranslationContext("ImageUploadButton").t;
  return import_react87.default.createElement(
    "div",
    { className: "rfu-image-upload-button" },
    import_react87.default.createElement(
      "label",
      null,
      import_react87.default.createElement(UploadButton, { accept: "image/*", "aria-label": t2("aria/Image input"), className: "rfu-image-input", disabled, multiple, onFileChange: handleFiles, resetOnChange }),
      children
    )
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ThumbnailPlaceholder.js
var ThumbnailPlaceholder = function(_a) {
  var handleFiles = _a.handleFiles, _b = _a.multiple, multiple = _b === void 0 ? false : _b;
  return import_react88.default.createElement(
    ImageUploadButton,
    { handleFiles, multiple },
    import_react88.default.createElement(
      "div",
      { className: "rfu-thumbnail-placeholder" },
      import_react88.default.createElement(
        "svg",
        { height: "15", viewBox: "0 0 14 15", width: "14", xmlns: "http://www.w3.org/2000/svg" },
        import_react88.default.createElement("path", { d: "M14 8.998H8v6H6v-6H0v-2h6v-6h2v6h6z", fill: "#A0B2B8", fillRule: "nonzero" })
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ImagePreviewer.js
var ImagePreviewer = function(_a) {
  var _b = _a.disabled, disabled = _b === void 0 ? false : _b, handleFiles = _a.handleFiles, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry, imageUploads = _a.imageUploads, _c = _a.multiple, multiple = _c === void 0 ? true : _c;
  var t2 = useTranslationContext("ImagePreviewer").t;
  var onClose = (0, import_react89.useCallback)(function(id, event) {
    if (!id)
      return console.warn(`image.id of closed image was "null", this shouldn't happen`);
    handleRemove === null || handleRemove === void 0 ? void 0 : handleRemove(id, event);
  }, [handleRemove]);
  return import_react89.default.createElement(
    "div",
    { className: "rfu-image-previewer" },
    imageUploads === null || imageUploads === void 0 ? void 0 : imageUploads.map(function(image2) {
      var url = image2.url || image2.previewUri;
      return import_react89.default.createElement(
        "div",
        { className: clsx_default("rfu-image-previewer__image", image2.state === "finished" && "rfu-image-previewer__image--loaded"), key: image2.id },
        image2.state === "failed" && import_react89.default.createElement(
          "button",
          { "aria-label": t2("aria/Retry upload"), className: "rfu-image-previewer__retry", onClick: function(event) {
            return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(image2.id, event);
          }, type: "button" },
          import_react89.default.createElement(RetryIcon, null)
        ),
        url && import_react89.default.createElement(Thumbnail, { handleClose: function(event) {
          return onClose(image2.id, event);
        }, image: url }),
        image2.state === "uploading" && import_react89.default.createElement(LoadingIndicator, { backgroundColor: "#ffffff19", color: "#ffffffb2" })
      );
    }),
    handleFiles && !disabled && import_react89.default.createElement(ThumbnailPlaceholder, { handleFiles, multiple })
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/FileAttachment.js
var UnMemoizedFileAttachmentV1 = function(_a) {
  var attachment = _a.attachment;
  return import_react90.default.createElement(
    "div",
    { className: "str-chat__message-attachment-file--item", "data-testid": "attachment-file" },
    import_react90.default.createElement(FileIcon, { big: true, mimeType: attachment.mime_type, size: 30 }),
    import_react90.default.createElement(
      "div",
      { className: "str-chat__message-attachment-file--item-text" },
      import_react90.default.createElement(SafeAnchor, { download: true, href: attachment.asset_url, target: "_blank" }, attachment.title),
      import_react90.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size })
    )
  );
};
var UnMemoizedFileAttachmentV2 = function(_a) {
  var attachment = _a.attachment;
  return import_react90.default.createElement(
    "div",
    { className: "str-chat__message-attachment-file--item", "data-testid": "attachment-file" },
    import_react90.default.createElement(FileIcon, { className: "str-chat__file-icon", mimeType: attachment.mime_type, version: "2" }),
    import_react90.default.createElement(
      "div",
      { className: "str-chat__message-attachment-file--item-text" },
      import_react90.default.createElement(
        "div",
        { className: "str-chat__message-attachment-file--item-first-row" },
        import_react90.default.createElement("div", { className: "str-chat__message-attachment-file--item-name", "data-testid": "file-title" }, attachment.title),
        import_react90.default.createElement(DownloadButton, { assetUrl: attachment.asset_url })
      ),
      import_react90.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size })
    )
  );
};
var UnMemoizedFileAttachment = function(_a) {
  var attachment = _a.attachment;
  var themeVersion = useChatContext("FileAttachment").themeVersion;
  return themeVersion === "2" ? import_react90.default.createElement(UnMemoizedFileAttachmentV2, { attachment }) : import_react90.default.createElement(UnMemoizedFileAttachmentV1, { attachment });
};
var FileAttachment = import_react90.default.memo(UnMemoizedFileAttachment);

// node_modules/stream-chat-react/dist/components/Attachment/utils.js
var SUPPORTED_VIDEO_FORMATS = ["video/mp4", "video/ogg", "video/webm", "video/quicktime"];
var isLocalAttachment = function(attachment) {
  var _a;
  return !!((_a = attachment.localMetadata) === null || _a === void 0 ? void 0 : _a.id);
};
var isScrapedContent = function(attachment) {
  return attachment.og_scrape_url || attachment.title_link;
};
var isUploadedImage = function(attachment) {
  return attachment.type === "image" && !isScrapedContent(attachment);
};
var isLocalImageAttachment = function(attachment) {
  return isUploadedImage(attachment) && isLocalAttachment(attachment);
};
var isGalleryAttachmentType = function(output2) {
  return Array.isArray(output2.images);
};
var isAudioAttachment = function(attachment) {
  return attachment.type === "audio";
};
var isLocalAudioAttachment = function(attachment) {
  return isAudioAttachment(attachment) && isLocalAttachment(attachment);
};
var isVoiceRecordingAttachment = function(attachment) {
  return attachment.type === "voiceRecording";
};
var isLocalVoiceRecordingAttachment = function(attachment) {
  return isVoiceRecordingAttachment(attachment) && isLocalAttachment(attachment);
};
var isFileAttachment = function(attachment) {
  return attachment.type === "file" || !!(attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) === -1 && attachment.type !== "video");
};
var isLocalFileAttachment = function(attachment) {
  return isFileAttachment(attachment) && isLocalAttachment(attachment);
};
var isMediaAttachment = function(attachment) {
  return attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) !== -1 || attachment.type === "video";
};
var isLocalMediaAttachment = function(attachment) {
  return isMediaAttachment(attachment) && isLocalAttachment(attachment);
};
var isSvgAttachment = function(attachment) {
  var filename = attachment.fallback || "";
  return filename.toLowerCase().endsWith(".svg");
};
var renderAttachmentWithinContainer = function(props) {
  var _a;
  var _b;
  var attachment = props.attachment, children = props.children, componentType = props.componentType;
  var isGAT = isGalleryAttachmentType(attachment);
  var extra = "";
  if (!isGAT) {
    extra = componentType === "card" && !(attachment === null || attachment === void 0 ? void 0 : attachment.image_url) && !(attachment === null || attachment === void 0 ? void 0 : attachment.thumb_url) ? "no-image" : ((_b = attachment === null || attachment === void 0 ? void 0 : attachment.actions) === null || _b === void 0 ? void 0 : _b.length) ? "actions" : "";
  }
  var classNames = clsx_default("str-chat__message-attachment", (_a = {}, _a["str-chat__message-attachment--".concat(componentType)] = componentType, _a["str-chat__message-attachment--".concat(attachment === null || attachment === void 0 ? void 0 : attachment.type)] = attachment === null || attachment === void 0 ? void 0 : attachment.type, _a["str-chat__message-attachment--".concat(componentType, "--").concat(extra)] = componentType && extra, _a["str-chat__message-attachment--svg-image"] = isSvgAttachment(attachment), _a["str-chat__message-attachment-with-actions"] = extra === "actions", _a));
  return import_react91.default.createElement("div", { className: classNames }, children);
};
var renderAttachmentActions = function(props) {
  var _a;
  var actionHandler = props.actionHandler, attachment = props.attachment, _b = props.AttachmentActions, AttachmentActions2 = _b === void 0 ? AttachmentActions : _b;
  if (!((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length))
    return null;
  return import_react91.default.createElement(AttachmentActions2, __assign({}, attachment, { actionHandler: function(event, name, value) {
    return actionHandler === null || actionHandler === void 0 ? void 0 : actionHandler(event, name, value);
  }, actions: attachment.actions, id: attachment.id || "", key: "key-actions-".concat(attachment.id), text: attachment.text || "" }));
};
var renderGallery = function(props) {
  var attachment = props.attachment, _a = props.Gallery, Gallery2 = _a === void 0 ? Gallery : _a;
  return renderAttachmentWithinContainer({
    attachment,
    children: import_react91.default.createElement(Gallery2, { images: attachment.images || [], key: "gallery" }),
    componentType: "gallery"
  });
};
var renderImage = function(props) {
  var attachment = props.attachment, _a = props.Image, Image2 = _a === void 0 ? ImageComponent : _a;
  if (attachment.actions && attachment.actions.length) {
    return renderAttachmentWithinContainer({
      attachment,
      children: import_react91.default.createElement(
        "div",
        { className: "str-chat__attachment", key: "key-image-".concat(attachment.id) },
        import_react91.default.createElement(Image2, __assign({}, attachment)),
        renderAttachmentActions(props)
      ),
      componentType: "image"
    });
  }
  return renderAttachmentWithinContainer({
    attachment,
    children: import_react91.default.createElement(Image2, __assign({}, attachment, { key: "key-image-".concat(attachment.id) })),
    componentType: "image"
  });
};
var renderCard = function(props) {
  var attachment = props.attachment, _a = props.Card, Card2 = _a === void 0 ? Card : _a;
  if (attachment.actions && attachment.actions.length) {
    return renderAttachmentWithinContainer({
      attachment,
      children: import_react91.default.createElement(
        "div",
        { className: "str-chat__attachment", key: "key-image-".concat(attachment.id) },
        import_react91.default.createElement(Card2, __assign({}, attachment, { key: "key-card-".concat(attachment.id) })),
        renderAttachmentActions(props)
      ),
      componentType: "card"
    });
  }
  return renderAttachmentWithinContainer({
    attachment,
    children: import_react91.default.createElement(Card2, __assign({}, attachment, { key: "key-card-".concat(attachment.id) })),
    componentType: "card"
  });
};
var renderFile = function(props) {
  var attachment = props.attachment, _a = props.File, File2 = _a === void 0 ? FileAttachment : _a;
  if (!attachment.asset_url)
    return null;
  return renderAttachmentWithinContainer({
    attachment,
    children: import_react91.default.createElement(File2, { attachment, key: "key-file-".concat(attachment.id) }),
    componentType: "file"
  });
};
var renderAudio = function(props) {
  var attachment = props.attachment, _a = props.Audio, Audio2 = _a === void 0 ? Audio : _a;
  return renderAttachmentWithinContainer({
    attachment,
    children: import_react91.default.createElement(
      "div",
      { className: "str-chat__attachment", key: "key-video-".concat(attachment.id) },
      import_react91.default.createElement(Audio2, { og: attachment })
    ),
    componentType: "audio"
  });
};
var renderMedia = function(props) {
  var _a;
  var attachment = props.attachment, _b = props.Media, Media = _b === void 0 ? import_react_player2.default : _b;
  if ((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length) {
    return renderAttachmentWithinContainer({
      attachment,
      children: import_react91.default.createElement(
        "div",
        { className: "str-chat__attachment str-chat__attachment-media", key: "key-video-".concat(attachment.id) },
        import_react91.default.createElement(
          "div",
          { className: "str-chat__player-wrapper" },
          import_react91.default.createElement(Media, { className: "react-player", controls: true, height: "100%", url: attachment.asset_url, width: "100%" })
        ),
        renderAttachmentActions(props)
      ),
      componentType: "media"
    });
  }
  return renderAttachmentWithinContainer({
    attachment,
    children: import_react91.default.createElement(
      "div",
      { className: "str-chat__player-wrapper", key: "key-video-".concat(attachment.id) },
      import_react91.default.createElement(Media, { className: "react-player", controls: true, height: "100%", url: attachment.asset_url, width: "100%" })
    ),
    componentType: "media"
  });
};
var divMod = function(num, divisor) {
  return [Math.floor(num / divisor), num % divisor];
};
var displayDuration = function(totalSeconds) {
  if (!totalSeconds || totalSeconds < 0)
    return "00:00";
  var _a = divMod(totalSeconds, 3600), hours = _a[0], hoursLeftover = _a[1];
  var _b = divMod(hoursLeftover, 60), minutes = _b[0], seconds = _b[1];
  var roundedSeconds = Math.ceil(seconds);
  var prependHrsZero = hours.toString().length === 1 ? "0" : "";
  var prependMinZero = minutes.toString().length === 1 ? "0" : "";
  var prependSecZero = roundedSeconds.toString().length === 1 ? "0" : "";
  var minSec = "".concat(prependMinZero).concat(minutes, ":").concat(prependSecZero).concat(roundedSeconds);
  return hours ? "".concat(prependHrsZero).concat(hours, ":") + minSec : minSec;
};

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentContainer.js
var import_react94 = __toESM(require_react());
var import_react_player3 = __toESM(require_lib());

// node_modules/linkifyjs/dist/linkify.mjs
var encodedTlds = "aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3nd0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2";
var encodedUtlds = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2";
var assign = (target, properties) => {
  for (const key in properties) {
    target[key] = properties[key];
  }
  return target;
};
var numeric = "numeric";
var ascii = "ascii";
var alpha = "alpha";
var asciinumeric = "asciinumeric";
var alphanumeric = "alphanumeric";
var domain = "domain";
var emoji = "emoji";
var scheme = "scheme";
var slashscheme = "slashscheme";
var whitespace = "whitespace";
function registerGroup(name, groups) {
  if (!(name in groups)) {
    groups[name] = [];
  }
  return groups[name];
}
function addToGroups(t2, flags, groups) {
  if (flags[numeric]) {
    flags[asciinumeric] = true;
    flags[alphanumeric] = true;
  }
  if (flags[ascii]) {
    flags[asciinumeric] = true;
    flags[alpha] = true;
  }
  if (flags[asciinumeric]) {
    flags[alphanumeric] = true;
  }
  if (flags[alpha]) {
    flags[alphanumeric] = true;
  }
  if (flags[alphanumeric]) {
    flags[domain] = true;
  }
  if (flags[emoji]) {
    flags[domain] = true;
  }
  for (const k in flags) {
    const group = registerGroup(k, groups);
    if (group.indexOf(t2) < 0) {
      group.push(t2);
    }
  }
}
function flagsForToken(t2, groups) {
  const result = {};
  for (const c in groups) {
    if (groups[c].indexOf(t2) >= 0) {
      result[c] = true;
    }
  }
  return result;
}
function State(token = null) {
  this.j = {};
  this.jr = [];
  this.jd = null;
  this.t = token;
}
State.groups = {};
State.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(input) {
    const state = this;
    const nextState = state.j[input];
    if (nextState) {
      return nextState;
    }
    for (let i = 0; i < state.jr.length; i++) {
      const regex = state.jr[i][0];
      const nextState2 = state.jr[i][1];
      if (nextState2 && regex.test(input)) {
        return nextState2;
      }
    }
    return state.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(input, exactOnly = false) {
    return exactOnly ? input in this.j : !!this.go(input);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(inputs, next, flags, groups) {
    for (let i = 0; i < inputs.length; i++) {
      this.tt(inputs[i], next, flags, groups);
    }
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(regexp2, next, flags, groups) {
    groups = groups || State.groups;
    let nextState;
    if (next && next.j) {
      nextState = next;
    } else {
      nextState = new State(next);
      if (flags && groups) {
        addToGroups(next, flags, groups);
      }
    }
    this.jr.push([regexp2, nextState]);
    return nextState;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(input, next, flags, groups) {
    let state = this;
    const len = input.length;
    if (!len) {
      return state;
    }
    for (let i = 0; i < len - 1; i++) {
      state = state.tt(input[i]);
    }
    return state.tt(input[len - 1], next, flags, groups);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(input, next, flags, groups) {
    groups = groups || State.groups;
    const state = this;
    if (next && next.j) {
      state.j[input] = next;
      return next;
    }
    const t2 = next;
    let nextState, templateState = state.go(input);
    if (templateState) {
      nextState = new State();
      assign(nextState.j, templateState.j);
      nextState.jr.push.apply(nextState.jr, templateState.jr);
      nextState.jd = templateState.jd;
      nextState.t = templateState.t;
    } else {
      nextState = new State();
    }
    if (t2) {
      if (groups) {
        if (nextState.t && typeof nextState.t === "string") {
          const allFlags = assign(flagsForToken(nextState.t, groups), flags);
          addToGroups(t2, allFlags, groups);
        } else if (flags) {
          addToGroups(t2, flags, groups);
        }
      }
      nextState.t = t2;
    }
    state.j[input] = nextState;
    return nextState;
  }
};
var ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);
var tr = (state, regexp2, next, flags, groups) => state.tr(regexp2, next, flags, groups);
var ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);
var tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);
var WORD = "WORD";
var UWORD = "UWORD";
var ASCIINUMERICAL = "ASCIINUMERICAL";
var ALPHANUMERICAL = "ALPHANUMERICAL";
var LOCALHOST = "LOCALHOST";
var TLD = "TLD";
var UTLD = "UTLD";
var SCHEME = "SCHEME";
var SLASH_SCHEME = "SLASH_SCHEME";
var NUM = "NUM";
var WS = "WS";
var NL = "NL";
var OPENBRACE = "OPENBRACE";
var CLOSEBRACE = "CLOSEBRACE";
var OPENBRACKET = "OPENBRACKET";
var CLOSEBRACKET = "CLOSEBRACKET";
var OPENPAREN = "OPENPAREN";
var CLOSEPAREN = "CLOSEPAREN";
var OPENANGLEBRACKET = "OPENANGLEBRACKET";
var CLOSEANGLEBRACKET = "CLOSEANGLEBRACKET";
var FULLWIDTHLEFTPAREN = "FULLWIDTHLEFTPAREN";
var FULLWIDTHRIGHTPAREN = "FULLWIDTHRIGHTPAREN";
var LEFTCORNERBRACKET = "LEFTCORNERBRACKET";
var RIGHTCORNERBRACKET = "RIGHTCORNERBRACKET";
var LEFTWHITECORNERBRACKET = "LEFTWHITECORNERBRACKET";
var RIGHTWHITECORNERBRACKET = "RIGHTWHITECORNERBRACKET";
var FULLWIDTHLESSTHAN = "FULLWIDTHLESSTHAN";
var FULLWIDTHGREATERTHAN = "FULLWIDTHGREATERTHAN";
var AMPERSAND = "AMPERSAND";
var APOSTROPHE = "APOSTROPHE";
var ASTERISK = "ASTERISK";
var AT = "AT";
var BACKSLASH = "BACKSLASH";
var BACKTICK = "BACKTICK";
var CARET = "CARET";
var COLON = "COLON";
var COMMA = "COMMA";
var DOLLAR = "DOLLAR";
var DOT = "DOT";
var EQUALS = "EQUALS";
var EXCLAMATION = "EXCLAMATION";
var HYPHEN = "HYPHEN";
var PERCENT = "PERCENT";
var PIPE = "PIPE";
var PLUS = "PLUS";
var POUND = "POUND";
var QUERY = "QUERY";
var QUOTE = "QUOTE";
var FULLWIDTHMIDDLEDOT = "FULLWIDTHMIDDLEDOT";
var SEMI = "SEMI";
var SLASH = "SLASH";
var TILDE = "TILDE";
var UNDERSCORE = "UNDERSCORE";
var EMOJI$1 = "EMOJI";
var SYM = "SYM";
var tk = Object.freeze({
  __proto__: null,
  ALPHANUMERICAL,
  AMPERSAND,
  APOSTROPHE,
  ASCIINUMERICAL,
  ASTERISK,
  AT,
  BACKSLASH,
  BACKTICK,
  CARET,
  CLOSEANGLEBRACKET,
  CLOSEBRACE,
  CLOSEBRACKET,
  CLOSEPAREN,
  COLON,
  COMMA,
  DOLLAR,
  DOT,
  EMOJI: EMOJI$1,
  EQUALS,
  EXCLAMATION,
  FULLWIDTHGREATERTHAN,
  FULLWIDTHLEFTPAREN,
  FULLWIDTHLESSTHAN,
  FULLWIDTHMIDDLEDOT,
  FULLWIDTHRIGHTPAREN,
  HYPHEN,
  LEFTCORNERBRACKET,
  LEFTWHITECORNERBRACKET,
  LOCALHOST,
  NL,
  NUM,
  OPENANGLEBRACKET,
  OPENBRACE,
  OPENBRACKET,
  OPENPAREN,
  PERCENT,
  PIPE,
  PLUS,
  POUND,
  QUERY,
  QUOTE,
  RIGHTCORNERBRACKET,
  RIGHTWHITECORNERBRACKET,
  SCHEME,
  SEMI,
  SLASH,
  SLASH_SCHEME,
  SYM,
  TILDE,
  TLD,
  UNDERSCORE,
  UTLD,
  UWORD,
  WORD,
  WS
});
var ASCII_LETTER = /[a-z]/;
var LETTER = new RegExp("\\p{L}", "u");
var EMOJI = new RegExp("\\p{Emoji}", "u");
var EMOJI_VARIATION$1 = /\ufe0f/;
var DIGIT = /\d/;
var SPACE = /\s/;
var regexp = Object.freeze({
  __proto__: null,
  ASCII_LETTER,
  DIGIT,
  EMOJI,
  EMOJI_VARIATION: EMOJI_VARIATION$1,
  LETTER,
  SPACE
});
var CR = "\r";
var LF = "\n";
var EMOJI_VARIATION = "️";
var EMOJI_JOINER = "‍";
var OBJECT_REPLACEMENT = "￼";
var tlds = null;
var utlds = null;
function init$2(customSchemes = []) {
  const groups = {};
  State.groups = groups;
  const Start = new State();
  if (tlds == null) {
    tlds = decodeTlds(encodedTlds);
  }
  if (utlds == null) {
    utlds = decodeTlds(encodedUtlds);
  }
  tt(Start, "'", APOSTROPHE);
  tt(Start, "{", OPENBRACE);
  tt(Start, "}", CLOSEBRACE);
  tt(Start, "[", OPENBRACKET);
  tt(Start, "]", CLOSEBRACKET);
  tt(Start, "(", OPENPAREN);
  tt(Start, ")", CLOSEPAREN);
  tt(Start, "<", OPENANGLEBRACKET);
  tt(Start, ">", CLOSEANGLEBRACKET);
  tt(Start, "（", FULLWIDTHLEFTPAREN);
  tt(Start, "）", FULLWIDTHRIGHTPAREN);
  tt(Start, "「", LEFTCORNERBRACKET);
  tt(Start, "」", RIGHTCORNERBRACKET);
  tt(Start, "『", LEFTWHITECORNERBRACKET);
  tt(Start, "』", RIGHTWHITECORNERBRACKET);
  tt(Start, "＜", FULLWIDTHLESSTHAN);
  tt(Start, "＞", FULLWIDTHGREATERTHAN);
  tt(Start, "&", AMPERSAND);
  tt(Start, "*", ASTERISK);
  tt(Start, "@", AT);
  tt(Start, "`", BACKTICK);
  tt(Start, "^", CARET);
  tt(Start, ":", COLON);
  tt(Start, ",", COMMA);
  tt(Start, "$", DOLLAR);
  tt(Start, ".", DOT);
  tt(Start, "=", EQUALS);
  tt(Start, "!", EXCLAMATION);
  tt(Start, "-", HYPHEN);
  tt(Start, "%", PERCENT);
  tt(Start, "|", PIPE);
  tt(Start, "+", PLUS);
  tt(Start, "#", POUND);
  tt(Start, "?", QUERY);
  tt(Start, '"', QUOTE);
  tt(Start, "/", SLASH);
  tt(Start, ";", SEMI);
  tt(Start, "~", TILDE);
  tt(Start, "_", UNDERSCORE);
  tt(Start, "\\", BACKSLASH);
  tt(Start, "・", FULLWIDTHMIDDLEDOT);
  const Num = tr(Start, DIGIT, NUM, {
    [numeric]: true
  });
  tr(Num, DIGIT, Num);
  const Asciinumeric = tr(Num, ASCII_LETTER, ASCIINUMERICAL, {
    [asciinumeric]: true
  });
  const Alphanumeric = tr(Num, LETTER, ALPHANUMERICAL, {
    [alphanumeric]: true
  });
  const Word = tr(Start, ASCII_LETTER, WORD, {
    [ascii]: true
  });
  tr(Word, DIGIT, Asciinumeric);
  tr(Word, ASCII_LETTER, Word);
  tr(Asciinumeric, DIGIT, Asciinumeric);
  tr(Asciinumeric, ASCII_LETTER, Asciinumeric);
  const UWord = tr(Start, LETTER, UWORD, {
    [alpha]: true
  });
  tr(UWord, ASCII_LETTER);
  tr(UWord, DIGIT, Alphanumeric);
  tr(UWord, LETTER, UWord);
  tr(Alphanumeric, DIGIT, Alphanumeric);
  tr(Alphanumeric, ASCII_LETTER);
  tr(Alphanumeric, LETTER, Alphanumeric);
  const Nl2 = tt(Start, LF, NL, {
    [whitespace]: true
  });
  const Cr = tt(Start, CR, WS, {
    [whitespace]: true
  });
  const Ws = tr(Start, SPACE, WS, {
    [whitespace]: true
  });
  tt(Start, OBJECT_REPLACEMENT, Ws);
  tt(Cr, LF, Nl2);
  tt(Cr, OBJECT_REPLACEMENT, Ws);
  tr(Cr, SPACE, Ws);
  tt(Ws, CR);
  tt(Ws, LF);
  tr(Ws, SPACE, Ws);
  tt(Ws, OBJECT_REPLACEMENT, Ws);
  const Emoji2 = tr(Start, EMOJI, EMOJI$1, {
    [emoji]: true
  });
  tt(Emoji2, "#");
  tr(Emoji2, EMOJI, Emoji2);
  tt(Emoji2, EMOJI_VARIATION, Emoji2);
  const EmojiJoiner = tt(Emoji2, EMOJI_JOINER);
  tt(EmojiJoiner, "#");
  tr(EmojiJoiner, EMOJI, Emoji2);
  const wordjr = [[ASCII_LETTER, Word], [DIGIT, Asciinumeric]];
  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord], [DIGIT, Alphanumeric]];
  for (let i = 0; i < tlds.length; i++) {
    fastts(Start, tlds[i], TLD, WORD, wordjr);
  }
  for (let i = 0; i < utlds.length; i++) {
    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);
  }
  addToGroups(TLD, {
    tld: true,
    ascii: true
  }, groups);
  addToGroups(UTLD, {
    utld: true,
    alpha: true
  }, groups);
  fastts(Start, "file", SCHEME, WORD, wordjr);
  fastts(Start, "mailto", SCHEME, WORD, wordjr);
  fastts(Start, "http", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "https", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftp", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftps", SLASH_SCHEME, WORD, wordjr);
  addToGroups(SCHEME, {
    scheme: true,
    ascii: true
  }, groups);
  addToGroups(SLASH_SCHEME, {
    slashscheme: true,
    ascii: true
  }, groups);
  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);
  for (let i = 0; i < customSchemes.length; i++) {
    const sch = customSchemes[i][0];
    const optionalSlashSlash = customSchemes[i][1];
    const flags = optionalSlashSlash ? {
      [scheme]: true
    } : {
      [slashscheme]: true
    };
    if (sch.indexOf("-") >= 0) {
      flags[domain] = true;
    } else if (!ASCII_LETTER.test(sch)) {
      flags[numeric] = true;
    } else if (DIGIT.test(sch)) {
      flags[asciinumeric] = true;
    } else {
      flags[ascii] = true;
    }
    ts(Start, sch, sch, flags);
  }
  ts(Start, "localhost", LOCALHOST, {
    ascii: true
  });
  Start.jd = new State(SYM);
  return {
    start: Start,
    tokens: assign({
      groups
    }, tk)
  };
}
function run$1(start2, str) {
  const iterable = stringToArray(str.replace(/[A-Z]/g, (c) => c.toLowerCase()));
  const charCount = iterable.length;
  const tokens = [];
  let cursor = 0;
  let charCursor = 0;
  while (charCursor < charCount) {
    let state = start2;
    let nextState = null;
    let tokenLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    let charsSinceAccepts = -1;
    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        charsSinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts += iterable[charCursor].length;
        charsSinceAccepts++;
      }
      tokenLength += iterable[charCursor].length;
      cursor += iterable[charCursor].length;
      charCursor++;
    }
    cursor -= sinceAccepts;
    charCursor -= charsSinceAccepts;
    tokenLength -= sinceAccepts;
    tokens.push({
      t: latestAccepting.t,
      // token type/name
      v: str.slice(cursor - tokenLength, cursor),
      // string value
      s: cursor - tokenLength,
      // start index
      e: cursor
      // end index (excluding)
    });
  }
  return tokens;
}
function stringToArray(str) {
  const result = [];
  const len = str.length;
  let index4 = 0;
  while (index4 < len) {
    let first = str.charCodeAt(index4);
    let second;
    let char = first < 55296 || first > 56319 || index4 + 1 === len || (second = str.charCodeAt(index4 + 1)) < 56320 || second > 57343 ? str[index4] : str.slice(index4, index4 + 2);
    result.push(char);
    index4 += char.length;
  }
  return result;
}
function fastts(state, input, t2, defaultt, jr) {
  let next;
  const len = input.length;
  for (let i = 0; i < len - 1; i++) {
    const char = input[i];
    if (state.j[char]) {
      next = state.j[char];
    } else {
      next = new State(defaultt);
      next.jr = jr.slice();
      state.j[char] = next;
    }
    state = next;
  }
  next = new State(t2);
  next.jr = jr.slice();
  state.j[input[len - 1]] = next;
  return next;
}
function decodeTlds(encoded) {
  const words = [];
  const stack = [];
  let i = 0;
  let digits = "0123456789";
  while (i < encoded.length) {
    let popDigitCount = 0;
    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {
      popDigitCount++;
    }
    if (popDigitCount > 0) {
      words.push(stack.join(""));
      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {
        stack.pop();
      }
      i += popDigitCount;
    } else {
      stack.push(encoded[i]);
      i++;
    }
  }
  return words;
}
var defaults = {
  defaultProtocol: "http",
  events: null,
  format: noop3,
  formatHref: noop3,
  nl2br: false,
  tagName: "a",
  target: null,
  rel: null,
  validate: true,
  truncate: Infinity,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Options(opts, defaultRender = null) {
  let o = assign({}, defaults);
  if (opts) {
    o = assign(o, opts instanceof Options ? opts.o : opts);
  }
  const ignoredTags = o.ignoreTags;
  const uppercaseIgnoredTags = [];
  for (let i = 0; i < ignoredTags.length; i++) {
    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());
  }
  this.o = o;
  if (defaultRender) {
    this.defaultRender = defaultRender;
  }
  this.ignoreTags = uppercaseIgnoredTags;
}
Options.prototype = {
  o: defaults,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(ir) {
    return ir;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(token) {
    return this.get("validate", token.toString(), token);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(key, operator, token) {
    const isCallable = operator != null;
    let option = this.o[key];
    if (!option) {
      return option;
    }
    if (typeof option === "object") {
      option = token.t in option ? option[token.t] : defaults[key];
      if (typeof option === "function" && isCallable) {
        option = option(operator, token);
      }
    } else if (typeof option === "function" && isCallable) {
      option = option(operator, token.t, token);
    }
    return option;
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(key, operator, token) {
    let obj = this.o[key];
    if (typeof obj === "function" && operator != null) {
      obj = obj(operator, token.t, token);
    }
    return obj;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(token) {
    const ir = token.render(this);
    const renderFn = this.get("render", null, token) || this.defaultRender;
    return renderFn(ir, token.t, token);
  }
};
function noop3(val) {
  return val;
}
var options = Object.freeze({
  __proto__: null,
  Options,
  assign,
  defaults
});
function MultiToken(value, tokens) {
  this.t = "token";
  this.v = value;
  this.tk = tokens;
}
MultiToken.prototype = {
  isLink: false,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
   */
  toHref(scheme2) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(options2) {
    const val = this.toString();
    const truncate = options2.get("truncate", val, this);
    const formatted = options2.get("format", val, this);
    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + "…" : formatted;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(options2) {
    return options2.get("formatHref", this.toHref(options2.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(protocol = defaults.defaultProtocol) {
    return {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(protocol),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(options2) {
    return {
      type: this.t,
      value: this.toFormattedString(options2),
      isLink: this.isLink,
      href: this.toFormattedHref(options2),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(options2) {
    return options2.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(options2) {
    const token = this;
    const href = this.toHref(options2.get("defaultProtocol"));
    const formattedHref = options2.get("formatHref", href, this);
    const tagName = options2.get("tagName", href, token);
    const content3 = this.toFormattedString(options2);
    const attributes = {};
    const className = options2.get("className", href, token);
    const target = options2.get("target", href, token);
    const rel = options2.get("rel", href, token);
    const attrs = options2.getObj("attributes", href, token);
    const eventListeners = options2.getObj("events", href, token);
    attributes.href = formattedHref;
    if (className) {
      attributes.class = className;
    }
    if (target) {
      attributes.target = target;
    }
    if (rel) {
      attributes.rel = rel;
    }
    if (attrs) {
      assign(attributes, attrs);
    }
    return {
      tagName,
      attributes,
      content: content3,
      eventListeners
    };
  }
};
function createTokenClass(type, props) {
  class Token extends MultiToken {
    constructor(value, tokens) {
      super(value, tokens);
      this.t = type;
    }
  }
  for (const p in props) {
    Token.prototype[p] = props[p];
  }
  Token.t = type;
  return Token;
}
var Email = createTokenClass("email", {
  isLink: true,
  toHref() {
    return "mailto:" + this.toString();
  }
});
var Text = createTokenClass("text");
var Nl = createTokenClass("nl");
var Url = createTokenClass("url", {
  isLink: true,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(scheme2 = defaults.defaultProtocol) {
    return this.hasProtocol() ? this.v : `${scheme2}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const tokens = this.tk;
    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;
  }
});
var multi = Object.freeze({
  __proto__: null,
  Base: MultiToken,
  Email,
  MultiToken,
  Nl,
  Text,
  Url,
  createTokenClass
});
var makeState = (arg) => new State(arg);
function init$1({
  groups
}) {
  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);
  const qsNonAccepting = [APOSTROPHE, COLON, COMMA, DOT, EXCLAMATION, PERCENT, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];
  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];
  const Start = makeState();
  const Localpart = tt(Start, TILDE);
  ta(Localpart, localpartAccepting, Localpart);
  ta(Localpart, groups.domain, Localpart);
  const Domain = makeState(), Scheme = makeState(), SlashScheme = makeState();
  ta(Start, groups.domain, Domain);
  ta(Start, groups.scheme, Scheme);
  ta(Start, groups.slashscheme, SlashScheme);
  ta(Domain, localpartAccepting, Localpart);
  ta(Domain, groups.domain, Domain);
  const LocalpartAt = tt(Domain, AT);
  tt(Localpart, AT, LocalpartAt);
  tt(Scheme, AT, LocalpartAt);
  tt(SlashScheme, AT, LocalpartAt);
  const LocalpartDot = tt(Localpart, DOT);
  ta(LocalpartDot, localpartAccepting, Localpart);
  ta(LocalpartDot, groups.domain, Localpart);
  const EmailDomain = makeState();
  ta(LocalpartAt, groups.domain, EmailDomain);
  ta(EmailDomain, groups.domain, EmailDomain);
  const EmailDomainDot = tt(EmailDomain, DOT);
  ta(EmailDomainDot, groups.domain, EmailDomain);
  const Email$1 = makeState(Email);
  ta(EmailDomainDot, groups.tld, Email$1);
  ta(EmailDomainDot, groups.utld, Email$1);
  tt(LocalpartAt, LOCALHOST, Email$1);
  const EmailDomainHyphen = tt(EmailDomain, HYPHEN);
  tt(EmailDomainHyphen, HYPHEN, EmailDomainHyphen);
  ta(EmailDomainHyphen, groups.domain, EmailDomain);
  ta(Email$1, groups.domain, EmailDomain);
  tt(Email$1, DOT, EmailDomainDot);
  tt(Email$1, HYPHEN, EmailDomainHyphen);
  const EmailColon = tt(Email$1, COLON);
  ta(EmailColon, groups.numeric, Email);
  const DomainHyphen = tt(Domain, HYPHEN);
  const DomainDot = tt(Domain, DOT);
  tt(DomainHyphen, HYPHEN, DomainHyphen);
  ta(DomainHyphen, groups.domain, Domain);
  ta(DomainDot, localpartAccepting, Localpart);
  ta(DomainDot, groups.domain, Domain);
  const DomainDotTld = makeState(Url);
  ta(DomainDot, groups.tld, DomainDotTld);
  ta(DomainDot, groups.utld, DomainDotTld);
  ta(DomainDotTld, groups.domain, Domain);
  ta(DomainDotTld, localpartAccepting, Localpart);
  tt(DomainDotTld, DOT, DomainDot);
  tt(DomainDotTld, HYPHEN, DomainHyphen);
  tt(DomainDotTld, AT, LocalpartAt);
  const DomainDotTldColon = tt(DomainDotTld, COLON);
  const DomainDotTldColonPort = makeState(Url);
  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);
  const Url$1 = makeState(Url);
  const UrlNonaccept = makeState();
  ta(Url$1, qsAccepting, Url$1);
  ta(Url$1, qsNonAccepting, UrlNonaccept);
  ta(UrlNonaccept, qsAccepting, Url$1);
  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);
  tt(DomainDotTld, SLASH, Url$1);
  tt(DomainDotTldColonPort, SLASH, Url$1);
  const SchemeColon = tt(Scheme, COLON);
  const SlashSchemeColon = tt(SlashScheme, COLON);
  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH);
  const UriPrefix = tt(SlashSchemeColonSlash, SLASH);
  ta(Scheme, groups.domain, Domain);
  tt(Scheme, DOT, DomainDot);
  tt(Scheme, HYPHEN, DomainHyphen);
  ta(SlashScheme, groups.domain, Domain);
  tt(SlashScheme, DOT, DomainDot);
  tt(SlashScheme, HYPHEN, DomainHyphen);
  ta(SchemeColon, groups.domain, Url$1);
  tt(SchemeColon, SLASH, Url$1);
  tt(SchemeColon, QUERY, Url$1);
  ta(UriPrefix, groups.domain, Url$1);
  ta(UriPrefix, qsAccepting, Url$1);
  tt(UriPrefix, SLASH, Url$1);
  const bracketPairs = [
    [OPENBRACE, CLOSEBRACE],
    // {}
    [OPENBRACKET, CLOSEBRACKET],
    // []
    [OPENPAREN, CLOSEPAREN],
    // ()
    [OPENANGLEBRACKET, CLOSEANGLEBRACKET],
    // <>
    [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],
    // （）
    [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],
    // 「」
    [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],
    // 『』
    [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN]
    // ＜＞
  ];
  for (let i = 0; i < bracketPairs.length; i++) {
    const [OPEN, CLOSE] = bracketPairs[i];
    const UrlOpen = tt(Url$1, OPEN);
    tt(UrlNonaccept, OPEN, UrlOpen);
    tt(UrlOpen, CLOSE, Url$1);
    const UrlOpenQ = makeState(Url);
    ta(UrlOpen, qsAccepting, UrlOpenQ);
    const UrlOpenSyms = makeState();
    ta(UrlOpen, qsNonAccepting);
    ta(UrlOpenQ, qsAccepting, UrlOpenQ);
    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);
    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);
    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);
    tt(UrlOpenQ, CLOSE, Url$1);
    tt(UrlOpenSyms, CLOSE, Url$1);
  }
  tt(Start, LOCALHOST, DomainDotTld);
  tt(Start, NL, Nl);
  return {
    start: Start,
    tokens: tk
  };
}
function run(start2, input, tokens) {
  let len = tokens.length;
  let cursor = 0;
  let multis = [];
  let textTokens = [];
  while (cursor < len) {
    let state = start2;
    let secondState = null;
    let nextState = null;
    let multiLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {
      textTokens.push(tokens[cursor++]);
    }
    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {
      secondState = null;
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts++;
      }
      cursor++;
      multiLength++;
    }
    if (sinceAccepts < 0) {
      cursor -= multiLength;
      if (cursor < len) {
        textTokens.push(tokens[cursor]);
        cursor++;
      }
    } else {
      if (textTokens.length > 0) {
        multis.push(initMultiToken(Text, input, textTokens));
        textTokens = [];
      }
      cursor -= sinceAccepts;
      multiLength -= sinceAccepts;
      const Multi = latestAccepting.t;
      const subtokens = tokens.slice(cursor - multiLength, cursor);
      multis.push(initMultiToken(Multi, input, subtokens));
    }
  }
  if (textTokens.length > 0) {
    multis.push(initMultiToken(Text, input, textTokens));
  }
  return multis;
}
function initMultiToken(Multi, input, tokens) {
  const startIdx = tokens[0].s;
  const endIdx = tokens[tokens.length - 1].e;
  const value = input.slice(startIdx, endIdx);
  return new Multi(value, tokens);
}
var INIT = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: false
};
function init2() {
  INIT.scanner = init$2(INIT.customSchemes);
  for (let i = 0; i < INIT.tokenQueue.length; i++) {
    INIT.tokenQueue[i][1]({
      scanner: INIT.scanner
    });
  }
  INIT.parser = init$1(INIT.scanner.tokens);
  for (let i = 0; i < INIT.pluginQueue.length; i++) {
    INIT.pluginQueue[i][1]({
      scanner: INIT.scanner,
      parser: INIT.parser
    });
  }
  INIT.initialized = true;
  return INIT;
}
function tokenize(str) {
  if (!INIT.initialized) {
    init2();
  }
  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));
}
tokenize.scan = run$1;
function find(str, type = null, opts = null) {
  if (type && typeof type === "object") {
    if (opts) {
      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);
    }
    opts = type;
    type = null;
  }
  const options2 = new Options(opts);
  const tokens = tokenize(str);
  const filtered = [];
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    if (token.isLink && (!type || token.t === type) && options2.check(token)) {
      filtered.push(token.toFormattedObject(options2));
    }
  }
  return filtered;
}
function test(str, type = null) {
  const tokens = tokenize(str);
  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);
}

// node_modules/stream-chat-react/dist/components/Attachment/VoiceRecording.js
var import_react92 = __toESM(require_react());
var rootClassName = "str-chat__message-attachment__voice-recording-widget";
var VoiceRecordingPlayer = function(_a) {
  var attachment = _a.attachment, playbackRates = _a.playbackRates;
  var t2 = useTranslationContext("VoiceRecordingPlayer").t;
  var asset_url = attachment.asset_url, _b = attachment.duration, duration = _b === void 0 ? 0 : _b, mime_type = attachment.mime_type, _c = attachment.title, title = _c === void 0 ? t2("Voice message") : _c, waveform_data = attachment.waveform_data;
  var _d = useAudioController({
    durationSeconds: duration !== null && duration !== void 0 ? duration : 0,
    mimeType: mime_type,
    playbackRates
  }), audioRef = _d.audioRef, increasePlaybackRate = _d.increasePlaybackRate, isPlaying = _d.isPlaying, playbackRate = _d.playbackRate, progress = _d.progress, secondsElapsed = _d.secondsElapsed, seek = _d.seek, togglePlay = _d.togglePlay;
  if (!asset_url)
    return null;
  var displayedDuration = secondsElapsed || duration;
  return import_react92.default.createElement(
    "div",
    { className: rootClassName, "data-testid": "voice-recording-widget" },
    import_react92.default.createElement(
      "audio",
      { ref: audioRef },
      import_react92.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: mime_type })
    ),
    import_react92.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }),
    import_react92.default.createElement(
      "div",
      { className: "str-chat__message-attachment__voice-recording-widget__metadata" },
      import_react92.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__title", "data-testid": "voice-recording-title", title }, title),
      import_react92.default.createElement(
        "div",
        { className: "str-chat__message-attachment__voice-recording-widget__audio-state" },
        import_react92.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(displayedDuration) : import_react92.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size, maximumFractionDigits: 0 })),
        import_react92.default.createElement(WaveProgressBar, { progress, seek, waveformData: waveform_data || [] })
      )
    ),
    import_react92.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__right-section" }, isPlaying ? import_react92.default.createElement(
      PlaybackRateButton,
      { disabled: !audioRef.current, onClick: increasePlaybackRate },
      playbackRate.toFixed(1),
      "x"
    ) : import_react92.default.createElement(FileIcon, { big: true, mimeType: mime_type, size: 40, version: "2" }))
  );
};
var QuotedVoiceRecording = function(_a) {
  var attachment = _a.attachment;
  var t2 = useTranslationContext().t;
  var title = attachment.title || t2("Voice message");
  return import_react92.default.createElement(
    "div",
    { className: rootClassName, "data-testid": "quoted-voice-recording-widget" },
    import_react92.default.createElement(
      "div",
      { className: "str-chat__message-attachment__voice-recording-widget__metadata" },
      title && import_react92.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__title", "data-testid": "voice-recording-title", title }, title),
      import_react92.default.createElement(
        "div",
        { className: "str-chat__message-attachment__voice-recording-widget__audio-state" },
        import_react92.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(attachment.duration) : import_react92.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size, maximumFractionDigits: 0 }))
      )
    ),
    import_react92.default.createElement(FileIcon, { big: true, mimeType: attachment.mime_type, size: 34, version: "2" })
  );
};
var VoiceRecording = function(_a) {
  var attachment = _a.attachment, isQuoted = _a.isQuoted;
  return isQuoted ? import_react92.default.createElement(QuotedVoiceRecording, { attachment }) : import_react92.default.createElement(VoiceRecordingPlayer, { attachment });
};

// node_modules/stream-chat-react/dist/components/Attachment/UnsupportedAttachment.js
var import_react93 = __toESM(require_react());
var UnsupportedAttachment = function(_a) {
  var attachment = _a.attachment;
  var t2 = useTranslationContext("UnsupportedAttachment").t;
  return import_react93.default.createElement(
    "div",
    { className: "str-chat__message-attachment-unsupported", "data-testid": "attachment-unsupported" },
    import_react93.default.createElement(FileIcon, { className: "str-chat__file-icon", version: "2" }),
    import_react93.default.createElement(
      "div",
      { className: "str-chat__message-attachment-unsupported__metadata" },
      import_react93.default.createElement("div", { className: "str-chat__message-attachment-unsupported__title", "data-testid": "unsupported-attachment-title" }, attachment.title || t2("Unsupported attachment"))
    )
  );
};
var NullComponent = function() {
  return null;
};

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentContainer.js
var AttachmentWithinContainer = function(_a) {
  var _b;
  var _c;
  var attachment = _a.attachment, children = _a.children, componentType = _a.componentType;
  var isGAT = isGalleryAttachmentType(attachment);
  var extra = "";
  if (!isGAT) {
    extra = componentType === "card" && !(attachment === null || attachment === void 0 ? void 0 : attachment.image_url) && !(attachment === null || attachment === void 0 ? void 0 : attachment.thumb_url) ? "no-image" : ((_c = attachment === null || attachment === void 0 ? void 0 : attachment.actions) === null || _c === void 0 ? void 0 : _c.length) ? "actions" : "";
  }
  var classNames = clsx_default("str-chat__message-attachment str-chat__message-attachment-dynamic-size", (_b = {}, _b["str-chat__message-attachment--".concat(componentType)] = componentType, _b["str-chat__message-attachment--".concat(attachment === null || attachment === void 0 ? void 0 : attachment.type)] = attachment === null || attachment === void 0 ? void 0 : attachment.type, _b["str-chat__message-attachment--".concat(componentType, "--").concat(extra)] = componentType && extra, _b["str-chat__message-attachment--svg-image"] = isSvgAttachment(attachment), _b["str-chat__message-attachment-with-actions"] = extra === "actions", _b));
  return import_react94.default.createElement("div", { className: classNames }, children);
};
var AttachmentActionsContainer = function(_a) {
  var _b;
  var actionHandler = _a.actionHandler, attachment = _a.attachment, _c = _a.AttachmentActions, AttachmentActions2 = _c === void 0 ? AttachmentActions : _c;
  if (!((_b = attachment.actions) === null || _b === void 0 ? void 0 : _b.length))
    return null;
  return import_react94.default.createElement(AttachmentActions2, __assign({}, attachment, { actionHandler, actions: attachment.actions, id: attachment.id || "", text: attachment.text || "" }));
};
function getCssDimensionsVariables(url) {
  var cssVars = {
    "--original-height": 1e6,
    "--original-width": 1e6
  };
  if (test(url, "url")) {
    var urlParams = new URL(url).searchParams;
    var oh = Number(urlParams.get("oh"));
    var ow = Number(urlParams.get("ow"));
    var originalHeight = oh > 1 ? oh : 1e6;
    var originalWidth = ow > 1 ? ow : 1e6;
    cssVars["--original-width"] = originalWidth;
    cssVars["--original-height"] = originalHeight;
  }
  return cssVars;
}
var GalleryContainer = function(_a) {
  var attachment = _a.attachment, _b = _a.Gallery, Gallery2 = _b === void 0 ? Gallery : _b;
  var imageElements = (0, import_react94.useRef)([]);
  var imageAttachmentSizeHandler = useChannelStateContext().imageAttachmentSizeHandler;
  var _c = (0, import_react94.useState)([]), attachmentConfigurations = _c[0], setAttachmentConfigurations = _c[1];
  (0, import_react94.useLayoutEffect)(function() {
    if (imageElements.current && imageElements.current.every(function(element3) {
      return !!element3;
    }) && imageAttachmentSizeHandler) {
      var newConfigurations_1 = [];
      imageElements.current.forEach(function(element3, i) {
        var config = imageAttachmentSizeHandler(attachment.images[i], element3);
        newConfigurations_1.push(config);
      });
      setAttachmentConfigurations(newConfigurations_1);
    }
  }, [imageElements, imageAttachmentSizeHandler, attachment]);
  var images = attachment.images.map(function(image2, i) {
    var _a2, _b2, _c2;
    return __assign(__assign({}, image2), { previewUrl: ((_a2 = attachmentConfigurations[i]) === null || _a2 === void 0 ? void 0 : _a2.url) || "about:blank", style: getCssDimensionsVariables(((_b2 = attachment.images[i]) === null || _b2 === void 0 ? void 0 : _b2.image_url) || ((_c2 = attachment.images[i]) === null || _c2 === void 0 ? void 0 : _c2.thumb_url) || "") });
  });
  return import_react94.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "gallery" },
    import_react94.default.createElement(Gallery2, { images: images || [], innerRefs: imageElements, key: "gallery" })
  );
};
var ImageContainer = function(props) {
  var attachment = props.attachment, _a = props.Image, Image2 = _a === void 0 ? ImageComponent : _a;
  var componentType = "image";
  var imageElement = (0, import_react94.useRef)(null);
  var imageAttachmentSizeHandler = useChannelStateContext().imageAttachmentSizeHandler;
  var _b = (0, import_react94.useState)(void 0), attachmentConfiguration = _b[0], setAttachmentConfiguration = _b[1];
  (0, import_react94.useLayoutEffect)(function() {
    if (imageElement.current && imageAttachmentSizeHandler) {
      var config = imageAttachmentSizeHandler(attachment, imageElement.current);
      setAttachmentConfiguration(config);
    }
  }, [imageElement, imageAttachmentSizeHandler, attachment]);
  var imageConfig = __assign(__assign({}, attachment), { previewUrl: (attachmentConfiguration === null || attachmentConfiguration === void 0 ? void 0 : attachmentConfiguration.url) || "about:blank", style: getCssDimensionsVariables(attachment.image_url || attachment.thumb_url || "") });
  if (attachment.actions && attachment.actions.length) {
    return import_react94.default.createElement(
      AttachmentWithinContainer,
      { attachment, componentType },
      import_react94.default.createElement(
        "div",
        { className: "str-chat__attachment" },
        import_react94.default.createElement(Image2, __assign({}, imageConfig, { innerRef: imageElement })),
        import_react94.default.createElement(AttachmentActionsContainer, __assign({}, props))
      )
    );
  }
  return import_react94.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react94.default.createElement(Image2, __assign({}, imageConfig, { innerRef: imageElement }))
  );
};
var CardContainer = function(props) {
  var attachment = props.attachment, _a = props.Card, Card2 = _a === void 0 ? Card : _a;
  var componentType = "card";
  if (attachment.actions && attachment.actions.length) {
    return import_react94.default.createElement(
      AttachmentWithinContainer,
      { attachment, componentType },
      import_react94.default.createElement(
        "div",
        { className: "str-chat__attachment" },
        import_react94.default.createElement(Card2, __assign({}, attachment)),
        import_react94.default.createElement(AttachmentActionsContainer, __assign({}, props))
      )
    );
  }
  return import_react94.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react94.default.createElement(Card2, __assign({}, attachment))
  );
};
var FileContainer = function(_a) {
  var attachment = _a.attachment, _b = _a.File, File2 = _b === void 0 ? FileAttachment : _b;
  if (!attachment.asset_url)
    return null;
  return import_react94.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "file" },
    import_react94.default.createElement(File2, { attachment })
  );
};
var AudioContainer = function(_a) {
  var attachment = _a.attachment, _b = _a.Audio, Audio2 = _b === void 0 ? Audio : _b;
  return import_react94.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "audio" },
    import_react94.default.createElement(
      "div",
      { className: "str-chat__attachment" },
      import_react94.default.createElement(Audio2, { og: attachment })
    )
  );
};
var VoiceRecordingContainer = function(_a) {
  var attachment = _a.attachment, _b = _a.VoiceRecording, VoiceRecording2 = _b === void 0 ? VoiceRecording : _b, isQuoted = _a.isQuoted;
  return import_react94.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "voiceRecording" },
    import_react94.default.createElement(
      "div",
      { className: "str-chat__attachment" },
      import_react94.default.createElement(VoiceRecording2, { attachment, isQuoted })
    )
  );
};
var MediaContainer = function(props) {
  var _a;
  var attachment = props.attachment, _b = props.Media, Media = _b === void 0 ? import_react_player3.default : _b;
  var componentType = "media";
  var _c = useChannelStateContext(), shouldGenerateVideoThumbnail = _c.shouldGenerateVideoThumbnail, videoAttachmentSizeHandler = _c.videoAttachmentSizeHandler;
  var videoElement = (0, import_react94.useRef)(null);
  var _d = (0, import_react94.useState)(), attachmentConfiguration = _d[0], setAttachmentConfiguration = _d[1];
  (0, import_react94.useLayoutEffect)(function() {
    if (videoElement.current && videoAttachmentSizeHandler) {
      var config = videoAttachmentSizeHandler(attachment, videoElement.current, shouldGenerateVideoThumbnail);
      setAttachmentConfiguration(config);
    }
  }, [videoElement, videoAttachmentSizeHandler, attachment]);
  var content3 = import_react94.default.createElement(
    "div",
    { className: "str-chat__player-wrapper", "data-testid": "video-wrapper", ref: videoElement, style: getCssDimensionsVariables(attachment.thumb_url || "") },
    import_react94.default.createElement(Media, { className: "react-player", config: { file: { attributes: { poster: attachmentConfiguration === null || attachmentConfiguration === void 0 ? void 0 : attachmentConfiguration.thumbUrl } } }, controls: true, height: "100%", url: attachmentConfiguration === null || attachmentConfiguration === void 0 ? void 0 : attachmentConfiguration.url, width: "100%" })
  );
  return ((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length) ? import_react94.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react94.default.createElement(
      "div",
      { className: "str-chat__attachment str-chat__attachment-media" },
      content3,
      import_react94.default.createElement(AttachmentActionsContainer, __assign({}, props))
    )
  ) : import_react94.default.createElement(AttachmentWithinContainer, { attachment, componentType }, content3);
};
var UnsupportedAttachmentContainer = function(_a) {
  var attachment = _a.attachment, _b = _a.UnsupportedAttachment, UnsupportedAttachment2 = _b === void 0 ? UnsupportedAttachment : _b;
  return import_react94.default.createElement(
    import_react94.default.Fragment,
    null,
    import_react94.default.createElement(UnsupportedAttachment2, { attachment })
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/Attachment.js
var CONTAINER_MAP = {
  audio: AudioContainer,
  card: CardContainer,
  file: FileContainer,
  media: MediaContainer,
  unsupported: UnsupportedAttachmentContainer,
  voiceRecording: VoiceRecordingContainer
};
var ATTACHMENT_GROUPS_ORDER = [
  "card",
  "gallery",
  "image",
  "media",
  "audio",
  "voiceRecording",
  "file",
  "unsupported"
];
var Attachment = function(props) {
  var attachments = props.attachments;
  var groupedAttachments = (0, import_react95.useMemo)(function() {
    return renderGroupedAttachments(props);
  }, [attachments]);
  return import_react95.default.createElement("div", { className: "str-chat__attachment-list" }, ATTACHMENT_GROUPS_ORDER.reduce(function(acc, groupName) {
    return __spreadArray(__spreadArray([], acc, true), groupedAttachments[groupName], true);
  }, []));
};
var renderGroupedAttachments = function(_a) {
  var attachments = _a.attachments, rest = __rest(_a, ["attachments"]);
  var uploadedImages = attachments.filter(function(attachment) {
    return isUploadedImage(attachment);
  });
  var containers = attachments.filter(function(attachment) {
    return !isUploadedImage(attachment);
  }).reduce(function(typeMap, attachment) {
    var attachmentType = getAttachmentType(attachment);
    var Container = CONTAINER_MAP[attachmentType];
    typeMap[attachmentType].push(import_react95.default.createElement(Container, __assign({ key: "".concat(attachmentType, "-").concat(typeMap[attachmentType].length) }, rest, { attachment })));
    return typeMap;
  }, {
    audio: [],
    card: [],
    file: [],
    media: [],
    unsupported: [],
    // not used in reduce
    // eslint-disable-next-line sort-keys
    image: [],
    // eslint-disable-next-line sort-keys
    gallery: [],
    voiceRecording: []
  });
  if (uploadedImages.length > 1) {
    containers["gallery"] = [
      import_react95.default.createElement(GalleryContainer, __assign({ key: "gallery-container" }, rest, { attachment: {
        images: uploadedImages,
        type: "gallery"
      } }))
    ];
  } else if (uploadedImages.length === 1) {
    containers["image"] = [
      import_react95.default.createElement(ImageContainer, __assign({ key: "image-container" }, rest, { attachment: uploadedImages[0] }))
    ];
  }
  return containers;
};
var getAttachmentType = function(attachment) {
  if (isScrapedContent(attachment)) {
    return "card";
  } else if (isMediaAttachment(attachment)) {
    return "media";
  } else if (isAudioAttachment(attachment)) {
    return "audio";
  } else if (isVoiceRecordingAttachment(attachment)) {
    return "voiceRecording";
  } else if (isFileAttachment(attachment)) {
    return "file";
  }
  return "unsupported";
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Item.js
var import_react96 = __toESM(require_react());
var Item = import_react96.default.forwardRef(function Item2(props, innerRef) {
  var className = props.className, Component2 = props.component, item = props.item, onClickHandler = props.onClickHandler, onSelectHandler = props.onSelectHandler, selected = props.selected, style = props.style;
  var themeVersion = useChatContext("SuggestionItem").themeVersion;
  var handleSelect = (0, import_react96.useCallback)(function() {
    return onSelectHandler(item);
  }, [item, onSelectHandler]);
  var handleClick = (0, import_react96.useCallback)(function(event) {
    return onClickHandler(event, item);
  }, [item, onClickHandler]);
  if (themeVersion === "2")
    return import_react96.default.createElement(
      "li",
      { className: clsx_default(className, { "str-chat__suggestion-item--selected": selected }), style },
      import_react96.default.createElement(
        "a",
        { href: "", onClick: handleClick, onFocus: handleSelect, onMouseEnter: handleSelect, ref: innerRef },
        import_react96.default.createElement(Component2, { entity: item, selected })
      )
    );
  return import_react96.default.createElement(
    "li",
    { className: clsx_default("rta__item", className), style },
    import_react96.default.createElement(
      "button",
      { className: clsx_default("rta__entity", { "rta__entity--selected": selected }), onClick: handleClick, onFocus: handleSelect, onMouseEnter: handleSelect, ref: innerRef },
      import_react96.default.createElement(
        "div",
        { tabIndex: -1 },
        import_react96.default.createElement(Component2, { entity: item, selected })
      )
    )
  );
});

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/List.js
var import_react105 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Header.js
var import_react97 = __toESM(require_react());
var DefaultSuggestionListHeader = function(props) {
  var currentTrigger = props.currentTrigger, value = props.value;
  var t2 = useTranslationContext("DefaultSuggestionListHeader").t;
  var triggerIndex = value.lastIndexOf(currentTrigger);
  if (currentTrigger === "/") {
    return import_react97.default.createElement(
      import_react97.default.Fragment,
      null,
      t2("Commands matching"),
      " ",
      import_react97.default.createElement("strong", null, value.slice(triggerIndex + 1))
    );
  }
  if (currentTrigger === ":") {
    return import_react97.default.createElement(
      import_react97.default.Fragment,
      null,
      t2("Emoji matching"),
      " ",
      import_react97.default.createElement("strong", null, value.slice(triggerIndex + 1))
    );
  }
  if (currentTrigger === "@") {
    return import_react97.default.createElement(
      import_react97.default.Fragment,
      null,
      t2("People matching"),
      " ",
      import_react97.default.createElement("strong", null, value.slice(triggerIndex + 1))
    );
  }
  return null;
};

// node_modules/stream-chat-react/dist/components/Message/renderText/regex.js
function escapeRegExp(text5) {
  return text5.replace(/[-[\]{}()*+?.,/\\^$|#]/g, "\\$&");
}
var detectHttp = /(http(s?):\/\/)?(www\.)?/;
var messageCodeBlocks = function(message) {
  var codeRegex = /```[a-z]*\n[\s\S]*?\n```|`[a-z]*[\s\S]*?`/gm;
  var matches = message.match(codeRegex);
  return matches || [];
};
var matchMarkdownLinks = function(message) {
  var regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
  var matches = message.match(regexMdLinks);
  var singleMatch = /\[([^[]+)\]\((.*)\)/;
  var links = matches ? matches.map(function(match) {
    var i = singleMatch.exec(match);
    return i && [i[1], i[2]];
  }) : [];
  return links.flat();
};

// node_modules/unist-util-visit-parents/node_modules/unist-util-is/lib/index.js
var convert = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(test2) {
    if (test2 === null || test2 === void 0) {
      return ok;
    }
    if (typeof test2 === "function") {
      return castFactory(test2);
    }
    if (typeof test2 === "object") {
      return Array.isArray(test2) ? anyFactory(test2) : propsFactory(test2);
    }
    if (typeof test2 === "string") {
      return typeFactory(test2);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory(tests) {
  const checks2 = [];
  let index4 = -1;
  while (++index4 < tests.length) {
    checks2[index4] = convert(tests[index4]);
  }
  return castFactory(any);
  function any(...parameters) {
    let index5 = -1;
    while (++index5 < checks2.length) {
      if (checks2[index5].apply(this, parameters)) return true;
    }
    return false;
  }
}
function propsFactory(check) {
  const checkAsRecord = (
    /** @type {Record<string, unknown>} */
    check
  );
  return castFactory(all3);
  function all3(node2) {
    const nodeAsRecord = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      node2
    );
    let key;
    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory(testFunction) {
  return check;
  function check(value, index4, parent) {
    return Boolean(
      looksLikeANode(value) && testFunction.call(
        this,
        value,
        typeof index4 === "number" ? index4 : void 0,
        parent || void 0
      )
    );
  }
}
function ok() {
  return true;
}
function looksLikeANode(value) {
  return value !== null && typeof value === "object" && "type" in value;
}

// node_modules/unist-util-visit-parents/lib/color.js
function color(d) {
  return d;
}

// node_modules/unist-util-visit-parents/lib/index.js
var empty = [];
var CONTINUE = true;
var EXIT = false;
var SKIP = "skip";
function visitParents(tree, test2, visitor3, reverse) {
  let check;
  if (typeof test2 === "function" && typeof visitor3 !== "function") {
    reverse = visitor3;
    visitor3 = test2;
  } else {
    check = test2;
  }
  const is4 = convert(check);
  const step = reverse ? -1 : 1;
  factory(tree, void 0, [])();
  function factory(node2, index4, parents) {
    const value = (
      /** @type {Record<string, unknown>} */
      node2 && typeof node2 === "object" ? node2 : {}
    );
    if (typeof value.type === "string") {
      const name = (
        // `hast`
        typeof value.tagName === "string" ? value.tagName : (
          // `xast`
          typeof value.name === "string" ? value.name : void 0
        )
      );
      Object.defineProperty(visit5, "name", {
        value: "node (" + color(node2.type + (name ? "<" + name + ">" : "")) + ")"
      });
    }
    return visit5;
    function visit5() {
      let result = empty;
      let subresult;
      let offset2;
      let grandparents;
      if (!test2 || is4(node2, index4, parents[parents.length - 1] || void 0)) {
        result = toResult(visitor3(node2, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if ("children" in node2 && node2.children) {
        const nodeAsParent = (
          /** @type {UnistParent} */
          node2
        );
        if (nodeAsParent.children && result[0] !== SKIP) {
          offset2 = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents = parents.concat(nodeAsParent);
          while (offset2 > -1 && offset2 < nodeAsParent.children.length) {
            const child = nodeAsParent.children[offset2];
            subresult = factory(child, offset2, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
          }
        }
      }
      return result;
    }
  }
}
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return value === null || value === void 0 ? empty : [value];
}

// node_modules/hast-util-is-element/lib/index.js
var convertElement = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {Check}
   */
  function(test2) {
    if (test2 === null || test2 === void 0) {
      return element;
    }
    if (typeof test2 === "string") {
      return tagNameFactory(test2);
    }
    if (typeof test2 === "object") {
      return anyFactory2(test2);
    }
    if (typeof test2 === "function") {
      return castFactory2(test2);
    }
    throw new Error("Expected function, string, or array as `test`");
  }
);
function anyFactory2(tests) {
  const checks2 = [];
  let index4 = -1;
  while (++index4 < tests.length) {
    checks2[index4] = convertElement(tests[index4]);
  }
  return castFactory2(any);
  function any(...parameters) {
    let index5 = -1;
    while (++index5 < checks2.length) {
      if (checks2[index5].apply(this, parameters)) return true;
    }
    return false;
  }
}
function tagNameFactory(check) {
  return castFactory2(tagName);
  function tagName(element3) {
    return element3.tagName === check;
  }
}
function castFactory2(testFunction) {
  return check;
  function check(value, index4, parent) {
    return Boolean(
      looksLikeAnElement(value) && testFunction.call(
        this,
        value,
        typeof index4 === "number" ? index4 : void 0,
        parent || void 0
      )
    );
  }
}
function element(element3) {
  return Boolean(
    element3 && typeof element3 === "object" && "type" in element3 && element3.type === "element" && "tagName" in element3 && typeof element3.tagName === "string"
  );
}
function looksLikeAnElement(value) {
  return value !== null && typeof value === "object" && "type" in value && "tagName" in value;
}

// node_modules/hast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/hast-util-find-and-replace/lib/index.js
var emptyOptions = {};
var defaultIgnore = ["math", "script", "style", "svg", "title"];
function findAndReplace(tree, list3, options2) {
  const settings = options2 || emptyOptions;
  const ignored = convertElement(settings.ignore || defaultIgnore);
  const pairs = toPairs(list3);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor3);
  }
  function visitor3(node2, parents) {
    let index4 = -1;
    let grandparent;
    while (++index4 < parents.length) {
      const parent = parents[index4];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node2, parents);
    }
  }
  function handler(node2, parents) {
    const parent = parents[parents.length - 1];
    const find4 = pairs[pairIndex][0];
    const replace2 = pairs[pairIndex][1];
    let start2 = 0;
    const siblings = parent.children;
    const index4 = siblings.indexOf(node2);
    let change = false;
    let nodes = [];
    find4.lastIndex = 0;
    let match = find4.exec(node2.value);
    while (match) {
      const position3 = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents, node2]
      };
      let value = replace2(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find4.lastIndex = position3 + 1;
      } else {
        if (start2 !== position3) {
          nodes.push({ type: "text", value: node2.value.slice(start2, position3) });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start2 = position3 + match[0].length;
        change = true;
      }
      if (!find4.global) {
        break;
      }
      match = find4.exec(node2.value);
    }
    if (change) {
      if (start2 < node2.value.length) {
        nodes.push({ type: "text", value: node2.value.slice(start2) });
      }
      parent.children.splice(index4, 1, ...nodes);
    } else {
      nodes = [node2];
    }
    return index4 + nodes.length;
  }
}
function toPairs(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list3 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index4 = -1;
  while (++index4 < list3.length) {
    const tuple = list3[index4];
    result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
  }
  return result;
}
function toExpression(find4) {
  return typeof find4 === "string" ? new RegExp(escapeStringRegexp(find4), "g") : find4;
}
function toFunction(replace2) {
  return typeof replace2 === "function" ? replace2 : function() {
    return replace2;
  };
}

// node_modules/unist-builder/lib/index.js
var u = (
  /**
   * @type {(
   *   (<T extends string>(type: T) => {type: T}) &
   *   (<T extends string, P extends Props>(type: T, props: P) => {type: T} & P) &
   *   (<T extends string>(type: T, value: string) => {type: T, value: string}) &
   *   (<T extends string, P extends Props>(type: T, props: P, value: string) => {type: T, value: string} & P) &
   *   (<T extends string, C extends Array<Node>>(type: T, children: C) => {type: T, children: C}) &
   *   (<T extends string, P extends Props, C extends Array<Node>>(type: T, props: P, children: C) => {type: T, children: C} & P)
   * )}
   */
  /**
   * @param {string} type
   * @param {Props | ChildrenOrValue | null | undefined} [props]
   * @param {ChildrenOrValue | null | undefined} [value]
   * @returns {Node}
   */
  function(type, props, value) {
    const node2 = { type: String(type) };
    if ((value === void 0 || value === null) && (typeof props === "string" || Array.isArray(props))) {
      value = props;
    } else {
      Object.assign(node2, props);
    }
    if (Array.isArray(value)) {
      node2.children = value;
    } else if (value !== void 0 && value !== null) {
      node2.value = String(value);
    }
    return node2;
  }
);

// node_modules/stream-chat-react/dist/components/Message/renderText/rehypePlugins/emojiMarkdownPlugin.js
var import_emoji_regex = __toESM(require_emoji_regex());
var emojiMarkdownPlugin = function() {
  var replace2 = function(match) {
    return u("element", { properties: {}, tagName: "emoji" }, [u("text", match)]);
  };
  var transform3 = function(node2) {
    return findAndReplace(node2, [(0, import_emoji_regex.default)(), replace2]);
  };
  return transform3;
};

// node_modules/unist-util-visit/lib/index.js
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  let reverse;
  let test2;
  let visitor3;
  if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
    test2 = void 0;
    visitor3 = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    test2 = testOrVisitor;
    visitor3 = visitorOrReverse;
    reverse = maybeReverse;
  }
  visitParents(tree, test2, overload, reverse);
  function overload(node2, parents) {
    const parent = parents[parents.length - 1];
    const index4 = parent ? parent.children.indexOf(node2) : void 0;
    return visitor3(node2, index4, parent);
  }
}

// node_modules/stream-chat-react/dist/components/Message/renderText/rehypePlugins/mentionsMarkdownPlugin.js
var mentionsMarkdownPlugin = function(mentioned_users) {
  return function() {
    var mentioned_usernames = mentioned_users.map(function(user) {
      return user.name || user.id;
    }).filter(Boolean).map(escapeRegExp);
    var mentionedUsersRegex = new RegExp(mentioned_usernames.map(function(username) {
      return "@".concat(username);
    }).join("|"), "g");
    var replace2 = function(match) {
      var usernameOrId = match.replace("@", "");
      var user = mentioned_users.find(function(_a) {
        var id = _a.id, name = _a.name;
        return name === usernameOrId || id === usernameOrId;
      });
      return u("element", { mentionedUser: user, properties: {}, tagName: "mention" }, [
        u("text", match)
      ]);
    };
    var transform3 = function(tree) {
      if (!mentioned_usernames.length)
        return;
      visit(tree, function(node2, index4, parent) {
        var _a;
        if (typeof index4 === "undefined")
          return;
        if (!parent)
          return;
        var nextChild = parent.children.at(index4 + 1);
        var nextChildHref = (_a = nextChild === null || nextChild === void 0 ? void 0 : nextChild.properties) === null || _a === void 0 ? void 0 : _a.href;
        if (node2.type === "text" && // text value has to have @ sign at the end of the string
        // and no other characters except whitespace can precede it
        // valid cases:   "text @", "@", " @"
        // invalid cases: "text@", "@text",
        /.?\s?@$|^@$/.test(node2.value) && (nextChildHref === null || nextChildHref === void 0 ? void 0 : nextChildHref.startsWith("mailto:"))) {
          var newTextValue = node2.value.replace(/@$/, "");
          var username = nextChildHref.replace("mailto:", "");
          parent.children[index4] = u("text", newTextValue);
          parent.children[index4 + 1] = u("text", "@".concat(username));
        }
      });
      findAndReplace(tree, [mentionedUsersRegex, replace2]);
    };
    return transform3;
  };
};

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/htmlToTextPlugin.js
var visitor = function(node2) {
  if (node2.type !== "html")
    return;
  node2.type = "text";
};
var transform = function(tree) {
  visit(tree, visitor);
};
var htmlToTextPlugin = function() {
  return transform;
};

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/keepLineBreaksPlugin.js
var visitor2 = function(node2, index4, parent) {
  if (!(index4 && parent && node2.position))
    return;
  var prevSibling = parent.children.at(index4 - 1);
  if (!(prevSibling === null || prevSibling === void 0 ? void 0 : prevSibling.position))
    return;
  if (node2.position.start.line === prevSibling.position.start.line)
    return;
  var ownStartLine = node2.position.start.line;
  var prevEndLine = prevSibling.position.end.line;
  var countTruncatedLineBreaks = ownStartLine - prevEndLine - 1;
  if (countTruncatedLineBreaks < 1)
    return;
  var lineBreaks = Array.from({ length: countTruncatedLineBreaks }, function() {
    return u("break", { tagName: "br" });
  });
  parent.children = __spreadArray(__spreadArray(__spreadArray([], parent.children.slice(0, index4), true), lineBreaks, true), parent.children.slice(index4), true);
  return;
};
var transform2 = function(tree) {
  visit(tree, visitor2);
};
var keepLineBreaksPlugin = function() {
  return transform2;
};

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var import_react104 = __toESM(require_react());

// node_modules/react-markdown/lib/uri-transformer.js
var protocols = ["http", "https", "mailto", "tel"];
function uriTransformer(uri) {
  const url = (uri || "").trim();
  const first = url.charAt(0);
  if (first === "#" || first === "/") {
    return url;
  }
  const colon = url.indexOf(":");
  if (colon === -1) {
    return url;
  }
  let index4 = -1;
  while (++index4 < protocols.length) {
    const protocol = protocols[index4];
    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
      return url;
    }
  }
  index4 = url.indexOf("?");
  if (index4 !== -1 && colon > index4) {
    return url;
  }
  index4 = url.indexOf("#");
  if (index4 !== -1 && colon > index4) {
    return url;
  }
  return "javascript:void(0)";
}

// node_modules/react-markdown/lib/react-markdown.js
var import_react99 = __toESM(require_react(), 1);

// node_modules/vfile/lib/index.js
var import_is_buffer = __toESM(require_is_buffer(), 1);

// node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position(value.position);
  }
  if ("start" in value || "end" in value) {
    return position(value);
  }
  if ("line" in value || "column" in value) {
    return point(value);
  }
  return "";
}
function point(point4) {
  return index(point4 && point4.line) + ":" + index(point4 && point4.column);
}
function position(pos) {
  return point(pos && pos.start) + "-" + point(pos && pos.end);
}
function index(value) {
  return value && typeof value === "number" ? value : 1;
}

// node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
  /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > 👉 **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // To do: next major: expose `undefined` everywhere instead of `null`.
  constructor(reason, place, origin) {
    const parts = [null, null];
    let position3 = {
      // @ts-expect-error: we always follows the structure of `position`.
      start: { line: null, column: null },
      // @ts-expect-error: "
      end: { line: null, column: null }
    };
    super();
    if (typeof place === "string") {
      origin = place;
      place = void 0;
    }
    if (typeof origin === "string") {
      const index4 = origin.indexOf(":");
      if (index4 === -1) {
        parts[1] = origin;
      } else {
        parts[0] = origin.slice(0, index4);
        parts[1] = origin.slice(index4 + 1);
      }
    }
    if (place) {
      if ("type" in place || "position" in place) {
        if (place.position) {
          position3 = place.position;
        }
      } else if ("start" in place || "end" in place) {
        position3 = place;
      } else if ("line" in place || "column" in place) {
        position3.start = place;
      }
    }
    this.name = stringifyPosition(place) || "1:1";
    this.message = typeof reason === "object" ? reason.message : reason;
    this.stack = "";
    if (typeof reason === "object" && reason.stack) {
      this.stack = reason.stack;
    }
    this.reason = this.message;
    this.fatal;
    this.line = position3.start.line;
    this.column = position3.start.column;
    this.position = position3;
    this.source = parts[0];
    this.ruleId = parts[1];
    this.file;
    this.actual;
    this.expected;
    this.url;
    this.note;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;

// node_modules/vfile/lib/minpath.browser.js
var path = { basename, dirname, extname, join, sep: "/" };
function basename(path3, ext) {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path3);
  let start2 = 0;
  let end2 = -1;
  let index4 = path3.length;
  let seenNonSlash;
  if (ext === void 0 || ext.length === 0 || ext.length > path3.length) {
    while (index4--) {
      if (path3.charCodeAt(index4) === 47) {
        if (seenNonSlash) {
          start2 = index4 + 1;
          break;
        }
      } else if (end2 < 0) {
        seenNonSlash = true;
        end2 = index4 + 1;
      }
    }
    return end2 < 0 ? "" : path3.slice(start2, end2);
  }
  if (ext === path3) {
    return "";
  }
  let firstNonSlashEnd = -1;
  let extIndex = ext.length - 1;
  while (index4--) {
    if (path3.charCodeAt(index4) === 47) {
      if (seenNonSlash) {
        start2 = index4 + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        seenNonSlash = true;
        firstNonSlashEnd = index4 + 1;
      }
      if (extIndex > -1) {
        if (path3.charCodeAt(index4) === ext.charCodeAt(extIndex--)) {
          if (extIndex < 0) {
            end2 = index4;
          }
        } else {
          extIndex = -1;
          end2 = firstNonSlashEnd;
        }
      }
    }
  }
  if (start2 === end2) {
    end2 = firstNonSlashEnd;
  } else if (end2 < 0) {
    end2 = path3.length;
  }
  return path3.slice(start2, end2);
}
function dirname(path3) {
  assertPath(path3);
  if (path3.length === 0) {
    return ".";
  }
  let end2 = -1;
  let index4 = path3.length;
  let unmatchedSlash;
  while (--index4) {
    if (path3.charCodeAt(index4) === 47) {
      if (unmatchedSlash) {
        end2 = index4;
        break;
      }
    } else if (!unmatchedSlash) {
      unmatchedSlash = true;
    }
  }
  return end2 < 0 ? path3.charCodeAt(0) === 47 ? "/" : "." : end2 === 1 && path3.charCodeAt(0) === 47 ? "//" : path3.slice(0, end2);
}
function extname(path3) {
  assertPath(path3);
  let index4 = path3.length;
  let end2 = -1;
  let startPart = 0;
  let startDot = -1;
  let preDotState = 0;
  let unmatchedSlash;
  while (index4--) {
    const code3 = path3.charCodeAt(index4);
    if (code3 === 47) {
      if (unmatchedSlash) {
        startPart = index4 + 1;
        break;
      }
      continue;
    }
    if (end2 < 0) {
      unmatchedSlash = true;
      end2 = index4 + 1;
    }
    if (code3 === 46) {
      if (startDot < 0) {
        startDot = index4;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      preDotState = -1;
    }
  }
  if (startDot < 0 || end2 < 0 || // We saw a non-dot character immediately before the dot.
  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end2 - 1 && startDot === startPart + 1) {
    return "";
  }
  return path3.slice(startDot, end2);
}
function join(...segments) {
  let index4 = -1;
  let joined;
  while (++index4 < segments.length) {
    assertPath(segments[index4]);
    if (segments[index4]) {
      joined = joined === void 0 ? segments[index4] : joined + "/" + segments[index4];
    }
  }
  return joined === void 0 ? "." : normalize(joined);
}
function normalize(path3) {
  assertPath(path3);
  const absolute = path3.charCodeAt(0) === 47;
  let value = normalizeString(path3, !absolute);
  if (value.length === 0 && !absolute) {
    value = ".";
  }
  if (value.length > 0 && path3.charCodeAt(path3.length - 1) === 47) {
    value += "/";
  }
  return absolute ? "/" + value : value;
}
function normalizeString(path3, allowAboveRoot) {
  let result = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index4 = -1;
  let code3;
  let lastSlashIndex;
  while (++index4 <= path3.length) {
    if (index4 < path3.length) {
      code3 = path3.charCodeAt(index4);
    } else if (code3 === 47) {
      break;
    } else {
      code3 = 47;
    }
    if (code3 === 47) {
      if (lastSlash === index4 - 1 || dots === 1) {
      } else if (lastSlash !== index4 - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf("/");
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = "";
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
              }
              lastSlash = index4;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = "";
            lastSegmentLength = 0;
            lastSlash = index4;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += "/" + path3.slice(lastSlash + 1, index4);
        } else {
          result = path3.slice(lastSlash + 1, index4);
        }
        lastSegmentLength = index4 - lastSlash - 1;
      }
      lastSlash = index4;
      dots = 0;
    } else if (code3 === 46 && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}
function assertPath(path3) {
  if (typeof path3 !== "string") {
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(path3)
    );
  }
}

// node_modules/vfile/lib/minproc.browser.js
var proc = { cwd };
function cwd() {
  return "/";
}

// node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
  return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && // @ts-expect-error: indexable.
  fileUrlOrPath.href && // @ts-expect-error: indexable.
  fileUrlOrPath.origin;
}

// node_modules/vfile/lib/minurl.browser.js
function urlToPath(path3) {
  if (typeof path3 === "string") {
    path3 = new URL(path3);
  } else if (!isUrl(path3)) {
    const error2 = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + path3 + "`"
    );
    error2.code = "ERR_INVALID_ARG_TYPE";
    throw error2;
  }
  if (path3.protocol !== "file:") {
    const error2 = new TypeError("The URL must be of scheme file");
    error2.code = "ERR_INVALID_URL_SCHEME";
    throw error2;
  }
  return getPathFromURLPosix(path3);
}
function getPathFromURLPosix(url) {
  if (url.hostname !== "") {
    const error2 = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error2.code = "ERR_INVALID_FILE_URL_HOST";
    throw error2;
  }
  const pathname = url.pathname;
  let index4 = -1;
  while (++index4 < pathname.length) {
    if (pathname.charCodeAt(index4) === 37 && pathname.charCodeAt(index4 + 1) === 50) {
      const third = pathname.charCodeAt(index4 + 2);
      if (third === 70 || third === 102) {
        const error2 = new TypeError(
          "File URL path must not include encoded / characters"
        );
        error2.code = "ERR_INVALID_FILE_URL_PATH";
        throw error2;
      }
    }
  }
  return decodeURIComponent(pathname);
}

// node_modules/vfile/lib/index.js
var order = ["history", "path", "basename", "stem", "extname", "dirname"];
var VFile = class {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    let options2;
    if (!value) {
      options2 = {};
    } else if (typeof value === "string" || buffer(value)) {
      options2 = { value };
    } else if (isUrl(value)) {
      options2 = { path: value };
    } else {
      options2 = value;
    }
    this.data = {};
    this.messages = [];
    this.history = [];
    this.cwd = proc.cwd();
    this.value;
    this.stored;
    this.result;
    this.map;
    let index4 = -1;
    while (++index4 < order.length) {
      const prop2 = order[index4];
      if (prop2 in options2 && options2[prop2] !== void 0 && options2[prop2] !== null) {
        this[prop2] = prop2 === "history" ? [...options2[prop2]] : options2[prop2];
      }
    }
    let prop;
    for (prop in options2) {
      if (!order.includes(prop)) {
        this[prop] = options2[prop];
      }
    }
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */
  set path(path3) {
    if (isUrl(path3)) {
      path3 = urlToPath(path3);
    }
    assertNonEmpty(path3, "path");
    if (this.path !== path3) {
      this.history.push(path3);
    }
  }
  /**
   * Get the parent path (example: `'~'`).
   */
  get dirname() {
    return typeof this.path === "string" ? path.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   */
  set dirname(dirname2) {
    assertPath2(this.basename, "dirname");
    this.path = path.join(dirname2 || "", this.basename);
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */
  get basename() {
    return typeof this.path === "string" ? path.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set basename(basename2) {
    assertNonEmpty(basename2, "basename");
    assertPart(basename2, "basename");
    this.path = path.join(this.dirname || "", basename2);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   */
  get extname() {
    return typeof this.path === "string" ? path.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   */
  set extname(extname2) {
    assertPart(extname2, "extname");
    assertPath2(this.dirname, "extname");
    if (extname2) {
      if (extname2.charCodeAt(0) !== 46) {
        throw new Error("`extname` must start with `.`");
      }
      if (extname2.includes(".", 1)) {
        throw new Error("`extname` cannot contain multiple dots");
      }
    }
    this.path = path.join(this.dirname, this.stem + (extname2 || ""));
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */
  get stem() {
    return typeof this.path === "string" ? path.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set stem(stem) {
    assertNonEmpty(stem, "stem");
    assertPart(stem, "stem");
    this.path = path.join(this.dirname || "", stem + (this.extname || ""));
  }
  /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    return (this.value || "").toString(encoding || void 0);
  }
  /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(reason, place, origin) {
    const message = new VFileMessage(reason, place, origin);
    if (this.path) {
      message.name = this.path + ":" + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }
  /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = null;
    return message;
  }
  /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > 👉 **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = true;
    throw message;
  }
};
function assertPart(part, name) {
  if (part && part.includes(path.sep)) {
    throw new Error(
      "`" + name + "` cannot be a path: did not expect `" + path.sep + "`"
    );
  }
}
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error("`" + name + "` cannot be empty");
  }
}
function assertPath2(path3, name) {
  if (!path3) {
    throw new Error("Setting `" + name + "` requires `path` to be set too");
  }
}
function buffer(value) {
  return (0, import_is_buffer.default)(value);
}

// node_modules/bail/index.js
function bail(error2) {
  if (error2) {
    throw error2;
  }
}

// node_modules/unified/lib/index.js
var import_is_buffer2 = __toESM(require_is_buffer(), 1);
var import_extend = __toESM(require_extend(), 1);

// node_modules/is-plain-obj/index.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

// node_modules/trough/lib/index.js
function trough() {
  const fns = [];
  const pipeline = { run: run3, use: use2 };
  return pipeline;
  function run3(...values2) {
    let middlewareIndex = -1;
    const callback = values2.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next(null, ...values2);
    function next(error2, ...output2) {
      const fn2 = fns[++middlewareIndex];
      let index4 = -1;
      if (error2) {
        callback(error2);
        return;
      }
      while (++index4 < values2.length) {
        if (output2[index4] === null || output2[index4] === void 0) {
          output2[index4] = values2[index4];
        }
      }
      values2 = output2;
      if (fn2) {
        wrap(fn2, next)(...output2);
      } else {
        callback(null, ...output2);
      }
    }
  }
  function use2(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns.push(middelware);
    return pipeline;
  }
}
function wrap(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error2) {
      const exception = (
        /** @type {Error} */
        error2
      );
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result && result.then && typeof result.then === "function") {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error2, ...output2) {
    if (!called) {
      called = true;
      callback(error2, ...output2);
    }
  }
  function then(value) {
    done(null, value);
  }
}

// node_modules/unified/lib/index.js
var unified = base().freeze();
var own = {}.hasOwnProperty;
function base() {
  const transformers = trough();
  const attachers = [];
  let namespace = {};
  let frozen;
  let freezeIndex = -1;
  processor.data = data;
  processor.Parser = void 0;
  processor.Compiler = void 0;
  processor.freeze = freeze;
  processor.attachers = attachers;
  processor.use = use2;
  processor.parse = parse2;
  processor.stringify = stringify4;
  processor.run = run3;
  processor.runSync = runSync;
  processor.process = process2;
  processor.processSync = processSync;
  return processor;
  function processor() {
    const destination = base();
    let index4 = -1;
    while (++index4 < attachers.length) {
      destination.use(...attachers[index4]);
    }
    destination.data((0, import_extend.default)(true, {}, namespace));
    return destination;
  }
  function data(key, value) {
    if (typeof key === "string") {
      if (arguments.length === 2) {
        assertUnfrozen("data", frozen);
        namespace[key] = value;
        return processor;
      }
      return own.call(namespace, key) && namespace[key] || null;
    }
    if (key) {
      assertUnfrozen("data", frozen);
      namespace = key;
      return processor;
    }
    return namespace;
  }
  function freeze() {
    if (frozen) {
      return processor;
    }
    while (++freezeIndex < attachers.length) {
      const [attacher, ...options2] = attachers[freezeIndex];
      if (options2[0] === false) {
        continue;
      }
      if (options2[0] === true) {
        options2[0] = void 0;
      }
      const transformer = attacher.call(processor, ...options2);
      if (typeof transformer === "function") {
        transformers.use(transformer);
      }
    }
    frozen = true;
    freezeIndex = Number.POSITIVE_INFINITY;
    return processor;
  }
  function use2(value, ...options2) {
    let settings;
    assertUnfrozen("use", frozen);
    if (value === null || value === void 0) {
    } else if (typeof value === "function") {
      addPlugin(value, ...options2);
    } else if (typeof value === "object") {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError("Expected usable value, not `" + value + "`");
    }
    if (settings) {
      namespace.settings = Object.assign(namespace.settings || {}, settings);
    }
    return processor;
    function add(value2) {
      if (typeof value2 === "function") {
        addPlugin(value2);
      } else if (typeof value2 === "object") {
        if (Array.isArray(value2)) {
          const [plugin, ...options3] = value2;
          addPlugin(plugin, ...options3);
        } else {
          addPreset(value2);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value2 + "`");
      }
    }
    function addPreset(result) {
      addList(result.plugins);
      if (result.settings) {
        settings = Object.assign(settings || {}, result.settings);
      }
    }
    function addList(plugins) {
      let index4 = -1;
      if (plugins === null || plugins === void 0) {
      } else if (Array.isArray(plugins)) {
        while (++index4 < plugins.length) {
          const thing = plugins[index4];
          add(thing);
        }
      } else {
        throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
      }
    }
    function addPlugin(plugin, value2) {
      let index4 = -1;
      let entry;
      while (++index4 < attachers.length) {
        if (attachers[index4][0] === plugin) {
          entry = attachers[index4];
          break;
        }
      }
      if (entry) {
        if (isPlainObject(entry[1]) && isPlainObject(value2)) {
          value2 = (0, import_extend.default)(true, entry[1], value2);
        }
        entry[1] = value2;
      } else {
        attachers.push([...arguments]);
      }
    }
  }
  function parse2(doc) {
    processor.freeze();
    const file = vfile(doc);
    const Parser = processor.Parser;
    assertParser("parse", Parser);
    if (newable(Parser, "parse")) {
      return new Parser(String(file), file).parse();
    }
    return Parser(String(file), file);
  }
  function stringify4(node2, doc) {
    processor.freeze();
    const file = vfile(doc);
    const Compiler = processor.Compiler;
    assertCompiler("stringify", Compiler);
    assertNode(node2);
    if (newable(Compiler, "compile")) {
      return new Compiler(node2, file).compile();
    }
    return Compiler(node2, file);
  }
  function run3(node2, doc, callback) {
    assertNode(node2);
    processor.freeze();
    if (!callback && typeof doc === "function") {
      callback = doc;
      doc = void 0;
    }
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);
    function executor(resolve, reject) {
      transformers.run(node2, vfile(doc), done);
      function done(error2, tree, file) {
        tree = tree || node2;
        if (error2) {
          reject(error2);
        } else if (resolve) {
          resolve(tree);
        } else {
          callback(null, tree, file);
        }
      }
    }
  }
  function runSync(node2, file) {
    let result;
    let complete;
    processor.run(node2, file, done);
    assertDone("runSync", "run", complete);
    return result;
    function done(error2, tree) {
      bail(error2);
      result = tree;
      complete = true;
    }
  }
  function process2(doc, callback) {
    processor.freeze();
    assertParser("process", processor.Parser);
    assertCompiler("process", processor.Compiler);
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);
    function executor(resolve, reject) {
      const file = vfile(doc);
      processor.run(processor.parse(file), file, (error2, tree, file2) => {
        if (error2 || !tree || !file2) {
          done(error2);
        } else {
          const result = processor.stringify(tree, file2);
          if (result === void 0 || result === null) {
          } else if (looksLikeAVFileValue(result)) {
            file2.value = result;
          } else {
            file2.result = result;
          }
          done(error2, file2);
        }
      });
      function done(error2, file2) {
        if (error2 || !file2) {
          reject(error2);
        } else if (resolve) {
          resolve(file2);
        } else {
          callback(null, file2);
        }
      }
    }
  }
  function processSync(doc) {
    let complete;
    processor.freeze();
    assertParser("processSync", processor.Parser);
    assertCompiler("processSync", processor.Compiler);
    const file = vfile(doc);
    processor.process(file, done);
    assertDone("processSync", "process", complete);
    return file;
    function done(error2) {
      complete = true;
      bail(error2);
    }
  }
}
function newable(value, name) {
  return typeof value === "function" && // Prototypes do exist.
  // type-coverage:ignore-next-line
  value.prototype && // A function with keys in its prototype is probably a constructor.
  // Classes’ prototype methods are not enumerable, so we check if some value
  // exists in the prototype.
  // type-coverage:ignore-next-line
  (keys(value.prototype) || name in value.prototype);
}
function keys(value) {
  let key;
  for (key in value) {
    if (own.call(value, key)) {
      return true;
    }
  }
  return false;
}
function assertParser(name, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name + "` without `Parser`");
  }
}
function assertCompiler(name, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name + "` without `Compiler`");
  }
}
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node2) {
  if (!isPlainObject(node2) || typeof node2.type !== "string") {
    throw new TypeError("Expected node, got `" + node2 + "`");
  }
}
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}
function looksLikeAVFileValue(value) {
  return typeof value === "string" || (0, import_is_buffer2.default)(value);
}

// node_modules/dequal/dist/index.mjs
var has = Object.prototype.hasOwnProperty;
function find2(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal(key, tar)) return key;
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp;
  if (foo === bar) return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date) return foo.getTime() === bar.getTime();
    if (ctor === RegExp) return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len])) ;
      }
      return len === -1;
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len;
        if (tmp && typeof tmp === "object") {
          tmp = find2(bar, tmp);
          if (!tmp) return false;
        }
        if (!bar.has(tmp)) return false;
      }
      return true;
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len[0];
        if (tmp && typeof tmp === "object") {
          tmp = find2(bar, tmp);
          if (!tmp) return false;
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false;
        }
      }
      return true;
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo);
      bar = new Uint8Array(bar);
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len)) ;
      }
      return len === -1;
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len]) ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}

// node_modules/kleur/index.mjs
var FORCE_COLOR;
var NODE_DISABLE_COLORS;
var NO_COLOR;
var TERM;
var isTTY = true;
if (typeof process !== "undefined") {
  ({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
  isTTY = process.stdout && process.stdout.isTTY;
}
var $ = {
  enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== "dumb" && (FORCE_COLOR != null && FORCE_COLOR !== "0" || isTTY),
  // modifiers
  reset: init3(0, 0),
  bold: init3(1, 22),
  dim: init3(2, 22),
  italic: init3(3, 23),
  underline: init3(4, 24),
  inverse: init3(7, 27),
  hidden: init3(8, 28),
  strikethrough: init3(9, 29),
  // colors
  black: init3(30, 39),
  red: init3(31, 39),
  green: init3(32, 39),
  yellow: init3(33, 39),
  blue: init3(34, 39),
  magenta: init3(35, 39),
  cyan: init3(36, 39),
  white: init3(37, 39),
  gray: init3(90, 39),
  grey: init3(90, 39),
  // background colors
  bgBlack: init3(40, 49),
  bgRed: init3(41, 49),
  bgGreen: init3(42, 49),
  bgYellow: init3(43, 49),
  bgBlue: init3(44, 49),
  bgMagenta: init3(45, 49),
  bgCyan: init3(46, 49),
  bgWhite: init3(47, 49)
};
function run2(arr, str) {
  let i = 0, tmp, beg = "", end2 = "";
  for (; i < arr.length; i++) {
    tmp = arr[i];
    beg += tmp.open;
    end2 += tmp.close;
    if (!!~str.indexOf(tmp.close)) {
      str = str.replace(tmp.rgx, tmp.close + tmp.open);
    }
  }
  return beg + str + end2;
}
function chain(has2, keys2) {
  let ctx = { has: has2, keys: keys2 };
  ctx.reset = $.reset.bind(ctx);
  ctx.bold = $.bold.bind(ctx);
  ctx.dim = $.dim.bind(ctx);
  ctx.italic = $.italic.bind(ctx);
  ctx.underline = $.underline.bind(ctx);
  ctx.inverse = $.inverse.bind(ctx);
  ctx.hidden = $.hidden.bind(ctx);
  ctx.strikethrough = $.strikethrough.bind(ctx);
  ctx.black = $.black.bind(ctx);
  ctx.red = $.red.bind(ctx);
  ctx.green = $.green.bind(ctx);
  ctx.yellow = $.yellow.bind(ctx);
  ctx.blue = $.blue.bind(ctx);
  ctx.magenta = $.magenta.bind(ctx);
  ctx.cyan = $.cyan.bind(ctx);
  ctx.white = $.white.bind(ctx);
  ctx.gray = $.gray.bind(ctx);
  ctx.grey = $.grey.bind(ctx);
  ctx.bgBlack = $.bgBlack.bind(ctx);
  ctx.bgRed = $.bgRed.bind(ctx);
  ctx.bgGreen = $.bgGreen.bind(ctx);
  ctx.bgYellow = $.bgYellow.bind(ctx);
  ctx.bgBlue = $.bgBlue.bind(ctx);
  ctx.bgMagenta = $.bgMagenta.bind(ctx);
  ctx.bgCyan = $.bgCyan.bind(ctx);
  ctx.bgWhite = $.bgWhite.bind(ctx);
  return ctx;
}
function init3(open, close) {
  let blk = {
    open: `\x1B[${open}m`,
    close: `\x1B[${close}m`,
    rgx: new RegExp(`\\x1b\\[${close}m`, "g")
  };
  return function(txt) {
    if (this !== void 0 && this.has !== void 0) {
      !!~this.has.indexOf(open) || (this.has.push(open), this.keys.push(blk));
      return txt === void 0 ? this : $.enabled ? run2(this.keys, txt + "") : txt + "";
    }
    return txt === void 0 ? chain([open], [blk]) : $.enabled ? run2([blk], txt + "") : txt + "";
  };
}
var kleur_default = $;

// node_modules/diff/lib/index.mjs
function Diff() {
}
Diff.prototype = {
  diff: function diff(oldString, newString) {
    var _options$timeout;
    var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var callback = options2.callback;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    this.options = options2;
    var self2 = this;
    function done(value) {
      if (callback) {
        setTimeout(function() {
          callback(void 0, value);
        }, 0);
        return true;
      } else {
        return value;
      }
    }
    oldString = this.castInput(oldString);
    newString = this.castInput(newString);
    oldString = this.removeEmpty(this.tokenize(oldString));
    newString = this.removeEmpty(this.tokenize(newString));
    var newLen = newString.length, oldLen = oldString.length;
    var editLength = 1;
    var maxEditLength = newLen + oldLen;
    if (options2.maxEditLength) {
      maxEditLength = Math.min(maxEditLength, options2.maxEditLength);
    }
    var maxExecutionTime = (_options$timeout = options2.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;
    var abortAfterTimestamp = Date.now() + maxExecutionTime;
    var bestPath = [{
      oldPos: -1,
      lastComponent: void 0
    }];
    var newPos = this.extractCommon(bestPath[0], newString, oldString, 0);
    if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
      return done([{
        value: this.join(newString),
        count: newString.length
      }]);
    }
    var minDiagonalToConsider = -Infinity, maxDiagonalToConsider = Infinity;
    function execEditLength() {
      for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {
        var basePath = void 0;
        var removePath = bestPath[diagonalPath - 1], addPath = bestPath[diagonalPath + 1];
        if (removePath) {
          bestPath[diagonalPath - 1] = void 0;
        }
        var canAdd = false;
        if (addPath) {
          var addPathNewPos = addPath.oldPos - diagonalPath;
          canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;
        }
        var canRemove = removePath && removePath.oldPos + 1 < oldLen;
        if (!canAdd && !canRemove) {
          bestPath[diagonalPath] = void 0;
          continue;
        }
        if (!canRemove || canAdd && removePath.oldPos + 1 < addPath.oldPos) {
          basePath = self2.addToPath(addPath, true, void 0, 0);
        } else {
          basePath = self2.addToPath(removePath, void 0, true, 1);
        }
        newPos = self2.extractCommon(basePath, newString, oldString, diagonalPath);
        if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
          return done(buildValues(self2, basePath.lastComponent, newString, oldString, self2.useLongestToken));
        } else {
          bestPath[diagonalPath] = basePath;
          if (basePath.oldPos + 1 >= oldLen) {
            maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);
          }
          if (newPos + 1 >= newLen) {
            minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);
          }
        }
      }
      editLength++;
    }
    if (callback) {
      (function exec() {
        setTimeout(function() {
          if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {
            return callback();
          }
          if (!execEditLength()) {
            exec();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {
        var ret = execEditLength();
        if (ret) {
          return ret;
        }
      }
    }
  },
  addToPath: function addToPath(path3, added, removed, oldPosInc) {
    var last = path3.lastComponent;
    if (last && last.added === added && last.removed === removed) {
      return {
        oldPos: path3.oldPos + oldPosInc,
        lastComponent: {
          count: last.count + 1,
          added,
          removed,
          previousComponent: last.previousComponent
        }
      };
    } else {
      return {
        oldPos: path3.oldPos + oldPosInc,
        lastComponent: {
          count: 1,
          added,
          removed,
          previousComponent: last
        }
      };
    }
  },
  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
    var newLen = newString.length, oldLen = oldString.length, oldPos = basePath.oldPos, newPos = oldPos - diagonalPath, commonCount = 0;
    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
      newPos++;
      oldPos++;
      commonCount++;
    }
    if (commonCount) {
      basePath.lastComponent = {
        count: commonCount,
        previousComponent: basePath.lastComponent
      };
    }
    basePath.oldPos = oldPos;
    return newPos;
  },
  equals: function equals(left2, right2) {
    if (this.options.comparator) {
      return this.options.comparator(left2, right2);
    } else {
      return left2 === right2 || this.options.ignoreCase && left2.toLowerCase() === right2.toLowerCase();
    }
  },
  removeEmpty: function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  },
  castInput: function castInput(value) {
    return value;
  },
  tokenize: function tokenize2(value) {
    return value.split("");
  },
  join: function join2(chars3) {
    return chars3.join("");
  }
};
function buildValues(diff2, lastComponent, newString, oldString, useLongestToken) {
  var components = [];
  var nextComponent;
  while (lastComponent) {
    components.push(lastComponent);
    nextComponent = lastComponent.previousComponent;
    delete lastComponent.previousComponent;
    lastComponent = nextComponent;
  }
  components.reverse();
  var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
  for (; componentPos < componentLen; componentPos++) {
    var component = components[componentPos];
    if (!component.removed) {
      if (!component.added && useLongestToken) {
        var value = newString.slice(newPos, newPos + component.count);
        value = value.map(function(value2, i) {
          var oldValue = oldString[oldPos + i];
          return oldValue.length > value2.length ? oldValue : value2;
        });
        component.value = diff2.join(value);
      } else {
        component.value = diff2.join(newString.slice(newPos, newPos + component.count));
      }
      newPos += component.count;
      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = diff2.join(oldString.slice(oldPos, oldPos + component.count));
      oldPos += component.count;
      if (componentPos && components[componentPos - 1].added) {
        var tmp = components[componentPos - 1];
        components[componentPos - 1] = components[componentPos];
        components[componentPos] = tmp;
      }
    }
  }
  var finalComponent = components[componentLen - 1];
  if (componentLen > 1 && typeof finalComponent.value === "string" && (finalComponent.added || finalComponent.removed) && diff2.equals("", finalComponent.value)) {
    components[componentLen - 2].value += finalComponent.value;
    components.pop();
  }
  return components;
}
var characterDiff = new Diff();
function diffChars(oldStr, newStr, options2) {
  return characterDiff.diff(oldStr, newStr, options2);
}
var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
var reWhitespace = /\S/;
var wordDiff = new Diff();
wordDiff.equals = function(left2, right2) {
  if (this.options.ignoreCase) {
    left2 = left2.toLowerCase();
    right2 = right2.toLowerCase();
  }
  return left2 === right2 || this.options.ignoreWhitespace && !reWhitespace.test(left2) && !reWhitespace.test(right2);
};
wordDiff.tokenize = function(value) {
  var tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);
  for (var i = 0; i < tokens.length - 1; i++) {
    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
      tokens[i] += tokens[i + 2];
      tokens.splice(i + 1, 2);
      i--;
    }
  }
  return tokens;
};
var lineDiff = new Diff();
lineDiff.tokenize = function(value) {
  if (this.options.stripTrailingCr) {
    value = value.replace(/\r\n/g, "\n");
  }
  var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  }
  for (var i = 0; i < linesAndNewlines.length; i++) {
    var line2 = linesAndNewlines[i];
    if (i % 2 && !this.options.newlineIsToken) {
      retLines[retLines.length - 1] += line2;
    } else {
      if (this.options.ignoreWhitespace) {
        line2 = line2.trim();
      }
      retLines.push(line2);
    }
  }
  return retLines;
};
function diffLines(oldStr, newStr, callback) {
  return lineDiff.diff(oldStr, newStr, callback);
}
var sentenceDiff = new Diff();
sentenceDiff.tokenize = function(value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};
var cssDiff = new Diff();
cssDiff.tokenize = function(value) {
  return value.split(/([{}:;,]|\s+)/);
};
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
var objectPrototypeToString = Object.prototype.toString;
var jsonDiff = new Diff();
jsonDiff.useLongestToken = true;
jsonDiff.tokenize = lineDiff.tokenize;
jsonDiff.castInput = function(value) {
  var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === void 0 ? function(k, v) {
    return typeof v === "undefined" ? undefinedReplacement : v;
  } : _this$options$stringi;
  return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
};
jsonDiff.equals = function(left2, right2) {
  return Diff.prototype.equals.call(jsonDiff, left2.replace(/,([\r\n])/g, "$1"), right2.replace(/,([\r\n])/g, "$1"));
};
function canonicalize(obj, stack, replacementStack, replacer, key) {
  stack = stack || [];
  replacementStack = replacementStack || [];
  if (replacer) {
    obj = replacer(key, obj);
  }
  var i;
  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }
  var canonicalizedObj;
  if ("[object Array]" === objectPrototypeToString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);
    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
    }
    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }
  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }
  if (_typeof2(obj) === "object" && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);
    var sortedKeys = [], _key;
    for (_key in obj) {
      if (obj.hasOwnProperty(_key)) {
        sortedKeys.push(_key);
      }
    }
    sortedKeys.sort();
    for (i = 0; i < sortedKeys.length; i += 1) {
      _key = sortedKeys[i];
      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
    }
    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }
  return canonicalizedObj;
}
var arrayDiff = new Diff();
arrayDiff.tokenize = function(value) {
  return value.slice();
};
arrayDiff.join = arrayDiff.removeEmpty = function(value) {
  return value;
};
function diffArrays(oldArr, newArr, callback) {
  return arrayDiff.diff(oldArr, newArr, callback);
}

// node_modules/uvu/diff/index.mjs
var colors = {
  "--": kleur_default.red,
  "··": kleur_default.grey,
  "++": kleur_default.green
};
var TITLE = kleur_default.dim().italic;
var TAB = kleur_default.dim("→");
var SPACE2 = kleur_default.dim("·");
var NL2 = kleur_default.dim("↵");
var LOG = (sym, str) => colors[sym](sym + PRETTY(str)) + "\n";
var LINE = (num, x) => kleur_default.dim("L" + String(num).padStart(x, "0") + " ");
var PRETTY = (str) => str.replace(/[ ]/g, SPACE2).replace(/\t/g, TAB).replace(/(\r?\n)/g, NL2);
function line(obj, prev, pad) {
  let char = obj.removed ? "--" : obj.added ? "++" : "··";
  let arr = obj.value.replace(/\r?\n$/, "").split("\n");
  let i = 0, tmp, out = "";
  if (obj.added) out += colors[char]().underline(TITLE("Expected:")) + "\n";
  else if (obj.removed) out += colors[char]().underline(TITLE("Actual:")) + "\n";
  for (; i < arr.length; i++) {
    tmp = arr[i];
    if (tmp != null) {
      if (prev) out += LINE(prev + i, pad);
      out += LOG(char, tmp || "\n");
    }
  }
  return out;
}
function arrays(input, expect) {
  let arr = diffArrays(input, expect);
  let i = 0, j = 0, k = 0, tmp, val, char, isObj, str;
  let out = LOG("··", "[");
  for (; i < arr.length; i++) {
    char = (tmp = arr[i]).removed ? "--" : tmp.added ? "++" : "··";
    if (tmp.added) {
      out += colors[char]().underline(TITLE("Expected:")) + "\n";
    } else if (tmp.removed) {
      out += colors[char]().underline(TITLE("Actual:")) + "\n";
    }
    for (j = 0; j < tmp.value.length; j++) {
      isObj = tmp.value[j] && typeof tmp.value[j] === "object";
      val = stringify(tmp.value[j]).split(/\r?\n/g);
      for (k = 0; k < val.length; ) {
        str = "  " + val[k++] + (isObj ? "" : ",");
        if (isObj && k === val.length && j + 1 < tmp.value.length) str += ",";
        out += LOG(char, str);
      }
    }
  }
  return out + LOG("··", "]");
}
function lines(input, expect, linenum = 0) {
  let i = 0, tmp, output2 = "";
  let arr = diffLines(input, expect);
  let pad = String(expect.split(/\r?\n/g).length - linenum).length;
  for (; i < arr.length; i++) {
    output2 += line(tmp = arr[i], linenum, pad);
    if (linenum && !tmp.removed) linenum += tmp.count;
  }
  return output2;
}
function chars2(input, expect) {
  let arr = diffChars(input, expect);
  let i = 0, output2 = "", tmp;
  let l1 = input.length;
  let l2 = expect.length;
  let p1 = PRETTY(input);
  let p2 = PRETTY(expect);
  tmp = arr[i];
  if (l1 === l2) {
  } else if (tmp.removed && arr[i + 1]) {
    let del = tmp.count - arr[i + 1].count;
    if (del == 0) {
    } else if (del > 0) {
      expect = " ".repeat(del) + expect;
      p2 = " ".repeat(del) + p2;
      l2 += del;
    } else if (del < 0) {
      input = " ".repeat(-del) + input;
      p1 = " ".repeat(-del) + p1;
      l1 += -del;
    }
  }
  output2 += direct(p1, p2, l1, l2);
  if (l1 === l2) {
    for (tmp = "  "; i < l1; i++) {
      tmp += input[i] === expect[i] ? " " : "^";
    }
  } else {
    for (tmp = "  "; i < arr.length; i++) {
      tmp += (arr[i].added || arr[i].removed ? "^" : " ").repeat(Math.max(arr[i].count, 0));
      if (i + 1 < arr.length && (arr[i].added && arr[i + 1].removed || arr[i].removed && arr[i + 1].added)) {
        arr[i + 1].count -= arr[i].count;
      }
    }
  }
  return output2 + kleur_default.red(tmp);
}
function direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {
  let gutter = 4;
  let lenC = Math.max(lenA, lenB);
  let typeA = typeof input, typeB = typeof expect;
  if (typeA !== typeB) {
    gutter = 2;
    let delA = gutter + lenC - lenA;
    let delB = gutter + lenC - lenB;
    input += " ".repeat(delA) + kleur_default.dim(`[${typeA}]`);
    expect += " ".repeat(delB) + kleur_default.dim(`[${typeB}]`);
    lenA += delA + typeA.length + 2;
    lenB += delB + typeB.length + 2;
    lenC = Math.max(lenA, lenB);
  }
  let output2 = colors["++"]("++" + expect + " ".repeat(gutter + lenC - lenB) + TITLE("(Expected)")) + "\n";
  return output2 + colors["--"]("--" + input + " ".repeat(gutter + lenC - lenA) + TITLE("(Actual)")) + "\n";
}
function sort(input, expect) {
  var k, i = 0, tmp, isArr = Array.isArray(input);
  var keys2 = [], out = isArr ? Array(input.length) : {};
  if (isArr) {
    for (i = 0; i < out.length; i++) {
      tmp = input[i];
      if (!tmp || typeof tmp !== "object") out[i] = tmp;
      else out[i] = sort(tmp, expect[i]);
    }
  } else {
    for (k in expect)
      keys2.push(k);
    for (; i < keys2.length; i++) {
      if (Object.prototype.hasOwnProperty.call(input, k = keys2[i])) {
        if (!(tmp = input[k]) || typeof tmp !== "object") out[k] = tmp;
        else out[k] = sort(tmp, expect[k]);
      }
    }
    for (k in input) {
      if (!out.hasOwnProperty(k)) {
        out[k] = input[k];
      }
    }
  }
  return out;
}
function circular() {
  var cache = /* @__PURE__ */ new Set();
  return function print(key, val) {
    if (val === void 0) return "[__VOID__]";
    if (typeof val === "number" && val !== val) return "[__NAN__]";
    if (typeof val === "bigint") return val.toString();
    if (!val || typeof val !== "object") return val;
    if (cache.has(val)) return "[Circular]";
    cache.add(val);
    return val;
  };
}
function stringify(input) {
  return JSON.stringify(input, circular(), 2).replace(/"\[__NAN__\]"/g, "NaN").replace(/"\[__VOID__\]"/g, "undefined");
}
function compare(input, expect) {
  if (Array.isArray(expect) && Array.isArray(input)) return arrays(input, expect);
  if (expect instanceof RegExp) return chars2("" + input, "" + expect);
  let isA = input && typeof input == "object";
  let isB = expect && typeof expect == "object";
  if (isA && isB) input = sort(input, expect);
  if (isB) expect = stringify(expect);
  if (isA) input = stringify(input);
  if (expect && typeof expect == "object") {
    input = stringify(sort(input, expect));
    expect = stringify(expect);
  }
  isA = typeof input == "string";
  isB = typeof expect == "string";
  if (isA && /\r?\n/.test(input)) return lines(input, "" + expect);
  if (isB && /\r?\n/.test(expect)) return lines("" + input, expect);
  if (isA && isB) return chars2(input, expect);
  return direct(input, expect);
}

// node_modules/uvu/assert/index.mjs
function dedent(str) {
  str = str.replace(/\r?\n/g, "\n");
  let arr = str.match(/^[ \t]*(?=\S)/gm);
  let i = 0, min2 = 1 / 0, len = (arr || []).length;
  for (; i < len; i++) min2 = Math.min(min2, arr[i].length);
  return len && min2 ? str.replace(new RegExp(`^[ \\t]{${min2}}`, "gm"), "") : str;
}
var Assertion = class extends Error {
  constructor(opts = {}) {
    super(opts.message);
    this.name = "Assertion";
    this.code = "ERR_ASSERTION";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.details = opts.details || false;
    this.generated = !!opts.generated;
    this.operator = opts.operator;
    this.expects = opts.expects;
    this.actual = opts.actual;
  }
};
function assert(bool, actual, expects, operator, detailer, backup, msg) {
  if (bool) return;
  let message = msg || backup;
  if (msg instanceof Error) throw msg;
  let details = detailer && detailer(actual, expects);
  throw new Assertion({ actual, expects, operator, message, details, generated: !msg });
}
function ok2(val, msg) {
  assert(!!val, false, true, "ok", false, "Expected value to be truthy", msg);
}
function is2(val, exp, msg) {
  assert(val === exp, val, exp, "is", compare, "Expected values to be strictly equal:", msg);
}
function not(val, msg) {
  assert(!val, true, false, "not", false, "Expected value to be falsey", msg);
}
not.ok = not;
is2.not = function(val, exp, msg) {
  assert(val !== exp, val, exp, "is.not", false, "Expected values not to be strictly equal", msg);
};
not.equal = function(val, exp, msg) {
  assert(!dequal(val, exp), val, exp, "not.equal", false, "Expected values not to be deeply equal", msg);
};
not.type = function(val, exp, msg) {
  let tmp = typeof val;
  assert(tmp !== exp, tmp, exp, "not.type", false, `Expected "${tmp}" not to be "${exp}"`, msg);
};
not.instance = function(val, exp, msg) {
  let name = "`" + (exp.name || exp.constructor.name) + "`";
  assert(!(val instanceof exp), val, exp, "not.instance", false, `Expected value not to be an instance of ${name}`, msg);
};
not.snapshot = function(val, exp, msg) {
  val = dedent(val);
  exp = dedent(exp);
  assert(val !== exp, val, exp, "not.snapshot", false, "Expected value not to match snapshot", msg);
};
not.fixture = function(val, exp, msg) {
  val = dedent(val);
  exp = dedent(exp);
  assert(val !== exp, val, exp, "not.fixture", false, "Expected value not to match fixture", msg);
};
not.match = function(val, exp, msg) {
  if (typeof exp === "string") {
    assert(!val.includes(exp), val, exp, "not.match", false, `Expected value not to include "${exp}" substring`, msg);
  } else {
    assert(!exp.test(val), val, exp, "not.match", false, `Expected value not to match \`${String(exp)}\` pattern`, msg);
  }
};
not.throws = function(blk, exp, msg) {
  if (!msg && typeof exp === "string") {
    msg = exp;
    exp = null;
  }
  try {
    blk();
  } catch (err) {
    if (typeof exp === "function") {
      assert(!exp(err), true, false, "not.throws", false, "Expected function not to throw matching exception", msg);
    } else if (exp instanceof RegExp) {
      assert(!exp.test(err.message), true, false, "not.throws", false, `Expected function not to throw exception matching \`${String(exp)}\` pattern`, msg);
    } else if (!exp) {
      assert(false, true, false, "not.throws", false, "Expected function not to throw", msg);
    }
  }
};

// node_modules/mdast-util-to-string/lib/index.js
var emptyOptions2 = {};
function toString(value, options2) {
  const settings = options2 || emptyOptions2;
  const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
  const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
  return one(value, includeImageAlt, includeHtml);
}
function one(value, includeImageAlt, includeHtml) {
  if (node(value)) {
    if ("value" in value) {
      return value.type === "html" && !includeHtml ? "" : value.value;
    }
    if (includeImageAlt && "alt" in value && value.alt) {
      return value.alt;
    }
    if ("children" in value) {
      return all(value.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value)) {
    return all(value, includeImageAlt, includeHtml);
  }
  return "";
}
function all(values2, includeImageAlt, includeHtml) {
  const result = [];
  let index4 = -1;
  while (++index4 < values2.length) {
    result[index4] = one(values2[index4], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node(value) {
  return Boolean(value && typeof value === "object");
}

// node_modules/micromark-util-symbol/constants.js
var constants = (
  /** @type {const} */
  {
    attentionSideBefore: 1,
    // Symbol to mark an attention sequence as before content: `*a`
    attentionSideAfter: 2,
    // Symbol to mark an attention sequence as after content: `a*`
    atxHeadingOpeningFenceSizeMax: 6,
    // 6 number signs is fine, 7 isn’t.
    autolinkDomainSizeMax: 63,
    // 63 characters is fine, 64 is too many.
    autolinkSchemeSizeMax: 32,
    // 32 characters is fine, 33 is too many.
    cdataOpeningString: "CDATA[",
    // And preceded by `<![`.
    characterGroupWhitespace: 1,
    // Symbol used to indicate a character is whitespace
    characterGroupPunctuation: 2,
    // Symbol used to indicate a character is punctuation
    characterReferenceDecimalSizeMax: 7,
    // `&#9999999;`.
    characterReferenceHexadecimalSizeMax: 6,
    // `&#xff9999;`.
    characterReferenceNamedSizeMax: 31,
    // `&CounterClockwiseContourIntegral;`.
    codeFencedSequenceSizeMin: 3,
    // At least 3 ticks or tildes are needed.
    contentTypeDocument: "document",
    contentTypeFlow: "flow",
    contentTypeContent: "content",
    contentTypeString: "string",
    contentTypeText: "text",
    hardBreakPrefixSizeMin: 2,
    // At least 2 trailing spaces are needed.
    htmlRaw: 1,
    // Symbol for `<script>`
    htmlComment: 2,
    // Symbol for `<!---->`
    htmlInstruction: 3,
    // Symbol for `<?php?>`
    htmlDeclaration: 4,
    // Symbol for `<!doctype>`
    htmlCdata: 5,
    // Symbol for `<![CDATA[]]>`
    htmlBasic: 6,
    // Symbol for `<div`
    htmlComplete: 7,
    // Symbol for `<x>`
    htmlRawSizeMax: 8,
    // Length of `textarea`.
    linkResourceDestinationBalanceMax: 32,
    // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>
    linkReferenceSizeMax: 999,
    // See: <https://spec.commonmark.org/0.30/#link-label>
    listItemValueSizeMax: 10,
    // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>
    numericBaseDecimal: 10,
    numericBaseHexadecimal: 16,
    tabSize: 4,
    // Tabs have a hard-coded size of 4, per CommonMark.
    thematicBreakMarkerCountMin: 3,
    // At least 3 asterisks, dashes, or underscores are needed.
    v8MaxSafeChunkSize: 1e4
    // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
  }
);

// node_modules/micromark-util-chunked/dev/index.js
function splice(list3, start2, remove, items) {
  const end2 = list3.length;
  let chunkStart = 0;
  let parameters;
  if (start2 < 0) {
    start2 = -start2 > end2 ? 0 : end2 + start2;
  } else {
    start2 = start2 > end2 ? end2 : start2;
  }
  remove = remove > 0 ? remove : 0;
  if (items.length < constants.v8MaxSafeChunkSize) {
    parameters = Array.from(items);
    parameters.unshift(start2, remove);
    list3.splice(...parameters);
  } else {
    if (remove) list3.splice(start2, remove);
    while (chunkStart < items.length) {
      parameters = items.slice(
        chunkStart,
        chunkStart + constants.v8MaxSafeChunkSize
      );
      parameters.unshift(start2, 0);
      list3.splice(...parameters);
      chunkStart += constants.v8MaxSafeChunkSize;
      start2 += constants.v8MaxSafeChunkSize;
    }
  }
}
function push(list3, items) {
  if (list3.length > 0) {
    splice(list3, list3.length, 0, items);
    return list3;
  }
  return items;
}

// node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
  const all3 = {};
  let index4 = -1;
  while (++index4 < extensions.length) {
    syntaxExtension(all3, extensions[index4]);
  }
  return all3;
}
function syntaxExtension(all3, extension2) {
  let hook;
  for (hook in extension2) {
    const maybe = hasOwnProperty.call(all3, hook) ? all3[hook] : void 0;
    const left2 = maybe || (all3[hook] = {});
    const right2 = extension2[hook];
    let code3;
    if (right2) {
      for (code3 in right2) {
        if (!hasOwnProperty.call(left2, code3)) left2[code3] = [];
        const value = right2[code3];
        constructs(
          // @ts-expect-error Looks like a list.
          left2[code3],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
}
function constructs(existing, list3) {
  let index4 = -1;
  const before = [];
  while (++index4 < list3.length) {
    ;
    (list3[index4].add === "after" ? existing : before).push(list3[index4]);
  }
  splice(existing, 0, 0, before);
}

// node_modules/micromark-util-symbol/codes.js
var codes = (
  /** @type {const} */
  {
    carriageReturn: -5,
    lineFeed: -4,
    carriageReturnLineFeed: -3,
    horizontalTab: -2,
    virtualSpace: -1,
    eof: null,
    nul: 0,
    soh: 1,
    stx: 2,
    etx: 3,
    eot: 4,
    enq: 5,
    ack: 6,
    bel: 7,
    bs: 8,
    ht: 9,
    // `\t`
    lf: 10,
    // `\n`
    vt: 11,
    // `\v`
    ff: 12,
    // `\f`
    cr: 13,
    // `\r`
    so: 14,
    si: 15,
    dle: 16,
    dc1: 17,
    dc2: 18,
    dc3: 19,
    dc4: 20,
    nak: 21,
    syn: 22,
    etb: 23,
    can: 24,
    em: 25,
    sub: 26,
    esc: 27,
    fs: 28,
    gs: 29,
    rs: 30,
    us: 31,
    space: 32,
    exclamationMark: 33,
    // `!`
    quotationMark: 34,
    // `"`
    numberSign: 35,
    // `#`
    dollarSign: 36,
    // `$`
    percentSign: 37,
    // `%`
    ampersand: 38,
    // `&`
    apostrophe: 39,
    // `'`
    leftParenthesis: 40,
    // `(`
    rightParenthesis: 41,
    // `)`
    asterisk: 42,
    // `*`
    plusSign: 43,
    // `+`
    comma: 44,
    // `,`
    dash: 45,
    // `-`
    dot: 46,
    // `.`
    slash: 47,
    // `/`
    digit0: 48,
    // `0`
    digit1: 49,
    // `1`
    digit2: 50,
    // `2`
    digit3: 51,
    // `3`
    digit4: 52,
    // `4`
    digit5: 53,
    // `5`
    digit6: 54,
    // `6`
    digit7: 55,
    // `7`
    digit8: 56,
    // `8`
    digit9: 57,
    // `9`
    colon: 58,
    // `:`
    semicolon: 59,
    // `;`
    lessThan: 60,
    // `<`
    equalsTo: 61,
    // `=`
    greaterThan: 62,
    // `>`
    questionMark: 63,
    // `?`
    atSign: 64,
    // `@`
    uppercaseA: 65,
    // `A`
    uppercaseB: 66,
    // `B`
    uppercaseC: 67,
    // `C`
    uppercaseD: 68,
    // `D`
    uppercaseE: 69,
    // `E`
    uppercaseF: 70,
    // `F`
    uppercaseG: 71,
    // `G`
    uppercaseH: 72,
    // `H`
    uppercaseI: 73,
    // `I`
    uppercaseJ: 74,
    // `J`
    uppercaseK: 75,
    // `K`
    uppercaseL: 76,
    // `L`
    uppercaseM: 77,
    // `M`
    uppercaseN: 78,
    // `N`
    uppercaseO: 79,
    // `O`
    uppercaseP: 80,
    // `P`
    uppercaseQ: 81,
    // `Q`
    uppercaseR: 82,
    // `R`
    uppercaseS: 83,
    // `S`
    uppercaseT: 84,
    // `T`
    uppercaseU: 85,
    // `U`
    uppercaseV: 86,
    // `V`
    uppercaseW: 87,
    // `W`
    uppercaseX: 88,
    // `X`
    uppercaseY: 89,
    // `Y`
    uppercaseZ: 90,
    // `Z`
    leftSquareBracket: 91,
    // `[`
    backslash: 92,
    // `\`
    rightSquareBracket: 93,
    // `]`
    caret: 94,
    // `^`
    underscore: 95,
    // `_`
    graveAccent: 96,
    // `` ` ``
    lowercaseA: 97,
    // `a`
    lowercaseB: 98,
    // `b`
    lowercaseC: 99,
    // `c`
    lowercaseD: 100,
    // `d`
    lowercaseE: 101,
    // `e`
    lowercaseF: 102,
    // `f`
    lowercaseG: 103,
    // `g`
    lowercaseH: 104,
    // `h`
    lowercaseI: 105,
    // `i`
    lowercaseJ: 106,
    // `j`
    lowercaseK: 107,
    // `k`
    lowercaseL: 108,
    // `l`
    lowercaseM: 109,
    // `m`
    lowercaseN: 110,
    // `n`
    lowercaseO: 111,
    // `o`
    lowercaseP: 112,
    // `p`
    lowercaseQ: 113,
    // `q`
    lowercaseR: 114,
    // `r`
    lowercaseS: 115,
    // `s`
    lowercaseT: 116,
    // `t`
    lowercaseU: 117,
    // `u`
    lowercaseV: 118,
    // `v`
    lowercaseW: 119,
    // `w`
    lowercaseX: 120,
    // `x`
    lowercaseY: 121,
    // `y`
    lowercaseZ: 122,
    // `z`
    leftCurlyBrace: 123,
    // `{`
    verticalBar: 124,
    // `|`
    rightCurlyBrace: 125,
    // `}`
    tilde: 126,
    // `~`
    del: 127,
    // Unicode Specials block.
    byteOrderMarker: 65279,
    // Unicode Specials block.
    replacementCharacter: 65533
    // `�`
  }
);

// node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js
var unicodePunctuationRegex = /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

// node_modules/micromark-util-character/dev/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/);
var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code3) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code3 !== null && (code3 < codes.space || code3 === codes.del)
  );
}
var asciiDigit = regexCheck(/\d/);
var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code3) {
  return code3 !== null && code3 < codes.horizontalTab;
}
function markdownLineEndingOrSpace(code3) {
  return code3 !== null && (code3 < codes.nul || code3 === codes.space);
}
function markdownSpace(code3) {
  return code3 === codes.horizontalTab || code3 === codes.virtualSpace || code3 === codes.space;
}
var unicodePunctuation = regexCheck(unicodePunctuationRegex);
var unicodeWhitespace = regexCheck(/\s/);
function regexCheck(regex) {
  return check;
  function check(code3) {
    return code3 !== null && regex.test(String.fromCharCode(code3));
  }
}

// node_modules/micromark-factory-space/dev/index.js
function factorySpace(effects, ok4, type, max2) {
  const limit = max2 ? max2 - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start2;
  function start2(code3) {
    if (markdownSpace(code3)) {
      effects.enter(type);
      return prefix(code3);
    }
    return ok4(code3);
  }
  function prefix(code3) {
    if (markdownSpace(code3) && size++ < limit) {
      effects.consume(code3);
      return prefix;
    }
    effects.exit(type);
    return ok4(code3);
  }
}

// node_modules/micromark-util-symbol/types.js
var types = (
  /** @type {const} */
  {
    // Generic type for data, such as in a title, a destination, etc.
    data: "data",
    // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
    // Such as, between a fenced code fence and an info string.
    whitespace: "whitespace",
    // Generic type for line endings (line feed, carriage return, carriage return +
    // line feed).
    lineEnding: "lineEnding",
    // A line ending, but ending a blank line.
    lineEndingBlank: "lineEndingBlank",
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
    // line.
    linePrefix: "linePrefix",
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
    // line.
    lineSuffix: "lineSuffix",
    // Whole ATX heading:
    //
    // ```markdown
    // #
    // ## Alpha
    // ### Bravo ###
    // ```
    //
    // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
    atxHeading: "atxHeading",
    // Sequence of number signs in an ATX heading (`###`).
    atxHeadingSequence: "atxHeadingSequence",
    // Content in an ATX heading (`alpha`).
    // Includes text.
    atxHeadingText: "atxHeadingText",
    // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
    // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
    autolink: "autolink",
    // Email autolink w/o markers (`admin@example.com`)
    autolinkEmail: "autolinkEmail",
    // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
    autolinkMarker: "autolinkMarker",
    // Protocol autolink w/o markers (`https://example.com`)
    autolinkProtocol: "autolinkProtocol",
    // A whole character escape (`\-`).
    // Includes `escapeMarker` and `characterEscapeValue`.
    characterEscape: "characterEscape",
    // The escaped character (`-`).
    characterEscapeValue: "characterEscapeValue",
    // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
    // Includes `characterReferenceMarker`, an optional
    // `characterReferenceMarkerNumeric`, in which case an optional
    // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
    characterReference: "characterReference",
    // The start or end marker (`&` or `;`).
    characterReferenceMarker: "characterReferenceMarker",
    // Mark reference as numeric (`#`).
    characterReferenceMarkerNumeric: "characterReferenceMarkerNumeric",
    // Mark reference as numeric (`x` or `X`).
    characterReferenceMarkerHexadecimal: "characterReferenceMarkerHexadecimal",
    // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
    characterReferenceValue: "characterReferenceValue",
    // Whole fenced code:
    //
    // ````markdown
    // ```js
    // alert(1)
    // ```
    // ````
    codeFenced: "codeFenced",
    // A fenced code fence, including whitespace, sequence, info, and meta
    // (` ```js `).
    codeFencedFence: "codeFencedFence",
    // Sequence of grave accent or tilde characters (` ``` `) in a fence.
    codeFencedFenceSequence: "codeFencedFenceSequence",
    // Info word (`js`) in a fence.
    // Includes string.
    codeFencedFenceInfo: "codeFencedFenceInfo",
    // Meta words (`highlight="1"`) in a fence.
    // Includes string.
    codeFencedFenceMeta: "codeFencedFenceMeta",
    // A line of code.
    codeFlowValue: "codeFlowValue",
    // Whole indented code:
    //
    // ```markdown
    //     alert(1)
    // ```
    //
    // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
    codeIndented: "codeIndented",
    // A text code (``` `alpha` ```).
    // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
    // `codeTextPadding`.
    codeText: "codeText",
    codeTextData: "codeTextData",
    // A space or line ending right after or before a tick.
    codeTextPadding: "codeTextPadding",
    // A text code fence (` `` `).
    codeTextSequence: "codeTextSequence",
    // Whole content:
    //
    // ```markdown
    // [a]: b
    // c
    // =
    // d
    // ```
    //
    // Includes `paragraph` and `definition`.
    content: "content",
    // Whole definition:
    //
    // ```markdown
    // [micromark]: https://github.com/micromark/micromark
    // ```
    //
    // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
    // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
    definition: "definition",
    // Destination of a definition (`https://github.com/micromark/micromark` or
    // `<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
    definitionDestination: "definitionDestination",
    // Enclosed destination of a definition
    // (`<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteralMarker` and optionally
    // `definitionDestinationString`.
    definitionDestinationLiteral: "definitionDestinationLiteral",
    // Markers of an enclosed definition destination (`<` or `>`).
    definitionDestinationLiteralMarker: "definitionDestinationLiteralMarker",
    // Unenclosed destination of a definition
    // (`https://github.com/micromark/micromark`).
    // Includes `definitionDestinationString`.
    definitionDestinationRaw: "definitionDestinationRaw",
    // Text in an destination (`https://github.com/micromark/micromark`).
    // Includes string.
    definitionDestinationString: "definitionDestinationString",
    // Label of a definition (`[micromark]`).
    // Includes `definitionLabelMarker` and `definitionLabelString`.
    definitionLabel: "definitionLabel",
    // Markers of a definition label (`[` or `]`).
    definitionLabelMarker: "definitionLabelMarker",
    // Value of a definition label (`micromark`).
    // Includes string.
    definitionLabelString: "definitionLabelString",
    // Marker between a label and a destination (`:`).
    definitionMarker: "definitionMarker",
    // Title of a definition (`"x"`, `'y'`, or `(z)`).
    // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
    definitionTitle: "definitionTitle",
    // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
    definitionTitleMarker: "definitionTitleMarker",
    // Data without markers in a title (`z`).
    // Includes string.
    definitionTitleString: "definitionTitleString",
    // Emphasis (`*alpha*`).
    // Includes `emphasisSequence` and `emphasisText`.
    emphasis: "emphasis",
    // Sequence of emphasis markers (`*` or `_`).
    emphasisSequence: "emphasisSequence",
    // Emphasis text (`alpha`).
    // Includes text.
    emphasisText: "emphasisText",
    // The character escape marker (`\`).
    escapeMarker: "escapeMarker",
    // A hard break created with a backslash (`\\n`).
    // Note: does not include the line ending.
    hardBreakEscape: "hardBreakEscape",
    // A hard break created with trailing spaces (`  \n`).
    // Does not include the line ending.
    hardBreakTrailing: "hardBreakTrailing",
    // Flow HTML:
    //
    // ```markdown
    // <div
    // ```
    //
    // Inlcudes `lineEnding`, `htmlFlowData`.
    htmlFlow: "htmlFlow",
    htmlFlowData: "htmlFlowData",
    // HTML in text (the tag in `a <i> b`).
    // Includes `lineEnding`, `htmlTextData`.
    htmlText: "htmlText",
    htmlTextData: "htmlTextData",
    // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
    // `![alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    image: "image",
    // Whole link label (`[*alpha*]`).
    // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
    label: "label",
    // Text in an label (`*alpha*`).
    // Includes text.
    labelText: "labelText",
    // Start a link label (`[`).
    // Includes a `labelMarker`.
    labelLink: "labelLink",
    // Start an image label (`![`).
    // Includes `labelImageMarker` and `labelMarker`.
    labelImage: "labelImage",
    // Marker of a label (`[` or `]`).
    labelMarker: "labelMarker",
    // Marker to start an image (`!`).
    labelImageMarker: "labelImageMarker",
    // End a label (`]`).
    // Includes `labelMarker`.
    labelEnd: "labelEnd",
    // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    link: "link",
    // Whole paragraph:
    //
    // ```markdown
    // alpha
    // bravo.
    // ```
    //
    // Includes text.
    paragraph: "paragraph",
    // A reference (`[alpha]` or `[]`).
    // Includes `referenceMarker` and an optional `referenceString`.
    reference: "reference",
    // A reference marker (`[` or `]`).
    referenceMarker: "referenceMarker",
    // Reference text (`alpha`).
    // Includes string.
    referenceString: "referenceString",
    // A resource (`(https://example.com "alpha")`).
    // Includes `resourceMarker`, an optional `resourceDestination` with an optional
    // `whitespace` and `resourceTitle`.
    resource: "resource",
    // A resource destination (`https://example.com`).
    // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
    resourceDestination: "resourceDestination",
    // A literal resource destination (`<https://example.com>`).
    // Includes `resourceDestinationLiteralMarker` and optionally
    // `resourceDestinationString`.
    resourceDestinationLiteral: "resourceDestinationLiteral",
    // A resource destination marker (`<` or `>`).
    resourceDestinationLiteralMarker: "resourceDestinationLiteralMarker",
    // A raw resource destination (`https://example.com`).
    // Includes `resourceDestinationString`.
    resourceDestinationRaw: "resourceDestinationRaw",
    // Resource destination text (`https://example.com`).
    // Includes string.
    resourceDestinationString: "resourceDestinationString",
    // A resource marker (`(` or `)`).
    resourceMarker: "resourceMarker",
    // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
    // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
    resourceTitle: "resourceTitle",
    // A resource title marker (`"`, `'`, `(`, or `)`).
    resourceTitleMarker: "resourceTitleMarker",
    // Resource destination title (`alpha`).
    // Includes string.
    resourceTitleString: "resourceTitleString",
    // Whole setext heading:
    //
    // ```markdown
    // alpha
    // bravo
    // =====
    // ```
    //
    // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
    // `setextHeadingLine`.
    setextHeading: "setextHeading",
    // Content in a setext heading (`alpha\nbravo`).
    // Includes text.
    setextHeadingText: "setextHeadingText",
    // Underline in a setext heading, including whitespace suffix (`==`).
    // Includes `setextHeadingLineSequence`.
    setextHeadingLine: "setextHeadingLine",
    // Sequence of equals or dash characters in underline in a setext heading (`-`).
    setextHeadingLineSequence: "setextHeadingLineSequence",
    // Strong (`**alpha**`).
    // Includes `strongSequence` and `strongText`.
    strong: "strong",
    // Sequence of strong markers (`**` or `__`).
    strongSequence: "strongSequence",
    // Strong text (`alpha`).
    // Includes text.
    strongText: "strongText",
    // Whole thematic break:
    //
    // ```markdown
    // * * *
    // ```
    //
    // Includes `thematicBreakSequence` and `whitespace`.
    thematicBreak: "thematicBreak",
    // A sequence of one or more thematic break markers (`***`).
    thematicBreakSequence: "thematicBreakSequence",
    // Whole block quote:
    //
    // ```markdown
    // > a
    // >
    // > b
    // ```
    //
    // Includes `blockQuotePrefix` and flow.
    blockQuote: "blockQuote",
    // The `>` or `> ` of a block quote.
    blockQuotePrefix: "blockQuotePrefix",
    // The `>` of a block quote prefix.
    blockQuoteMarker: "blockQuoteMarker",
    // The optional ` ` of a block quote prefix.
    blockQuotePrefixWhitespace: "blockQuotePrefixWhitespace",
    // Whole unordered list:
    //
    // ```markdown
    // - a
    //   b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listOrdered: "listOrdered",
    // Whole ordered list:
    //
    // ```markdown
    // 1. a
    //    b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listUnordered: "listUnordered",
    // The indent of further list item lines.
    listItemIndent: "listItemIndent",
    // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
    listItemMarker: "listItemMarker",
    // The thing that starts a list item, such as `1. `.
    // Includes `listItemValue` if ordered, `listItemMarker`, and
    // `listItemPrefixWhitespace` (unless followed by a line ending).
    listItemPrefix: "listItemPrefix",
    // The whitespace after a marker.
    listItemPrefixWhitespace: "listItemPrefixWhitespace",
    // The numerical value of an ordered item.
    listItemValue: "listItemValue",
    // Internal types used for subtokenizers, compiled away
    chunkDocument: "chunkDocument",
    chunkContent: "chunkContent",
    chunkFlow: "chunkFlow",
    chunkText: "chunkText",
    chunkString: "chunkString"
  }
);

// node_modules/micromark/dev/lib/initialize/content.js
var content = { tokenize: initializeContent };
function initializeContent(effects) {
  const contentStart = effects.attempt(
    this.parser.constructs.contentInitial,
    afterContentStartConstruct,
    paragraphInitial
  );
  let previous3;
  return contentStart;
  function afterContentStartConstruct(code3) {
    ok2(
      code3 === codes.eof || markdownLineEnding(code3),
      "expected eol or eof"
    );
    if (code3 === codes.eof) {
      effects.consume(code3);
      return;
    }
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return factorySpace(effects, contentStart, types.linePrefix);
  }
  function paragraphInitial(code3) {
    ok2(
      code3 !== codes.eof && !markdownLineEnding(code3),
      "expected anything other than a line ending or EOF"
    );
    effects.enter(types.paragraph);
    return lineStart(code3);
  }
  function lineStart(code3) {
    const token = effects.enter(types.chunkText, {
      contentType: constants.contentTypeText,
      previous: previous3
    });
    if (previous3) {
      previous3.next = token;
    }
    previous3 = token;
    return data(code3);
  }
  function data(code3) {
    if (code3 === codes.eof) {
      effects.exit(types.chunkText);
      effects.exit(types.paragraph);
      effects.consume(code3);
      return;
    }
    if (markdownLineEnding(code3)) {
      effects.consume(code3);
      effects.exit(types.chunkText);
      return lineStart;
    }
    effects.consume(code3);
    return data;
  }
}

// node_modules/micromark/dev/lib/initialize/document.js
var document2 = { tokenize: initializeDocument };
var containerConstruct = { tokenize: tokenizeContainer };
function initializeDocument(effects) {
  const self2 = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start2;
  function start2(code3) {
    if (continued < stack.length) {
      const item = stack[continued];
      self2.containerState = item[1];
      ok2(
        item[0].continuation,
        "expected `continuation` to be defined on container construct"
      );
      return effects.attempt(
        item[0].continuation,
        documentContinue,
        checkNewContainers
      )(code3);
    }
    return checkNewContainers(code3);
  }
  function documentContinue(code3) {
    ok2(
      self2.containerState,
      "expected `containerState` to be defined after continuation"
    );
    continued++;
    if (self2.containerState._closeFlow) {
      self2.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === types.chunkFlow) {
          point4 = self2.events[indexBeforeFlow][1].end;
          break;
        }
      }
      ok2(point4, "could not find previous flow chunk");
      exitContainers(continued);
      let index4 = indexBeforeExits;
      while (index4 < self2.events.length) {
        self2.events[index4][1].end = Object.assign({}, point4);
        index4++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index4;
      return checkNewContainers(code3);
    }
    return start2(code3);
  }
  function checkNewContainers(code3) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code3);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code3);
      }
      self2.interrupt = Boolean(
        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
      );
    }
    self2.containerState = {};
    return effects.check(
      containerConstruct,
      thereIsANewContainer,
      thereIsNoNewContainer
    )(code3);
  }
  function thereIsANewContainer(code3) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code3);
  }
  function thereIsNoNewContainer(code3) {
    self2.parser.lazy[self2.now().line] = continued !== stack.length;
    lineStartOffset = self2.now().offset;
    return flowStart(code3);
  }
  function documentContinued(code3) {
    self2.containerState = {};
    return effects.attempt(
      containerConstruct,
      containerContinue,
      flowStart
    )(code3);
  }
  function containerContinue(code3) {
    ok2(
      self2.currentConstruct,
      "expected `currentConstruct` to be defined on tokenizer"
    );
    ok2(
      self2.containerState,
      "expected `containerState` to be defined on tokenizer"
    );
    continued++;
    stack.push([self2.currentConstruct, self2.containerState]);
    return documentContinued(code3);
  }
  function flowStart(code3) {
    if (code3 === codes.eof) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code3);
      return;
    }
    childFlow = childFlow || self2.parser.flow(self2.now());
    effects.enter(types.chunkFlow, {
      contentType: constants.contentTypeFlow,
      previous: childToken,
      _tokenizer: childFlow
    });
    return flowContinue(code3);
  }
  function flowContinue(code3) {
    if (code3 === codes.eof) {
      writeToChild(effects.exit(types.chunkFlow), true);
      exitContainers(0);
      effects.consume(code3);
      return;
    }
    if (markdownLineEnding(code3)) {
      effects.consume(code3);
      writeToChild(effects.exit(types.chunkFlow));
      continued = 0;
      self2.interrupt = void 0;
      return start2;
    }
    effects.consume(code3);
    return flowContinue;
  }
  function writeToChild(token, eof) {
    ok2(childFlow, "expected `childFlow` to be defined when continuing");
    const stream = self2.sliceStream(token);
    if (eof) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream);
    if (self2.parser.lazy[token.start.line]) {
      let index4 = childFlow.events.length;
      while (index4--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index4][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index4][1].end || // …or ends after it.
          childFlow.events[index4][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === types.chunkFlow) {
          if (seen) {
            point4 = self2.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      ok2(point4, "could not find previous flow chunk");
      exitContainers(continued);
      index4 = indexBeforeExits;
      while (index4 < self2.events.length) {
        self2.events[index4][1].end = Object.assign({}, point4);
        index4++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index4;
    }
  }
  function exitContainers(size) {
    let index4 = stack.length;
    while (index4-- > size) {
      const entry = stack[index4];
      self2.containerState = entry[1];
      ok2(
        entry[0].exit,
        "expected `exit` to be defined on container construct"
      );
      entry[0].exit.call(self2, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    ok2(
      self2.containerState,
      "expected `containerState` to be defined when closing flow"
    );
    ok2(childFlow, "expected `childFlow` to be defined when closing it");
    childFlow.write([codes.eof]);
    childToken = void 0;
    childFlow = void 0;
    self2.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok4, nok) {
  ok2(
    this.parser.constructs.disable.null,
    "expected `disable.null` to be populated"
  );
  return factorySpace(
    effects,
    effects.attempt(this.parser.constructs.document, ok4, nok),
    types.linePrefix,
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
  );
}

// node_modules/micromark-util-classify-character/dev/index.js
function classifyCharacter(code3) {
  if (code3 === codes.eof || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
    return constants.characterGroupWhitespace;
  }
  if (unicodePunctuation(code3)) {
    return constants.characterGroupPunctuation;
  }
}

// node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  const called = [];
  let index4 = -1;
  while (++index4 < constructs2.length) {
    const resolve = constructs2[index4].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }
  return events;
}

// node_modules/micromark-core-commonmark/dev/lib/attention.js
var attention = {
  name: "attention",
  tokenize: tokenizeAttention,
  resolveAll: resolveAllAttention
};
function resolveAllAttention(events, context) {
  let index4 = -1;
  let open;
  let group;
  let text5;
  let openingSequence;
  let closingSequence;
  let use2;
  let nextEvents;
  let offset2;
  while (++index4 < events.length) {
    if (events[index4][0] === "enter" && events[index4][1].type === "attentionSequence" && events[index4][1]._close) {
      open = index4;
      while (open--) {
        if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index4][1]).charCodeAt(0)) {
          if ((events[open][1]._close || events[index4][1]._open) && (events[index4][1].end.offset - events[index4][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index4][1].end.offset - events[index4][1].start.offset) % 3)) {
            continue;
          }
          use2 = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index4][1].end.offset - events[index4][1].start.offset > 1 ? 2 : 1;
          const start2 = Object.assign({}, events[open][1].end);
          const end2 = Object.assign({}, events[index4][1].start);
          movePoint(start2, -use2);
          movePoint(end2, use2);
          openingSequence = {
            type: use2 > 1 ? types.strongSequence : types.emphasisSequence,
            start: start2,
            end: Object.assign({}, events[open][1].end)
          };
          closingSequence = {
            type: use2 > 1 ? types.strongSequence : types.emphasisSequence,
            start: Object.assign({}, events[index4][1].start),
            end: end2
          };
          text5 = {
            type: use2 > 1 ? types.strongText : types.emphasisText,
            start: Object.assign({}, events[open][1].end),
            end: Object.assign({}, events[index4][1].start)
          };
          group = {
            type: use2 > 1 ? types.strong : types.emphasis,
            start: Object.assign({}, openingSequence.start),
            end: Object.assign({}, closingSequence.end)
          };
          events[open][1].end = Object.assign({}, openingSequence.start);
          events[index4][1].start = Object.assign({}, closingSequence.end);
          nextEvents = [];
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [
              ["enter", events[open][1], context],
              ["exit", events[open][1], context]
            ]);
          }
          nextEvents = push(nextEvents, [
            ["enter", group, context],
            ["enter", openingSequence, context],
            ["exit", openingSequence, context],
            ["enter", text5, context]
          ]);
          ok2(
            context.parser.constructs.insideSpan.null,
            "expected `insideSpan` to be populated"
          );
          nextEvents = push(
            nextEvents,
            resolveAll(
              context.parser.constructs.insideSpan.null,
              events.slice(open + 1, index4),
              context
            )
          );
          nextEvents = push(nextEvents, [
            ["exit", text5, context],
            ["enter", closingSequence, context],
            ["exit", closingSequence, context],
            ["exit", group, context]
          ]);
          if (events[index4][1].end.offset - events[index4][1].start.offset) {
            offset2 = 2;
            nextEvents = push(nextEvents, [
              ["enter", events[index4][1], context],
              ["exit", events[index4][1], context]
            ]);
          } else {
            offset2 = 0;
          }
          splice(events, open - 1, index4 - open + 3, nextEvents);
          index4 = open + nextEvents.length - offset2 - 2;
          break;
        }
      }
    }
  }
  index4 = -1;
  while (++index4 < events.length) {
    if (events[index4][1].type === "attentionSequence") {
      events[index4][1].type = "data";
    }
  }
  return events;
}
function tokenizeAttention(effects, ok4) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous3 = this.previous;
  const before = classifyCharacter(previous3);
  let marker;
  return start2;
  function start2(code3) {
    ok2(
      code3 === codes.asterisk || code3 === codes.underscore,
      "expected asterisk or underscore"
    );
    marker = code3;
    effects.enter("attentionSequence");
    return inside(code3);
  }
  function inside(code3) {
    if (code3 === marker) {
      effects.consume(code3);
      return inside;
    }
    const token = effects.exit("attentionSequence");
    const after = classifyCharacter(code3);
    ok2(attentionMarkers2, "expected `attentionMarkers` to be populated");
    const open = !after || after === constants.characterGroupPunctuation && before || attentionMarkers2.includes(code3);
    const close = !before || before === constants.characterGroupPunctuation && after || attentionMarkers2.includes(previous3);
    token._open = Boolean(
      marker === codes.asterisk ? open : open && (before || !close)
    );
    token._close = Boolean(
      marker === codes.asterisk ? close : close && (after || !open)
    );
    return ok4(code3);
  }
}
function movePoint(point4, offset2) {
  point4.column += offset2;
  point4.offset += offset2;
  point4._bufferIndex += offset2;
}

// node_modules/micromark-core-commonmark/dev/lib/autolink.js
var autolink = { name: "autolink", tokenize: tokenizeAutolink };
function tokenizeAutolink(effects, ok4, nok) {
  let size = 0;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.lessThan, "expected `<`");
    effects.enter(types.autolink);
    effects.enter(types.autolinkMarker);
    effects.consume(code3);
    effects.exit(types.autolinkMarker);
    effects.enter(types.autolinkProtocol);
    return open;
  }
  function open(code3) {
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      return schemeOrEmailAtext;
    }
    return emailAtext(code3);
  }
  function schemeOrEmailAtext(code3) {
    if (code3 === codes.plusSign || code3 === codes.dash || code3 === codes.dot || asciiAlphanumeric(code3)) {
      size = 1;
      return schemeInsideOrEmailAtext(code3);
    }
    return emailAtext(code3);
  }
  function schemeInsideOrEmailAtext(code3) {
    if (code3 === codes.colon) {
      effects.consume(code3);
      size = 0;
      return urlInside;
    }
    if ((code3 === codes.plusSign || code3 === codes.dash || code3 === codes.dot || asciiAlphanumeric(code3)) && size++ < constants.autolinkSchemeSizeMax) {
      effects.consume(code3);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code3);
  }
  function urlInside(code3) {
    if (code3 === codes.greaterThan) {
      effects.exit(types.autolinkProtocol);
      effects.enter(types.autolinkMarker);
      effects.consume(code3);
      effects.exit(types.autolinkMarker);
      effects.exit(types.autolink);
      return ok4;
    }
    if (code3 === codes.eof || code3 === codes.space || code3 === codes.lessThan || asciiControl(code3)) {
      return nok(code3);
    }
    effects.consume(code3);
    return urlInside;
  }
  function emailAtext(code3) {
    if (code3 === codes.atSign) {
      effects.consume(code3);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code3)) {
      effects.consume(code3);
      return emailAtext;
    }
    return nok(code3);
  }
  function emailAtSignOrDot(code3) {
    return asciiAlphanumeric(code3) ? emailLabel(code3) : nok(code3);
  }
  function emailLabel(code3) {
    if (code3 === codes.dot) {
      effects.consume(code3);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code3 === codes.greaterThan) {
      effects.exit(types.autolinkProtocol).type = types.autolinkEmail;
      effects.enter(types.autolinkMarker);
      effects.consume(code3);
      effects.exit(types.autolinkMarker);
      effects.exit(types.autolink);
      return ok4;
    }
    return emailValue(code3);
  }
  function emailValue(code3) {
    if ((code3 === codes.dash || asciiAlphanumeric(code3)) && size++ < constants.autolinkDomainSizeMax) {
      const next = code3 === codes.dash ? emailValue : emailLabel;
      effects.consume(code3);
      return next;
    }
    return nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/blank-line.js
var blankLine = { tokenize: tokenizeBlankLine, partial: true };
function tokenizeBlankLine(effects, ok4, nok) {
  return start2;
  function start2(code3) {
    return markdownSpace(code3) ? factorySpace(effects, after, types.linePrefix)(code3) : after(code3);
  }
  function after(code3) {
    return code3 === codes.eof || markdownLineEnding(code3) ? ok4(code3) : nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/block-quote.js
var blockQuote = {
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart,
  continuation: { tokenize: tokenizeBlockQuoteContinuation },
  exit
};
function tokenizeBlockQuoteStart(effects, ok4, nok) {
  const self2 = this;
  return start2;
  function start2(code3) {
    if (code3 === codes.greaterThan) {
      const state = self2.containerState;
      ok2(state, "expected `containerState` to be defined in container");
      if (!state.open) {
        effects.enter(types.blockQuote, { _container: true });
        state.open = true;
      }
      effects.enter(types.blockQuotePrefix);
      effects.enter(types.blockQuoteMarker);
      effects.consume(code3);
      effects.exit(types.blockQuoteMarker);
      return after;
    }
    return nok(code3);
  }
  function after(code3) {
    if (markdownSpace(code3)) {
      effects.enter(types.blockQuotePrefixWhitespace);
      effects.consume(code3);
      effects.exit(types.blockQuotePrefixWhitespace);
      effects.exit(types.blockQuotePrefix);
      return ok4;
    }
    effects.exit(types.blockQuotePrefix);
    return ok4(code3);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok4, nok) {
  const self2 = this;
  return contStart;
  function contStart(code3) {
    if (markdownSpace(code3)) {
      ok2(
        self2.parser.constructs.disable.null,
        "expected `disable.null` to be populated"
      );
      return factorySpace(
        effects,
        contBefore,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
      )(code3);
    }
    return contBefore(code3);
  }
  function contBefore(code3) {
    return effects.attempt(blockQuote, ok4, nok)(code3);
  }
}
function exit(effects) {
  effects.exit(types.blockQuote);
}

// node_modules/micromark-core-commonmark/dev/lib/character-escape.js
var characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok4, nok) {
  return start2;
  function start2(code3) {
    ok2(code3 === codes.backslash, "expected `\\`");
    effects.enter(types.characterEscape);
    effects.enter(types.escapeMarker);
    effects.consume(code3);
    effects.exit(types.escapeMarker);
    return inside;
  }
  function inside(code3) {
    if (asciiPunctuation(code3)) {
      effects.enter(types.characterEscapeValue);
      effects.consume(code3);
      effects.exit(types.characterEscapeValue);
      effects.exit(types.characterEscape);
      return ok4;
    }
    return nok(code3);
  }
}

// node_modules/decode-named-character-reference/index.dom.js
var element2 = document.createElement("i");
function decodeNamedCharacterReference(value) {
  const characterReference2 = "&" + value + ";";
  element2.innerHTML = characterReference2;
  const character = element2.textContent;
  if (
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    character.charCodeAt(character.length - 1) === 59 && value !== "semi"
  ) {
    return false;
  }
  return character === characterReference2 ? false : character;
}

// node_modules/micromark-core-commonmark/dev/lib/character-reference.js
var characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok4, nok) {
  const self2 = this;
  let size = 0;
  let max2;
  let test2;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.ampersand, "expected `&`");
    effects.enter(types.characterReference);
    effects.enter(types.characterReferenceMarker);
    effects.consume(code3);
    effects.exit(types.characterReferenceMarker);
    return open;
  }
  function open(code3) {
    if (code3 === codes.numberSign) {
      effects.enter(types.characterReferenceMarkerNumeric);
      effects.consume(code3);
      effects.exit(types.characterReferenceMarkerNumeric);
      return numeric2;
    }
    effects.enter(types.characterReferenceValue);
    max2 = constants.characterReferenceNamedSizeMax;
    test2 = asciiAlphanumeric;
    return value(code3);
  }
  function numeric2(code3) {
    if (code3 === codes.uppercaseX || code3 === codes.lowercaseX) {
      effects.enter(types.characterReferenceMarkerHexadecimal);
      effects.consume(code3);
      effects.exit(types.characterReferenceMarkerHexadecimal);
      effects.enter(types.characterReferenceValue);
      max2 = constants.characterReferenceHexadecimalSizeMax;
      test2 = asciiHexDigit;
      return value;
    }
    effects.enter(types.characterReferenceValue);
    max2 = constants.characterReferenceDecimalSizeMax;
    test2 = asciiDigit;
    return value(code3);
  }
  function value(code3) {
    if (code3 === codes.semicolon && size) {
      const token = effects.exit(types.characterReferenceValue);
      if (test2 === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
        return nok(code3);
      }
      effects.enter(types.characterReferenceMarker);
      effects.consume(code3);
      effects.exit(types.characterReferenceMarker);
      effects.exit(types.characterReference);
      return ok4;
    }
    if (test2(code3) && size++ < max2) {
      effects.consume(code3);
      return value;
    }
    return nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-fenced.js
var nonLazyContinuation = {
  tokenize: tokenizeNonLazyContinuation,
  partial: true
};
var codeFenced = {
  name: "codeFenced",
  tokenize: tokenizeCodeFenced,
  concrete: true
};
function tokenizeCodeFenced(effects, ok4, nok) {
  const self2 = this;
  const closeStart = { tokenize: tokenizeCloseStart, partial: true };
  let initialPrefix = 0;
  let sizeOpen = 0;
  let marker;
  return start2;
  function start2(code3) {
    return beforeSequenceOpen(code3);
  }
  function beforeSequenceOpen(code3) {
    ok2(
      code3 === codes.graveAccent || code3 === codes.tilde,
      "expected `` ` `` or `~`"
    );
    const tail = self2.events[self2.events.length - 1];
    initialPrefix = tail && tail[1].type === types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code3;
    effects.enter(types.codeFenced);
    effects.enter(types.codeFencedFence);
    effects.enter(types.codeFencedFenceSequence);
    return sequenceOpen(code3);
  }
  function sequenceOpen(code3) {
    if (code3 === marker) {
      sizeOpen++;
      effects.consume(code3);
      return sequenceOpen;
    }
    if (sizeOpen < constants.codeFencedSequenceSizeMin) {
      return nok(code3);
    }
    effects.exit(types.codeFencedFenceSequence);
    return markdownSpace(code3) ? factorySpace(effects, infoBefore, types.whitespace)(code3) : infoBefore(code3);
  }
  function infoBefore(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.codeFencedFence);
      return self2.interrupt ? ok4(code3) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code3);
    }
    effects.enter(types.codeFencedFenceInfo);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return info(code3);
  }
  function info(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceInfo);
      return infoBefore(code3);
    }
    if (markdownSpace(code3)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceInfo);
      return factorySpace(effects, metaBefore, types.whitespace)(code3);
    }
    if (code3 === codes.graveAccent && code3 === marker) {
      return nok(code3);
    }
    effects.consume(code3);
    return info;
  }
  function metaBefore(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return infoBefore(code3);
    }
    effects.enter(types.codeFencedFenceMeta);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return meta(code3);
  }
  function meta(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceMeta);
      return infoBefore(code3);
    }
    if (code3 === codes.graveAccent && code3 === marker) {
      return nok(code3);
    }
    effects.consume(code3);
    return meta;
  }
  function atNonLazyBreak(code3) {
    ok2(markdownLineEnding(code3), "expected eol");
    return effects.attempt(closeStart, after, contentBefore)(code3);
  }
  function contentBefore(code3) {
    ok2(markdownLineEnding(code3), "expected eol");
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return contentStart;
  }
  function contentStart(code3) {
    return initialPrefix > 0 && markdownSpace(code3) ? factorySpace(
      effects,
      beforeContentChunk,
      types.linePrefix,
      initialPrefix + 1
    )(code3) : beforeContentChunk(code3);
  }
  function beforeContentChunk(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code3);
    }
    effects.enter(types.codeFlowValue);
    return contentChunk(code3);
  }
  function contentChunk(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.codeFlowValue);
      return beforeContentChunk(code3);
    }
    effects.consume(code3);
    return contentChunk;
  }
  function after(code3) {
    effects.exit(types.codeFenced);
    return ok4(code3);
  }
  function tokenizeCloseStart(effects2, ok5, nok2) {
    let size = 0;
    return startBefore;
    function startBefore(code3) {
      ok2(markdownLineEnding(code3), "expected eol");
      effects2.enter(types.lineEnding);
      effects2.consume(code3);
      effects2.exit(types.lineEnding);
      return start3;
    }
    function start3(code3) {
      ok2(
        self2.parser.constructs.disable.null,
        "expected `disable.null` to be populated"
      );
      effects2.enter(types.codeFencedFence);
      return markdownSpace(code3) ? factorySpace(
        effects2,
        beforeSequenceClose,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
      )(code3) : beforeSequenceClose(code3);
    }
    function beforeSequenceClose(code3) {
      if (code3 === marker) {
        effects2.enter(types.codeFencedFenceSequence);
        return sequenceClose(code3);
      }
      return nok2(code3);
    }
    function sequenceClose(code3) {
      if (code3 === marker) {
        size++;
        effects2.consume(code3);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects2.exit(types.codeFencedFenceSequence);
        return markdownSpace(code3) ? factorySpace(effects2, sequenceCloseAfter, types.whitespace)(code3) : sequenceCloseAfter(code3);
      }
      return nok2(code3);
    }
    function sequenceCloseAfter(code3) {
      if (code3 === codes.eof || markdownLineEnding(code3)) {
        effects2.exit(types.codeFencedFence);
        return ok5(code3);
      }
      return nok2(code3);
    }
  }
}
function tokenizeNonLazyContinuation(effects, ok4, nok) {
  const self2 = this;
  return start2;
  function start2(code3) {
    if (code3 === codes.eof) {
      return nok(code3);
    }
    ok2(markdownLineEnding(code3), "expected eol");
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return lineStart;
  }
  function lineStart(code3) {
    return self2.parser.lazy[self2.now().line] ? nok(code3) : ok4(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-indented.js
var codeIndented = {
  name: "codeIndented",
  tokenize: tokenizeCodeIndented
};
var furtherStart = { tokenize: tokenizeFurtherStart, partial: true };
function tokenizeCodeIndented(effects, ok4, nok) {
  const self2 = this;
  return start2;
  function start2(code3) {
    ok2(markdownSpace(code3));
    effects.enter(types.codeIndented);
    return factorySpace(
      effects,
      afterPrefix,
      types.linePrefix,
      constants.tabSize + 1
    )(code3);
  }
  function afterPrefix(code3) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? atBreak(code3) : nok(code3);
  }
  function atBreak(code3) {
    if (code3 === codes.eof) {
      return after(code3);
    }
    if (markdownLineEnding(code3)) {
      return effects.attempt(furtherStart, atBreak, after)(code3);
    }
    effects.enter(types.codeFlowValue);
    return inside(code3);
  }
  function inside(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.codeFlowValue);
      return atBreak(code3);
    }
    effects.consume(code3);
    return inside;
  }
  function after(code3) {
    effects.exit(types.codeIndented);
    return ok4(code3);
  }
}
function tokenizeFurtherStart(effects, ok4, nok) {
  const self2 = this;
  return furtherStart2;
  function furtherStart2(code3) {
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code3);
    }
    if (markdownLineEnding(code3)) {
      effects.enter(types.lineEnding);
      effects.consume(code3);
      effects.exit(types.lineEnding);
      return furtherStart2;
    }
    return factorySpace(
      effects,
      afterPrefix,
      types.linePrefix,
      constants.tabSize + 1
    )(code3);
  }
  function afterPrefix(code3) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? ok4(code3) : markdownLineEnding(code3) ? furtherStart2(code3) : nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-text.js
var codeText = {
  name: "codeText",
  tokenize: tokenizeCodeText,
  resolve: resolveCodeText,
  previous
};
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  let index4;
  let enter;
  if ((events[headEnterIndex][1].type === types.lineEnding || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === types.lineEnding || events[tailExitIndex][1].type === "space")) {
    index4 = headEnterIndex;
    while (++index4 < tailExitIndex) {
      if (events[index4][1].type === types.codeTextData) {
        events[headEnterIndex][1].type = types.codeTextPadding;
        events[tailExitIndex][1].type = types.codeTextPadding;
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index4 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index4 <= tailExitIndex) {
    if (enter === void 0) {
      if (index4 !== tailExitIndex && events[index4][1].type !== types.lineEnding) {
        enter = index4;
      }
    } else if (index4 === tailExitIndex || events[index4][1].type === types.lineEnding) {
      events[enter][1].type = types.codeTextData;
      if (index4 !== enter + 2) {
        events[enter][1].end = events[index4 - 1][1].end;
        events.splice(enter + 2, index4 - enter - 2);
        tailExitIndex -= index4 - enter - 2;
        index4 = enter + 2;
      }
      enter = void 0;
    }
  }
  return events;
}
function previous(code3) {
  return code3 !== codes.graveAccent || this.events[this.events.length - 1][1].type === types.characterEscape;
}
function tokenizeCodeText(effects, ok4, nok) {
  const self2 = this;
  let sizeOpen = 0;
  let size;
  let token;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.graveAccent, "expected `` ` ``");
    ok2(previous.call(self2, self2.previous), "expected correct previous");
    effects.enter(types.codeText);
    effects.enter(types.codeTextSequence);
    return sequenceOpen(code3);
  }
  function sequenceOpen(code3) {
    if (code3 === codes.graveAccent) {
      effects.consume(code3);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit(types.codeTextSequence);
    return between2(code3);
  }
  function between2(code3) {
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (code3 === codes.space) {
      effects.enter("space");
      effects.consume(code3);
      effects.exit("space");
      return between2;
    }
    if (code3 === codes.graveAccent) {
      token = effects.enter(types.codeTextSequence);
      size = 0;
      return sequenceClose(code3);
    }
    if (markdownLineEnding(code3)) {
      effects.enter(types.lineEnding);
      effects.consume(code3);
      effects.exit(types.lineEnding);
      return between2;
    }
    effects.enter(types.codeTextData);
    return data(code3);
  }
  function data(code3) {
    if (code3 === codes.eof || code3 === codes.space || code3 === codes.graveAccent || markdownLineEnding(code3)) {
      effects.exit(types.codeTextData);
      return between2(code3);
    }
    effects.consume(code3);
    return data;
  }
  function sequenceClose(code3) {
    if (code3 === codes.graveAccent) {
      effects.consume(code3);
      size++;
      return sequenceClose;
    }
    if (size === sizeOpen) {
      effects.exit(types.codeTextSequence);
      effects.exit(types.codeText);
      return ok4(code3);
    }
    token.type = types.codeTextData;
    return data(code3);
  }
}

// node_modules/micromark-util-subtokenize/dev/index.js
function subtokenize(events) {
  const jumps = {};
  let index4 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  while (++index4 < events.length) {
    while (index4 in jumps) {
      index4 = jumps[index4];
    }
    event = events[index4];
    if (index4 && event[1].type === types.chunkFlow && events[index4 - 1][1].type === types.listItemPrefix) {
      ok2(event[1]._tokenizer, "expected `_tokenizer` on subtokens");
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.lineEndingBlank) {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.content) {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === types.content) {
            break;
          }
          if (subevents[otherIndex][1].type === types.chunkText) {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index4));
        index4 = jumps[index4];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index4;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events[otherIndex];
        if (otherEvent[1].type === types.lineEnding || otherEvent[1].type === types.lineEndingBlank) {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events[lineIndex][1].type = types.lineEndingBlank;
            }
            otherEvent[1].type = types.lineEnding;
            lineIndex = otherIndex;
          }
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = Object.assign({}, events[lineIndex][1].start);
        parameters = events.slice(lineIndex, index4);
        parameters.unshift(event);
        splice(events, lineIndex, index4 - lineIndex + 1, parameters);
      }
    }
  }
  return !more;
}
function subcontent(events, eventIndex) {
  const token = events[eventIndex][1];
  const context = events[eventIndex][2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  ok2(token.contentType, "expected `contentType` on subtokens");
  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
  const childEvents = tokenizer.events;
  const jumps = [];
  const gaps = {};
  let stream;
  let previous3;
  let index4 = -1;
  let current = token;
  let adjust = 0;
  let start2 = 0;
  const breaks = [start2];
  while (current) {
    while (events[++startPosition][1] !== current) {
    }
    ok2(
      !previous3 || current.previous === previous3,
      "expected previous to match"
    );
    ok2(!previous3 || previous3.next === current, "expected next to match");
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream = context.sliceStream(current);
      if (!current.next) {
        stream.push(codes.eof);
      }
      if (previous3) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous3 = current;
    current = current.next;
  }
  current = token;
  while (++index4 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index4][0] === "exit" && childEvents[index4 - 1][0] === "enter" && childEvents[index4][1].type === childEvents[index4 - 1][1].type && childEvents[index4][1].start.line !== childEvents[index4][1].end.line
    ) {
      ok2(current, "expected a current token");
      start2 = index4 + 1;
      breaks.push(start2);
      current._tokenizer = void 0;
      current.previous = void 0;
      current = current.next;
    }
  }
  tokenizer.events = [];
  if (current) {
    current._tokenizer = void 0;
    current.previous = void 0;
    ok2(!current.next, "expected no next token");
  } else {
    breaks.pop();
  }
  index4 = breaks.length;
  while (index4--) {
    const slice = childEvents.slice(breaks[index4], breaks[index4 + 1]);
    const start3 = startPositions.pop();
    ok2(start3 !== void 0, "expected a start position when splicing");
    jumps.unshift([start3, start3 + slice.length - 1]);
    splice(events, start3, 2, slice);
  }
  index4 = -1;
  while (++index4 < jumps.length) {
    gaps[adjust + jumps[index4][0]] = adjust + jumps[index4][1];
    adjust += jumps[index4][1] - jumps[index4][0] - 1;
  }
  return gaps;
}

// node_modules/micromark-core-commonmark/dev/lib/content.js
var content2 = { tokenize: tokenizeContent, resolve: resolveContent };
var continuationConstruct = { tokenize: tokenizeContinuation, partial: true };
function resolveContent(events) {
  subtokenize(events);
  return events;
}
function tokenizeContent(effects, ok4) {
  let previous3;
  return chunkStart;
  function chunkStart(code3) {
    ok2(
      code3 !== codes.eof && !markdownLineEnding(code3),
      "expected no eof or eol"
    );
    effects.enter(types.content);
    previous3 = effects.enter(types.chunkContent, {
      contentType: constants.contentTypeContent
    });
    return chunkInside(code3);
  }
  function chunkInside(code3) {
    if (code3 === codes.eof) {
      return contentEnd(code3);
    }
    if (markdownLineEnding(code3)) {
      return effects.check(
        continuationConstruct,
        contentContinue,
        contentEnd
      )(code3);
    }
    effects.consume(code3);
    return chunkInside;
  }
  function contentEnd(code3) {
    effects.exit(types.chunkContent);
    effects.exit(types.content);
    return ok4(code3);
  }
  function contentContinue(code3) {
    ok2(markdownLineEnding(code3), "expected eol");
    effects.consume(code3);
    effects.exit(types.chunkContent);
    ok2(previous3, "expected previous token");
    previous3.next = effects.enter(types.chunkContent, {
      contentType: constants.contentTypeContent,
      previous: previous3
    });
    previous3 = previous3.next;
    return chunkInside;
  }
}
function tokenizeContinuation(effects, ok4, nok) {
  const self2 = this;
  return startLookahead;
  function startLookahead(code3) {
    ok2(markdownLineEnding(code3), "expected a line ending");
    effects.exit(types.chunkContent);
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return factorySpace(effects, prefixed, types.linePrefix);
  }
  function prefixed(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return nok(code3);
    }
    ok2(
      self2.parser.constructs.disable.null,
      "expected `disable.null` to be populated"
    );
    const tail = self2.events[self2.events.length - 1];
    if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize) {
      return ok4(code3);
    }
    return effects.interrupt(self2.parser.constructs.flow, nok, ok4)(code3);
  }
}

// node_modules/micromark-factory-destination/dev/index.js
function factoryDestination(effects, ok4, nok, type, literalType, literalMarkerType, rawType, stringType, max2) {
  const limit = max2 || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start2;
  function start2(code3) {
    if (code3 === codes.lessThan) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code3);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }
    if (code3 === codes.eof || code3 === codes.space || code3 === codes.rightParenthesis || asciiControl(code3)) {
      return nok(code3);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return raw(code3);
  }
  function enclosedBefore(code3) {
    if (code3 === codes.greaterThan) {
      effects.enter(literalMarkerType);
      effects.consume(code3);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok4;
    }
    effects.enter(stringType);
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return enclosed(code3);
  }
  function enclosed(code3) {
    if (code3 === codes.greaterThan) {
      effects.exit(types.chunkString);
      effects.exit(stringType);
      return enclosedBefore(code3);
    }
    if (code3 === codes.eof || code3 === codes.lessThan || markdownLineEnding(code3)) {
      return nok(code3);
    }
    effects.consume(code3);
    return code3 === codes.backslash ? enclosedEscape : enclosed;
  }
  function enclosedEscape(code3) {
    if (code3 === codes.lessThan || code3 === codes.greaterThan || code3 === codes.backslash) {
      effects.consume(code3);
      return enclosed;
    }
    return enclosed(code3);
  }
  function raw(code3) {
    if (!balance && (code3 === codes.eof || code3 === codes.rightParenthesis || markdownLineEndingOrSpace(code3))) {
      effects.exit(types.chunkString);
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok4(code3);
    }
    if (balance < limit && code3 === codes.leftParenthesis) {
      effects.consume(code3);
      balance++;
      return raw;
    }
    if (code3 === codes.rightParenthesis) {
      effects.consume(code3);
      balance--;
      return raw;
    }
    if (code3 === codes.eof || code3 === codes.space || code3 === codes.leftParenthesis || asciiControl(code3)) {
      return nok(code3);
    }
    effects.consume(code3);
    return code3 === codes.backslash ? rawEscape : raw;
  }
  function rawEscape(code3) {
    if (code3 === codes.leftParenthesis || code3 === codes.rightParenthesis || code3 === codes.backslash) {
      effects.consume(code3);
      return raw;
    }
    return raw(code3);
  }
}

// node_modules/micromark-factory-label/dev/index.js
function factoryLabel(effects, ok4, nok, type, markerType, stringType) {
  const self2 = this;
  let size = 0;
  let seen;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected `[`");
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code3);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code3) {
    if (size > constants.linkReferenceSizeMax || code3 === codes.eof || code3 === codes.leftSquareBracket || code3 === codes.rightSquareBracket && !seen || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code3 === codes.caret && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
      return nok(code3);
    }
    if (code3 === codes.rightSquareBracket) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code3);
      effects.exit(markerType);
      effects.exit(type);
      return ok4;
    }
    if (markdownLineEnding(code3)) {
      effects.enter(types.lineEnding);
      effects.consume(code3);
      effects.exit(types.lineEnding);
      return atBreak;
    }
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return labelInside(code3);
  }
  function labelInside(code3) {
    if (code3 === codes.eof || code3 === codes.leftSquareBracket || code3 === codes.rightSquareBracket || markdownLineEnding(code3) || size++ > constants.linkReferenceSizeMax) {
      effects.exit(types.chunkString);
      return atBreak(code3);
    }
    effects.consume(code3);
    if (!seen) seen = !markdownSpace(code3);
    return code3 === codes.backslash ? labelEscape : labelInside;
  }
  function labelEscape(code3) {
    if (code3 === codes.leftSquareBracket || code3 === codes.backslash || code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      size++;
      return labelInside;
    }
    return labelInside(code3);
  }
}

// node_modules/micromark-factory-title/dev/index.js
function factoryTitle(effects, ok4, nok, type, markerType, stringType) {
  let marker;
  return start2;
  function start2(code3) {
    if (code3 === codes.quotationMark || code3 === codes.apostrophe || code3 === codes.leftParenthesis) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code3);
      effects.exit(markerType);
      marker = code3 === codes.leftParenthesis ? codes.rightParenthesis : code3;
      return begin;
    }
    return nok(code3);
  }
  function begin(code3) {
    if (code3 === marker) {
      effects.enter(markerType);
      effects.consume(code3);
      effects.exit(markerType);
      effects.exit(type);
      return ok4;
    }
    effects.enter(stringType);
    return atBreak(code3);
  }
  function atBreak(code3) {
    if (code3 === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (markdownLineEnding(code3)) {
      effects.enter(types.lineEnding);
      effects.consume(code3);
      effects.exit(types.lineEnding);
      return factorySpace(effects, atBreak, types.linePrefix);
    }
    effects.enter(types.chunkString, { contentType: constants.contentTypeString });
    return inside(code3);
  }
  function inside(code3) {
    if (code3 === marker || code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.chunkString);
      return atBreak(code3);
    }
    effects.consume(code3);
    return code3 === codes.backslash ? escape2 : inside;
  }
  function escape2(code3) {
    if (code3 === marker || code3 === codes.backslash) {
      effects.consume(code3);
      return inside;
    }
    return inside(code3);
  }
}

// node_modules/micromark-factory-whitespace/dev/index.js
function factoryWhitespace(effects, ok4) {
  let seen;
  return start2;
  function start2(code3) {
    if (markdownLineEnding(code3)) {
      effects.enter(types.lineEnding);
      effects.consume(code3);
      effects.exit(types.lineEnding);
      seen = true;
      return start2;
    }
    if (markdownSpace(code3)) {
      return factorySpace(
        effects,
        start2,
        seen ? types.linePrefix : types.lineSuffix
      )(code3);
    }
    return ok4(code3);
  }
}

// node_modules/micromark-util-symbol/values.js
var values = (
  /** @type {const} */
  {
    ht: "	",
    lf: "\n",
    cr: "\r",
    space: " ",
    exclamationMark: "!",
    quotationMark: '"',
    numberSign: "#",
    dollarSign: "$",
    percentSign: "%",
    ampersand: "&",
    apostrophe: "'",
    leftParenthesis: "(",
    rightParenthesis: ")",
    asterisk: "*",
    plusSign: "+",
    comma: ",",
    dash: "-",
    dot: ".",
    slash: "/",
    digit0: "0",
    digit1: "1",
    digit2: "2",
    digit3: "3",
    digit4: "4",
    digit5: "5",
    digit6: "6",
    digit7: "7",
    digit8: "8",
    digit9: "9",
    colon: ":",
    semicolon: ";",
    lessThan: "<",
    equalsTo: "=",
    greaterThan: ">",
    questionMark: "?",
    atSign: "@",
    uppercaseA: "A",
    uppercaseB: "B",
    uppercaseC: "C",
    uppercaseD: "D",
    uppercaseE: "E",
    uppercaseF: "F",
    uppercaseG: "G",
    uppercaseH: "H",
    uppercaseI: "I",
    uppercaseJ: "J",
    uppercaseK: "K",
    uppercaseL: "L",
    uppercaseM: "M",
    uppercaseN: "N",
    uppercaseO: "O",
    uppercaseP: "P",
    uppercaseQ: "Q",
    uppercaseR: "R",
    uppercaseS: "S",
    uppercaseT: "T",
    uppercaseU: "U",
    uppercaseV: "V",
    uppercaseW: "W",
    uppercaseX: "X",
    uppercaseY: "Y",
    uppercaseZ: "Z",
    leftSquareBracket: "[",
    backslash: "\\",
    rightSquareBracket: "]",
    caret: "^",
    underscore: "_",
    graveAccent: "`",
    lowercaseA: "a",
    lowercaseB: "b",
    lowercaseC: "c",
    lowercaseD: "d",
    lowercaseE: "e",
    lowercaseF: "f",
    lowercaseG: "g",
    lowercaseH: "h",
    lowercaseI: "i",
    lowercaseJ: "j",
    lowercaseK: "k",
    lowercaseL: "l",
    lowercaseM: "m",
    lowercaseN: "n",
    lowercaseO: "o",
    lowercaseP: "p",
    lowercaseQ: "q",
    lowercaseR: "r",
    lowercaseS: "s",
    lowercaseT: "t",
    lowercaseU: "u",
    lowercaseV: "v",
    lowercaseW: "w",
    lowercaseX: "x",
    lowercaseY: "y",
    lowercaseZ: "z",
    leftCurlyBrace: "{",
    verticalBar: "|",
    rightCurlyBrace: "}",
    tilde: "~",
    replacementCharacter: "�"
  }
);

// node_modules/micromark-util-normalize-identifier/dev/index.js
function normalizeIdentifier(value) {
  return value.replace(/[\t\n\r ]+/g, values.space).replace(/^ | $/g, "").toLowerCase().toUpperCase();
}

// node_modules/micromark-core-commonmark/dev/lib/definition.js
var definition = { name: "definition", tokenize: tokenizeDefinition };
var titleBefore = { tokenize: tokenizeTitleBefore, partial: true };
function tokenizeDefinition(effects, ok4, nok) {
  const self2 = this;
  let identifier;
  return start2;
  function start2(code3) {
    effects.enter(types.definition);
    return before(code3);
  }
  function before(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected `[`");
    return factoryLabel.call(
      self2,
      effects,
      labelAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      types.definitionLabel,
      types.definitionLabelMarker,
      types.definitionLabelString
    )(code3);
  }
  function labelAfter(code3) {
    identifier = normalizeIdentifier(
      self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
    );
    if (code3 === codes.colon) {
      effects.enter(types.definitionMarker);
      effects.consume(code3);
      effects.exit(types.definitionMarker);
      return markerAfter;
    }
    return nok(code3);
  }
  function markerAfter(code3) {
    return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, destinationBefore)(code3) : destinationBefore(code3);
  }
  function destinationBefore(code3) {
    return factoryDestination(
      effects,
      destinationAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      types.definitionDestination,
      types.definitionDestinationLiteral,
      types.definitionDestinationLiteralMarker,
      types.definitionDestinationRaw,
      types.definitionDestinationString
    )(code3);
  }
  function destinationAfter(code3) {
    return effects.attempt(titleBefore, after, after)(code3);
  }
  function after(code3) {
    return markdownSpace(code3) ? factorySpace(effects, afterWhitespace, types.whitespace)(code3) : afterWhitespace(code3);
  }
  function afterWhitespace(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.definition);
      self2.parser.defined.push(identifier);
      return ok4(code3);
    }
    return nok(code3);
  }
}
function tokenizeTitleBefore(effects, ok4, nok) {
  return titleBefore2;
  function titleBefore2(code3) {
    return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, beforeMarker)(code3) : nok(code3);
  }
  function beforeMarker(code3) {
    return factoryTitle(
      effects,
      titleAfter,
      nok,
      types.definitionTitle,
      types.definitionTitleMarker,
      types.definitionTitleString
    )(code3);
  }
  function titleAfter(code3) {
    return markdownSpace(code3) ? factorySpace(
      effects,
      titleAfterOptionalWhitespace,
      types.whitespace
    )(code3) : titleAfterOptionalWhitespace(code3);
  }
  function titleAfterOptionalWhitespace(code3) {
    return code3 === codes.eof || markdownLineEnding(code3) ? ok4(code3) : nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js
var hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok4, nok) {
  return start2;
  function start2(code3) {
    ok2(code3 === codes.backslash, "expected `\\`");
    effects.enter(types.hardBreakEscape);
    effects.consume(code3);
    return after;
  }
  function after(code3) {
    if (markdownLineEnding(code3)) {
      effects.exit(types.hardBreakEscape);
      return ok4(code3);
    }
    return nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/heading-atx.js
var headingAtx = {
  name: "headingAtx",
  tokenize: tokenizeHeadingAtx,
  resolve: resolveHeadingAtx
};
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  let content3;
  let text5;
  if (events[contentStart][1].type === types.whitespace) {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === types.whitespace) {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === types.atxHeadingSequence && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === types.whitespace)) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content3 = {
      type: types.atxHeadingText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text5 = {
      type: types.chunkText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: constants.contentTypeText
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [
      ["enter", content3, context],
      ["enter", text5, context],
      ["exit", text5, context],
      ["exit", content3, context]
    ]);
  }
  return events;
}
function tokenizeHeadingAtx(effects, ok4, nok) {
  let size = 0;
  return start2;
  function start2(code3) {
    effects.enter(types.atxHeading);
    return before(code3);
  }
  function before(code3) {
    ok2(code3 === codes.numberSign, "expected `#`");
    effects.enter(types.atxHeadingSequence);
    return sequenceOpen(code3);
  }
  function sequenceOpen(code3) {
    if (code3 === codes.numberSign && size++ < constants.atxHeadingOpeningFenceSizeMax) {
      effects.consume(code3);
      return sequenceOpen;
    }
    if (code3 === codes.eof || markdownLineEndingOrSpace(code3)) {
      effects.exit(types.atxHeadingSequence);
      return atBreak(code3);
    }
    return nok(code3);
  }
  function atBreak(code3) {
    if (code3 === codes.numberSign) {
      effects.enter(types.atxHeadingSequence);
      return sequenceFurther(code3);
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.atxHeading);
      return ok4(code3);
    }
    if (markdownSpace(code3)) {
      return factorySpace(effects, atBreak, types.whitespace)(code3);
    }
    effects.enter(types.atxHeadingText);
    return data(code3);
  }
  function sequenceFurther(code3) {
    if (code3 === codes.numberSign) {
      effects.consume(code3);
      return sequenceFurther;
    }
    effects.exit(types.atxHeadingSequence);
    return atBreak(code3);
  }
  function data(code3) {
    if (code3 === codes.eof || code3 === codes.numberSign || markdownLineEndingOrSpace(code3)) {
      effects.exit(types.atxHeadingText);
      return atBreak(code3);
    }
    effects.consume(code3);
    return data;
  }
}

// node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var htmlRawNames = ["pre", "script", "style", "textarea"];

// node_modules/micromark-core-commonmark/dev/lib/html-flow.js
var htmlFlow = {
  name: "htmlFlow",
  tokenize: tokenizeHtmlFlow,
  resolveTo: resolveToHtmlFlow,
  concrete: true
};
var blankLineBefore = { tokenize: tokenizeBlankLineBefore, partial: true };
var nonLazyContinuationStart = {
  tokenize: tokenizeNonLazyContinuationStart,
  partial: true
};
function resolveToHtmlFlow(events) {
  let index4 = events.length;
  while (index4--) {
    if (events[index4][0] === "enter" && events[index4][1].type === types.htmlFlow) {
      break;
    }
  }
  if (index4 > 1 && events[index4 - 2][1].type === types.linePrefix) {
    events[index4][1].start = events[index4 - 2][1].start;
    events[index4 + 1][1].start = events[index4 - 2][1].start;
    events.splice(index4 - 2, 2);
  }
  return events;
}
function tokenizeHtmlFlow(effects, ok4, nok) {
  const self2 = this;
  let marker;
  let closingTag;
  let buffer2;
  let index4;
  let markerB;
  return start2;
  function start2(code3) {
    return before(code3);
  }
  function before(code3) {
    ok2(code3 === codes.lessThan, "expected `<`");
    effects.enter(types.htmlFlow);
    effects.enter(types.htmlFlowData);
    effects.consume(code3);
    return open;
  }
  function open(code3) {
    if (code3 === codes.exclamationMark) {
      effects.consume(code3);
      return declarationOpen;
    }
    if (code3 === codes.slash) {
      effects.consume(code3);
      closingTag = true;
      return tagCloseStart;
    }
    if (code3 === codes.questionMark) {
      effects.consume(code3);
      marker = constants.htmlInstruction;
      return self2.interrupt ? ok4 : continuationDeclarationInside;
    }
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      buffer2 = String.fromCharCode(code3);
      return tagName;
    }
    return nok(code3);
  }
  function declarationOpen(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      marker = constants.htmlComment;
      return commentOpenInside;
    }
    if (code3 === codes.leftSquareBracket) {
      effects.consume(code3);
      marker = constants.htmlCdata;
      index4 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      marker = constants.htmlDeclaration;
      return self2.interrupt ? ok4 : continuationDeclarationInside;
    }
    return nok(code3);
  }
  function commentOpenInside(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      return self2.interrupt ? ok4 : continuationDeclarationInside;
    }
    return nok(code3);
  }
  function cdataOpenInside(code3) {
    const value = constants.cdataOpeningString;
    if (code3 === value.charCodeAt(index4++)) {
      effects.consume(code3);
      if (index4 === value.length) {
        return self2.interrupt ? ok4 : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code3);
  }
  function tagCloseStart(code3) {
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      buffer2 = String.fromCharCode(code3);
      return tagName;
    }
    return nok(code3);
  }
  function tagName(code3) {
    if (code3 === codes.eof || code3 === codes.slash || code3 === codes.greaterThan || markdownLineEndingOrSpace(code3)) {
      const slash = code3 === codes.slash;
      const name = buffer2.toLowerCase();
      if (!slash && !closingTag && htmlRawNames.includes(name)) {
        marker = constants.htmlRaw;
        return self2.interrupt ? ok4(code3) : continuation(code3);
      }
      if (htmlBlockNames.includes(buffer2.toLowerCase())) {
        marker = constants.htmlBasic;
        if (slash) {
          effects.consume(code3);
          return basicSelfClosing;
        }
        return self2.interrupt ? ok4(code3) : continuation(code3);
      }
      marker = constants.htmlComplete;
      return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code3) : closingTag ? completeClosingTagAfter(code3) : completeAttributeNameBefore(code3);
    }
    if (code3 === codes.dash || asciiAlphanumeric(code3)) {
      effects.consume(code3);
      buffer2 += String.fromCharCode(code3);
      return tagName;
    }
    return nok(code3);
  }
  function basicSelfClosing(code3) {
    if (code3 === codes.greaterThan) {
      effects.consume(code3);
      return self2.interrupt ? ok4 : continuation;
    }
    return nok(code3);
  }
  function completeClosingTagAfter(code3) {
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return completeClosingTagAfter;
    }
    return completeEnd(code3);
  }
  function completeAttributeNameBefore(code3) {
    if (code3 === codes.slash) {
      effects.consume(code3);
      return completeEnd;
    }
    if (code3 === codes.colon || code3 === codes.underscore || asciiAlpha(code3)) {
      effects.consume(code3);
      return completeAttributeName;
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return completeAttributeNameBefore;
    }
    return completeEnd(code3);
  }
  function completeAttributeName(code3) {
    if (code3 === codes.dash || code3 === codes.dot || code3 === codes.colon || code3 === codes.underscore || asciiAlphanumeric(code3)) {
      effects.consume(code3);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code3);
  }
  function completeAttributeNameAfter(code3) {
    if (code3 === codes.equalsTo) {
      effects.consume(code3);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code3);
  }
  function completeAttributeValueBefore(code3) {
    if (code3 === codes.eof || code3 === codes.lessThan || code3 === codes.equalsTo || code3 === codes.greaterThan || code3 === codes.graveAccent) {
      return nok(code3);
    }
    if (code3 === codes.quotationMark || code3 === codes.apostrophe) {
      effects.consume(code3);
      markerB = code3;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code3);
  }
  function completeAttributeValueQuoted(code3) {
    if (code3 === markerB) {
      effects.consume(code3);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return nok(code3);
    }
    effects.consume(code3);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code3) {
    if (code3 === codes.eof || code3 === codes.quotationMark || code3 === codes.apostrophe || code3 === codes.slash || code3 === codes.lessThan || code3 === codes.equalsTo || code3 === codes.greaterThan || code3 === codes.graveAccent || markdownLineEndingOrSpace(code3)) {
      return completeAttributeNameAfter(code3);
    }
    effects.consume(code3);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code3) {
    if (code3 === codes.slash || code3 === codes.greaterThan || markdownSpace(code3)) {
      return completeAttributeNameBefore(code3);
    }
    return nok(code3);
  }
  function completeEnd(code3) {
    if (code3 === codes.greaterThan) {
      effects.consume(code3);
      return completeAfter;
    }
    return nok(code3);
  }
  function completeAfter(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return continuation(code3);
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return completeAfter;
    }
    return nok(code3);
  }
  function continuation(code3) {
    if (code3 === codes.dash && marker === constants.htmlComment) {
      effects.consume(code3);
      return continuationCommentInside;
    }
    if (code3 === codes.lessThan && marker === constants.htmlRaw) {
      effects.consume(code3);
      return continuationRawTagOpen;
    }
    if (code3 === codes.greaterThan && marker === constants.htmlDeclaration) {
      effects.consume(code3);
      return continuationClose;
    }
    if (code3 === codes.questionMark && marker === constants.htmlInstruction) {
      effects.consume(code3);
      return continuationDeclarationInside;
    }
    if (code3 === codes.rightSquareBracket && marker === constants.htmlCdata) {
      effects.consume(code3);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code3) && (marker === constants.htmlBasic || marker === constants.htmlComplete)) {
      effects.exit(types.htmlFlowData);
      return effects.check(
        blankLineBefore,
        continuationAfter,
        continuationStart
      )(code3);
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.htmlFlowData);
      return continuationStart(code3);
    }
    effects.consume(code3);
    return continuation;
  }
  function continuationStart(code3) {
    return effects.check(
      nonLazyContinuationStart,
      continuationStartNonLazy,
      continuationAfter
    )(code3);
  }
  function continuationStartNonLazy(code3) {
    ok2(markdownLineEnding(code3));
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return continuationBefore;
  }
  function continuationBefore(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return continuationStart(code3);
    }
    effects.enter(types.htmlFlowData);
    return continuation(code3);
  }
  function continuationCommentInside(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      return continuationDeclarationInside;
    }
    return continuation(code3);
  }
  function continuationRawTagOpen(code3) {
    if (code3 === codes.slash) {
      effects.consume(code3);
      buffer2 = "";
      return continuationRawEndTag;
    }
    return continuation(code3);
  }
  function continuationRawEndTag(code3) {
    if (code3 === codes.greaterThan) {
      const name = buffer2.toLowerCase();
      if (htmlRawNames.includes(name)) {
        effects.consume(code3);
        return continuationClose;
      }
      return continuation(code3);
    }
    if (asciiAlpha(code3) && buffer2.length < constants.htmlRawSizeMax) {
      effects.consume(code3);
      buffer2 += String.fromCharCode(code3);
      return continuationRawEndTag;
    }
    return continuation(code3);
  }
  function continuationCdataInside(code3) {
    if (code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      return continuationDeclarationInside;
    }
    return continuation(code3);
  }
  function continuationDeclarationInside(code3) {
    if (code3 === codes.greaterThan) {
      effects.consume(code3);
      return continuationClose;
    }
    if (code3 === codes.dash && marker === constants.htmlComment) {
      effects.consume(code3);
      return continuationDeclarationInside;
    }
    return continuation(code3);
  }
  function continuationClose(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.htmlFlowData);
      return continuationAfter(code3);
    }
    effects.consume(code3);
    return continuationClose;
  }
  function continuationAfter(code3) {
    effects.exit(types.htmlFlow);
    return ok4(code3);
  }
}
function tokenizeNonLazyContinuationStart(effects, ok4, nok) {
  const self2 = this;
  return start2;
  function start2(code3) {
    if (markdownLineEnding(code3)) {
      effects.enter(types.lineEnding);
      effects.consume(code3);
      effects.exit(types.lineEnding);
      return after;
    }
    return nok(code3);
  }
  function after(code3) {
    return self2.parser.lazy[self2.now().line] ? nok(code3) : ok4(code3);
  }
}
function tokenizeBlankLineBefore(effects, ok4, nok) {
  return start2;
  function start2(code3) {
    ok2(markdownLineEnding(code3), "expected a line ending");
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return effects.attempt(blankLine, ok4, nok);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/html-text.js
var htmlText = { name: "htmlText", tokenize: tokenizeHtmlText };
function tokenizeHtmlText(effects, ok4, nok) {
  const self2 = this;
  let marker;
  let index4;
  let returnState;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.lessThan, "expected `<`");
    effects.enter(types.htmlText);
    effects.enter(types.htmlTextData);
    effects.consume(code3);
    return open;
  }
  function open(code3) {
    if (code3 === codes.exclamationMark) {
      effects.consume(code3);
      return declarationOpen;
    }
    if (code3 === codes.slash) {
      effects.consume(code3);
      return tagCloseStart;
    }
    if (code3 === codes.questionMark) {
      effects.consume(code3);
      return instruction;
    }
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      return tagOpen;
    }
    return nok(code3);
  }
  function declarationOpen(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      return commentOpenInside;
    }
    if (code3 === codes.leftSquareBracket) {
      effects.consume(code3);
      index4 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      return declaration;
    }
    return nok(code3);
  }
  function commentOpenInside(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      return commentEnd;
    }
    return nok(code3);
  }
  function comment(code3) {
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (code3 === codes.dash) {
      effects.consume(code3);
      return commentClose;
    }
    if (markdownLineEnding(code3)) {
      returnState = comment;
      return lineEndingBefore(code3);
    }
    effects.consume(code3);
    return comment;
  }
  function commentClose(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      return commentEnd;
    }
    return comment(code3);
  }
  function commentEnd(code3) {
    return code3 === codes.greaterThan ? end2(code3) : code3 === codes.dash ? commentClose(code3) : comment(code3);
  }
  function cdataOpenInside(code3) {
    const value = constants.cdataOpeningString;
    if (code3 === value.charCodeAt(index4++)) {
      effects.consume(code3);
      return index4 === value.length ? cdata : cdataOpenInside;
    }
    return nok(code3);
  }
  function cdata(code3) {
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      return cdataClose;
    }
    if (markdownLineEnding(code3)) {
      returnState = cdata;
      return lineEndingBefore(code3);
    }
    effects.consume(code3);
    return cdata;
  }
  function cdataClose(code3) {
    if (code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      return cdataEnd;
    }
    return cdata(code3);
  }
  function cdataEnd(code3) {
    if (code3 === codes.greaterThan) {
      return end2(code3);
    }
    if (code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      return cdataEnd;
    }
    return cdata(code3);
  }
  function declaration(code3) {
    if (code3 === codes.eof || code3 === codes.greaterThan) {
      return end2(code3);
    }
    if (markdownLineEnding(code3)) {
      returnState = declaration;
      return lineEndingBefore(code3);
    }
    effects.consume(code3);
    return declaration;
  }
  function instruction(code3) {
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (code3 === codes.questionMark) {
      effects.consume(code3);
      return instructionClose;
    }
    if (markdownLineEnding(code3)) {
      returnState = instruction;
      return lineEndingBefore(code3);
    }
    effects.consume(code3);
    return instruction;
  }
  function instructionClose(code3) {
    return code3 === codes.greaterThan ? end2(code3) : instruction(code3);
  }
  function tagCloseStart(code3) {
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      return tagClose;
    }
    return nok(code3);
  }
  function tagClose(code3) {
    if (code3 === codes.dash || asciiAlphanumeric(code3)) {
      effects.consume(code3);
      return tagClose;
    }
    return tagCloseBetween(code3);
  }
  function tagCloseBetween(code3) {
    if (markdownLineEnding(code3)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code3);
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return tagCloseBetween;
    }
    return end2(code3);
  }
  function tagOpen(code3) {
    if (code3 === codes.dash || asciiAlphanumeric(code3)) {
      effects.consume(code3);
      return tagOpen;
    }
    if (code3 === codes.slash || code3 === codes.greaterThan || markdownLineEndingOrSpace(code3)) {
      return tagOpenBetween(code3);
    }
    return nok(code3);
  }
  function tagOpenBetween(code3) {
    if (code3 === codes.slash) {
      effects.consume(code3);
      return end2;
    }
    if (code3 === codes.colon || code3 === codes.underscore || asciiAlpha(code3)) {
      effects.consume(code3);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code3)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code3);
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return tagOpenBetween;
    }
    return end2(code3);
  }
  function tagOpenAttributeName(code3) {
    if (code3 === codes.dash || code3 === codes.dot || code3 === codes.colon || code3 === codes.underscore || asciiAlphanumeric(code3)) {
      effects.consume(code3);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code3);
  }
  function tagOpenAttributeNameAfter(code3) {
    if (code3 === codes.equalsTo) {
      effects.consume(code3);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code3)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code3);
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code3);
  }
  function tagOpenAttributeValueBefore(code3) {
    if (code3 === codes.eof || code3 === codes.lessThan || code3 === codes.equalsTo || code3 === codes.greaterThan || code3 === codes.graveAccent) {
      return nok(code3);
    }
    if (code3 === codes.quotationMark || code3 === codes.apostrophe) {
      effects.consume(code3);
      marker = code3;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code3)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code3);
    }
    if (markdownSpace(code3)) {
      effects.consume(code3);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code3);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code3) {
    if (code3 === marker) {
      effects.consume(code3);
      marker = void 0;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (markdownLineEnding(code3)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code3);
    }
    effects.consume(code3);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueUnquoted(code3) {
    if (code3 === codes.eof || code3 === codes.quotationMark || code3 === codes.apostrophe || code3 === codes.lessThan || code3 === codes.equalsTo || code3 === codes.graveAccent) {
      return nok(code3);
    }
    if (code3 === codes.slash || code3 === codes.greaterThan || markdownLineEndingOrSpace(code3)) {
      return tagOpenBetween(code3);
    }
    effects.consume(code3);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuotedAfter(code3) {
    if (code3 === codes.slash || code3 === codes.greaterThan || markdownLineEndingOrSpace(code3)) {
      return tagOpenBetween(code3);
    }
    return nok(code3);
  }
  function end2(code3) {
    if (code3 === codes.greaterThan) {
      effects.consume(code3);
      effects.exit(types.htmlTextData);
      effects.exit(types.htmlText);
      return ok4;
    }
    return nok(code3);
  }
  function lineEndingBefore(code3) {
    ok2(returnState, "expected return state");
    ok2(markdownLineEnding(code3), "expected eol");
    effects.exit(types.htmlTextData);
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return lineEndingAfter;
  }
  function lineEndingAfter(code3) {
    ok2(
      self2.parser.constructs.disable.null,
      "expected `disable.null` to be populated"
    );
    return markdownSpace(code3) ? factorySpace(
      effects,
      lineEndingAfterPrefix,
      types.linePrefix,
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
    )(code3) : lineEndingAfterPrefix(code3);
  }
  function lineEndingAfterPrefix(code3) {
    effects.enter(types.htmlTextData);
    return returnState(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-end.js
var labelEnd = {
  name: "labelEnd",
  tokenize: tokenizeLabelEnd,
  resolveTo: resolveToLabelEnd,
  resolveAll: resolveAllLabelEnd
};
var resourceConstruct = { tokenize: tokenizeResource };
var referenceFullConstruct = { tokenize: tokenizeReferenceFull };
var referenceCollapsedConstruct = { tokenize: tokenizeReferenceCollapsed };
function resolveAllLabelEnd(events) {
  let index4 = -1;
  while (++index4 < events.length) {
    const token = events[index4][1];
    if (token.type === types.labelImage || token.type === types.labelLink || token.type === types.labelEnd) {
      events.splice(index4 + 1, token.type === types.labelImage ? 4 : 2);
      token.type = types.data;
      index4++;
    }
  }
  return events;
}
function resolveToLabelEnd(events, context) {
  let index4 = events.length;
  let offset2 = 0;
  let token;
  let open;
  let close;
  let media;
  while (index4--) {
    token = events[index4][1];
    if (open) {
      if (token.type === types.link || token.type === types.labelLink && token._inactive) {
        break;
      }
      if (events[index4][0] === "enter" && token.type === types.labelLink) {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index4][0] === "enter" && (token.type === types.labelImage || token.type === types.labelLink) && !token._balanced) {
        open = index4;
        if (token.type !== types.labelLink) {
          offset2 = 2;
          break;
        }
      }
    } else if (token.type === types.labelEnd) {
      close = index4;
    }
  }
  ok2(open !== void 0, "`open` is supposed to be found");
  ok2(close !== void 0, "`close` is supposed to be found");
  const group = {
    type: events[open][1].type === types.labelLink ? types.link : types.image,
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const label = {
    type: types.label,
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[close][1].end)
  };
  const text5 = {
    type: types.labelText,
    start: Object.assign({}, events[open + offset2 + 2][1].end),
    end: Object.assign({}, events[close - 2][1].start)
  };
  media = [
    ["enter", group, context],
    ["enter", label, context]
  ];
  media = push(media, events.slice(open + 1, open + offset2 + 3));
  media = push(media, [["enter", text5, context]]);
  ok2(
    context.parser.constructs.insideSpan.null,
    "expected `insideSpan.null` to be populated"
  );
  media = push(
    media,
    resolveAll(
      context.parser.constructs.insideSpan.null,
      events.slice(open + offset2 + 4, close - 3),
      context
    )
  );
  media = push(media, [
    ["exit", text5, context],
    events[close - 2],
    events[close - 1],
    ["exit", label, context]
  ]);
  media = push(media, events.slice(close + 1));
  media = push(media, [["exit", group, context]]);
  splice(events, open, events.length, media);
  return events;
}
function tokenizeLabelEnd(effects, ok4, nok) {
  const self2 = this;
  let index4 = self2.events.length;
  let labelStart;
  let defined;
  while (index4--) {
    if ((self2.events[index4][1].type === types.labelImage || self2.events[index4][1].type === types.labelLink) && !self2.events[index4][1]._balanced) {
      labelStart = self2.events[index4][1];
      break;
    }
  }
  return start2;
  function start2(code3) {
    ok2(code3 === codes.rightSquareBracket, "expected `]`");
    if (!labelStart) {
      return nok(code3);
    }
    if (labelStart._inactive) {
      return labelEndNok(code3);
    }
    defined = self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize({ start: labelStart.end, end: self2.now() })
      )
    );
    effects.enter(types.labelEnd);
    effects.enter(types.labelMarker);
    effects.consume(code3);
    effects.exit(types.labelMarker);
    effects.exit(types.labelEnd);
    return after;
  }
  function after(code3) {
    if (code3 === codes.leftParenthesis) {
      return effects.attempt(
        resourceConstruct,
        labelEndOk,
        defined ? labelEndOk : labelEndNok
      )(code3);
    }
    if (code3 === codes.leftSquareBracket) {
      return effects.attempt(
        referenceFullConstruct,
        labelEndOk,
        defined ? referenceNotFull : labelEndNok
      )(code3);
    }
    return defined ? labelEndOk(code3) : labelEndNok(code3);
  }
  function referenceNotFull(code3) {
    return effects.attempt(
      referenceCollapsedConstruct,
      labelEndOk,
      labelEndNok
    )(code3);
  }
  function labelEndOk(code3) {
    return ok4(code3);
  }
  function labelEndNok(code3) {
    labelStart._balanced = true;
    return nok(code3);
  }
}
function tokenizeResource(effects, ok4, nok) {
  return resourceStart;
  function resourceStart(code3) {
    ok2(code3 === codes.leftParenthesis, "expected left paren");
    effects.enter(types.resource);
    effects.enter(types.resourceMarker);
    effects.consume(code3);
    effects.exit(types.resourceMarker);
    return resourceBefore;
  }
  function resourceBefore(code3) {
    return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, resourceOpen)(code3) : resourceOpen(code3);
  }
  function resourceOpen(code3) {
    if (code3 === codes.rightParenthesis) {
      return resourceEnd(code3);
    }
    return factoryDestination(
      effects,
      resourceDestinationAfter,
      resourceDestinationMissing,
      types.resourceDestination,
      types.resourceDestinationLiteral,
      types.resourceDestinationLiteralMarker,
      types.resourceDestinationRaw,
      types.resourceDestinationString,
      constants.linkResourceDestinationBalanceMax
    )(code3);
  }
  function resourceDestinationAfter(code3) {
    return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, resourceBetween)(code3) : resourceEnd(code3);
  }
  function resourceDestinationMissing(code3) {
    return nok(code3);
  }
  function resourceBetween(code3) {
    if (code3 === codes.quotationMark || code3 === codes.apostrophe || code3 === codes.leftParenthesis) {
      return factoryTitle(
        effects,
        resourceTitleAfter,
        nok,
        types.resourceTitle,
        types.resourceTitleMarker,
        types.resourceTitleString
      )(code3);
    }
    return resourceEnd(code3);
  }
  function resourceTitleAfter(code3) {
    return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, resourceEnd)(code3) : resourceEnd(code3);
  }
  function resourceEnd(code3) {
    if (code3 === codes.rightParenthesis) {
      effects.enter(types.resourceMarker);
      effects.consume(code3);
      effects.exit(types.resourceMarker);
      effects.exit(types.resource);
      return ok4;
    }
    return nok(code3);
  }
}
function tokenizeReferenceFull(effects, ok4, nok) {
  const self2 = this;
  return referenceFull;
  function referenceFull(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected left bracket");
    return factoryLabel.call(
      self2,
      effects,
      referenceFullAfter,
      referenceFullMissing,
      types.reference,
      types.referenceMarker,
      types.referenceString
    )(code3);
  }
  function referenceFullAfter(code3) {
    return self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
      )
    ) ? ok4(code3) : nok(code3);
  }
  function referenceFullMissing(code3) {
    return nok(code3);
  }
}
function tokenizeReferenceCollapsed(effects, ok4, nok) {
  return referenceCollapsedStart;
  function referenceCollapsedStart(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected left bracket");
    effects.enter(types.reference);
    effects.enter(types.referenceMarker);
    effects.consume(code3);
    effects.exit(types.referenceMarker);
    return referenceCollapsedOpen;
  }
  function referenceCollapsedOpen(code3) {
    if (code3 === codes.rightSquareBracket) {
      effects.enter(types.referenceMarker);
      effects.consume(code3);
      effects.exit(types.referenceMarker);
      effects.exit(types.reference);
      return ok4;
    }
    return nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-start-image.js
var labelStartImage = {
  name: "labelStartImage",
  tokenize: tokenizeLabelStartImage,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartImage(effects, ok4, nok) {
  const self2 = this;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.exclamationMark, "expected `!`");
    effects.enter(types.labelImage);
    effects.enter(types.labelImageMarker);
    effects.consume(code3);
    effects.exit(types.labelImageMarker);
    return open;
  }
  function open(code3) {
    if (code3 === codes.leftSquareBracket) {
      effects.enter(types.labelMarker);
      effects.consume(code3);
      effects.exit(types.labelMarker);
      effects.exit(types.labelImage);
      return after;
    }
    return nok(code3);
  }
  function after(code3) {
    return code3 === codes.caret && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code3) : ok4(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-start-link.js
var labelStartLink = {
  name: "labelStartLink",
  tokenize: tokenizeLabelStartLink,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartLink(effects, ok4, nok) {
  const self2 = this;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected `[`");
    effects.enter(types.labelLink);
    effects.enter(types.labelMarker);
    effects.consume(code3);
    effects.exit(types.labelMarker);
    effects.exit(types.labelLink);
    return after;
  }
  function after(code3) {
    return code3 === codes.caret && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code3) : ok4(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/line-ending.js
var lineEnding = { name: "lineEnding", tokenize: tokenizeLineEnding };
function tokenizeLineEnding(effects, ok4) {
  return start2;
  function start2(code3) {
    ok2(markdownLineEnding(code3), "expected eol");
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    return factorySpace(effects, ok4, types.linePrefix);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/thematic-break.js
var thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok4, nok) {
  let size = 0;
  let marker;
  return start2;
  function start2(code3) {
    effects.enter(types.thematicBreak);
    return before(code3);
  }
  function before(code3) {
    ok2(
      code3 === codes.asterisk || code3 === codes.dash || code3 === codes.underscore,
      "expected `*`, `-`, or `_`"
    );
    marker = code3;
    return atBreak(code3);
  }
  function atBreak(code3) {
    if (code3 === marker) {
      effects.enter(types.thematicBreakSequence);
      return sequence(code3);
    }
    if (size >= constants.thematicBreakMarkerCountMin && (code3 === codes.eof || markdownLineEnding(code3))) {
      effects.exit(types.thematicBreak);
      return ok4(code3);
    }
    return nok(code3);
  }
  function sequence(code3) {
    if (code3 === marker) {
      effects.consume(code3);
      size++;
      return sequence;
    }
    effects.exit(types.thematicBreakSequence);
    return markdownSpace(code3) ? factorySpace(effects, atBreak, types.whitespace)(code3) : atBreak(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/list.js
var list = {
  name: "list",
  tokenize: tokenizeListStart,
  continuation: { tokenize: tokenizeListContinuation },
  exit: tokenizeListEnd
};
var listItemPrefixWhitespaceConstruct = {
  tokenize: tokenizeListItemPrefixWhitespace,
  partial: true
};
var indentConstruct = { tokenize: tokenizeIndent, partial: true };
function tokenizeListStart(effects, ok4, nok) {
  const self2 = this;
  const tail = self2.events[self2.events.length - 1];
  let initialSize = tail && tail[1].type === types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start2;
  function start2(code3) {
    ok2(self2.containerState, "expected state");
    const kind = self2.containerState.type || (code3 === codes.asterisk || code3 === codes.plusSign || code3 === codes.dash ? types.listUnordered : types.listOrdered);
    if (kind === types.listUnordered ? !self2.containerState.marker || code3 === self2.containerState.marker : asciiDigit(code3)) {
      if (!self2.containerState.type) {
        self2.containerState.type = kind;
        effects.enter(kind, { _container: true });
      }
      if (kind === types.listUnordered) {
        effects.enter(types.listItemPrefix);
        return code3 === codes.asterisk || code3 === codes.dash ? effects.check(thematicBreak, nok, atMarker)(code3) : atMarker(code3);
      }
      if (!self2.interrupt || code3 === codes.digit1) {
        effects.enter(types.listItemPrefix);
        effects.enter(types.listItemValue);
        return inside(code3);
      }
    }
    return nok(code3);
  }
  function inside(code3) {
    ok2(self2.containerState, "expected state");
    if (asciiDigit(code3) && ++size < constants.listItemValueSizeMax) {
      effects.consume(code3);
      return inside;
    }
    if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code3 === self2.containerState.marker : code3 === codes.rightParenthesis || code3 === codes.dot)) {
      effects.exit(types.listItemValue);
      return atMarker(code3);
    }
    return nok(code3);
  }
  function atMarker(code3) {
    ok2(self2.containerState, "expected state");
    ok2(code3 !== codes.eof, "eof (`null`) is not a marker");
    effects.enter(types.listItemMarker);
    effects.consume(code3);
    effects.exit(types.listItemMarker);
    self2.containerState.marker = self2.containerState.marker || code3;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self2.interrupt ? nok : onBlank,
      effects.attempt(
        listItemPrefixWhitespaceConstruct,
        endOfPrefix,
        otherPrefix
      )
    );
  }
  function onBlank(code3) {
    ok2(self2.containerState, "expected state");
    self2.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code3);
  }
  function otherPrefix(code3) {
    if (markdownSpace(code3)) {
      effects.enter(types.listItemPrefixWhitespace);
      effects.consume(code3);
      effects.exit(types.listItemPrefixWhitespace);
      return endOfPrefix;
    }
    return nok(code3);
  }
  function endOfPrefix(code3) {
    ok2(self2.containerState, "expected state");
    self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit(types.listItemPrefix), true).length;
    return ok4(code3);
  }
}
function tokenizeListContinuation(effects, ok4, nok) {
  const self2 = this;
  ok2(self2.containerState, "expected state");
  self2.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code3) {
    ok2(self2.containerState, "expected state");
    ok2(typeof self2.containerState.size === "number", "expected size");
    self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
    return factorySpace(
      effects,
      ok4,
      types.listItemIndent,
      self2.containerState.size + 1
    )(code3);
  }
  function notBlank(code3) {
    ok2(self2.containerState, "expected state");
    if (self2.containerState.furtherBlankLines || !markdownSpace(code3)) {
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code3);
    }
    self2.containerState.furtherBlankLines = void 0;
    self2.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok4, notInCurrentItem)(code3);
  }
  function notInCurrentItem(code3) {
    ok2(self2.containerState, "expected state");
    self2.containerState._closeFlow = true;
    self2.interrupt = void 0;
    ok2(
      self2.parser.constructs.disable.null,
      "expected `disable.null` to be populated"
    );
    return factorySpace(
      effects,
      effects.attempt(list, ok4, nok),
      types.linePrefix,
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
    )(code3);
  }
}
function tokenizeIndent(effects, ok4, nok) {
  const self2 = this;
  ok2(self2.containerState, "expected state");
  ok2(typeof self2.containerState.size === "number", "expected size");
  return factorySpace(
    effects,
    afterPrefix,
    types.listItemIndent,
    self2.containerState.size + 1
  );
  function afterPrefix(code3) {
    ok2(self2.containerState, "expected state");
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.listItemIndent && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok4(code3) : nok(code3);
  }
}
function tokenizeListEnd(effects) {
  ok2(this.containerState, "expected state");
  ok2(typeof this.containerState.type === "string", "expected type");
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok4, nok) {
  const self2 = this;
  ok2(
    self2.parser.constructs.disable.null,
    "expected `disable.null` to be populated"
  );
  return factorySpace(
    effects,
    afterPrefix,
    types.listItemPrefixWhitespace,
    self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize + 1
  );
  function afterPrefix(code3) {
    const tail = self2.events[self2.events.length - 1];
    return !markdownSpace(code3) && tail && tail[1].type === types.listItemPrefixWhitespace ? ok4(code3) : nok(code3);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/setext-underline.js
var setextUnderline = {
  name: "setextUnderline",
  tokenize: tokenizeSetextUnderline,
  resolveTo: resolveToSetextUnderline
};
function resolveToSetextUnderline(events, context) {
  let index4 = events.length;
  let content3;
  let text5;
  let definition2;
  while (index4--) {
    if (events[index4][0] === "enter") {
      if (events[index4][1].type === types.content) {
        content3 = index4;
        break;
      }
      if (events[index4][1].type === types.paragraph) {
        text5 = index4;
      }
    } else {
      if (events[index4][1].type === types.content) {
        events.splice(index4, 1);
      }
      if (!definition2 && events[index4][1].type === types.definition) {
        definition2 = index4;
      }
    }
  }
  ok2(text5 !== void 0, "expected a `text` index to be found");
  ok2(content3 !== void 0, "expected a `text` index to be found");
  const heading2 = {
    type: types.setextHeading,
    start: Object.assign({}, events[text5][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  events[text5][1].type = types.setextHeadingText;
  if (definition2) {
    events.splice(text5, 0, ["enter", heading2, context]);
    events.splice(definition2 + 1, 0, ["exit", events[content3][1], context]);
    events[content3][1].end = Object.assign({}, events[definition2][1].end);
  } else {
    events[content3][1] = heading2;
  }
  events.push(["exit", heading2, context]);
  return events;
}
function tokenizeSetextUnderline(effects, ok4, nok) {
  const self2 = this;
  let marker;
  return start2;
  function start2(code3) {
    let index4 = self2.events.length;
    let paragraph2;
    ok2(
      code3 === codes.dash || code3 === codes.equalsTo,
      "expected `=` or `-`"
    );
    while (index4--) {
      if (self2.events[index4][1].type !== types.lineEnding && self2.events[index4][1].type !== types.linePrefix && self2.events[index4][1].type !== types.content) {
        paragraph2 = self2.events[index4][1].type === types.paragraph;
        break;
      }
    }
    if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph2)) {
      effects.enter(types.setextHeadingLine);
      marker = code3;
      return before(code3);
    }
    return nok(code3);
  }
  function before(code3) {
    effects.enter(types.setextHeadingLineSequence);
    return inside(code3);
  }
  function inside(code3) {
    if (code3 === marker) {
      effects.consume(code3);
      return inside;
    }
    effects.exit(types.setextHeadingLineSequence);
    return markdownSpace(code3) ? factorySpace(effects, after, types.lineSuffix)(code3) : after(code3);
  }
  function after(code3) {
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit(types.setextHeadingLine);
      return ok4(code3);
    }
    return nok(code3);
  }
}

// node_modules/micromark/dev/lib/initialize/flow.js
var flow = { tokenize: initializeFlow };
function initializeFlow(effects) {
  const self2 = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(
      this.parser.constructs.flowInitial,
      afterConstruct,
      factorySpace(
        effects,
        effects.attempt(
          this.parser.constructs.flow,
          afterConstruct,
          effects.attempt(content2, afterConstruct)
        ),
        types.linePrefix
      )
    )
  );
  return initial;
  function atBlankEnding(code3) {
    ok2(
      code3 === codes.eof || markdownLineEnding(code3),
      "expected eol or eof"
    );
    if (code3 === codes.eof) {
      effects.consume(code3);
      return;
    }
    effects.enter(types.lineEndingBlank);
    effects.consume(code3);
    effects.exit(types.lineEndingBlank);
    self2.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code3) {
    ok2(
      code3 === codes.eof || markdownLineEnding(code3),
      "expected eol or eof"
    );
    if (code3 === codes.eof) {
      effects.consume(code3);
      return;
    }
    effects.enter(types.lineEnding);
    effects.consume(code3);
    effects.exit(types.lineEnding);
    self2.currentConstruct = void 0;
    return initial;
  }
}

// node_modules/micromark/dev/lib/initialize/text.js
var resolver = { resolveAll: createResolver() };
var string = initializeFactory("string");
var text = initializeFactory("text");
function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: createResolver(
      field === "text" ? resolveAllLineSuffixes : void 0
    )
  };
  function initializeText(effects) {
    const self2 = this;
    const constructs2 = this.parser.constructs[field];
    const text5 = effects.attempt(constructs2, start2, notText);
    return start2;
    function start2(code3) {
      return atBreak(code3) ? text5(code3) : notText(code3);
    }
    function notText(code3) {
      if (code3 === codes.eof) {
        effects.consume(code3);
        return;
      }
      effects.enter(types.data);
      effects.consume(code3);
      return data;
    }
    function data(code3) {
      if (atBreak(code3)) {
        effects.exit(types.data);
        return text5(code3);
      }
      effects.consume(code3);
      return data;
    }
    function atBreak(code3) {
      if (code3 === codes.eof) {
        return true;
      }
      const list3 = constructs2[code3];
      let index4 = -1;
      if (list3) {
        ok2(Array.isArray(list3), "expected `disable.null` to be populated");
        while (++index4 < list3.length) {
          const item = list3[index4];
          if (!item.previous || item.previous.call(self2, self2.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index4 = -1;
    let enter;
    while (++index4 <= events.length) {
      if (enter === void 0) {
        if (events[index4] && events[index4][1].type === types.data) {
          enter = index4;
          index4++;
        }
      } else if (!events[index4] || events[index4][1].type !== types.data) {
        if (index4 !== enter + 2) {
          events[enter][1].end = events[index4 - 1][1].end;
          events.splice(enter + 2, index4 - enter - 2);
          index4 = enter + 2;
        }
        enter = void 0;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === types.lineEnding) && events[eventIndex - 1][1].type === types.data) {
      const data = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data);
      let index4 = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      let tabs;
      while (index4--) {
        const chunk = chunks[index4];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        } else if (chunk === codes.horizontalTab) {
          tabs = true;
          size++;
        } else if (chunk === codes.virtualSpace) {
        } else {
          index4++;
          break;
        }
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < constants.hardBreakPrefixSizeMin ? types.lineSuffix : types.hardBreakTrailing,
          start: {
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size,
            _index: data.start._index + index4,
            _bufferIndex: index4 ? bufferIndex : data.start._bufferIndex + bufferIndex
          },
          end: Object.assign({}, data.end)
        };
        data.end = Object.assign({}, token.start);
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events.splice(
            eventIndex,
            0,
            ["enter", token, context],
            ["exit", token, context]
          );
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

// node_modules/micromark/dev/lib/create-tokenizer.js
var import_debug = __toESM(require_browser(), 1);
var debug = (0, import_debug.default)("micromark");
function createTokenizer(parser, initialize, from) {
  let point4 = Object.assign(
    from ? Object.assign({}, from) : { line: 1, column: 1, offset: 0 },
    { _index: 0, _bufferIndex: -1 }
  );
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  let consumed = true;
  const effects = {
    consume,
    enter,
    exit: exit3,
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    interrupt: constructFactory(onsuccessfulcheck, { interrupt: true })
  };
  const context = {
    previous: codes.eof,
    code: codes.eof,
    containerState: {},
    events: [],
    parser,
    sliceStream,
    sliceSerialize,
    now,
    defineSkip,
    write: write2
  };
  let state = initialize.tokenize.call(context, effects);
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;
  function write2(slice) {
    chunks = push(chunks, slice);
    main2();
    if (chunks[chunks.length - 1] !== codes.eof) {
      return [];
    }
    addResult(initialize, 0);
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    const { line: line2, column, offset: offset2, _index, _bufferIndex } = point4;
    return { line: line2, column, offset: offset2, _index, _bufferIndex };
  }
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
    debug("position: define skip: `%j`", point4);
  }
  function main2() {
    let chunkIndex;
    while (point4._index < chunks.length) {
      const chunk = chunks[point4._index];
      if (typeof chunk === "string") {
        chunkIndex = point4._index;
        if (point4._bufferIndex < 0) {
          point4._bufferIndex = 0;
        }
        while (point4._index === chunkIndex && point4._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point4._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code3) {
    ok2(consumed === true, "expected character to be consumed");
    consumed = void 0;
    debug("main: passing `%s` to %s", code3, state && state.name);
    expectedCode = code3;
    ok2(typeof state === "function", "expected state");
    state = state(code3);
  }
  function consume(code3) {
    ok2(code3 === expectedCode, "expected given code to equal expected code");
    debug("consume: `%s`", code3);
    ok2(
      consumed === void 0,
      "expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used"
    );
    ok2(
      code3 === null ? context.events.length === 0 || context.events[context.events.length - 1][0] === "exit" : context.events[context.events.length - 1][0] === "enter",
      "expected last token to be open"
    );
    if (markdownLineEnding(code3)) {
      point4.line++;
      point4.column = 1;
      point4.offset += code3 === codes.carriageReturnLineFeed ? 2 : 1;
      accountForPotentialSkip();
      debug("position: after eol: `%j`", point4);
    } else if (code3 !== codes.virtualSpace) {
      point4.column++;
      point4.offset++;
    }
    if (point4._bufferIndex < 0) {
      point4._index++;
    } else {
      point4._bufferIndex++;
      if (point4._bufferIndex === chunks[point4._index].length) {
        point4._bufferIndex = -1;
        point4._index++;
      }
    }
    context.previous = code3;
    consumed = true;
  }
  function enter(type, fields) {
    const token = fields || {};
    token.type = type;
    token.start = now();
    ok2(typeof type === "string", "expected string type");
    ok2(type.length > 0, "expected non-empty string");
    debug("enter: `%s`", type);
    context.events.push(["enter", token, context]);
    stack.push(token);
    return token;
  }
  function exit3(type) {
    ok2(typeof type === "string", "expected string type");
    ok2(type.length > 0, "expected non-empty string");
    const token = stack.pop();
    ok2(token, "cannot close w/o open tokens");
    token.end = now();
    ok2(type === token.type, "expected exit token to match current token");
    ok2(
      !(token.start._index === token.end._index && token.start._bufferIndex === token.end._bufferIndex),
      "expected non-empty token (`" + type + "`)"
    );
    debug("exit: `%s`", token.type);
    context.events.push(["exit", token, context]);
    return token;
  }
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  function onsuccessfulcheck(_23, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? (
        /* c8 ignore next 1 */
        handleListOfConstructs(constructs2)
      ) : "tokenize" in constructs2 ? (
        // @ts-expect-error Looks like a construct.
        handleListOfConstructs([constructs2])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map2) {
        return start2;
        function start2(code3) {
          const def = code3 !== null && map2[code3];
          const all3 = code3 !== null && map2.null;
          const list3 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(def) ? def : def ? [def] : [],
            ...Array.isArray(all3) ? all3 : all3 ? [all3] : []
          ];
          return handleListOfConstructs(list3)(code3);
        }
      }
      function handleListOfConstructs(list3) {
        listOfConstructs = list3;
        constructIndex = 0;
        if (list3.length === 0) {
          ok2(bogusState, "expected `bogusState` to be given");
          return bogusState;
        }
        return handleConstruct(list3[constructIndex]);
      }
      function handleConstruct(construct) {
        return start2;
        function start2(code3) {
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          ok2(
            context.parser.constructs.disable.null,
            "expected `disable.null` to be populated"
          );
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code3);
          }
          return construct.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context), fields) : context,
            effects,
            ok4,
            nok
          )(code3);
        }
      }
      function ok4(code3) {
        ok2(code3 === expectedCode, "expected code");
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code3) {
        ok2(code3 === expectedCode, "expected code");
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct, from2) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(
        context.events,
        from2,
        context.events.length - from2,
        construct.resolve(context.events.slice(from2), context)
      );
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
    ok2(
      construct.partial || context.events.length === 0 || context.events[context.events.length - 1][0] === "exit",
      "expected last token to end"
    );
  }
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return { restore, from: startEventsIndex };
    function restore() {
      point4 = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
      debug("position: restore: `%j`", point4);
    }
  }
  function accountForPotentialSkip() {
    if (point4.line in columnStart && point4.column < 2) {
      point4.column = columnStart[point4.line];
      point4.offset += columnStart[point4.line] - 1;
    }
  }
}
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    ok2(endBufferIndex > -1, "expected non-negative end buffer index");
    ok2(startBufferIndex > -1, "expected non-negative start buffer index");
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === "string") {
        view[0] = head.slice(startBufferIndex);
      } else {
        ok2(startBufferIndex === 0, "expected `startBufferIndex` to be `0`");
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks(chunks, expandTabs) {
  let index4 = -1;
  const result = [];
  let atTab;
  while (++index4 < chunks.length) {
    const chunk = chunks[index4];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else
      switch (chunk) {
        case codes.carriageReturn: {
          value = values.cr;
          break;
        }
        case codes.lineFeed: {
          value = values.lf;
          break;
        }
        case codes.carriageReturnLineFeed: {
          value = values.cr + values.lf;
          break;
        }
        case codes.horizontalTab: {
          value = expandTabs ? values.space : values.ht;
          break;
        }
        case codes.virtualSpace: {
          if (!expandTabs && atTab) continue;
          value = values.space;
          break;
        }
        default: {
          ok2(typeof chunk === "number", "expected number");
          value = String.fromCharCode(chunk);
        }
      }
    atTab = chunk === codes.horizontalTab;
    result.push(value);
  }
  return result.join("");
}

// node_modules/micromark/dev/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string2,
  text: () => text2
});
var document3 = {
  [codes.asterisk]: list,
  [codes.plusSign]: list,
  [codes.dash]: list,
  [codes.digit0]: list,
  [codes.digit1]: list,
  [codes.digit2]: list,
  [codes.digit3]: list,
  [codes.digit4]: list,
  [codes.digit5]: list,
  [codes.digit6]: list,
  [codes.digit7]: list,
  [codes.digit8]: list,
  [codes.digit9]: list,
  [codes.greaterThan]: blockQuote
};
var contentInitial = {
  [codes.leftSquareBracket]: definition
};
var flowInitial = {
  [codes.horizontalTab]: codeIndented,
  [codes.virtualSpace]: codeIndented,
  [codes.space]: codeIndented
};
var flow2 = {
  [codes.numberSign]: headingAtx,
  [codes.asterisk]: thematicBreak,
  [codes.dash]: [setextUnderline, thematicBreak],
  [codes.lessThan]: htmlFlow,
  [codes.equalsTo]: setextUnderline,
  [codes.underscore]: thematicBreak,
  [codes.graveAccent]: codeFenced,
  [codes.tilde]: codeFenced
};
var string2 = {
  [codes.ampersand]: characterReference,
  [codes.backslash]: characterEscape
};
var text2 = {
  [codes.carriageReturn]: lineEnding,
  [codes.lineFeed]: lineEnding,
  [codes.carriageReturnLineFeed]: lineEnding,
  [codes.exclamationMark]: labelStartImage,
  [codes.ampersand]: characterReference,
  [codes.asterisk]: attention,
  [codes.lessThan]: [autolink, htmlText],
  [codes.leftSquareBracket]: labelStartLink,
  [codes.backslash]: [hardBreakEscape, characterEscape],
  [codes.rightSquareBracket]: labelEnd,
  [codes.underscore]: attention,
  [codes.graveAccent]: codeText
};
var insideSpan = { null: [attention, resolver] };
var attentionMarkers = { null: [codes.asterisk, codes.underscore] };
var disable = { null: [] };

// node_modules/micromark/dev/lib/parse.js
function parse(options2) {
  const settings = options2 || {};
  const constructs2 = (
    /** @type {FullNormalizedExtension} */
    combineExtensions([constructs_exports, ...settings.extensions || []])
  );
  const parser = {
    defined: [],
    lazy: {},
    constructs: constructs2,
    content: create2(content),
    document: create2(document2),
    flow: create2(flow),
    string: create2(string),
    text: create2(text)
  };
  return parser;
  function create2(initial) {
    return creator;
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}

// node_modules/micromark/dev/lib/preprocess.js
var search = /[\0\t\n\r]/g;
function preprocess() {
  let column = 1;
  let buffer2 = "";
  let start2 = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end2) {
    const chunks = [];
    let match;
    let next;
    let startPosition;
    let endPosition;
    let code3;
    value = buffer2 + value.toString(encoding);
    startPosition = 0;
    buffer2 = "";
    if (start2) {
      if (value.charCodeAt(0) === codes.byteOrderMarker) {
        startPosition++;
      }
      start2 = void 0;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== void 0 ? match.index : value.length;
      code3 = value.charCodeAt(endPosition);
      if (!match) {
        buffer2 = value.slice(startPosition);
        break;
      }
      if (code3 === codes.lf && startPosition === endPosition && atCarriageReturn) {
        chunks.push(codes.carriageReturnLineFeed);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(codes.carriageReturn);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code3) {
          case codes.nul: {
            chunks.push(codes.replacementCharacter);
            column++;
            break;
          }
          case codes.ht: {
            next = Math.ceil(column / constants.tabSize) * constants.tabSize;
            chunks.push(codes.horizontalTab);
            while (column++ < next) chunks.push(codes.virtualSpace);
            break;
          }
          case codes.lf: {
            chunks.push(codes.lineFeed);
            column = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end2) {
      if (atCarriageReturn) chunks.push(codes.carriageReturn);
      if (buffer2) chunks.push(buffer2);
      chunks.push(codes.eof);
    }
    return chunks;
  }
}

// node_modules/micromark/dev/lib/postprocess.js
function postprocess(events) {
  while (!subtokenize(events)) {
  }
  return events;
}

// node_modules/micromark-util-decode-numeric-character-reference/dev/index.js
function decodeNumericCharacterReference(value, base2) {
  const code3 = Number.parseInt(value, base2);
  if (
    // C0 except for HT, LF, FF, CR, space.
    code3 < codes.ht || code3 === codes.vt || code3 > codes.cr && code3 < codes.space || // Control character (DEL) of C0, and C1 controls.
    code3 > codes.tilde && code3 < 160 || // Lone high surrogates and low surrogates.
    code3 > 55295 && code3 < 57344 || // Noncharacters.
    code3 > 64975 && code3 < 65008 || /* eslint-disable no-bitwise */
    (code3 & 65535) === 65535 || (code3 & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    code3 > 1114111
  ) {
    return values.replacementCharacter;
  }
  return String.fromCharCode(code3);
}

// node_modules/micromark-util-decode-string/dev/index.js
var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
  if ($1) {
    return $1;
  }
  const head = $2.charCodeAt(0);
  if (head === codes.numberSign) {
    const head2 = $2.charCodeAt(1);
    const hex = head2 === codes.lowercaseX || head2 === codes.uppercaseX;
    return decodeNumericCharacterReference(
      $2.slice(hex ? 2 : 1),
      hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal
    );
  }
  return decodeNamedCharacterReference($2) || $0;
}

// node_modules/mdast-util-from-markdown/dev/lib/index.js
var own2 = {}.hasOwnProperty;
var fromMarkdown = (
  /**
   * @type {(
   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
   *   ((value: Value, options?: Options | null | undefined) => Root)
   * )}
   */
  /**
   * @param {Value} value
   * @param {Encoding | Options | null | undefined} [encoding]
   * @param {Options | null | undefined} [options]
   * @returns {Root}
   */
  function(value, encoding, options2) {
    if (typeof encoding !== "string") {
      options2 = encoding;
      encoding = void 0;
    }
    return compiler(options2)(
      postprocess(
        parse(options2).document().write(preprocess()(value, encoding, true))
      )
    );
  }
);
function compiler(options2) {
  const config = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener(link2),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading2),
      blockQuote: opener(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer2,
      codeFencedFenceMeta: buffer2,
      codeIndented: opener(codeFlow, buffer2),
      codeText: opener(codeText2, buffer2),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition2),
      definitionDestinationString: buffer2,
      definitionLabelString: buffer2,
      definitionTitleString: buffer2,
      emphasis: opener(emphasis2),
      hardBreakEscape: opener(hardBreak2),
      hardBreakTrailing: opener(hardBreak2),
      htmlFlow: opener(html4, buffer2),
      htmlFlowData: onenterdata,
      htmlText: opener(html4, buffer2),
      htmlTextData: onenterdata,
      image: opener(image2),
      label: buffer2,
      link: opener(link2),
      listItem: opener(listItem3),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list3, onenterlistordered),
      listUnordered: opener(list3),
      paragraph: opener(paragraph2),
      reference: onenterreference,
      referenceString: buffer2,
      resourceDestinationString: buffer2,
      resourceTitleString: buffer2,
      setextHeading: opener(heading2),
      strong: opener(strong2),
      thematicBreak: opener(thematicBreak3)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options2 || {}).mdastExtensions || []);
  const data = {};
  return compile;
  function compile(events) {
    let tree = { type: "root", children: [] };
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit: exit3,
      buffer: buffer2,
      resume,
      setData,
      getData
    };
    const listStack = [];
    let index4 = -1;
    while (++index4 < events.length) {
      if (events[index4][1].type === types.listOrdered || events[index4][1].type === types.listUnordered) {
        if (events[index4][0] === "enter") {
          listStack.push(index4);
        } else {
          const tail = listStack.pop();
          ok2(typeof tail === "number", "expected list ot be open");
          index4 = prepareList(events, tail, index4);
        }
      }
    }
    index4 = -1;
    while (++index4 < events.length) {
      const handler = config[events[index4][0]];
      if (own2.call(handler, events[index4][1].type)) {
        handler[events[index4][1].type].call(
          Object.assign(
            { sliceSerialize: events[index4][2].sliceSerialize },
            context
          ),
          events[index4][1]
        );
      }
    }
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, void 0, tail[0]);
    }
    tree.position = {
      start: point2(
        events.length > 0 ? events[0][1].start : { line: 1, column: 1, offset: 0 }
      ),
      end: point2(
        events.length > 0 ? events[events.length - 2][1].end : { line: 1, column: 1, offset: 0 }
      )
    };
    index4 = -1;
    while (++index4 < config.transforms.length) {
      tree = config.transforms[index4](tree) || tree;
    }
    return tree;
  }
  function prepareList(events, start2, length) {
    let index4 = start2 - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem4;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index4 <= length) {
      const event = events[index4];
      if (event[1].type === types.listUnordered || event[1].type === types.listOrdered || event[1].type === types.blockQuote) {
        if (event[0] === "enter") {
          containerBalance++;
        } else {
          containerBalance--;
        }
        atMarker = void 0;
      } else if (event[1].type === types.lineEndingBlank) {
        if (event[0] === "enter") {
          if (listItem4 && !atMarker && !containerBalance && !firstBlankLineIndex) {
            firstBlankLineIndex = index4;
          }
          atMarker = void 0;
        }
      } else if (event[1].type === types.linePrefix || event[1].type === types.listItemValue || event[1].type === types.listItemMarker || event[1].type === types.listItemPrefix || event[1].type === types.listItemPrefixWhitespace) {
      } else {
        atMarker = void 0;
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === types.listItemPrefix || containerBalance === -1 && event[0] === "exit" && (event[1].type === types.listUnordered || event[1].type === types.listOrdered)) {
        if (listItem4) {
          let tailIndex = index4;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === types.lineEnding || tailEvent[1].type === types.lineEndingBlank) {
              if (tailEvent[0] === "exit") continue;
              if (lineIndex) {
                events[lineIndex][1].type = types.lineEndingBlank;
                listSpread = true;
              }
              tailEvent[1].type = types.lineEnding;
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === types.linePrefix || tailEvent[1].type === types.blockQuotePrefix || tailEvent[1].type === types.blockQuotePrefixWhitespace || tailEvent[1].type === types.blockQuoteMarker || tailEvent[1].type === types.listItemIndent) {
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem4._spread = true;
          }
          listItem4.end = Object.assign(
            {},
            lineIndex ? events[lineIndex][1].start : event[1].end
          );
          events.splice(lineIndex || index4, 0, ["exit", listItem4, event[2]]);
          index4++;
          length++;
        }
        if (event[1].type === types.listItemPrefix) {
          listItem4 = {
            type: "listItem",
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          events.splice(index4, 0, ["enter", listItem4, event[2]]);
          index4++;
          length++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events[start2][1]._spread = listSpread;
    return length;
  }
  function setData(key, value) {
    data[key] = value;
  }
  function getData(key) {
    return data[key];
  }
  function opener(create2, and) {
    return open;
    function open(token) {
      enter.call(this, create2(token), token);
      if (and) and.call(this, token);
    }
  }
  function buffer2() {
    this.stack.push({ type: "fragment", children: [] });
  }
  function enter(node2, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    ok2(parent, "expected `parent`");
    ok2("children" in parent, "expected `parent`");
    parent.children.push(node2);
    this.stack.push(node2);
    this.tokenStack.push([token, errorHandler]);
    node2.position = { start: point2(token.start) };
    return node2;
  }
  function closer(and) {
    return close;
    function close(token) {
      if (and) and.call(this, token);
      exit3.call(this, token);
    }
  }
  function exit3(token, onExitError) {
    const node2 = this.stack.pop();
    ok2(node2, "expected `node`");
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error(
        "Cannot close `" + token.type + "` (" + stringifyPosition({ start: token.start, end: token.end }) + "): it’s not open"
      );
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    ok2(node2.type !== "fragment", "unexpected fragment `exit`ed");
    ok2(node2.position, "expected `position` to be defined");
    node2.position.end = point2(token.end);
    return node2;
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    setData("expectingFirstListItemValue", true);
  }
  function onenterlistitemvalue(token) {
    if (getData("expectingFirstListItemValue")) {
      const ancestor = this.stack[this.stack.length - 2];
      ok2(ancestor, "expected nodes on stack");
      ok2(ancestor.type === "list", "expected list on stack");
      ancestor.start = Number.parseInt(
        this.sliceSerialize(token),
        constants.numericBaseDecimal
      );
      setData("expectingFirstListItemValue");
    }
  }
  function onexitcodefencedfenceinfo() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "code", "expected code on stack");
    node2.lang = data2;
  }
  function onexitcodefencedfencemeta() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "code", "expected code on stack");
    node2.meta = data2;
  }
  function onexitcodefencedfence() {
    if (getData("flowCodeInside")) return;
    this.buffer();
    setData("flowCodeInside", true);
  }
  function onexitcodefenced() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "code", "expected code on stack");
    node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    setData("flowCodeInside");
  }
  function onexitcodeindented() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "code", "expected code on stack");
    node2.value = data2.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "definition", "expected definition on stack");
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "definition", "expected definition on stack");
    node2.title = data2;
  }
  function onexitdefinitiondestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "definition", "expected definition on stack");
    node2.url = data2;
  }
  function onexitatxheadingsequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "heading", "expected heading on stack");
    if (!node2.depth) {
      const depth = this.sliceSerialize(token).length;
      ok2(
        depth === 1 || depth === 2 || depth === 3 || depth === 4 || depth === 5 || depth === 6,
        "expected `depth` between `1` and `6`"
      );
      node2.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    setData("setextHeadingSlurpLineEnding", true);
  }
  function onexitsetextheadinglinesequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "heading", "expected heading on stack");
    node2.depth = this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2;
  }
  function onexitsetextheading() {
    setData("setextHeadingSlurpLineEnding");
  }
  function onenterdata(token) {
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2("children" in node2, "expected parent on stack");
    let tail = node2.children[node2.children.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text5();
      tail.position = { start: point2(token.start) };
      node2.children.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token) {
    const tail = this.stack.pop();
    ok2(tail, "expected a `node` to be on the stack");
    ok2("value" in tail, "expected a `literal` to be on the stack");
    ok2(tail.position, "expected `node` to have an open position");
    tail.value += this.sliceSerialize(token);
    tail.position.end = point2(token.end);
  }
  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    ok2(context, "expected `node`");
    if (getData("atHardBreak")) {
      ok2("children" in context, "expected `parent`");
      const tail = context.children[context.children.length - 1];
      ok2(tail.position, "expected tail to have a starting position");
      tail.position.end = point2(token.end);
      setData("atHardBreak");
      return;
    }
    if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  function onexithardbreak() {
    setData("atHardBreak", true);
  }
  function onexithtmlflow() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "html", "expected html on stack");
    node2.value = data2;
  }
  function onexithtmltext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "html", "expected html on stack");
    node2.value = data2;
  }
  function onexitcodetext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "inlineCode", "expected inline code on stack");
    node2.value = data2;
  }
  function onexitlink() {
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "link", "expected link on stack");
    if (getData("inReference")) {
      const referenceType = getData("referenceType") || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    setData("referenceType");
  }
  function onexitimage() {
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "image", "expected image on stack");
    if (getData("inReference")) {
      const referenceType = getData("referenceType") || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    setData("referenceType");
  }
  function onexitlabeltext(token) {
    const string3 = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    ok2(ancestor, "expected ancestor on stack");
    ok2(
      ancestor.type === "image" || ancestor.type === "link",
      "expected image or link on stack"
    );
    ancestor.label = decodeString(string3);
    ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    ok2(fragment, "expected node on stack");
    ok2(fragment.type === "fragment", "expected fragment on stack");
    const value = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(
      node2.type === "image" || node2.type === "link",
      "expected image or link on stack"
    );
    setData("inReference", true);
    if (node2.type === "link") {
      const children = fragment.children;
      node2.children = children;
    } else {
      node2.alt = value;
    }
  }
  function onexitresourcedestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(
      node2.type === "image" || node2.type === "link",
      "expected image or link on stack"
    );
    node2.url = data2;
  }
  function onexitresourcetitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(
      node2.type === "image" || node2.type === "link",
      "expected image or link on stack"
    );
    node2.title = data2;
  }
  function onexitresource() {
    setData("inReference");
  }
  function onenterreference() {
    setData("referenceType", "collapsed");
  }
  function onexitreferencestring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(
      node2.type === "image" || node2.type === "link",
      "expected image reference or link reference on stack"
    );
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
    setData("referenceType", "full");
  }
  function onexitcharacterreferencemarker(token) {
    ok2(
      token.type === "characterReferenceMarkerNumeric" || token.type === "characterReferenceMarkerHexadecimal"
    );
    setData("characterReferenceType", token.type);
  }
  function onexitcharacterreferencevalue(token) {
    const data2 = this.sliceSerialize(token);
    const type = getData("characterReferenceType");
    let value;
    if (type) {
      value = decodeNumericCharacterReference(
        data2,
        type === types.characterReferenceMarkerNumeric ? constants.numericBaseDecimal : constants.numericBaseHexadecimal
      );
      setData("characterReferenceType");
    } else {
      const result = decodeNamedCharacterReference(data2);
      ok2(result !== false, "expected reference to decode");
      value = result;
    }
    const tail = this.stack.pop();
    ok2(tail, "expected `node`");
    ok2(tail.position, "expected `node.position`");
    ok2("value" in tail, "expected `node.value`");
    tail.value += value;
    tail.position.end = point2(token.end);
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "link", "expected link on stack");
    node2.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2, "expected node on stack");
    ok2(node2.type === "link", "expected link on stack");
    node2.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return { type: "blockquote", children: [] };
  }
  function codeFlow() {
    return { type: "code", lang: null, meta: null, value: "" };
  }
  function codeText2() {
    return { type: "inlineCode", value: "" };
  }
  function definition2() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis2() {
    return { type: "emphasis", children: [] };
  }
  function heading2() {
    return { type: "heading", depth: void 0, children: [] };
  }
  function hardBreak2() {
    return { type: "break" };
  }
  function html4() {
    return { type: "html", value: "" };
  }
  function image2() {
    return { type: "image", title: null, url: "", alt: null };
  }
  function link2() {
    return { type: "link", title: null, url: "", children: [] };
  }
  function list3(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: []
    };
  }
  function listItem3(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  function paragraph2() {
    return { type: "paragraph", children: [] };
  }
  function strong2() {
    return { type: "strong", children: [] };
  }
  function text5() {
    return { type: "text", value: "" };
  }
  function thematicBreak3() {
    return { type: "thematicBreak" };
  }
}
function point2(d) {
  return { line: d.line, column: d.column, offset: d.offset };
}
function configure(combined, extensions) {
  let index4 = -1;
  while (++index4 < extensions.length) {
    const value = extensions[index4];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}
function extension(combined, extension2) {
  let key;
  for (key in extension2) {
    if (own2.call(extension2, key)) {
      if (key === "canContainEols") {
        const right2 = extension2[key];
        if (right2) {
          combined[key].push(...right2);
        }
      } else if (key === "transforms") {
        const right2 = extension2[key];
        if (right2) {
          combined[key].push(...right2);
        }
      } else if (key === "enter" || key === "exit") {
        const right2 = extension2[key];
        if (right2) {
          Object.assign(combined[key], right2);
        }
      }
    }
  }
}
function defaultOnError(left2, right2) {
  if (left2) {
    throw new Error(
      "Cannot close `" + left2.type + "` (" + stringifyPosition({ start: left2.start, end: left2.end }) + "): a different token (`" + right2.type + "`, " + stringifyPosition({ start: right2.start, end: right2.end }) + ") is open"
    );
  } else {
    throw new Error(
      "Cannot close document, a token (`" + right2.type + "`, " + stringifyPosition({ start: right2.start, end: right2.end }) + ") is still open"
    );
  }
}

// node_modules/remark-parse/lib/index.js
function remarkParse(options2) {
  const parser = (doc) => {
    const settings = (
      /** @type {Options} */
      this.data("settings")
    );
    return fromMarkdown(
      doc,
      Object.assign({}, settings, options2, {
        // Note: these options are not in the readme.
        // The goal is for them to be set by plugins on `data` instead of being
        // passed by users.
        extensions: this.data("micromarkExtensions") || [],
        mdastExtensions: this.data("fromMarkdownExtensions") || []
      })
    );
  };
  Object.assign(this, { Parser: parser });
}

// node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
function blockquote(state, node2) {
  const result = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: state.wrap(state.all(node2), true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/break.js
function hardBreak(state, node2) {
  const result = { type: "element", tagName: "br", properties: {}, children: [] };
  state.patch(node2, result);
  return [state.applyData(node2, result), { type: "text", value: "\n" }];
}

// node_modules/mdast-util-to-hast/lib/handlers/code.js
function code(state, node2) {
  const value = node2.value ? node2.value + "\n" : "";
  const lang = node2.lang ? node2.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
  const properties = {};
  if (lang) {
    properties.className = ["language-" + lang];
  }
  let result = {
    type: "element",
    tagName: "code",
    properties,
    children: [{ type: "text", value }]
  };
  if (node2.meta) {
    result.data = { meta: node2.meta };
  }
  state.patch(node2, result);
  result = state.applyData(node2, result);
  result = { type: "element", tagName: "pre", properties: {}, children: [result] };
  state.patch(node2, result);
  return result;
}

// node_modules/mdast-util-to-hast/lib/handlers/delete.js
function strikethrough(state, node2) {
  const result = {
    type: "element",
    tagName: "del",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
function emphasis(state, node2) {
  const result = {
    type: "element",
    tagName: "em",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/micromark-util-sanitize-uri/dev/index.js
function normalizeUri(value) {
  const result = [];
  let index4 = -1;
  let start2 = 0;
  let skip = 0;
  while (++index4 < value.length) {
    const code3 = value.charCodeAt(index4);
    let replace2 = "";
    if (code3 === codes.percentSign && asciiAlphanumeric(value.charCodeAt(index4 + 1)) && asciiAlphanumeric(value.charCodeAt(index4 + 2))) {
      skip = 2;
    } else if (code3 < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code3))) {
        replace2 = String.fromCharCode(code3);
      }
    } else if (code3 > 55295 && code3 < 57344) {
      const next = value.charCodeAt(index4 + 1);
      if (code3 < 56320 && next > 56319 && next < 57344) {
        replace2 = String.fromCharCode(code3, next);
        skip = 1;
      } else {
        replace2 = values.replacementCharacter;
      }
    } else {
      replace2 = String.fromCharCode(code3);
    }
    if (replace2) {
      result.push(value.slice(start2, index4), encodeURIComponent(replace2));
      start2 = index4 + skip + 1;
      replace2 = "";
    }
    if (skip) {
      index4 += skip;
      skip = 0;
    }
  }
  return result.join("") + value.slice(start2);
}

// node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
function footnoteReference(state, node2) {
  const id = String(node2.identifier).toUpperCase();
  const safeId = normalizeUri(id.toLowerCase());
  const index4 = state.footnoteOrder.indexOf(id);
  let counter;
  if (index4 === -1) {
    state.footnoteOrder.push(id);
    state.footnoteCounts[id] = 1;
    counter = state.footnoteOrder.length;
  } else {
    state.footnoteCounts[id]++;
    counter = index4 + 1;
  }
  const reuseCounter = state.footnoteCounts[id];
  const link2 = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + state.clobberPrefix + "fn-" + safeId,
      id: state.clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
      dataFootnoteRef: true,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(counter) }]
  };
  state.patch(node2, link2);
  const sup = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [link2]
  };
  state.patch(node2, sup);
  return state.applyData(node2, sup);
}

// node_modules/mdast-util-to-hast/lib/handlers/footnote.js
function footnote(state, node2) {
  const footnoteById = state.footnoteById;
  let no = 1;
  while (no in footnoteById) no++;
  const identifier = String(no);
  footnoteById[identifier] = {
    type: "footnoteDefinition",
    identifier,
    children: [{ type: "paragraph", children: node2.children }],
    position: node2.position
  };
  return footnoteReference(state, {
    type: "footnoteReference",
    identifier,
    position: node2.position
  });
}

// node_modules/mdast-util-to-hast/lib/handlers/heading.js
function heading(state, node2) {
  const result = {
    type: "element",
    tagName: "h" + node2.depth,
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/html.js
function html(state, node2) {
  if (state.dangerous) {
    const result = { type: "raw", value: node2.value };
    state.patch(node2, result);
    return state.applyData(node2, result);
  }
  return null;
}

// node_modules/mdast-util-to-hast/lib/revert.js
function revert(state, node2) {
  const subtype = node2.referenceType;
  let suffix = "]";
  if (subtype === "collapsed") {
    suffix += "[]";
  } else if (subtype === "full") {
    suffix += "[" + (node2.label || node2.identifier) + "]";
  }
  if (node2.type === "imageReference") {
    return { type: "text", value: "![" + node2.alt + suffix };
  }
  const contents = state.all(node2);
  const head = contents[0];
  if (head && head.type === "text") {
    head.value = "[" + head.value;
  } else {
    contents.unshift({ type: "text", value: "[" });
  }
  const tail = contents[contents.length - 1];
  if (tail && tail.type === "text") {
    tail.value += suffix;
  } else {
    contents.push({ type: "text", value: suffix });
  }
  return contents;
}

// node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
function imageReference(state, node2) {
  const def = state.definition(node2.identifier);
  if (!def) {
    return revert(state, node2);
  }
  const properties = { src: normalizeUri(def.url || ""), alt: node2.alt };
  if (def.title !== null && def.title !== void 0) {
    properties.title = def.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/image.js
function image(state, node2) {
  const properties = { src: normalizeUri(node2.url) };
  if (node2.alt !== null && node2.alt !== void 0) {
    properties.alt = node2.alt;
  }
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
function inlineCode(state, node2) {
  const text5 = { type: "text", value: node2.value.replace(/\r?\n|\r/g, " ") };
  state.patch(node2, text5);
  const result = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [text5]
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
function linkReference(state, node2) {
  const def = state.definition(node2.identifier);
  if (!def) {
    return revert(state, node2);
  }
  const properties = { href: normalizeUri(def.url || "") };
  if (def.title !== null && def.title !== void 0) {
    properties.title = def.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link.js
function link(state, node2) {
  const properties = { href: normalizeUri(node2.url) };
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/list-item.js
function listItem(state, node2, parent) {
  const results = state.all(node2);
  const loose = parent ? listLoose(parent) : listItemLoose(node2);
  const properties = {};
  const children = [];
  if (typeof node2.checked === "boolean") {
    const head = results[0];
    let paragraph2;
    if (head && head.type === "element" && head.tagName === "p") {
      paragraph2 = head;
    } else {
      paragraph2 = { type: "element", tagName: "p", properties: {}, children: [] };
      results.unshift(paragraph2);
    }
    if (paragraph2.children.length > 0) {
      paragraph2.children.unshift({ type: "text", value: " " });
    }
    paragraph2.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: node2.checked, disabled: true },
      children: []
    });
    properties.className = ["task-list-item"];
  }
  let index4 = -1;
  while (++index4 < results.length) {
    const child = results[index4];
    if (loose || index4 !== 0 || child.type !== "element" || child.tagName !== "p") {
      children.push({ type: "text", value: "\n" });
    }
    if (child.type === "element" && child.tagName === "p" && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }
  const tail = results[results.length - 1];
  if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
    children.push({ type: "text", value: "\n" });
  }
  const result = { type: "element", tagName: "li", properties, children };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function listLoose(node2) {
  let loose = false;
  if (node2.type === "list") {
    loose = node2.spread || false;
    const children = node2.children;
    let index4 = -1;
    while (!loose && ++index4 < children.length) {
      loose = listItemLoose(children[index4]);
    }
  }
  return loose;
}
function listItemLoose(node2) {
  const spread = node2.spread;
  return spread === void 0 || spread === null ? node2.children.length > 1 : spread;
}

// node_modules/mdast-util-to-hast/lib/handlers/list.js
function list2(state, node2) {
  const properties = {};
  const results = state.all(node2);
  let index4 = -1;
  if (typeof node2.start === "number" && node2.start !== 1) {
    properties.start = node2.start;
  }
  while (++index4 < results.length) {
    const child = results[index4];
    if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
      properties.className = ["contains-task-list"];
      break;
    }
  }
  const result = {
    type: "element",
    tagName: node2.ordered ? "ol" : "ul",
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
function paragraph(state, node2) {
  const result = {
    type: "element",
    tagName: "p",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/root.js
function root(state, node2) {
  const result = { type: "root", children: state.wrap(state.all(node2)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/strong.js
function strong(state, node2) {
  const result = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/unist-util-position/lib/index.js
var pointStart = point3("start");
var pointEnd = point3("end");
function position2(node2) {
  return { start: pointStart(node2), end: pointEnd(node2) };
}
function point3(type) {
  return point4;
  function point4(node2) {
    const point5 = node2 && node2.position && node2.position[type] || {};
    return {
      // @ts-expect-error: in practice, null is allowed.
      line: point5.line || null,
      // @ts-expect-error: in practice, null is allowed.
      column: point5.column || null,
      // @ts-expect-error: in practice, null is allowed.
      offset: point5.offset > -1 ? point5.offset : null
    };
  }
}

// node_modules/mdast-util-to-hast/lib/handlers/table.js
function table(state, node2) {
  const rows = state.all(node2);
  const firstRow = rows.shift();
  const tableContent = [];
  if (firstRow) {
    const head = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node2.children[0], head);
    tableContent.push(head);
  }
  if (rows.length > 0) {
    const body = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: state.wrap(rows, true)
    };
    const start2 = pointStart(node2.children[1]);
    const end2 = pointEnd(node2.children[node2.children.length - 1]);
    if (start2.line && end2.line) body.position = { start: start2, end: end2 };
    tableContent.push(body);
  }
  const result = {
    type: "element",
    tagName: "table",
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-row.js
function tableRow(state, node2, parent) {
  const siblings = parent ? parent.children : void 0;
  const rowIndex = siblings ? siblings.indexOf(node2) : 1;
  const tagName = rowIndex === 0 ? "th" : "td";
  const align = parent && parent.type === "table" ? parent.align : void 0;
  const length = align ? align.length : node2.children.length;
  let cellIndex = -1;
  const cells = [];
  while (++cellIndex < length) {
    const cell = node2.children[cellIndex];
    const properties = {};
    const alignValue = align ? align[cellIndex] : void 0;
    if (alignValue) {
      properties.align = alignValue;
    }
    let result2 = { type: "element", tagName, properties, children: [] };
    if (cell) {
      result2.children = state.all(cell);
      state.patch(cell, result2);
      result2 = state.applyData(node2, result2);
    }
    cells.push(result2);
  }
  const result = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: state.wrap(cells, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
function tableCell(state, node2) {
  const result = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/trim-lines/index.js
var tab = 9;
var space = 32;
function trimLines(value) {
  const source = String(value);
  const search2 = /\r?\n|\r/g;
  let match = search2.exec(source);
  let last = 0;
  const lines2 = [];
  while (match) {
    lines2.push(
      trimLine(source.slice(last, match.index), last > 0, true),
      match[0]
    );
    last = match.index + match[0].length;
    match = search2.exec(source);
  }
  lines2.push(trimLine(source.slice(last), last > 0, false));
  return lines2.join("");
}
function trimLine(value, start2, end2) {
  let startIndex = 0;
  let endIndex = value.length;
  if (start2) {
    let code3 = value.codePointAt(startIndex);
    while (code3 === tab || code3 === space) {
      startIndex++;
      code3 = value.codePointAt(startIndex);
    }
  }
  if (end2) {
    let code3 = value.codePointAt(endIndex - 1);
    while (code3 === tab || code3 === space) {
      endIndex--;
      code3 = value.codePointAt(endIndex - 1);
    }
  }
  return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
}

// node_modules/mdast-util-to-hast/lib/handlers/text.js
function text3(state, node2) {
  const result = { type: "text", value: trimLines(String(node2.value)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
function thematicBreak2(state, node2) {
  const result = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/index.js
var handlers = {
  blockquote,
  break: hardBreak,
  code,
  delete: strikethrough,
  emphasis,
  footnoteReference,
  footnote,
  heading,
  html,
  imageReference,
  image,
  inlineCode,
  linkReference,
  link,
  listItem,
  list: list2,
  paragraph,
  root,
  strong,
  table,
  tableCell,
  tableRow,
  text: text3,
  thematicBreak: thematicBreak2,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
};
function ignore() {
  return null;
}

// node_modules/unist-util-is/lib/index.js
var convert2 = (
  /**
   * @type {(
   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {AssertAnything}
   */
  function(test2) {
    if (test2 === void 0 || test2 === null) {
      return ok3;
    }
    if (typeof test2 === "string") {
      return typeFactory2(test2);
    }
    if (typeof test2 === "object") {
      return Array.isArray(test2) ? anyFactory3(test2) : propsFactory2(test2);
    }
    if (typeof test2 === "function") {
      return castFactory3(test2);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory3(tests) {
  const checks2 = [];
  let index4 = -1;
  while (++index4 < tests.length) {
    checks2[index4] = convert2(tests[index4]);
  }
  return castFactory3(any);
  function any(...parameters) {
    let index5 = -1;
    while (++index5 < checks2.length) {
      if (checks2[index5].call(this, ...parameters)) return true;
    }
    return false;
  }
}
function propsFactory2(check) {
  return castFactory3(all3);
  function all3(node2) {
    let key;
    for (key in check) {
      if (node2[key] !== check[key]) return false;
    }
    return true;
  }
}
function typeFactory2(check) {
  return castFactory3(type);
  function type(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory3(check) {
  return assertion;
  function assertion(node2, ...parameters) {
    return Boolean(
      node2 && typeof node2 === "object" && "type" in node2 && // @ts-expect-error: fine.
      Boolean(check.call(this, node2, ...parameters))
    );
  }
}
function ok3() {
  return true;
}

// node_modules/mdast-util-to-hast/node_modules/unist-util-visit-parents/lib/color.browser.js
function color2(d) {
  return d;
}

// node_modules/mdast-util-to-hast/node_modules/unist-util-visit-parents/lib/index.js
var CONTINUE2 = true;
var EXIT2 = false;
var SKIP2 = "skip";
var visitParents2 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor<Node>} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor3, reverse) {
    if (typeof test2 === "function" && typeof visitor3 !== "function") {
      reverse = visitor3;
      visitor3 = test2;
      test2 = null;
    }
    const is4 = convert2(test2);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index4, parents) {
      const value = node2 && typeof node2 === "object" ? node2 : {};
      if (typeof value.type === "string") {
        const name = (
          // `hast`
          typeof value.tagName === "string" ? value.tagName : (
            // `xast`
            typeof value.name === "string" ? value.name : void 0
          )
        );
        Object.defineProperty(visit5, "name", {
          value: "node (" + color2(node2.type + (name ? "<" + name + ">" : "")) + ")"
        });
      }
      return visit5;
      function visit5() {
        let result = [];
        let subresult;
        let offset2;
        let grandparents;
        if (!test2 || is4(node2, index4, parents[parents.length - 1] || null)) {
          result = toResult2(visitor3(node2, parents));
          if (result[0] === EXIT2) {
            return result;
          }
        }
        if (node2.children && result[0] !== SKIP2) {
          offset2 = (reverse ? node2.children.length : -1) + step;
          grandparents = parents.concat(node2);
          while (offset2 > -1 && offset2 < node2.children.length) {
            subresult = factory(node2.children[offset2], offset2, grandparents)();
            if (subresult[0] === EXIT2) {
              return subresult;
            }
            offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
          }
        }
        return result;
      }
    }
  }
);
function toResult2(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE2, value];
  }
  return [value];
}

// node_modules/mdast-util-to-hast/node_modules/unist-util-visit/lib/index.js
var visit2 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor3, reverse) {
    if (typeof test2 === "function" && typeof visitor3 !== "function") {
      reverse = visitor3;
      visitor3 = test2;
      test2 = null;
    }
    visitParents2(tree, test2, overload, reverse);
    function overload(node2, parents) {
      const parent = parents[parents.length - 1];
      return visitor3(
        node2,
        parent ? parent.children.indexOf(node2) : null,
        parent
      );
    }
  }
);

// node_modules/unist-util-generated/lib/index.js
function generated(node2) {
  return !node2 || !node2.position || !node2.position.start || !node2.position.start.line || !node2.position.start.column || !node2.position.end || !node2.position.end.line || !node2.position.end.column;
}

// node_modules/mdast-util-definitions/node_modules/unist-util-visit-parents/lib/color.browser.js
function color3(d) {
  return d;
}

// node_modules/mdast-util-definitions/node_modules/unist-util-visit-parents/lib/index.js
var CONTINUE3 = true;
var EXIT3 = false;
var SKIP3 = "skip";
var visitParents3 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor<Node>} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor3, reverse) {
    if (typeof test2 === "function" && typeof visitor3 !== "function") {
      reverse = visitor3;
      visitor3 = test2;
      test2 = null;
    }
    const is4 = convert2(test2);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index4, parents) {
      const value = node2 && typeof node2 === "object" ? node2 : {};
      if (typeof value.type === "string") {
        const name = (
          // `hast`
          typeof value.tagName === "string" ? value.tagName : (
            // `xast`
            typeof value.name === "string" ? value.name : void 0
          )
        );
        Object.defineProperty(visit5, "name", {
          value: "node (" + color3(node2.type + (name ? "<" + name + ">" : "")) + ")"
        });
      }
      return visit5;
      function visit5() {
        let result = [];
        let subresult;
        let offset2;
        let grandparents;
        if (!test2 || is4(node2, index4, parents[parents.length - 1] || null)) {
          result = toResult3(visitor3(node2, parents));
          if (result[0] === EXIT3) {
            return result;
          }
        }
        if (node2.children && result[0] !== SKIP3) {
          offset2 = (reverse ? node2.children.length : -1) + step;
          grandparents = parents.concat(node2);
          while (offset2 > -1 && offset2 < node2.children.length) {
            subresult = factory(node2.children[offset2], offset2, grandparents)();
            if (subresult[0] === EXIT3) {
              return subresult;
            }
            offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
          }
        }
        return result;
      }
    }
  }
);
function toResult3(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE3, value];
  }
  return [value];
}

// node_modules/mdast-util-definitions/node_modules/unist-util-visit/lib/index.js
var visit3 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor3, reverse) {
    if (typeof test2 === "function" && typeof visitor3 !== "function") {
      reverse = visitor3;
      visitor3 = test2;
      test2 = null;
    }
    visitParents3(tree, test2, overload, reverse);
    function overload(node2, parents) {
      const parent = parents[parents.length - 1];
      return visitor3(
        node2,
        parent ? parent.children.indexOf(node2) : null,
        parent
      );
    }
  }
);

// node_modules/mdast-util-definitions/lib/index.js
var own3 = {}.hasOwnProperty;
function definitions(tree) {
  const cache = /* @__PURE__ */ Object.create(null);
  if (!tree || !tree.type) {
    throw new Error("mdast-util-definitions expected node");
  }
  visit3(tree, "definition", (definition3) => {
    const id = clean(definition3.identifier);
    if (id && !own3.call(cache, id)) {
      cache[id] = definition3;
    }
  });
  return definition2;
  function definition2(identifier) {
    const id = clean(identifier);
    return id && own3.call(cache, id) ? cache[id] : null;
  }
}
function clean(value) {
  return String(value || "").toUpperCase();
}

// node_modules/mdast-util-to-hast/lib/state.js
var own4 = {}.hasOwnProperty;
function createState(tree, options2) {
  const settings = options2 || {};
  const dangerous = settings.allowDangerousHtml || false;
  const footnoteById = {};
  state.dangerous = dangerous;
  state.clobberPrefix = settings.clobberPrefix === void 0 || settings.clobberPrefix === null ? "user-content-" : settings.clobberPrefix;
  state.footnoteLabel = settings.footnoteLabel || "Footnotes";
  state.footnoteLabelTagName = settings.footnoteLabelTagName || "h2";
  state.footnoteLabelProperties = settings.footnoteLabelProperties || {
    className: ["sr-only"]
  };
  state.footnoteBackLabel = settings.footnoteBackLabel || "Back to content";
  state.unknownHandler = settings.unknownHandler;
  state.passThrough = settings.passThrough;
  state.handlers = { ...handlers, ...settings.handlers };
  state.definition = definitions(tree);
  state.footnoteById = footnoteById;
  state.footnoteOrder = [];
  state.footnoteCounts = {};
  state.patch = patch;
  state.applyData = applyData;
  state.one = oneBound;
  state.all = allBound;
  state.wrap = wrap2;
  state.augment = augment;
  visit2(tree, "footnoteDefinition", (definition2) => {
    const id = String(definition2.identifier).toUpperCase();
    if (!own4.call(footnoteById, id)) {
      footnoteById[id] = definition2;
    }
  });
  return state;
  function augment(left2, right2) {
    if (left2 && "data" in left2 && left2.data) {
      const data = left2.data;
      if (data.hName) {
        if (right2.type !== "element") {
          right2 = {
            type: "element",
            tagName: "",
            properties: {},
            children: []
          };
        }
        right2.tagName = data.hName;
      }
      if (right2.type === "element" && data.hProperties) {
        right2.properties = { ...right2.properties, ...data.hProperties };
      }
      if ("children" in right2 && right2.children && data.hChildren) {
        right2.children = data.hChildren;
      }
    }
    if (left2) {
      const ctx = "type" in left2 ? left2 : { position: left2 };
      if (!generated(ctx)) {
        right2.position = { start: pointStart(ctx), end: pointEnd(ctx) };
      }
    }
    return right2;
  }
  function state(node2, tagName, props, children) {
    if (Array.isArray(props)) {
      children = props;
      props = {};
    }
    return augment(node2, {
      type: "element",
      tagName,
      properties: props || {},
      children: children || []
    });
  }
  function oneBound(node2, parent) {
    return one2(state, node2, parent);
  }
  function allBound(parent) {
    return all2(state, parent);
  }
}
function patch(from, to) {
  if (from.position) to.position = position2(from);
}
function applyData(from, to) {
  let result = to;
  if (from && from.data) {
    const hName = from.data.hName;
    const hChildren = from.data.hChildren;
    const hProperties = from.data.hProperties;
    if (typeof hName === "string") {
      if (result.type === "element") {
        result.tagName = hName;
      } else {
        result = {
          type: "element",
          tagName: hName,
          properties: {},
          children: []
        };
      }
    }
    if (result.type === "element" && hProperties) {
      result.properties = { ...result.properties, ...hProperties };
    }
    if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
      result.children = hChildren;
    }
  }
  return result;
}
function one2(state, node2, parent) {
  const type = node2 && node2.type;
  if (!type) {
    throw new Error("Expected node, got `" + node2 + "`");
  }
  if (own4.call(state.handlers, type)) {
    return state.handlers[type](state, node2, parent);
  }
  if (state.passThrough && state.passThrough.includes(type)) {
    return "children" in node2 ? { ...node2, children: all2(state, node2) } : node2;
  }
  if (state.unknownHandler) {
    return state.unknownHandler(state, node2, parent);
  }
  return defaultUnknownHandler(state, node2);
}
function all2(state, parent) {
  const values2 = [];
  if ("children" in parent) {
    const nodes = parent.children;
    let index4 = -1;
    while (++index4 < nodes.length) {
      const result = one2(state, nodes[index4], parent);
      if (result) {
        if (index4 && nodes[index4 - 1].type === "break") {
          if (!Array.isArray(result) && result.type === "text") {
            result.value = result.value.replace(/^\s+/, "");
          }
          if (!Array.isArray(result) && result.type === "element") {
            const head = result.children[0];
            if (head && head.type === "text") {
              head.value = head.value.replace(/^\s+/, "");
            }
          }
        }
        if (Array.isArray(result)) {
          values2.push(...result);
        } else {
          values2.push(result);
        }
      }
    }
  }
  return values2;
}
function defaultUnknownHandler(state, node2) {
  const data = node2.data || {};
  const result = "value" in node2 && !(own4.call(data, "hProperties") || own4.call(data, "hChildren")) ? { type: "text", value: node2.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: all2(state, node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function wrap2(nodes, loose) {
  const result = [];
  let index4 = -1;
  if (loose) {
    result.push({ type: "text", value: "\n" });
  }
  while (++index4 < nodes.length) {
    if (index4) result.push({ type: "text", value: "\n" });
    result.push(nodes[index4]);
  }
  if (loose && nodes.length > 0) {
    result.push({ type: "text", value: "\n" });
  }
  return result;
}

// node_modules/mdast-util-to-hast/lib/footer.js
function footer(state) {
  const listItems = [];
  let index4 = -1;
  while (++index4 < state.footnoteOrder.length) {
    const def = state.footnoteById[state.footnoteOrder[index4]];
    if (!def) {
      continue;
    }
    const content3 = state.all(def);
    const id = String(def.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    let referenceIndex = 0;
    const backReferences = [];
    while (++referenceIndex <= state.footnoteCounts[id]) {
      const backReference = {
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + state.clobberPrefix + "fnref-" + safeId + (referenceIndex > 1 ? "-" + referenceIndex : ""),
          dataFootnoteBackref: true,
          className: ["data-footnote-backref"],
          ariaLabel: state.footnoteBackLabel
        },
        children: [{ type: "text", value: "↩" }]
      };
      if (referenceIndex > 1) {
        backReference.children.push({
          type: "element",
          tagName: "sup",
          children: [{ type: "text", value: String(referenceIndex) }]
        });
      }
      if (backReferences.length > 0) {
        backReferences.push({ type: "text", value: " " });
      }
      backReferences.push(backReference);
    }
    const tail = content3[content3.length - 1];
    if (tail && tail.type === "element" && tail.tagName === "p") {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === "text") {
        tailTail.value += " ";
      } else {
        tail.children.push({ type: "text", value: " " });
      }
      tail.children.push(...backReferences);
    } else {
      content3.push(...backReferences);
    }
    const listItem3 = {
      type: "element",
      tagName: "li",
      properties: { id: state.clobberPrefix + "fn-" + safeId },
      children: state.wrap(content3, true)
    };
    state.patch(def, listItem3);
    listItems.push(listItem3);
  }
  if (listItems.length === 0) {
    return;
  }
  return {
    type: "element",
    tagName: "section",
    properties: { dataFootnotes: true, className: ["footnotes"] },
    children: [
      {
        type: "element",
        tagName: state.footnoteLabelTagName,
        properties: {
          // To do: use structured clone.
          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
          id: "footnote-label"
        },
        children: [{ type: "text", value: state.footnoteLabel }]
      },
      { type: "text", value: "\n" },
      {
        type: "element",
        tagName: "ol",
        properties: {},
        children: state.wrap(listItems, true)
      },
      { type: "text", value: "\n" }
    ]
  };
}

// node_modules/mdast-util-to-hast/lib/index.js
function toHast(tree, options2) {
  const state = createState(tree, options2);
  const node2 = state.one(tree, null);
  const foot = footer(state);
  if (foot) {
    node2.children.push({ type: "text", value: "\n" }, foot);
  }
  return Array.isArray(node2) ? { type: "root", children: node2 } : node2;
}

// node_modules/remark-rehype/lib/index.js
var remarkRehype = (
  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
  function(destination, options2) {
    return destination && "run" in destination ? bridge(destination, options2) : mutate(destination || options2);
  }
);
var lib_default = remarkRehype;
function bridge(destination, options2) {
  return (node2, file, next) => {
    destination.run(toHast(node2, options2), file, (error2) => {
      next(error2);
    });
  };
}
function mutate(options2) {
  return (node2) => toHast(node2, options2);
}

// node_modules/react-markdown/lib/react-markdown.js
var import_prop_types2 = __toESM(require_prop_types(), 1);

// node_modules/property-information/lib/util/schema.js
var Schema = class {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(property, normal, space2) {
    this.property = property;
    this.normal = normal;
    if (space2) {
      this.space = space2;
    }
  }
};
Schema.prototype.property = {};
Schema.prototype.normal = {};
Schema.prototype.space = null;

// node_modules/property-information/lib/util/merge.js
function merge(definitions2, space2) {
  const property = {};
  const normal = {};
  let index4 = -1;
  while (++index4 < definitions2.length) {
    Object.assign(property, definitions2[index4].property);
    Object.assign(normal, definitions2[index4].normal);
  }
  return new Schema(property, normal, space2);
}

// node_modules/property-information/lib/normalize.js
function normalize2(value) {
  return value.toLowerCase();
}

// node_modules/property-information/lib/util/info.js
var Info = class {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(property, attribute) {
    this.property = property;
    this.attribute = attribute;
  }
};
Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

// node_modules/property-information/lib/util/types.js
var types_exports = {};
__export(types_exports, {
  boolean: () => boolean,
  booleanish: () => booleanish,
  commaOrSpaceSeparated: () => commaOrSpaceSeparated,
  commaSeparated: () => commaSeparated,
  number: () => number,
  overloadedBoolean: () => overloadedBoolean,
  spaceSeparated: () => spaceSeparated
});
var powers = 0;
var boolean = increment();
var booleanish = increment();
var overloadedBoolean = increment();
var number = increment();
var spaceSeparated = increment();
var commaSeparated = increment();
var commaOrSpaceSeparated = increment();
function increment() {
  return 2 ** ++powers;
}

// node_modules/property-information/lib/util/defined-info.js
var checks = Object.keys(types_exports);
var DefinedInfo = class extends Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(property, attribute, mask, space2) {
    let index4 = -1;
    super(property, attribute);
    mark(this, "space", space2);
    if (typeof mask === "number") {
      while (++index4 < checks.length) {
        const check = checks[index4];
        mark(this, checks[index4], (mask & types_exports[check]) === types_exports[check]);
      }
    }
  }
};
DefinedInfo.prototype.defined = true;
function mark(values2, key, value) {
  if (value) {
    values2[key] = value;
  }
}

// node_modules/property-information/lib/util/create.js
var own5 = {}.hasOwnProperty;
function create(definition2) {
  const property = {};
  const normal = {};
  let prop;
  for (prop in definition2.properties) {
    if (own5.call(definition2.properties, prop)) {
      const value = definition2.properties[prop];
      const info = new DefinedInfo(
        prop,
        definition2.transform(definition2.attributes || {}, prop),
        value,
        definition2.space
      );
      if (definition2.mustUseProperty && definition2.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }
      property[prop] = info;
      normal[normalize2(prop)] = prop;
      normal[normalize2(info.attribute)] = prop;
    }
  }
  return new Schema(property, normal, definition2.space);
}

// node_modules/property-information/lib/xlink.js
var xlink = create({
  space: "xlink",
  transform(_23, prop) {
    return "xlink:" + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});

// node_modules/property-information/lib/xml.js
var xml = create({
  space: "xml",
  transform(_23, prop) {
    return "xml:" + prop.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
});

// node_modules/property-information/lib/util/case-sensitive-transform.js
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}

// node_modules/property-information/lib/util/case-insensitive-transform.js
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}

// node_modules/property-information/lib/xmlns.js
var xmlns = create({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: caseInsensitiveTransform,
  properties: { xmlns: null, xmlnsXLink: null }
});

// node_modules/property-information/lib/aria.js
var aria = create({
  transform(_23, prop) {
    return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  }
});

// node_modules/property-information/lib/html.js
var html2 = create({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    blocking: spaceSeparated,
    capture: null,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: boolean,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shadowRootClonable: boolean,
    shadowRootDelegatesFocus: boolean,
    shadowRootMode: null,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    writingSuggestions: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: number,
    // `<img>` and `<object>`
    leftMargin: number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: number,
    // `<body>`
    marginWidth: number,
    // `<body>`
    noResize: boolean,
    // `<frame>`
    noHref: boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  }
});

// node_modules/property-information/lib/svg.js
var svg = create({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});

// node_modules/property-information/lib/find.js
var valid = /^data[-\w.:]+$/i;
var dash = /-[a-z]/g;
var cap = /[A-Z]/g;
function find3(schema, value) {
  const normal = normalize2(value);
  let prop = value;
  let Type = Info;
  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }
  if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
    if (value.charAt(4) === "-") {
      const rest = value.slice(5).replace(dash, camelcase);
      prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      const rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        if (dashes.charAt(0) !== "-") {
          dashes = "-" + dashes;
        }
        value = "data" + dashes;
      }
    }
    Type = DefinedInfo;
  }
  return new Type(prop, value);
}
function kebab($0) {
  return "-" + $0.toLowerCase();
}
function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}

// node_modules/property-information/lib/hast-to-react.js
var hastToReact = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink"
};

// node_modules/property-information/index.js
var html3 = merge([xml, xlink, xmlns, aria, html2], "html");
var svg2 = merge([xml, xlink, xmlns, aria, svg], "svg");

// node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/color.browser.js
function color4(d) {
  return d;
}

// node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js
var CONTINUE4 = true;
var EXIT4 = false;
var SKIP4 = "skip";
var visitParents4 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor<Node>} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor3, reverse) {
    if (typeof test2 === "function" && typeof visitor3 !== "function") {
      reverse = visitor3;
      visitor3 = test2;
      test2 = null;
    }
    const is4 = convert2(test2);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index4, parents) {
      const value = node2 && typeof node2 === "object" ? node2 : {};
      if (typeof value.type === "string") {
        const name = (
          // `hast`
          typeof value.tagName === "string" ? value.tagName : (
            // `xast`
            typeof value.name === "string" ? value.name : void 0
          )
        );
        Object.defineProperty(visit5, "name", {
          value: "node (" + color4(node2.type + (name ? "<" + name + ">" : "")) + ")"
        });
      }
      return visit5;
      function visit5() {
        let result = [];
        let subresult;
        let offset2;
        let grandparents;
        if (!test2 || is4(node2, index4, parents[parents.length - 1] || null)) {
          result = toResult4(visitor3(node2, parents));
          if (result[0] === EXIT4) {
            return result;
          }
        }
        if (node2.children && result[0] !== SKIP4) {
          offset2 = (reverse ? node2.children.length : -1) + step;
          grandparents = parents.concat(node2);
          while (offset2 > -1 && offset2 < node2.children.length) {
            subresult = factory(node2.children[offset2], offset2, grandparents)();
            if (subresult[0] === EXIT4) {
              return subresult;
            }
            offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
          }
        }
        return result;
      }
    }
  }
);
function toResult4(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE4, value];
  }
  return [value];
}

// node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js
var visit4 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor3, reverse) {
    if (typeof test2 === "function" && typeof visitor3 !== "function") {
      reverse = visitor3;
      visitor3 = test2;
      test2 = null;
    }
    visitParents4(tree, test2, overload, reverse);
    function overload(node2, parents) {
      const parent = parents[parents.length - 1];
      return visitor3(
        node2,
        parent ? parent.children.indexOf(node2) : null,
        parent
      );
    }
  }
);

// node_modules/react-markdown/lib/rehype-filter.js
function rehypeFilter(options2) {
  if (options2.allowedElements && options2.disallowedElements) {
    throw new TypeError(
      "Only one of `allowedElements` and `disallowedElements` should be defined"
    );
  }
  if (options2.allowedElements || options2.disallowedElements || options2.allowElement) {
    return (tree) => {
      visit4(tree, "element", (node2, index4, parent_) => {
        const parent = (
          /** @type {Element|Root} */
          parent_
        );
        let remove;
        if (options2.allowedElements) {
          remove = !options2.allowedElements.includes(node2.tagName);
        } else if (options2.disallowedElements) {
          remove = options2.disallowedElements.includes(node2.tagName);
        }
        if (!remove && options2.allowElement && typeof index4 === "number") {
          remove = !options2.allowElement(node2, index4, parent);
        }
        if (remove && typeof index4 === "number") {
          if (options2.unwrapDisallowed && node2.children) {
            parent.children.splice(index4, 1, ...node2.children);
          } else {
            parent.children.splice(index4, 1);
          }
          return index4;
        }
        return void 0;
      });
    };
  }
}

// node_modules/react-markdown/lib/ast-to-react.js
var import_react98 = __toESM(require_react(), 1);
var import_react_is = __toESM(require_react_is(), 1);

// node_modules/hast-util-whitespace/index.js
function whitespace2(thing) {
  const value = (
    // @ts-expect-error looks like a node.
    thing && typeof thing === "object" && thing.type === "text" ? (
      // @ts-expect-error looks like a text.
      thing.value || ""
    ) : thing
  );
  return typeof value === "string" && value.replace(/[ \t\n\f\r]/g, "") === "";
}

// node_modules/space-separated-tokens/index.js
function stringify2(values2) {
  return values2.join(" ").trim();
}

// node_modules/comma-separated-tokens/index.js
function stringify3(values2, options2) {
  const settings = options2 || {};
  const input = values2[values2.length - 1] === "" ? [...values2, ""] : values2;
  return input.join(
    (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
  ).trim();
}

// node_modules/style-to-object/index.mjs
var import_index = __toESM(require_style_to_object(), 1);
var style_to_object_default = import_index.default;

// node_modules/react-markdown/lib/ast-to-react.js
var own6 = {}.hasOwnProperty;
var tableElements = /* @__PURE__ */ new Set(["table", "thead", "tbody", "tfoot", "tr"]);
function childrenToReact(context, node2) {
  const children = [];
  let childIndex = -1;
  let child;
  while (++childIndex < node2.children.length) {
    child = node2.children[childIndex];
    if (child.type === "element") {
      children.push(toReact(context, child, childIndex, node2));
    } else if (child.type === "text") {
      if (node2.type !== "element" || !tableElements.has(node2.tagName) || !whitespace2(child)) {
        children.push(child.value);
      }
    } else if (child.type === "raw" && !context.options.skipHtml) {
      children.push(child.value);
    }
  }
  return children;
}
function toReact(context, node2, index4, parent) {
  const options2 = context.options;
  const transform3 = options2.transformLinkUri === void 0 ? uriTransformer : options2.transformLinkUri;
  const parentSchema = context.schema;
  const name = node2.tagName;
  const properties = {};
  let schema = parentSchema;
  let property;
  if (parentSchema.space === "html" && name === "svg") {
    schema = svg2;
    context.schema = schema;
  }
  if (node2.properties) {
    for (property in node2.properties) {
      if (own6.call(node2.properties, property)) {
        addProperty(properties, property, node2.properties[property], context);
      }
    }
  }
  if (name === "ol" || name === "ul") {
    context.listDepth++;
  }
  const children = childrenToReact(context, node2);
  if (name === "ol" || name === "ul") {
    context.listDepth--;
  }
  context.schema = parentSchema;
  const position3 = node2.position || {
    start: { line: null, column: null, offset: null },
    end: { line: null, column: null, offset: null }
  };
  const component = options2.components && own6.call(options2.components, name) ? options2.components[name] : name;
  const basic = typeof component === "string" || component === import_react98.default.Fragment;
  if (!import_react_is.default.isValidElementType(component)) {
    throw new TypeError(
      `Component for name \`${name}\` not defined or is not renderable`
    );
  }
  properties.key = index4;
  if (name === "a" && options2.linkTarget) {
    properties.target = typeof options2.linkTarget === "function" ? options2.linkTarget(
      String(properties.href || ""),
      node2.children,
      typeof properties.title === "string" ? properties.title : null
    ) : options2.linkTarget;
  }
  if (name === "a" && transform3) {
    properties.href = transform3(
      String(properties.href || ""),
      node2.children,
      typeof properties.title === "string" ? properties.title : null
    );
  }
  if (!basic && name === "code" && parent.type === "element" && parent.tagName !== "pre") {
    properties.inline = true;
  }
  if (!basic && (name === "h1" || name === "h2" || name === "h3" || name === "h4" || name === "h5" || name === "h6")) {
    properties.level = Number.parseInt(name.charAt(1), 10);
  }
  if (name === "img" && options2.transformImageUri) {
    properties.src = options2.transformImageUri(
      String(properties.src || ""),
      String(properties.alt || ""),
      typeof properties.title === "string" ? properties.title : null
    );
  }
  if (!basic && name === "li" && parent.type === "element") {
    const input = getInputElement(node2);
    properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;
    properties.index = getElementsBeforeCount(parent, node2);
    properties.ordered = parent.tagName === "ol";
  }
  if (!basic && (name === "ol" || name === "ul")) {
    properties.ordered = name === "ol";
    properties.depth = context.listDepth;
  }
  if (name === "td" || name === "th") {
    if (properties.align) {
      if (!properties.style) properties.style = {};
      properties.style.textAlign = properties.align;
      delete properties.align;
    }
    if (!basic) {
      properties.isHeader = name === "th";
    }
  }
  if (!basic && name === "tr" && parent.type === "element") {
    properties.isHeader = Boolean(parent.tagName === "thead");
  }
  if (options2.sourcePos) {
    properties["data-sourcepos"] = flattenPosition(position3);
  }
  if (!basic && options2.rawSourcePos) {
    properties.sourcePosition = node2.position;
  }
  if (!basic && options2.includeElementIndex) {
    properties.index = getElementsBeforeCount(parent, node2);
    properties.siblingCount = getElementsBeforeCount(parent);
  }
  if (!basic) {
    properties.node = node2;
  }
  return children.length > 0 ? import_react98.default.createElement(component, properties, children) : import_react98.default.createElement(component, properties);
}
function getInputElement(node2) {
  let index4 = -1;
  while (++index4 < node2.children.length) {
    const child = node2.children[index4];
    if (child.type === "element" && child.tagName === "input") {
      return child;
    }
  }
  return null;
}
function getElementsBeforeCount(parent, node2) {
  let index4 = -1;
  let count = 0;
  while (++index4 < parent.children.length) {
    if (parent.children[index4] === node2) break;
    if (parent.children[index4].type === "element") count++;
  }
  return count;
}
function addProperty(props, prop, value, ctx) {
  const info = find3(ctx.schema, prop);
  let result = value;
  if (result === null || result === void 0 || result !== result) {
    return;
  }
  if (Array.isArray(result)) {
    result = info.commaSeparated ? stringify3(result) : stringify2(result);
  }
  if (info.property === "style" && typeof result === "string") {
    result = parseStyle(result);
  }
  if (info.space && info.property) {
    props[own6.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;
  } else if (info.attribute) {
    props[info.attribute] = result;
  }
}
function parseStyle(value) {
  const result = {};
  try {
    style_to_object_default(value, iterator);
  } catch {
  }
  return result;
  function iterator(name, v) {
    const k = name.slice(0, 4) === "-ms-" ? `ms-${name.slice(4)}` : name;
    result[k.replace(/-([a-z])/g, styleReplacer)] = v;
  }
}
function styleReplacer(_23, $1) {
  return $1.toUpperCase();
}
function flattenPosition(pos) {
  return [
    pos.start.line,
    ":",
    pos.start.column,
    "-",
    pos.end.line,
    ":",
    pos.end.column
  ].map(String).join("");
}

// node_modules/react-markdown/lib/react-markdown.js
var own7 = {}.hasOwnProperty;
var changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
var deprecated = {
  plugins: { to: "remarkPlugins", id: "change-plugins-to-remarkplugins" },
  renderers: { to: "components", id: "change-renderers-to-components" },
  astPlugins: { id: "remove-buggy-html-in-markdown-parser" },
  allowDangerousHtml: { id: "remove-buggy-html-in-markdown-parser" },
  escapeHtml: { id: "remove-buggy-html-in-markdown-parser" },
  source: { to: "children", id: "change-source-to-children" },
  allowNode: {
    to: "allowElement",
    id: "replace-allownode-allowedtypes-and-disallowedtypes"
  },
  allowedTypes: {
    to: "allowedElements",
    id: "replace-allownode-allowedtypes-and-disallowedtypes"
  },
  disallowedTypes: {
    to: "disallowedElements",
    id: "replace-allownode-allowedtypes-and-disallowedtypes"
  },
  includeNodeIndex: {
    to: "includeElementIndex",
    id: "change-includenodeindex-to-includeelementindex"
  }
};
function ReactMarkdown(options2) {
  for (const key in deprecated) {
    if (own7.call(deprecated, key) && own7.call(options2, key)) {
      const deprecation = deprecated[key];
      console.warn(
        `[react-markdown] Warning: please ${deprecation.to ? `use \`${deprecation.to}\` instead of` : "remove"} \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`
      );
      delete deprecated[key];
    }
  }
  const processor = unified().use(remarkParse).use(options2.remarkPlugins || []).use(lib_default, {
    ...options2.remarkRehypeOptions,
    allowDangerousHtml: true
  }).use(options2.rehypePlugins || []).use(rehypeFilter, options2);
  const file = new VFile();
  if (typeof options2.children === "string") {
    file.value = options2.children;
  } else if (options2.children !== void 0 && options2.children !== null) {
    console.warn(
      `[react-markdown] Warning: please pass a string as \`children\` (not: \`${options2.children}\`)`
    );
  }
  const hastNode = processor.runSync(processor.parse(file), file);
  if (hastNode.type !== "root") {
    throw new TypeError("Expected a `root` node");
  }
  let result = import_react99.default.createElement(
    import_react99.default.Fragment,
    {},
    childrenToReact({ options: options2, schema: html3, listDepth: 0 }, hastNode)
  );
  if (options2.className) {
    result = import_react99.default.createElement("div", { className: options2.className }, result);
  }
  return result;
}
ReactMarkdown.propTypes = {
  // Core options:
  children: import_prop_types2.default.string,
  // Layout options:
  className: import_prop_types2.default.string,
  // Filter options:
  allowElement: import_prop_types2.default.func,
  allowedElements: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
  disallowedElements: import_prop_types2.default.arrayOf(import_prop_types2.default.string),
  unwrapDisallowed: import_prop_types2.default.bool,
  // Plugin options:
  remarkPlugins: import_prop_types2.default.arrayOf(
    import_prop_types2.default.oneOfType([
      import_prop_types2.default.object,
      import_prop_types2.default.func,
      import_prop_types2.default.arrayOf(
        import_prop_types2.default.oneOfType([
          import_prop_types2.default.bool,
          import_prop_types2.default.string,
          import_prop_types2.default.object,
          import_prop_types2.default.func,
          import_prop_types2.default.arrayOf(
            // prettier-ignore
            // type-coverage:ignore-next-line
            import_prop_types2.default.any
          )
        ])
      )
    ])
  ),
  rehypePlugins: import_prop_types2.default.arrayOf(
    import_prop_types2.default.oneOfType([
      import_prop_types2.default.object,
      import_prop_types2.default.func,
      import_prop_types2.default.arrayOf(
        import_prop_types2.default.oneOfType([
          import_prop_types2.default.bool,
          import_prop_types2.default.string,
          import_prop_types2.default.object,
          import_prop_types2.default.func,
          import_prop_types2.default.arrayOf(
            // prettier-ignore
            // type-coverage:ignore-next-line
            import_prop_types2.default.any
          )
        ])
      )
    ])
  ),
  // Transform options:
  sourcePos: import_prop_types2.default.bool,
  rawSourcePos: import_prop_types2.default.bool,
  skipHtml: import_prop_types2.default.bool,
  includeElementIndex: import_prop_types2.default.bool,
  transformLinkUri: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.bool]),
  linkTarget: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.string]),
  transformImageUri: import_prop_types2.default.func,
  components: import_prop_types2.default.object
};

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var import_lodash3 = __toESM(require_lodash2());

// node_modules/micromark-extension-gfm-autolink-literal/dev/lib/syntax.js
var wwwPrefix = { tokenize: tokenizeWwwPrefix, partial: true };
var domain2 = { tokenize: tokenizeDomain, partial: true };
var path2 = { tokenize: tokenizePath, partial: true };
var trail = { tokenize: tokenizeTrail, partial: true };
var emailDomainDotTrail = {
  tokenize: tokenizeEmailDomainDotTrail,
  partial: true
};
var wwwAutolink = { tokenize: tokenizeWwwAutolink, previous: previousWww };
var protocolAutolink = {
  tokenize: tokenizeProtocolAutolink,
  previous: previousProtocol
};
var emailAutolink = { tokenize: tokenizeEmailAutolink, previous: previousEmail };
var text4 = {};
var gfmAutolinkLiteral = { text: text4 };
var code2 = codes.digit0;
while (code2 < codes.leftCurlyBrace) {
  text4[code2] = emailAutolink;
  code2++;
  if (code2 === codes.colon) code2 = codes.uppercaseA;
  else if (code2 === codes.leftSquareBracket) code2 = codes.lowercaseA;
}
text4[codes.plusSign] = emailAutolink;
text4[codes.dash] = emailAutolink;
text4[codes.dot] = emailAutolink;
text4[codes.underscore] = emailAutolink;
text4[codes.uppercaseH] = [emailAutolink, protocolAutolink];
text4[codes.lowercaseH] = [emailAutolink, protocolAutolink];
text4[codes.uppercaseW] = [emailAutolink, wwwAutolink];
text4[codes.lowercaseW] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok4, nok) {
  const self2 = this;
  let dot;
  let data;
  return start2;
  function start2(code3) {
    if (!gfmAtext(code3) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code3);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkEmail");
    return atext(code3);
  }
  function atext(code3) {
    if (gfmAtext(code3)) {
      effects.consume(code3);
      return atext;
    }
    if (code3 === codes.atSign) {
      effects.consume(code3);
      return emailDomain;
    }
    return nok(code3);
  }
  function emailDomain(code3) {
    if (code3 === codes.dot) {
      return effects.check(
        emailDomainDotTrail,
        emailDomainAfter,
        emailDomainDot
      )(code3);
    }
    if (code3 === codes.dash || code3 === codes.underscore || asciiAlphanumeric(code3)) {
      data = true;
      effects.consume(code3);
      return emailDomain;
    }
    return emailDomainAfter(code3);
  }
  function emailDomainDot(code3) {
    effects.consume(code3);
    dot = true;
    return emailDomain;
  }
  function emailDomainAfter(code3) {
    if (data && dot && asciiAlpha(self2.previous)) {
      effects.exit("literalAutolinkEmail");
      effects.exit("literalAutolink");
      return ok4(code3);
    }
    return nok(code3);
  }
}
function tokenizeWwwAutolink(effects, ok4, nok) {
  const self2 = this;
  return wwwStart;
  function wwwStart(code3) {
    if (code3 !== codes.uppercaseW && code3 !== codes.lowercaseW || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code3);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkWww");
    return effects.check(
      wwwPrefix,
      effects.attempt(domain2, effects.attempt(path2, wwwAfter), nok),
      nok
    )(code3);
  }
  function wwwAfter(code3) {
    effects.exit("literalAutolinkWww");
    effects.exit("literalAutolink");
    return ok4(code3);
  }
}
function tokenizeProtocolAutolink(effects, ok4, nok) {
  const self2 = this;
  let buffer2 = "";
  let seen = false;
  return protocolStart;
  function protocolStart(code3) {
    if ((code3 === codes.uppercaseH || code3 === codes.lowercaseH) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      buffer2 += String.fromCodePoint(code3);
      effects.consume(code3);
      return protocolPrefixInside;
    }
    return nok(code3);
  }
  function protocolPrefixInside(code3) {
    if (asciiAlpha(code3) && buffer2.length < 5) {
      buffer2 += String.fromCodePoint(code3);
      effects.consume(code3);
      return protocolPrefixInside;
    }
    if (code3 === codes.colon) {
      const protocol = buffer2.toLowerCase();
      if (protocol === "http" || protocol === "https") {
        effects.consume(code3);
        return protocolSlashesInside;
      }
    }
    return nok(code3);
  }
  function protocolSlashesInside(code3) {
    if (code3 === codes.slash) {
      effects.consume(code3);
      if (seen) {
        return afterProtocol;
      }
      seen = true;
      return protocolSlashesInside;
    }
    return nok(code3);
  }
  function afterProtocol(code3) {
    return code3 === codes.eof || asciiControl(code3) || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3) || unicodePunctuation(code3) ? nok(code3) : effects.attempt(domain2, effects.attempt(path2, protocolAfter), nok)(code3);
  }
  function protocolAfter(code3) {
    effects.exit("literalAutolinkHttp");
    effects.exit("literalAutolink");
    return ok4(code3);
  }
}
function tokenizeWwwPrefix(effects, ok4, nok) {
  let size = 0;
  return wwwPrefixInside;
  function wwwPrefixInside(code3) {
    if ((code3 === codes.uppercaseW || code3 === codes.lowercaseW) && size < 3) {
      size++;
      effects.consume(code3);
      return wwwPrefixInside;
    }
    if (code3 === codes.dot && size === 3) {
      effects.consume(code3);
      return wwwPrefixAfter;
    }
    return nok(code3);
  }
  function wwwPrefixAfter(code3) {
    return code3 === codes.eof ? nok(code3) : ok4(code3);
  }
}
function tokenizeDomain(effects, ok4, nok) {
  let underscoreInLastSegment;
  let underscoreInLastLastSegment;
  let seen;
  return domainInside;
  function domainInside(code3) {
    if (code3 === codes.dot || code3 === codes.underscore) {
      return effects.check(trail, domainAfter, domainAtPunctuation)(code3);
    }
    if (code3 === codes.eof || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3) || code3 !== codes.dash && unicodePunctuation(code3)) {
      return domainAfter(code3);
    }
    seen = true;
    effects.consume(code3);
    return domainInside;
  }
  function domainAtPunctuation(code3) {
    if (code3 === codes.underscore) {
      underscoreInLastSegment = true;
    } else {
      underscoreInLastLastSegment = underscoreInLastSegment;
      underscoreInLastSegment = void 0;
    }
    effects.consume(code3);
    return domainInside;
  }
  function domainAfter(code3) {
    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
      return nok(code3);
    }
    return ok4(code3);
  }
}
function tokenizePath(effects, ok4) {
  let sizeOpen = 0;
  let sizeClose = 0;
  return pathInside;
  function pathInside(code3) {
    if (code3 === codes.leftParenthesis) {
      sizeOpen++;
      effects.consume(code3);
      return pathInside;
    }
    if (code3 === codes.rightParenthesis && sizeClose < sizeOpen) {
      return pathAtPunctuation(code3);
    }
    if (code3 === codes.exclamationMark || code3 === codes.quotationMark || code3 === codes.ampersand || code3 === codes.apostrophe || code3 === codes.rightParenthesis || code3 === codes.asterisk || code3 === codes.comma || code3 === codes.dot || code3 === codes.colon || code3 === codes.semicolon || code3 === codes.lessThan || code3 === codes.questionMark || code3 === codes.rightSquareBracket || code3 === codes.underscore || code3 === codes.tilde) {
      return effects.check(trail, ok4, pathAtPunctuation)(code3);
    }
    if (code3 === codes.eof || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
      return ok4(code3);
    }
    effects.consume(code3);
    return pathInside;
  }
  function pathAtPunctuation(code3) {
    if (code3 === codes.rightParenthesis) {
      sizeClose++;
    }
    effects.consume(code3);
    return pathInside;
  }
}
function tokenizeTrail(effects, ok4, nok) {
  return trail2;
  function trail2(code3) {
    if (code3 === codes.exclamationMark || code3 === codes.quotationMark || code3 === codes.apostrophe || code3 === codes.rightParenthesis || code3 === codes.asterisk || code3 === codes.comma || code3 === codes.dot || code3 === codes.colon || code3 === codes.semicolon || code3 === codes.questionMark || code3 === codes.underscore || code3 === codes.tilde) {
      effects.consume(code3);
      return trail2;
    }
    if (code3 === codes.ampersand) {
      effects.consume(code3);
      return trailCharRefStart;
    }
    if (code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      return trailBracketAfter;
    }
    if (
      // `<` is an end.
      code3 === codes.lessThan || // So is whitespace.
      code3 === codes.eof || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)
    ) {
      return ok4(code3);
    }
    return nok(code3);
  }
  function trailBracketAfter(code3) {
    if (code3 === codes.eof || code3 === codes.leftParenthesis || code3 === codes.leftSquareBracket || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
      return ok4(code3);
    }
    return trail2(code3);
  }
  function trailCharRefStart(code3) {
    return asciiAlpha(code3) ? trailCharRefInside(code3) : nok(code3);
  }
  function trailCharRefInside(code3) {
    if (code3 === codes.semicolon) {
      effects.consume(code3);
      return trail2;
    }
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      return trailCharRefInside;
    }
    return nok(code3);
  }
}
function tokenizeEmailDomainDotTrail(effects, ok4, nok) {
  return start2;
  function start2(code3) {
    effects.consume(code3);
    return after;
  }
  function after(code3) {
    return asciiAlphanumeric(code3) ? nok(code3) : ok4(code3);
  }
}
function previousWww(code3) {
  return code3 === codes.eof || code3 === codes.leftParenthesis || code3 === codes.asterisk || code3 === codes.underscore || code3 === codes.leftSquareBracket || code3 === codes.rightSquareBracket || code3 === codes.tilde || markdownLineEndingOrSpace(code3);
}
function previousProtocol(code3) {
  return !asciiAlpha(code3);
}
function previousEmail(code3) {
  return !(code3 === codes.slash || gfmAtext(code3));
}
function gfmAtext(code3) {
  return code3 === codes.plusSign || code3 === codes.dash || code3 === codes.dot || code3 === codes.underscore || asciiAlphanumeric(code3);
}
function previousUnbalanced(events) {
  let index4 = events.length;
  let result = false;
  while (index4--) {
    const token = events[index4][1];
    if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
      result = true;
      break;
    }
    if (token._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }
  if (events.length > 0 && !result) {
    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }
  return result;
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js
var indent = { tokenize: tokenizeIndent2, partial: true };
function gfmFootnote() {
  return {
    document: {
      [codes.leftSquareBracket]: {
        tokenize: tokenizeDefinitionStart,
        continuation: { tokenize: tokenizeDefinitionContinuation },
        exit: gfmFootnoteDefinitionEnd
      }
    },
    text: {
      [codes.leftSquareBracket]: { tokenize: tokenizeGfmFootnoteCall },
      [codes.rightSquareBracket]: {
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall
      }
    }
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok4, nok) {
  const self2 = this;
  let index4 = self2.events.length;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let labelStart;
  while (index4--) {
    const token = self2.events[index4][1];
    if (token.type === types.labelImage) {
      labelStart = token;
      break;
    }
    if (token.type === "gfmFootnoteCall" || token.type === types.labelLink || token.type === types.label || token.type === types.image || token.type === types.link) {
      break;
    }
  }
  return start2;
  function start2(code3) {
    ok2(code3 === codes.rightSquareBracket, "expected `]`");
    if (!labelStart || !labelStart._balanced) {
      return nok(code3);
    }
    const id = normalizeIdentifier(
      self2.sliceSerialize({ start: labelStart.end, end: self2.now() })
    );
    if (id.codePointAt(0) !== codes.caret || !defined.includes(id.slice(1))) {
      return nok(code3);
    }
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteCallLabelMarker");
    return ok4(code3);
  }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
  let index4 = events.length;
  let labelStart;
  while (index4--) {
    if (events[index4][1].type === types.labelImage && events[index4][0] === "enter") {
      labelStart = events[index4][1];
      break;
    }
  }
  ok2(labelStart, "expected `labelStart` to resolve");
  events[index4 + 1][1].type = types.data;
  events[index4 + 3][1].type = "gfmFootnoteCallLabelMarker";
  const call = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, events[index4 + 3][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const marker = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, events[index4 + 3][1].end),
    end: Object.assign({}, events[index4 + 3][1].end)
  };
  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  const string3 = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events[events.length - 1][1].start)
  };
  const chunk = {
    type: types.chunkString,
    contentType: "string",
    start: Object.assign({}, string3.start),
    end: Object.assign({}, string3.end)
  };
  const replacement = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    events[index4 + 1],
    events[index4 + 2],
    ["enter", call, context],
    // The `[`
    events[index4 + 3],
    events[index4 + 4],
    // The `^`.
    ["enter", marker, context],
    ["exit", marker, context],
    // Everything in between.
    ["enter", string3, context],
    ["enter", chunk, context],
    ["exit", chunk, context],
    ["exit", string3, context],
    // The ending (`]`, properly parsed and labelled).
    events[events.length - 2],
    events[events.length - 1],
    ["exit", call, context]
  ];
  events.splice(index4, events.length - index4 + 1, ...replacement);
  return events;
}
function tokenizeGfmFootnoteCall(effects, ok4, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let size = 0;
  let data;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteCall");
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteCallLabelMarker");
    return callStart;
  }
  function callStart(code3) {
    if (code3 !== codes.caret) return nok(code3);
    effects.enter("gfmFootnoteCallMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteCallMarker");
    effects.enter("gfmFootnoteCallString");
    effects.enter("chunkString").contentType = "string";
    return callData;
  }
  function callData(code3) {
    if (
      // Too long.
      size > constants.linkReferenceSizeMax || // Closing brace with nothing.
      code3 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code3 === codes.eof || code3 === codes.leftSquareBracket || markdownLineEndingOrSpace(code3)
    ) {
      return nok(code3);
    }
    if (code3 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteCallString");
      if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
        return nok(code3);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallLabelMarker");
      effects.exit("gfmFootnoteCall");
      return ok4;
    }
    if (!markdownLineEndingOrSpace(code3)) {
      data = true;
    }
    size++;
    effects.consume(code3);
    return code3 === codes.backslash ? callEscape : callData;
  }
  function callEscape(code3) {
    if (code3 === codes.leftSquareBracket || code3 === codes.backslash || code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      size++;
      return callData;
    }
    return callData(code3);
  }
}
function tokenizeDefinitionStart(effects, ok4, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let identifier;
  let size = 0;
  let data;
  return start2;
  function start2(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteDefinition")._container = true;
    effects.enter("gfmFootnoteDefinitionLabel");
    effects.enter("gfmFootnoteDefinitionLabelMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteDefinitionLabelMarker");
    return labelAtMarker;
  }
  function labelAtMarker(code3) {
    if (code3 === codes.caret) {
      effects.enter("gfmFootnoteDefinitionMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteDefinitionMarker");
      effects.enter("gfmFootnoteDefinitionLabelString");
      effects.enter("chunkString").contentType = "string";
      return labelInside;
    }
    return nok(code3);
  }
  function labelInside(code3) {
    if (
      // Too long.
      size > constants.linkReferenceSizeMax || // Closing brace with nothing.
      code3 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code3 === codes.eof || code3 === codes.leftSquareBracket || markdownLineEndingOrSpace(code3)
    ) {
      return nok(code3);
    }
    if (code3 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteDefinitionLabelString");
      identifier = normalizeIdentifier(self2.sliceSerialize(token));
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      effects.exit("gfmFootnoteDefinitionLabel");
      return labelAfter;
    }
    if (!markdownLineEndingOrSpace(code3)) {
      data = true;
    }
    size++;
    effects.consume(code3);
    return code3 === codes.backslash ? labelEscape : labelInside;
  }
  function labelEscape(code3) {
    if (code3 === codes.leftSquareBracket || code3 === codes.backslash || code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      size++;
      return labelInside;
    }
    return labelInside(code3);
  }
  function labelAfter(code3) {
    if (code3 === codes.colon) {
      effects.enter("definitionMarker");
      effects.consume(code3);
      effects.exit("definitionMarker");
      if (!defined.includes(identifier)) {
        defined.push(identifier);
      }
      return factorySpace(
        effects,
        whitespaceAfter,
        "gfmFootnoteDefinitionWhitespace"
      );
    }
    return nok(code3);
  }
  function whitespaceAfter(code3) {
    return ok4(code3);
  }
}
function tokenizeDefinitionContinuation(effects, ok4, nok) {
  return effects.check(blankLine, ok4, effects.attempt(indent, ok4, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent2(effects, ok4, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    "gfmFootnoteDefinitionIndent",
    constants.tabSize + 1
  );
  function afterPrefix(code3) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === constants.tabSize ? ok4(code3) : nok(code3);
  }
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/html.js
var own8 = {}.hasOwnProperty;

// node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js
function gfmStrikethrough(options2) {
  const options_ = options2 || {};
  let single = options_.singleTilde;
  const tokenizer = {
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };
  if (single === null || single === void 0) {
    single = true;
  }
  return {
    text: { [codes.tilde]: tokenizer },
    insideSpan: { null: [tokenizer] },
    attentionMarkers: { null: [codes.tilde] }
  };
  function resolveAllStrikethrough(events, context) {
    let index4 = -1;
    while (++index4 < events.length) {
      if (events[index4][0] === "enter" && events[index4][1].type === "strikethroughSequenceTemporary" && events[index4][1]._close) {
        let open = index4;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
          events[index4][1].end.offset - events[index4][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
            events[index4][1].type = "strikethroughSequence";
            events[open][1].type = "strikethroughSequence";
            const strikethrough2 = {
              type: "strikethrough",
              start: Object.assign({}, events[open][1].start),
              end: Object.assign({}, events[index4][1].end)
            };
            const text5 = {
              type: "strikethroughText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index4][1].start)
            };
            const nextEvents = [
              ["enter", strikethrough2, context],
              ["enter", events[open][1], context],
              ["exit", events[open][1], context],
              ["enter", text5, context]
            ];
            const insideSpan2 = context.parser.constructs.insideSpan.null;
            if (insideSpan2) {
              splice(
                nextEvents,
                nextEvents.length,
                0,
                resolveAll(insideSpan2, events.slice(open + 1, index4), context)
              );
            }
            splice(nextEvents, nextEvents.length, 0, [
              ["exit", text5, context],
              ["enter", events[index4][1], context],
              ["exit", events[index4][1], context],
              ["exit", strikethrough2, context]
            ]);
            splice(events, open - 1, index4 - open + 3, nextEvents);
            index4 = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }
    index4 = -1;
    while (++index4 < events.length) {
      if (events[index4][1].type === "strikethroughSequenceTemporary") {
        events[index4][1].type = types.data;
      }
    }
    return events;
  }
  function tokenizeStrikethrough(effects, ok4, nok) {
    const previous3 = this.previous;
    const events = this.events;
    let size = 0;
    return start2;
    function start2(code3) {
      ok2(code3 === codes.tilde, "expected `~`");
      if (previous3 === codes.tilde && events[events.length - 1][1].type !== types.characterEscape) {
        return nok(code3);
      }
      effects.enter("strikethroughSequenceTemporary");
      return more(code3);
    }
    function more(code3) {
      const before = classifyCharacter(previous3);
      if (code3 === codes.tilde) {
        if (size > 1) return nok(code3);
        effects.consume(code3);
        size++;
        return more;
      }
      if (size < 2 && !single) return nok(code3);
      const token = effects.exit("strikethroughSequenceTemporary");
      const after = classifyCharacter(code3);
      token._open = !after || after === constants.attentionSideAfter && Boolean(before);
      token._close = !before || before === constants.attentionSideAfter && Boolean(after);
      return ok4(code3);
    }
  }
}

// node_modules/micromark-extension-gfm-table/dev/lib/edit-map.js
var EditMap = class {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {void}
   */
  add(index4, remove, add) {
    addImpl(this, index4, remove, add);
  }
  // To do: not used here.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {void}
  //  */
  // addBefore(index, remove, add) {
  //   addImpl(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {void}
   */
  consume(events) {
    this.map.sort((a, b) => a[0] - b[0]);
    if (this.map.length === 0) {
      return;
    }
    let index4 = this.map.length;
    const vecs = [];
    while (index4 > 0) {
      index4 -= 1;
      vecs.push(events.slice(this.map[index4][0] + this.map[index4][1]));
      vecs.push(this.map[index4][2]);
      events.length = this.map[index4][0];
    }
    vecs.push([...events]);
    events.length = 0;
    let slice = vecs.pop();
    while (slice) {
      events.push(...slice);
      slice = vecs.pop();
    }
    this.map.length = 0;
  }
};
function addImpl(editMap, at, remove, add) {
  let index4 = 0;
  if (remove === 0 && add.length === 0) {
    return;
  }
  while (index4 < editMap.map.length) {
    if (editMap.map[index4][0] === at) {
      editMap.map[index4][1] += remove;
      editMap.map[index4][2].push(...add);
      return;
    }
    index4 += 1;
  }
  editMap.map.push([at, remove, add]);
}

// node_modules/micromark-extension-gfm-table/dev/lib/infer.js
function gfmTableAlign(events, index4) {
  ok2(events[index4][1].type === "table", "expected table");
  let inDelimiterRow = false;
  const align = [];
  while (index4 < events.length) {
    const event = events[index4];
    if (inDelimiterRow) {
      if (event[0] === "enter") {
        if (event[1].type === "tableContent") {
          align.push(
            events[index4 + 1][1].type === "tableDelimiterMarker" ? "left" : "none"
          );
        }
      } else if (event[1].type === "tableContent") {
        if (events[index4 - 1][1].type === "tableDelimiterMarker") {
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
        }
      } else if (event[1].type === "tableDelimiterRow") {
        break;
      }
    } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
      inDelimiterRow = true;
    }
    index4 += 1;
  }
  return align;
}

// node_modules/micromark-extension-gfm-table/dev/lib/syntax.js
var gfmTable = {
  flow: { null: { tokenize: tokenizeTable, resolveAll: resolveTable } }
};
function tokenizeTable(effects, ok4, nok) {
  const self2 = this;
  let size = 0;
  let sizeB = 0;
  let seen;
  return start2;
  function start2(code3) {
    let index4 = self2.events.length - 1;
    while (index4 > -1) {
      const type = self2.events[index4][1].type;
      if (type === types.lineEnding || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      type === types.linePrefix)
        index4--;
      else break;
    }
    const tail = index4 > -1 ? self2.events[index4][1].type : null;
    const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
    if (next === bodyRowStart && self2.parser.lazy[self2.now().line]) {
      return nok(code3);
    }
    return next(code3);
  }
  function headRowBefore(code3) {
    effects.enter("tableHead");
    effects.enter("tableRow");
    return headRowStart(code3);
  }
  function headRowStart(code3) {
    if (code3 === codes.verticalBar) {
      return headRowBreak(code3);
    }
    seen = true;
    sizeB += 1;
    return headRowBreak(code3);
  }
  function headRowBreak(code3) {
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (markdownLineEnding(code3)) {
      if (sizeB > 1) {
        sizeB = 0;
        self2.interrupt = true;
        effects.exit("tableRow");
        effects.enter(types.lineEnding);
        effects.consume(code3);
        effects.exit(types.lineEnding);
        return headDelimiterStart;
      }
      return nok(code3);
    }
    if (markdownSpace(code3)) {
      return factorySpace(effects, headRowBreak, types.whitespace)(code3);
    }
    sizeB += 1;
    if (seen) {
      seen = false;
      size += 1;
    }
    if (code3 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      seen = true;
      return headRowBreak;
    }
    effects.enter(types.data);
    return headRowData(code3);
  }
  function headRowData(code3) {
    if (code3 === codes.eof || code3 === codes.verticalBar || markdownLineEndingOrSpace(code3)) {
      effects.exit(types.data);
      return headRowBreak(code3);
    }
    effects.consume(code3);
    return code3 === codes.backslash ? headRowEscape : headRowData;
  }
  function headRowEscape(code3) {
    if (code3 === codes.backslash || code3 === codes.verticalBar) {
      effects.consume(code3);
      return headRowData;
    }
    return headRowData(code3);
  }
  function headDelimiterStart(code3) {
    self2.interrupt = false;
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code3);
    }
    effects.enter("tableDelimiterRow");
    seen = false;
    if (markdownSpace(code3)) {
      ok2(self2.parser.constructs.disable.null, "expected `disabled.null`");
      return factorySpace(
        effects,
        headDelimiterBefore,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
      )(code3);
    }
    return headDelimiterBefore(code3);
  }
  function headDelimiterBefore(code3) {
    if (code3 === codes.dash || code3 === codes.colon) {
      return headDelimiterValueBefore(code3);
    }
    if (code3 === codes.verticalBar) {
      seen = true;
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      return headDelimiterCellBefore;
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterCellBefore(code3) {
    if (markdownSpace(code3)) {
      return factorySpace(
        effects,
        headDelimiterValueBefore,
        types.whitespace
      )(code3);
    }
    return headDelimiterValueBefore(code3);
  }
  function headDelimiterValueBefore(code3) {
    if (code3 === codes.colon) {
      sizeB += 1;
      seen = true;
      effects.enter("tableDelimiterMarker");
      effects.consume(code3);
      effects.exit("tableDelimiterMarker");
      return headDelimiterLeftAlignmentAfter;
    }
    if (code3 === codes.dash) {
      sizeB += 1;
      return headDelimiterLeftAlignmentAfter(code3);
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return headDelimiterCellAfter(code3);
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterLeftAlignmentAfter(code3) {
    if (code3 === codes.dash) {
      effects.enter("tableDelimiterFiller");
      return headDelimiterFiller(code3);
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterFiller(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      return headDelimiterFiller;
    }
    if (code3 === codes.colon) {
      seen = true;
      effects.exit("tableDelimiterFiller");
      effects.enter("tableDelimiterMarker");
      effects.consume(code3);
      effects.exit("tableDelimiterMarker");
      return headDelimiterRightAlignmentAfter;
    }
    effects.exit("tableDelimiterFiller");
    return headDelimiterRightAlignmentAfter(code3);
  }
  function headDelimiterRightAlignmentAfter(code3) {
    if (markdownSpace(code3)) {
      return factorySpace(
        effects,
        headDelimiterCellAfter,
        types.whitespace
      )(code3);
    }
    return headDelimiterCellAfter(code3);
  }
  function headDelimiterCellAfter(code3) {
    if (code3 === codes.verticalBar) {
      return headDelimiterBefore(code3);
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      if (!seen || size !== sizeB) {
        return headDelimiterNok(code3);
      }
      effects.exit("tableDelimiterRow");
      effects.exit("tableHead");
      return ok4(code3);
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterNok(code3) {
    return nok(code3);
  }
  function bodyRowStart(code3) {
    effects.enter("tableRow");
    return bodyRowBreak(code3);
  }
  function bodyRowBreak(code3) {
    if (code3 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      return bodyRowBreak;
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit("tableRow");
      return ok4(code3);
    }
    if (markdownSpace(code3)) {
      return factorySpace(effects, bodyRowBreak, types.whitespace)(code3);
    }
    effects.enter(types.data);
    return bodyRowData(code3);
  }
  function bodyRowData(code3) {
    if (code3 === codes.eof || code3 === codes.verticalBar || markdownLineEndingOrSpace(code3)) {
      effects.exit(types.data);
      return bodyRowBreak(code3);
    }
    effects.consume(code3);
    return code3 === codes.backslash ? bodyRowEscape : bodyRowData;
  }
  function bodyRowEscape(code3) {
    if (code3 === codes.backslash || code3 === codes.verticalBar) {
      effects.consume(code3);
      return bodyRowData;
    }
    return bodyRowData(code3);
  }
}
function resolveTable(events, context) {
  let index4 = -1;
  let inFirstCellAwaitingPipe = true;
  let rowKind = 0;
  let lastCell = [0, 0, 0, 0];
  let cell = [0, 0, 0, 0];
  let afterHeadAwaitingFirstBodyRow = false;
  let lastTableEnd = 0;
  let currentTable;
  let currentBody;
  let currentCell;
  const map2 = new EditMap();
  while (++index4 < events.length) {
    const event = events[index4];
    const token = event[1];
    if (event[0] === "enter") {
      if (token.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = false;
        if (lastTableEnd !== 0) {
          ok2(currentTable, "there should be a table opening");
          flushTableEnd(map2, context, lastTableEnd, currentTable, currentBody);
          currentBody = void 0;
          lastTableEnd = 0;
        }
        currentTable = {
          type: "table",
          start: Object.assign({}, token.start),
          // Note: correct end is set later.
          end: Object.assign({}, token.end)
        };
        map2.add(index4, 0, [["enter", currentTable, context]]);
      } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
        inFirstCellAwaitingPipe = true;
        currentCell = void 0;
        lastCell = [0, 0, 0, 0];
        cell = [0, index4 + 1, 0, 0];
        if (afterHeadAwaitingFirstBodyRow) {
          afterHeadAwaitingFirstBodyRow = false;
          currentBody = {
            type: "tableBody",
            start: Object.assign({}, token.start),
            // Note: correct end is set later.
            end: Object.assign({}, token.end)
          };
          map2.add(index4, 0, [["enter", currentBody, context]]);
        }
        rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
      } else if (rowKind && (token.type === types.data || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
        inFirstCellAwaitingPipe = false;
        if (cell[2] === 0) {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map2,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
            lastCell = [0, 0, 0, 0];
          }
          cell[2] = index4;
        }
      } else if (token.type === "tableCellDivider") {
        if (inFirstCellAwaitingPipe) {
          inFirstCellAwaitingPipe = false;
        } else {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map2,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
          }
          lastCell = cell;
          cell = [lastCell[1], index4, 0, 0];
        }
      }
    } else if (token.type === "tableHead") {
      afterHeadAwaitingFirstBodyRow = true;
      lastTableEnd = index4;
    } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
      lastTableEnd = index4;
      if (lastCell[1] !== 0) {
        cell[0] = cell[1];
        currentCell = flushCell(
          map2,
          context,
          lastCell,
          rowKind,
          index4,
          currentCell
        );
      } else if (cell[1] !== 0) {
        currentCell = flushCell(map2, context, cell, rowKind, index4, currentCell);
      }
      rowKind = 0;
    } else if (rowKind && (token.type === types.data || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
      cell[3] = index4;
    }
  }
  if (lastTableEnd !== 0) {
    ok2(currentTable, "expected table opening");
    flushTableEnd(map2, context, lastTableEnd, currentTable, currentBody);
  }
  map2.consume(context.events);
  index4 = -1;
  while (++index4 < context.events.length) {
    const event = context.events[index4];
    if (event[0] === "enter" && event[1].type === "table") {
      event[1]._align = gfmTableAlign(context.events, index4);
    }
  }
  return events;
}
function flushCell(map2, context, range, rowKind, rowEnd, previousCell) {
  const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
  const valueName = "tableContent";
  if (range[0] !== 0) {
    ok2(previousCell, "expected previous cell enter");
    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
    map2.add(range[0], 0, [["exit", previousCell, context]]);
  }
  const now = getPoint(context.events, range[1]);
  previousCell = {
    type: groupName,
    start: Object.assign({}, now),
    // Note: correct end is set later.
    end: Object.assign({}, now)
  };
  map2.add(range[1], 0, [["enter", previousCell, context]]);
  if (range[2] !== 0) {
    const relatedStart = getPoint(context.events, range[2]);
    const relatedEnd = getPoint(context.events, range[3]);
    const valueToken = {
      type: valueName,
      start: Object.assign({}, relatedStart),
      end: Object.assign({}, relatedEnd)
    };
    map2.add(range[2], 0, [["enter", valueToken, context]]);
    ok2(range[3] !== 0);
    if (rowKind !== 2) {
      const start2 = context.events[range[2]];
      const end2 = context.events[range[3]];
      start2[1].end = Object.assign({}, end2[1].end);
      start2[1].type = types.chunkText;
      start2[1].contentType = constants.contentTypeText;
      if (range[3] > range[2] + 1) {
        const a = range[2] + 1;
        const b = range[3] - range[2] - 1;
        map2.add(a, b, []);
      }
    }
    map2.add(range[3] + 1, 0, [["exit", valueToken, context]]);
  }
  if (rowEnd !== void 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
    map2.add(rowEnd, 0, [["exit", previousCell, context]]);
    previousCell = void 0;
  }
  return previousCell;
}
function flushTableEnd(map2, context, index4, table2, tableBody) {
  const exits = [];
  const related = getPoint(context.events, index4);
  if (tableBody) {
    tableBody.end = Object.assign({}, related);
    exits.push(["exit", tableBody, context]);
  }
  table2.end = Object.assign({}, related);
  exits.push(["exit", table2, context]);
  map2.add(index4 + 1, 0, exits);
}
function getPoint(events, index4) {
  const event = events[index4];
  const side = event[0] === "enter" ? "start" : "end";
  return event[1][side];
}

// node_modules/micromark-extension-gfm-tagfilter/index.js
var reFlow = /<(\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\t\n\f\r />])/gi;
var reText = new RegExp("^" + reFlow.source, "i");

// node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js
var tasklistCheck = { tokenize: tokenizeTasklistCheck };
var gfmTaskListItem = {
  text: { [codes.leftSquareBracket]: tasklistCheck }
};
function tokenizeTasklistCheck(effects, ok4, nok) {
  const self2 = this;
  return open;
  function open(code3) {
    ok2(code3 === codes.leftSquareBracket, "expected `[`");
    if (
      // Exit if there’s stuff before.
      self2.previous !== codes.eof || // Exit if not in the first content that is the first child of a list
      // item.
      !self2._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code3);
    }
    effects.enter("taskListCheck");
    effects.enter("taskListCheckMarker");
    effects.consume(code3);
    effects.exit("taskListCheckMarker");
    return inside;
  }
  function inside(code3) {
    if (markdownLineEndingOrSpace(code3)) {
      effects.enter("taskListCheckValueUnchecked");
      effects.consume(code3);
      effects.exit("taskListCheckValueUnchecked");
      return close;
    }
    if (code3 === codes.uppercaseX || code3 === codes.lowercaseX) {
      effects.enter("taskListCheckValueChecked");
      effects.consume(code3);
      effects.exit("taskListCheckValueChecked");
      return close;
    }
    return nok(code3);
  }
  function close(code3) {
    if (code3 === codes.rightSquareBracket) {
      effects.enter("taskListCheckMarker");
      effects.consume(code3);
      effects.exit("taskListCheckMarker");
      effects.exit("taskListCheck");
      return after;
    }
    return nok(code3);
  }
  function after(code3) {
    if (markdownLineEnding(code3)) {
      return ok4(code3);
    }
    if (markdownSpace(code3)) {
      return effects.check({ tokenize: spaceThenNonSpace }, ok4, nok)(code3);
    }
    return nok(code3);
  }
}
function spaceThenNonSpace(effects, ok4, nok) {
  return factorySpace(effects, after, types.whitespace);
  function after(code3) {
    return code3 === codes.eof ? nok(code3) : ok4(code3);
  }
}

// node_modules/micromark-extension-gfm/index.js
function gfm(options2) {
  return combineExtensions([
    gfmAutolinkLiteral,
    gfmFootnote(),
    gfmStrikethrough(options2),
    gfmTable,
    gfmTaskListItem
  ]);
}

// node_modules/ccount/index.js
function ccount(value, character) {
  const source = String(value);
  if (typeof character !== "string") {
    throw new TypeError("Expected character");
  }
  let count = 0;
  let index4 = source.indexOf(character);
  while (index4 !== -1) {
    count++;
    index4 = source.indexOf(character, index4 + character.length);
  }
  return count;
}

// node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp2(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/color.browser.js
function color5(d) {
  return d;
}

// node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js
var CONTINUE5 = true;
var EXIT5 = false;
var SKIP5 = "skip";
var visitParents5 = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor<Node>} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor3, reverse) {
    if (typeof test2 === "function" && typeof visitor3 !== "function") {
      reverse = visitor3;
      visitor3 = test2;
      test2 = null;
    }
    const is4 = convert2(test2);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index4, parents) {
      const value = node2 && typeof node2 === "object" ? node2 : {};
      if (typeof value.type === "string") {
        const name = (
          // `hast`
          typeof value.tagName === "string" ? value.tagName : (
            // `xast`
            typeof value.name === "string" ? value.name : void 0
          )
        );
        Object.defineProperty(visit5, "name", {
          value: "node (" + color5(node2.type + (name ? "<" + name + ">" : "")) + ")"
        });
      }
      return visit5;
      function visit5() {
        let result = [];
        let subresult;
        let offset2;
        let grandparents;
        if (!test2 || is4(node2, index4, parents[parents.length - 1] || null)) {
          result = toResult5(visitor3(node2, parents));
          if (result[0] === EXIT5) {
            return result;
          }
        }
        if (node2.children && result[0] !== SKIP5) {
          offset2 = (reverse ? node2.children.length : -1) + step;
          grandparents = parents.concat(node2);
          while (offset2 > -1 && offset2 < node2.children.length) {
            subresult = factory(node2.children[offset2], offset2, grandparents)();
            if (subresult[0] === EXIT5) {
              return subresult;
            }
            offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
          }
        }
        return result;
      }
    }
  }
);
function toResult5(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE5, value];
  }
  return [value];
}

// node_modules/mdast-util-find-and-replace/lib/index.js
var own9 = {}.hasOwnProperty;
var findAndReplace2 = (
  /**
   * @type {(
   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &
   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)
   * )}
   **/
  /**
   * @template {Node} Tree
   * @param {Tree} tree
   * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find
   * @param {Replace | Options | null | undefined} [replace]
   * @param {Options | null | undefined} [options]
   * @returns {Tree}
   */
  function(tree, find4, replace2, options2) {
    let settings;
    let schema;
    if (typeof find4 === "string" || find4 instanceof RegExp) {
      schema = [[find4, replace2]];
      settings = options2;
    } else {
      schema = find4;
      settings = replace2;
    }
    if (!settings) {
      settings = {};
    }
    const ignored = convert2(settings.ignore || []);
    const pairs = toPairs2(schema);
    let pairIndex = -1;
    while (++pairIndex < pairs.length) {
      visitParents5(tree, "text", visitor3);
    }
    return tree;
    function visitor3(node2, parents) {
      let index4 = -1;
      let grandparent;
      while (++index4 < parents.length) {
        const parent = parents[index4];
        if (ignored(
          parent,
          // @ts-expect-error: TS doesn’t understand but it’s perfect.
          grandparent ? grandparent.children.indexOf(parent) : void 0,
          grandparent
        )) {
          return;
        }
        grandparent = parent;
      }
      if (grandparent) {
        return handler(node2, parents);
      }
    }
    function handler(node2, parents) {
      const parent = parents[parents.length - 1];
      const find5 = pairs[pairIndex][0];
      const replace3 = pairs[pairIndex][1];
      let start2 = 0;
      const index4 = parent.children.indexOf(node2);
      let change = false;
      let nodes = [];
      find5.lastIndex = 0;
      let match = find5.exec(node2.value);
      while (match) {
        const position3 = match.index;
        const matchObject = {
          index: match.index,
          input: match.input,
          // @ts-expect-error: stack is fine.
          stack: [...parents, node2]
        };
        let value = replace3(...match, matchObject);
        if (typeof value === "string") {
          value = value.length > 0 ? { type: "text", value } : void 0;
        }
        if (value !== false) {
          if (start2 !== position3) {
            nodes.push({
              type: "text",
              value: node2.value.slice(start2, position3)
            });
          }
          if (Array.isArray(value)) {
            nodes.push(...value);
          } else if (value) {
            nodes.push(value);
          }
          start2 = position3 + match[0].length;
          change = true;
        }
        if (!find5.global) {
          break;
        }
        match = find5.exec(node2.value);
      }
      if (change) {
        if (start2 < node2.value.length) {
          nodes.push({ type: "text", value: node2.value.slice(start2) });
        }
        parent.children.splice(index4, 1, ...nodes);
      } else {
        nodes = [node2];
      }
      return index4 + nodes.length;
    }
  }
);
function toPairs2(schema) {
  const result = [];
  if (typeof schema !== "object") {
    throw new TypeError("Expected array or object as schema");
  }
  if (Array.isArray(schema)) {
    let index4 = -1;
    while (++index4 < schema.length) {
      result.push([
        toExpression2(schema[index4][0]),
        toFunction2(schema[index4][1])
      ]);
    }
  } else {
    let key;
    for (key in schema) {
      if (own9.call(schema, key)) {
        result.push([toExpression2(key), toFunction2(schema[key])]);
      }
    }
  }
  return result;
}
function toExpression2(find4) {
  return typeof find4 === "string" ? new RegExp(escapeStringRegexp2(find4), "g") : find4;
}
function toFunction2(replace2) {
  return typeof replace2 === "function" ? replace2 : () => replace2;
}

// node_modules/mdast-util-gfm-autolink-literal/lib/index.js
var inConstruct = "phrasing";
var notInConstruct = ["autolink", "link", "image", "label"];
var gfmAutolinkLiteralFromMarkdown = {
  transforms: [transformGfmAutolinkLiterals],
  enter: {
    literalAutolink: enterLiteralAutolink,
    literalAutolinkEmail: enterLiteralAutolinkValue,
    literalAutolinkHttp: enterLiteralAutolinkValue,
    literalAutolinkWww: enterLiteralAutolinkValue
  },
  exit: {
    literalAutolink: exitLiteralAutolink,
    literalAutolinkEmail: exitLiteralAutolinkEmail,
    literalAutolinkHttp: exitLiteralAutolinkHttp,
    literalAutolinkWww: exitLiteralAutolinkWww
  }
};
var gfmAutolinkLiteralToMarkdown = {
  unsafe: [
    {
      character: "@",
      before: "[+\\-.\\w]",
      after: "[\\-.\\w]",
      inConstruct,
      notInConstruct
    },
    {
      character: ".",
      before: "[Ww]",
      after: "[\\-.\\w]",
      inConstruct,
      notInConstruct
    },
    { character: ":", before: "[ps]", after: "\\/", inConstruct, notInConstruct }
  ]
};
function enterLiteralAutolink(token) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token);
}
function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  const node2 = (
    /** @type {Link} */
    this.stack[this.stack.length - 1]
  );
  node2.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
  this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace2(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_23, protocol, domain3, path3, match) {
  let prefix = "";
  if (!previous2(match)) {
    return false;
  }
  if (/^w/i.test(protocol)) {
    domain3 = protocol + domain3;
    protocol = "";
    prefix = "http://";
  }
  if (!isCorrectDomain(domain3)) {
    return false;
  }
  const parts = splitUrl(domain3 + path3);
  if (!parts[0]) return false;
  const result = {
    type: "link",
    title: null,
    url: prefix + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }]
  };
  if (parts[1]) {
    return [result, { type: "text", value: parts[1] }];
  }
  return result;
}
function findEmail(_23, atext, label, match) {
  if (
    // Not an expected previous character.
    !previous2(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)
  ) {
    return false;
  }
  return {
    type: "link",
    title: null,
    url: "mailto:" + atext + "@" + label,
    children: [{ type: "text", value: atext + "@" + label }]
  };
}
function isCorrectDomain(domain3) {
  const parts = domain3.split(".");
  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }
  return true;
}
function splitUrl(url) {
  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  if (!trailExec) {
    return [url, void 0];
  }
  url = url.slice(0, trailExec.index);
  let trail2 = trailExec[0];
  let closingParenIndex = trail2.indexOf(")");
  const openingParens = ccount(url, "(");
  let closingParens = ccount(url, ")");
  while (closingParenIndex !== -1 && openingParens > closingParens) {
    url += trail2.slice(0, closingParenIndex + 1);
    trail2 = trail2.slice(closingParenIndex + 1);
    closingParenIndex = trail2.indexOf(")");
    closingParens++;
  }
  return [url, trail2];
}
function previous2(match, email) {
  const code3 = match.input.charCodeAt(match.index - 1);
  return (match.index === 0 || unicodeWhitespace(code3) || unicodePunctuation(code3)) && (!email || code3 !== 47);
}

// node_modules/mdast-util-to-markdown/lib/util/association.js
function association(node2) {
  if (node2.label || !node2.identifier) {
    return node2.label || "";
  }
  return decodeString(node2.identifier);
}

// node_modules/mdast-util-to-markdown/lib/util/container-flow.js
function containerFlow(parent, state, info) {
  const indexStack = state.indexStack;
  const children = parent.children || [];
  const tracker = state.createTracker(info);
  const results = [];
  let index4 = -1;
  indexStack.push(-1);
  while (++index4 < children.length) {
    const child = children[index4];
    indexStack[indexStack.length - 1] = index4;
    results.push(
      tracker.move(
        state.handle(child, parent, state, {
          before: "\n",
          after: "\n",
          ...tracker.current()
        })
      )
    );
    if (child.type !== "list") {
      state.bulletLastUsed = void 0;
    }
    if (index4 < children.length - 1) {
      results.push(
        tracker.move(between(child, children[index4 + 1], parent, state))
      );
    }
  }
  indexStack.pop();
  return results.join("");
}
function between(left2, right2, parent, state) {
  let index4 = state.join.length;
  while (index4--) {
    const result = state.join[index4](left2, right2, parent, state);
    if (result === true || result === 1) {
      break;
    }
    if (typeof result === "number") {
      return "\n".repeat(1 + result);
    }
    if (result === false) {
      return "\n\n<!---->\n\n";
    }
  }
  return "\n\n";
}

// node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
var eol = /\r?\n|\r/g;
function indentLines(value, map2) {
  const result = [];
  let start2 = 0;
  let line2 = 0;
  let match;
  while (match = eol.exec(value)) {
    one3(value.slice(start2, match.index));
    result.push(match[0]);
    start2 = match.index + match[0].length;
    line2++;
  }
  one3(value.slice(start2));
  return result.join("");
  function one3(value2) {
    result.push(map2(value2, line2, !value2));
  }
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js
function patternCompile(pattern) {
  if (!pattern._compiled) {
    const before = (pattern.atBreak ? "[\\r\\n][\\t ]*" : "") + (pattern.before ? "(?:" + pattern.before + ")" : "");
    pattern._compiled = new RegExp(
      (before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") + pattern.character + (pattern.after ? "(?:" + pattern.after + ")" : ""),
      "g"
    );
  }
  return pattern._compiled;
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern) {
  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
function listInScope(stack, list3, none) {
  if (typeof list3 === "string") {
    list3 = [list3];
  }
  if (!list3 || list3.length === 0) {
    return none;
  }
  let index4 = -1;
  while (++index4 < list3.length) {
    if (stack.includes(list3[index4])) {
      return true;
    }
  }
  return false;
}

// node_modules/mdast-util-to-markdown/lib/util/safe.js
function safe(state, input, config) {
  const value = (config.before || "") + (input || "") + (config.after || "");
  const positions = [];
  const result = [];
  const infos = {};
  let index4 = -1;
  while (++index4 < state.unsafe.length) {
    const pattern = state.unsafe[index4];
    if (!patternInScope(state.stack, pattern)) {
      continue;
    }
    const expression = patternCompile(pattern);
    let match;
    while (match = expression.exec(value)) {
      const before = "before" in pattern || Boolean(pattern.atBreak);
      const after = "after" in pattern;
      const position3 = match.index + (before ? match[1].length : 0);
      if (positions.includes(position3)) {
        if (infos[position3].before && !before) {
          infos[position3].before = false;
        }
        if (infos[position3].after && !after) {
          infos[position3].after = false;
        }
      } else {
        positions.push(position3);
        infos[position3] = { before, after };
      }
    }
  }
  positions.sort(numerical);
  let start2 = config.before ? config.before.length : 0;
  const end2 = value.length - (config.after ? config.after.length : 0);
  index4 = -1;
  while (++index4 < positions.length) {
    const position3 = positions[index4];
    if (position3 < start2 || position3 >= end2) {
      continue;
    }
    if (position3 + 1 < end2 && positions[index4 + 1] === position3 + 1 && infos[position3].after && !infos[position3 + 1].before && !infos[position3 + 1].after || positions[index4 - 1] === position3 - 1 && infos[position3].before && !infos[position3 - 1].before && !infos[position3 - 1].after) {
      continue;
    }
    if (start2 !== position3) {
      result.push(escapeBackslashes(value.slice(start2, position3), "\\"));
    }
    start2 = position3;
    if (/[!-/:-@[-`{-~]/.test(value.charAt(position3)) && (!config.encode || !config.encode.includes(value.charAt(position3)))) {
      result.push("\\");
    } else {
      result.push(
        "&#x" + value.charCodeAt(position3).toString(16).toUpperCase() + ";"
      );
      start2++;
    }
  }
  result.push(escapeBackslashes(value.slice(start2, end2), config.after));
  return result.join("");
}
function numerical(a, b) {
  return a - b;
}
function escapeBackslashes(value, after) {
  const expression = /\\(?=[!-/:-@[-`{-~])/g;
  const positions = [];
  const results = [];
  const whole = value + after;
  let index4 = -1;
  let start2 = 0;
  let match;
  while (match = expression.exec(whole)) {
    positions.push(match.index);
  }
  while (++index4 < positions.length) {
    if (start2 !== positions[index4]) {
      results.push(value.slice(start2, positions[index4]));
    }
    results.push("\\");
    start2 = positions[index4];
  }
  results.push(value.slice(start2));
  return results.join("");
}

// node_modules/mdast-util-to-markdown/lib/util/track.js
function track(config) {
  const options2 = config || {};
  const now = options2.now || {};
  let lineShift = options2.lineShift || 0;
  let line2 = now.line || 1;
  let column = now.column || 1;
  return { move, current, shift };
  function current() {
    return { now: { line: line2, column }, lineShift };
  }
  function shift(value) {
    lineShift += value;
  }
  function move(input) {
    const value = input || "";
    const chunks = value.split(/\r?\n|\r/g);
    const tail = chunks[chunks.length - 1];
    line2 += chunks.length - 1;
    column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
    return value;
  }
}

// node_modules/mdast-util-gfm-footnote/lib/index.js
footnoteReference2.peek = footnoteReferencePeek;
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteDefinition: enterFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteCallString: enterFootnoteCallString
    },
    exit: {
      gfmFootnoteDefinition: exitFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteCallString: exitFootnoteCallString
    }
  };
}
function gfmFootnoteToMarkdown() {
  return {
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["phrasing", "label", "reference"] }],
    handlers: { footnoteDefinition, footnoteReference: footnoteReference2 }
  };
}
function enterFootnoteDefinition(token) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    token
  );
}
function enterFootnoteDefinitionLabelString() {
  this.buffer();
}
function exitFootnoteDefinitionLabelString(token) {
  const label = this.resume();
  const node2 = (
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1]
  );
  node2.label = label;
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
}
function exitFootnoteDefinition(token) {
  this.exit(token);
}
function enterFootnoteCall(token) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
}
function enterFootnoteCallString() {
  this.buffer();
}
function exitFootnoteCallString(token) {
  const label = this.resume();
  const node2 = (
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1]
  );
  node2.label = label;
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
}
function exitFootnoteCall(token) {
  this.exit(token);
}
function footnoteReference2(node2, _23, context, safeOptions) {
  const tracker = track(safeOptions);
  let value = tracker.move("[^");
  const exit3 = context.enter("footnoteReference");
  const subexit = context.enter("reference");
  value += tracker.move(
    safe(context, association(node2), {
      ...tracker.current(),
      before: value,
      after: "]"
    })
  );
  subexit();
  exit3();
  value += tracker.move("]");
  return value;
}
function footnoteReferencePeek() {
  return "[";
}
function footnoteDefinition(node2, _23, context, safeOptions) {
  const tracker = track(safeOptions);
  let value = tracker.move("[^");
  const exit3 = context.enter("footnoteDefinition");
  const subexit = context.enter("label");
  value += tracker.move(
    safe(context, association(node2), {
      ...tracker.current(),
      before: value,
      after: "]"
    })
  );
  subexit();
  value += tracker.move(
    "]:" + (node2.children && node2.children.length > 0 ? " " : "")
  );
  tracker.shift(4);
  value += tracker.move(
    indentLines(containerFlow(node2, context, tracker.current()), map)
  );
  exit3();
  return value;
}
function map(line2, index4, blank) {
  if (index4 === 0) {
    return line2;
  }
  return (blank ? "" : "    ") + line2;
}

// node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
function containerPhrasing(parent, state, info) {
  const indexStack = state.indexStack;
  const children = parent.children || [];
  const results = [];
  let index4 = -1;
  let before = info.before;
  indexStack.push(-1);
  let tracker = state.createTracker(info);
  while (++index4 < children.length) {
    const child = children[index4];
    let after;
    indexStack[indexStack.length - 1] = index4;
    if (index4 + 1 < children.length) {
      let handle2 = state.handle.handlers[children[index4 + 1].type];
      if (handle2 && handle2.peek) handle2 = handle2.peek;
      after = handle2 ? handle2(children[index4 + 1], parent, state, {
        before: "",
        after: "",
        ...tracker.current()
      }).charAt(0) : "";
    } else {
      after = info.after;
    }
    if (results.length > 0 && (before === "\r" || before === "\n") && child.type === "html") {
      results[results.length - 1] = results[results.length - 1].replace(
        /(\r?\n|\r)$/,
        " "
      );
      before = " ";
      tracker = state.createTracker(info);
      tracker.move(results.join(""));
    }
    results.push(
      tracker.move(
        state.handle(child, parent, state, {
          ...tracker.current(),
          before,
          after
        })
      )
    );
    before = results[results.length - 1].slice(-1);
  }
  indexStack.pop();
  return results.join("");
}

// node_modules/mdast-util-gfm-strikethrough/lib/index.js
var constructsWithoutStrikethrough = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
handleDelete.peek = peekDelete;
var gfmStrikethroughFromMarkdown = {
  canContainEols: ["delete"],
  enter: { strikethrough: enterStrikethrough },
  exit: { strikethrough: exitStrikethrough }
};
var gfmStrikethroughToMarkdown = {
  unsafe: [
    {
      character: "~",
      inConstruct: "phrasing",
      notInConstruct: constructsWithoutStrikethrough
    }
  ],
  handlers: { delete: handleDelete }
};
function enterStrikethrough(token) {
  this.enter({ type: "delete", children: [] }, token);
}
function exitStrikethrough(token) {
  this.exit(token);
}
function handleDelete(node2, _23, context, safeOptions) {
  const tracker = track(safeOptions);
  const exit3 = context.enter("strikethrough");
  let value = tracker.move("~~");
  value += containerPhrasing(node2, context, {
    ...tracker.current(),
    before: value,
    after: "~"
  });
  value += tracker.move("~~");
  exit3();
  return value;
}
function peekDelete() {
  return "~";
}

// node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
inlineCode2.peek = inlineCodePeek;
function inlineCode2(node2, _23, state) {
  let value = node2.value || "";
  let sequence = "`";
  let index4 = -1;
  while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
    sequence += "`";
  }
  if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
    value = " " + value + " ";
  }
  while (++index4 < state.unsafe.length) {
    const pattern = state.unsafe[index4];
    const expression = patternCompile(pattern);
    let match;
    if (!pattern.atBreak) continue;
    while (match = expression.exec(value)) {
      let position3 = match.index;
      if (value.charCodeAt(position3) === 10 && value.charCodeAt(position3 - 1) === 13) {
        position3--;
      }
      value = value.slice(0, position3) + " " + value.slice(match.index + 1);
    }
  }
  return sequence + value + sequence;
}
function inlineCodePeek() {
  return "`";
}

// node_modules/markdown-table/index.js
function defaultStringLength(value) {
  return value.length;
}
function markdownTable(table2, options2) {
  const settings = options2 || {};
  const align = (settings.align || []).concat();
  const stringLength = settings.stringLength || defaultStringLength;
  const alignments = [];
  const cellMatrix = [];
  const sizeMatrix = [];
  const longestCellByColumn = [];
  let mostCellsPerRow = 0;
  let rowIndex = -1;
  while (++rowIndex < table2.length) {
    const row2 = [];
    const sizes2 = [];
    let columnIndex2 = -1;
    if (table2[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table2[rowIndex].length;
    }
    while (++columnIndex2 < table2[rowIndex].length) {
      const cell = serialize(table2[rowIndex][columnIndex2]);
      if (settings.alignDelimiters !== false) {
        const size = stringLength(cell);
        sizes2[columnIndex2] = size;
        if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {
          longestCellByColumn[columnIndex2] = size;
        }
      }
      row2.push(cell);
    }
    cellMatrix[rowIndex] = row2;
    sizeMatrix[rowIndex] = sizes2;
  }
  let columnIndex = -1;
  if (typeof align === "object" && "length" in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    const code3 = toAlignment(align);
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code3;
    }
  }
  columnIndex = -1;
  const row = [];
  const sizes = [];
  while (++columnIndex < mostCellsPerRow) {
    const code3 = alignments[columnIndex];
    let before = "";
    let after = "";
    if (code3 === 99) {
      before = ":";
      after = ":";
    } else if (code3 === 108) {
      before = ":";
    } else if (code3 === 114) {
      after = ":";
    }
    let size = settings.alignDelimiters === false ? 1 : Math.max(
      1,
      longestCellByColumn[columnIndex] - before.length - after.length
    );
    const cell = before + "-".repeat(size) + after;
    if (settings.alignDelimiters !== false) {
      size = before.length + size + after.length;
      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }
      sizes[columnIndex] = size;
    }
    row[columnIndex] = cell;
  }
  cellMatrix.splice(1, 0, row);
  sizeMatrix.splice(1, 0, sizes);
  rowIndex = -1;
  const lines2 = [];
  while (++rowIndex < cellMatrix.length) {
    const row2 = cellMatrix[rowIndex];
    const sizes2 = sizeMatrix[rowIndex];
    columnIndex = -1;
    const line2 = [];
    while (++columnIndex < mostCellsPerRow) {
      const cell = row2[columnIndex] || "";
      let before = "";
      let after = "";
      if (settings.alignDelimiters !== false) {
        const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
        const code3 = alignments[columnIndex];
        if (code3 === 114) {
          before = " ".repeat(size);
        } else if (code3 === 99) {
          if (size % 2) {
            before = " ".repeat(size / 2 + 0.5);
            after = " ".repeat(size / 2 - 0.5);
          } else {
            before = " ".repeat(size / 2);
            after = before;
          }
        } else {
          after = " ".repeat(size);
        }
      }
      if (settings.delimiterStart !== false && !columnIndex) {
        line2.push("|");
      }
      if (settings.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(settings.alignDelimiters === false && cell === "") && (settings.delimiterStart !== false || columnIndex)) {
        line2.push(" ");
      }
      if (settings.alignDelimiters !== false) {
        line2.push(before);
      }
      line2.push(cell);
      if (settings.alignDelimiters !== false) {
        line2.push(after);
      }
      if (settings.padding !== false) {
        line2.push(" ");
      }
      if (settings.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line2.push("|");
      }
    }
    lines2.push(
      settings.delimiterEnd === false ? line2.join("").replace(/ +$/, "") : line2.join("")
    );
  }
  return lines2.join("\n");
}
function serialize(value) {
  return value === null || value === void 0 ? "" : String(value);
}
function toAlignment(value) {
  const code3 = typeof value === "string" ? value.codePointAt(0) : 0;
  return code3 === 67 || code3 === 99 ? 99 : code3 === 76 || code3 === 108 ? 108 : code3 === 82 || code3 === 114 ? 114 : 0;
}

// node_modules/mdast-util-gfm-table/lib/index.js
var gfmTableFromMarkdown = {
  enter: {
    table: enterTable,
    tableData: enterCell,
    tableHeader: enterCell,
    tableRow: enterRow
  },
  exit: {
    codeText: exitCodeText,
    table: exitTable,
    tableData: exit2,
    tableHeader: exit2,
    tableRow: exit2
  }
};
function enterTable(token) {
  const align = token._align;
  this.enter(
    {
      type: "table",
      align: align.map((d) => d === "none" ? null : d),
      children: []
    },
    token
  );
  this.setData("inTable", true);
}
function exitTable(token) {
  this.exit(token);
  this.setData("inTable");
}
function enterRow(token) {
  this.enter({ type: "tableRow", children: [] }, token);
}
function exit2(token) {
  this.exit(token);
}
function enterCell(token) {
  this.enter({ type: "tableCell", children: [] }, token);
}
function exitCodeText(token) {
  let value = this.resume();
  if (this.getData("inTable")) {
    value = value.replace(/\\([\\|])/g, replace);
  }
  const node2 = (
    /** @type {InlineCode} */
    this.stack[this.stack.length - 1]
  );
  node2.value = value;
  this.exit(token);
}
function replace($0, $1) {
  return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options2) {
  const settings = options2 || {};
  const padding = settings.tableCellPadding;
  const alignDelimiters = settings.tablePipeAlign;
  const stringLength = settings.stringLength;
  const around = padding ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: "\n", inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: true, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: true, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: true, character: "-", after: "[:|-]" }
    ],
    handlers: {
      table: handleTable,
      tableRow: handleTableRow,
      tableCell: handleTableCell,
      inlineCode: inlineCodeWithTable
    }
  };
  function handleTable(node2, _23, context, safeOptions) {
    return serializeData(
      handleTableAsData(node2, context, safeOptions),
      node2.align
    );
  }
  function handleTableRow(node2, _23, context, safeOptions) {
    const row = handleTableRowAsData(node2, context, safeOptions);
    const value = serializeData([row]);
    return value.slice(0, value.indexOf("\n"));
  }
  function handleTableCell(node2, _23, context, safeOptions) {
    const exit3 = context.enter("tableCell");
    const subexit = context.enter("phrasing");
    const value = containerPhrasing(node2, context, {
      ...safeOptions,
      before: around,
      after: around
    });
    subexit();
    exit3();
    return value;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength
    });
  }
  function handleTableAsData(node2, context, safeOptions) {
    const children = node2.children;
    let index4 = -1;
    const result = [];
    const subexit = context.enter("table");
    while (++index4 < children.length) {
      result[index4] = handleTableRowAsData(
        children[index4],
        context,
        safeOptions
      );
    }
    subexit();
    return result;
  }
  function handleTableRowAsData(node2, context, safeOptions) {
    const children = node2.children;
    let index4 = -1;
    const result = [];
    const subexit = context.enter("tableRow");
    while (++index4 < children.length) {
      result[index4] = handleTableCell(
        children[index4],
        node2,
        context,
        safeOptions
      );
    }
    subexit();
    return result;
  }
  function inlineCodeWithTable(node2, parent, context) {
    let value = inlineCode2(node2, parent, context);
    if (context.stack.includes("tableCell")) {
      value = value.replace(/\|/g, "\\$&");
    }
    return value;
  }
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(state) {
  const marker = state.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(state) {
  const style = state.options.listItemIndent || "tab";
  if (style === 1 || style === "1") {
    return "one";
  }
  if (style !== "tab" && style !== "one" && style !== "mixed") {
    throw new Error(
      "Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  }
  return style;
}

// node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem2(node2, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);
  if (parent && parent.type === "list" && parent.ordered) {
    bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
  }
  let size = bullet.length + 1;
  if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) {
    size = Math.ceil(size / 4) * 4;
  }
  const tracker = state.createTracker(info);
  tracker.move(bullet + " ".repeat(size - bullet.length));
  tracker.shift(size);
  const exit3 = state.enter("listItem");
  const value = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map2
  );
  exit3();
  return value;
  function map2(line2, index4, blank) {
    if (index4) {
      return (blank ? "" : " ".repeat(size)) + line2;
    }
    return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line2;
  }
}

// node_modules/mdast-util-gfm-task-list-item/lib/index.js
var gfmTaskListItemFromMarkdown = {
  exit: {
    taskListCheckValueChecked: exitCheck,
    taskListCheckValueUnchecked: exitCheck,
    paragraph: exitParagraphWithTaskListItem
  }
};
var gfmTaskListItemToMarkdown = {
  unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
  handlers: { listItem: listItemWithTaskListItem }
};
function exitCheck(token) {
  const node2 = (
    /** @type {ListItem} */
    this.stack[this.stack.length - 2]
  );
  node2.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
  const parent = (
    /** @type {Parents} */
    this.stack[this.stack.length - 2]
  );
  if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
    const node2 = (
      /** @type {Paragraph} */
      this.stack[this.stack.length - 1]
    );
    const head = node2.children[0];
    if (head && head.type === "text") {
      const siblings = parent.children;
      let index4 = -1;
      let firstParaghraph;
      while (++index4 < siblings.length) {
        const sibling = siblings[index4];
        if (sibling.type === "paragraph") {
          firstParaghraph = sibling;
          break;
        }
      }
      if (firstParaghraph === node2) {
        head.value = head.value.slice(1);
        if (head.value.length === 0) {
          node2.children.shift();
        } else if (node2.position && head.position && typeof head.position.start.offset === "number") {
          head.position.start.column++;
          head.position.start.offset++;
          node2.position.start = Object.assign({}, head.position.start);
        }
      }
    }
  }
  this.exit(token);
}
function listItemWithTaskListItem(node2, parent, context, safeOptions) {
  const head = node2.children[0];
  const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
  const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
  const tracker = track(safeOptions);
  if (checkable) {
    tracker.move(checkbox);
  }
  let value = listItem2(node2, parent, context, {
    ...safeOptions,
    ...tracker.current()
  });
  if (checkable) {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }
  return value;
  function check($0) {
    return $0 + checkbox;
  }
}

// node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown,
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown,
    gfmTableFromMarkdown,
    gfmTaskListItemFromMarkdown
  ];
}
function gfmToMarkdown(options2) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown,
      gfmFootnoteToMarkdown(),
      gfmStrikethroughToMarkdown,
      gfmTableToMarkdown(options2),
      gfmTaskListItemToMarkdown
    ]
  };
}

// node_modules/remark-gfm/index.js
function remarkGfm(options2 = {}) {
  const data = this.data();
  add("micromarkExtensions", gfm(options2));
  add("fromMarkdownExtensions", gfmFromMarkdown());
  add("toMarkdownExtensions", gfmToMarkdown(options2));
  function add(field, value) {
    const list3 = (
      /** @type {unknown[]} */
      // Other extensions
      /* c8 ignore next 2 */
      data[field] ? data[field] : data[field] = []
    );
    list3.push(value);
  }
}

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Anchor.js
var import_react100 = __toESM(require_react());
var Anchor = function(_a) {
  var children = _a.children, href = _a.href;
  var isEmail = href === null || href === void 0 ? void 0 : href.startsWith("mailto:");
  var isUrl2 = href === null || href === void 0 ? void 0 : href.startsWith("http");
  if (!href || !isEmail && !isUrl2)
    return import_react100.default.createElement(import_react100.default.Fragment, null, children);
  return import_react100.default.createElement("a", { className: clsx_default({ "str-chat__message-url-link": isUrl2 }), href, rel: "nofollow noreferrer noopener", target: "_blank" }, children);
};

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Emoji.js
var import_react101 = __toESM(require_react());
var Emoji = function(_a) {
  var children = _a.children;
  return import_react101.default.createElement("span", { className: "inline-text-emoji", "data-testid": "inline-text-emoji" }, children);
};

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Mention.js
var import_react102 = __toESM(require_react());
var Mention = function(_a) {
  var children = _a.children, mentionedUser = _a.node.mentionedUser;
  return import_react102.default.createElement("span", { className: "str-chat__message-mention", "data-user-id": mentionedUser.id }, children);
};

// node_modules/stream-chat-react/dist/components/UtilityComponents/ErrorBoundary.js
var import_react103 = __toESM(require_react());
var ErrorBoundary = (
  /** @class */
  function(_super) {
    __extends(ErrorBoundary2, _super);
    function ErrorBoundary2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = { hasError: false };
      return _this;
    }
    ErrorBoundary2.getDerivedStateFromError = function() {
      return { hasError: true };
    };
    ErrorBoundary2.prototype.componentDidCatch = function(error2, information) {
      console.error(error2, information);
    };
    ErrorBoundary2.prototype.render = function() {
      if (this.state.hasError) {
        return this.props.fallback;
      }
      return this.props.children;
    };
    return ErrorBoundary2;
  }(import_react103.Component)
);

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var defaultAllowedTagNames = [
  "html",
  "text",
  "br",
  "p",
  "em",
  "strong",
  "a",
  "ol",
  "ul",
  "li",
  "code",
  "pre",
  "blockquote",
  "del",
  // custom types (tagNames)
  "emoji",
  "mention"
];
function formatUrlForDisplay(url) {
  try {
    return decodeURIComponent(url).replace(detectHttp, "");
  } catch (e) {
    return url;
  }
}
function encodeDecode(url) {
  try {
    return encodeURI(decodeURIComponent(url));
  } catch (error2) {
    return url;
  }
}
var urlTransform = function(uri) {
  return uri.startsWith("app://") ? uri : uriTransformer(uri);
};
var getPluginsForward = function(plugins) {
  return plugins;
};
var markDownRenderers = {
  a: Anchor,
  emoji: Emoji,
  mention: Mention
};
var renderText = function(text5, mentionedUsers, _a) {
  var _b = _a === void 0 ? {} : _a, _c = _b.allowedTagNames, allowedTagNames = _c === void 0 ? defaultAllowedTagNames : _c, customMarkDownRenderers = _b.customMarkDownRenderers, _d = _b.getRehypePlugins, getRehypePlugins = _d === void 0 ? getPluginsForward : _d, _e = _b.getRemarkPlugins, getRemarkPlugins = _e === void 0 ? getPluginsForward : _e;
  if (!text5)
    return null;
  if (text5.trim().length === 1)
    return import_react104.default.createElement(import_react104.default.Fragment, null, text5);
  var newText = text5;
  var markdownLinks = matchMarkdownLinks(newText);
  var codeBlocks = messageCodeBlocks(newText);
  (0, import_lodash3.default)(__spreadArray(__spreadArray([], find(newText, "email"), true), find(newText, "url"), true), "value").forEach(function(_a2) {
    var href = _a2.href, type = _a2.type, value = _a2.value;
    var linkIsInBlock = codeBlocks.some(function(block) {
      return block === null || block === void 0 ? void 0 : block.includes(value);
    });
    var noParsingNeeded = markdownLinks && markdownLinks.filter(function(text6) {
      var strippedHref = href === null || href === void 0 ? void 0 : href.replace(detectHttp, "");
      var strippedText = text6 === null || text6 === void 0 ? void 0 : text6.replace(detectHttp, "");
      if (!strippedHref || !strippedText)
        return false;
      return strippedHref.includes(strippedText) || strippedText.includes(strippedHref);
    });
    if (noParsingNeeded.length > 0 || linkIsInBlock)
      return;
    try {
      if (type === "email" && mentionedUsers) {
        var emailMatchesWithName = mentionedUsers.some(function(u2) {
          return u2.name === value;
        });
        if (emailMatchesWithName) {
          newText = newText.replace(new RegExp(escapeRegExp(value), "g"), function(match, position3) {
            var isMention = newText.charAt(position3 - 1) === "@";
            return isMention ? match : "[".concat(match, "](").concat(encodeDecode(href), ")");
          });
          return;
        }
      }
      var displayLink = type === "email" ? value : formatUrlForDisplay(href);
      newText = newText.replace(new RegExp(escapeRegExp(value), "g"), "[".concat(displayLink, "](").concat(encodeDecode(href), ")"));
    } catch (e) {
    }
  });
  var remarkPlugins = [
    htmlToTextPlugin,
    keepLineBreaksPlugin,
    [remarkGfm, { singleTilde: false }]
  ];
  var rehypePlugins = [emojiMarkdownPlugin];
  if (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) {
    rehypePlugins.push(mentionsMarkdownPlugin(mentionedUsers));
  }
  return import_react104.default.createElement(
    ErrorBoundary,
    { fallback: import_react104.default.createElement(import_react104.default.Fragment, null, text5) },
    import_react104.default.createElement(ReactMarkdown, { allowedElements: allowedTagNames, components: __assign(__assign({}, markDownRenderers), customMarkDownRenderers), rehypePlugins: getRehypePlugins(rehypePlugins), remarkPlugins: getRemarkPlugins(remarkPlugins), skipHtml: true, transformLinkUri: urlTransform, unwrapDisallowed: true }, newText)
  );
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/List.js
var List = function(_a) {
  var className = _a.className, component = _a.component, currentTrigger = _a.currentTrigger, dropdownScroll = _a.dropdownScroll, getSelectedItem = _a.getSelectedItem, getTextToReplace = _a.getTextToReplace, PropHeader = _a.Header, itemClassName = _a.itemClassName, itemStyle = _a.itemStyle, onSelect = _a.onSelect, selectionEnd = _a.selectionEnd, style = _a.style, PropSuggestionItem = _a.SuggestionItem, propValue = _a.value, values2 = _a.values;
  var _b = useComponentContext("SuggestionList"), AutocompleteSuggestionHeader = _b.AutocompleteSuggestionHeader, AutocompleteSuggestionItem = _b.AutocompleteSuggestionItem;
  var themeVersion = useChatContext("SuggestionList").themeVersion;
  var SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item;
  var SuggestionHeader = PropHeader || AutocompleteSuggestionHeader || DefaultSuggestionListHeader;
  var _c = (0, import_react105.useState)(void 0), selectedItemIndex = _c[0], setSelectedItemIndex = _c[1];
  var itemsRef = [];
  var isSelected = function(item) {
    return selectedItemIndex === values2.findIndex(function(value) {
      return getId(value) === getId(item);
    });
  };
  var getId = function(item) {
    var textToReplace = getTextToReplace(item);
    if (textToReplace.key) {
      return textToReplace.key;
    }
    if (typeof item === "string" || !item.key) {
      return textToReplace.text;
    }
    return item.key;
  };
  var findItemIndex = (0, import_react105.useCallback)(function(item) {
    return values2.findIndex(function(value) {
      return value.id ? value.id === item.id : value.name === item.name;
    });
  }, [values2]);
  var modifyText = function(value) {
    if (!value)
      return;
    onSelect(getTextToReplace(value));
    if (getSelectedItem)
      getSelectedItem(value);
  };
  var handleClick = (0, import_react105.useCallback)(function(e, item) {
    e === null || e === void 0 ? void 0 : e.preventDefault();
    var index4 = findItemIndex(item);
    modifyText(values2[index4]);
  }, [modifyText, findItemIndex]);
  var selectItem = (0, import_react105.useCallback)(function(item) {
    var index4 = findItemIndex(item);
    setSelectedItemIndex(index4);
  }, [findItemIndex]);
  var handleKeyDown = (0, import_react105.useCallback)(function(event) {
    if (event.key === "ArrowUp") {
      setSelectedItemIndex(function(prevSelected) {
        if (prevSelected === void 0)
          return 0;
        var newIndex = prevSelected === 0 ? values2.length - 1 : prevSelected - 1;
        dropdownScroll(itemsRef[newIndex]);
        return newIndex;
      });
    }
    if (event.key === "ArrowDown") {
      setSelectedItemIndex(function(prevSelected) {
        if (prevSelected === void 0)
          return 0;
        var newIndex = prevSelected === values2.length - 1 ? 0 : prevSelected + 1;
        dropdownScroll(itemsRef[newIndex]);
        return newIndex;
      });
    }
    if ((event.key === "Enter" || event.key === "Tab") && selectedItemIndex !== void 0) {
      handleClick(event, values2[selectedItemIndex]);
    }
    return null;
  }, [selectedItemIndex, values2]);
  (0, import_react105.useEffect)(function() {
    document.addEventListener("keydown", handleKeyDown, false);
    return function() {
      return document.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleKeyDown]);
  (0, import_react105.useEffect)(function() {
    if (values2 === null || values2 === void 0 ? void 0 : values2.length)
      selectItem(values2[0]);
  }, [values2]);
  var restructureItem = (0, import_react105.useCallback)(function(item) {
    var matched = item.name || item.id;
    var textBeforeCursor = propValue.slice(0, selectionEnd);
    var triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);
    var editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));
    var parts = matched.split(new RegExp("(".concat(editedPropValue, ")"), "gi"));
    var itemNameParts = { match: editedPropValue, parts };
    return __assign(__assign({}, item), { itemNameParts });
  }, [propValue, selectionEnd, currentTrigger]);
  var restructuredValues = (0, import_react105.useMemo)(function() {
    return values2.map(restructureItem);
  }, [values2, restructureItem]);
  return import_react105.default.createElement(
    "ul",
    { className: clsx_default("rta__list", className), style },
    themeVersion === "1" && import_react105.default.createElement(
      "li",
      { className: "rta__list-header" },
      import_react105.default.createElement(SuggestionHeader, { currentTrigger, value: propValue })
    ),
    restructuredValues.map(function(item, i) {
      return import_react105.default.createElement(SuggestionItem, { className: itemClassName, component, item, key: getId(item), onClickHandler: handleClick, onSelectHandler: selectItem, ref: function(ref) {
        itemsRef[i] = ref;
      }, selected: isSelected(item), style: itemStyle, value: propValue });
    })
  );
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Textarea.js
var import_react112 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js
var React65 = __toESM(require_react());

// node_modules/use-latest/dist/use-latest.esm.js
var import_react107 = __toESM(require_react());

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react106 = __toESM(require_react());
var index2 = import_react106.useLayoutEffect;

// node_modules/use-latest/dist/use-latest.esm.js
var useLatest = function useLatest2(value) {
  var ref = import_react107.default.useRef(value);
  index2(function() {
    ref.current = value;
  });
  return ref;
};

// node_modules/use-composed-ref/dist/use-composed-ref.esm.js
var import_react108 = __toESM(require_react());
var updateRef = function updateRef2(ref, value) {
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  ref.current = value;
};
var useComposedRef = function useComposedRef2(libRef, userRef) {
  var prevUserRef = import_react108.default.useRef();
  return import_react108.default.useCallback(function(instance2) {
    libRef.current = instance2;
    if (prevUserRef.current) {
      updateRef(prevUserRef.current, null);
    }
    prevUserRef.current = userRef;
    if (!userRef) {
      return;
    }
    updateRef(userRef, instance2);
  }, [userRef]);
};

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js
var HIDDEN_TEXTAREA_STYLE = {
  "min-height": "0",
  "max-height": "none",
  height: "0",
  visibility: "hidden",
  overflow: "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0",
  display: "block"
};
var forceHiddenStyles = function forceHiddenStyles2(node2) {
  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function(key) {
    node2.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], "important");
  });
};
var forceHiddenStyles$1 = forceHiddenStyles;
var hiddenTextarea = null;
var getHeight = function getHeight2(node2, sizingData) {
  var height = node2.scrollHeight;
  if (sizingData.sizingStyle.boxSizing === "border-box") {
    return height + sizingData.borderSize;
  }
  return height - sizingData.paddingSize;
};
function calculateNodeHeight(sizingData, value, minRows, maxRows) {
  if (minRows === void 0) {
    minRows = 1;
  }
  if (maxRows === void 0) {
    maxRows = Infinity;
  }
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    hiddenTextarea.setAttribute("tabindex", "-1");
    hiddenTextarea.setAttribute("aria-hidden", "true");
    forceHiddenStyles$1(hiddenTextarea);
  }
  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }
  var paddingSize = sizingData.paddingSize, borderSize = sizingData.borderSize, sizingStyle = sizingData.sizingStyle;
  var boxSizing = sizingStyle.boxSizing;
  Object.keys(sizingStyle).forEach(function(_key) {
    var key = _key;
    hiddenTextarea.style[key] = sizingStyle[key];
  });
  forceHiddenStyles$1(hiddenTextarea);
  hiddenTextarea.value = value;
  var height = getHeight(hiddenTextarea, sizingData);
  hiddenTextarea.value = value;
  height = getHeight(hiddenTextarea, sizingData);
  hiddenTextarea.value = "x";
  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  var minHeight = rowHeight * minRows;
  if (boxSizing === "border-box") {
    minHeight = minHeight + paddingSize + borderSize;
  }
  height = Math.max(minHeight, height);
  var maxHeight = rowHeight * maxRows;
  if (boxSizing === "border-box") {
    maxHeight = maxHeight + paddingSize + borderSize;
  }
  height = Math.min(maxHeight, height);
  return [height, rowHeight];
}
var noop4 = function noop5() {
};
var pick = function pick2(props, obj) {
  return props.reduce(function(acc, prop) {
    acc[prop] = obj[prop];
    return acc;
  }, {});
};
var SIZING_STYLE = [
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth",
  "boxSizing",
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "paddingBottom",
  "paddingLeft",
  "paddingRight",
  "paddingTop",
  // non-standard
  "tabSize",
  "textIndent",
  // non-standard
  "textRendering",
  "textTransform",
  "width",
  "wordBreak",
  "wordSpacing",
  "scrollbarGutter"
];
var isIE = !!document.documentElement.currentStyle;
var getSizingData = function getSizingData2(node2) {
  var style = window.getComputedStyle(node2);
  if (style === null) {
    return null;
  }
  var sizingStyle = pick(SIZING_STYLE, style);
  var boxSizing = sizingStyle.boxSizing;
  if (boxSizing === "") {
    return null;
  }
  if (isIE && boxSizing === "border-box") {
    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + "px";
  }
  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
};
var getSizingData$1 = getSizingData;
function useListener(target, type, listener) {
  var latestListener = useLatest(listener);
  React65.useLayoutEffect(function() {
    var handler = function handler2(ev) {
      return latestListener.current(ev);
    };
    if (!target) {
      return;
    }
    target.addEventListener(type, handler);
    return function() {
      return target.removeEventListener(type, handler);
    };
  }, []);
}
var useFormResetListener = function useFormResetListener2(libRef, listener) {
  useListener(document.body, "reset", function(ev) {
    if (libRef.current.form === ev.target) {
      listener(ev);
    }
  });
};
var useWindowResizeListener = function useWindowResizeListener2(listener) {
  useListener(window, "resize", listener);
};
var useFontsLoadedListener = function useFontsLoadedListener2(listener) {
  useListener(document.fonts, "loadingdone", listener);
};
var _excluded5 = ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"];
var TextareaAutosize = function TextareaAutosize2(_ref, userRef) {
  var cacheMeasurements = _ref.cacheMeasurements, maxRows = _ref.maxRows, minRows = _ref.minRows, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? noop4 : _ref$onChange, _ref$onHeightChange = _ref.onHeightChange, onHeightChange = _ref$onHeightChange === void 0 ? noop4 : _ref$onHeightChange, props = _objectWithoutPropertiesLoose(_ref, _excluded5);
  if (props.style) {
    if ("maxHeight" in props.style) {
      throw new Error("Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.");
    }
    if ("minHeight" in props.style) {
      throw new Error("Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.");
    }
  }
  var isControlled = props.value !== void 0;
  var libRef = React65.useRef(null);
  var ref = useComposedRef(libRef, userRef);
  var heightRef = React65.useRef(0);
  var measurementsCacheRef = React65.useRef();
  var resizeTextarea = function resizeTextarea2() {
    var node2 = libRef.current;
    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData$1(node2);
    if (!nodeSizingData) {
      return;
    }
    measurementsCacheRef.current = nodeSizingData;
    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node2.value || node2.placeholder || "x", minRows, maxRows), height = _calculateNodeHeight[0], rowHeight = _calculateNodeHeight[1];
    if (heightRef.current !== height) {
      heightRef.current = height;
      node2.style.setProperty("height", height + "px", "important");
      onHeightChange(height, {
        rowHeight
      });
    }
  };
  var handleChange = function handleChange2(event) {
    if (!isControlled) {
      resizeTextarea();
    }
    onChange(event);
  };
  {
    React65.useLayoutEffect(resizeTextarea);
    useFormResetListener(libRef, function() {
      if (!isControlled) {
        var currentValue = libRef.current.value;
        requestAnimationFrame(function() {
          var node2 = libRef.current;
          if (node2 && currentValue !== node2.value) {
            resizeTextarea();
          }
        });
      }
    });
    useWindowResizeListener(resizeTextarea);
    useFontsLoadedListener(resizeTextarea);
    return React65.createElement("textarea", _extends({}, props, {
      onChange: handleChange,
      ref
    }));
  }
};
var index3 = React65.forwardRef(TextareaAutosize);

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Textarea.js
var import_textarea_caret = __toESM(require_textarea_caret());
var import_react_is3 = __toESM(require_react_is());

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/utils.js
var import_react_is2 = __toESM(require_react_is());
var DEFAULT_CARET_POSITION = "next";
function defaultScrollToItem(container, item) {
  if (!item)
    return;
  var itemHeight = parseInt(getComputedStyle(item).getPropertyValue("height"), 10);
  var containerHight = parseInt(getComputedStyle(container).getPropertyValue("height"), 10) - itemHeight;
  var actualScrollTop = container.scrollTop;
  var itemOffsetTop = item.offsetTop;
  if (itemOffsetTop < actualScrollTop + containerHight && actualScrollTop < itemOffsetTop) {
    return;
  }
  container.scrollTop = itemOffsetTop;
}
var errorMessage = function(message) {
  return console.error("RTA: dataProvider fails: ".concat(message, "\n    \nCheck the documentation or create issue if you think it's bug. https://github.com/webscopeio/react-textarea-autocomplete/issues"));
};
var triggerPropsCheck = function(_a) {
  var trigger = _a.trigger;
  if (!trigger)
    return Error("Invalid prop trigger. Prop missing.");
  var triggers = Object.entries(trigger);
  for (var i = 0; i < triggers.length; i += 1) {
    var _b = triggers[i], triggerChar = _b[0], settings = _b[1];
    if (typeof triggerChar !== "string" || triggerChar.length !== 1) {
      return Error("Invalid prop trigger. Keys of the object has to be string / one character.");
    }
    var triggerSetting = settings;
    var callback = triggerSetting.callback, component = triggerSetting.component, dataProvider = triggerSetting.dataProvider, output2 = triggerSetting.output;
    if (!(0, import_react_is2.isValidElementType)(component)) {
      return Error("Invalid prop trigger: component should be defined.");
    }
    if (!dataProvider || typeof dataProvider !== "function") {
      return Error("Invalid prop trigger: dataProvider should be defined.");
    }
    if (output2 && typeof output2 !== "function") {
      return Error("Invalid prop trigger: output should be a function.");
    }
    if (callback && typeof callback !== "function") {
      return Error("Invalid prop trigger: callback should be a function.");
    }
  }
  return null;
};

// node_modules/stream-chat-react/dist/components/CommandItem/CommandItem.js
var import_react109 = __toESM(require_react());
var UnMemoizedCommandItem = function(props) {
  var entity = props.entity;
  return import_react109.default.createElement(
    "div",
    { className: "str-chat__slash-command" },
    import_react109.default.createElement(
      "span",
      { className: "str-chat__slash-command-header" },
      import_react109.default.createElement("strong", null, entity.name),
      " ",
      entity.args
    ),
    import_react109.default.createElement("br", null),
    import_react109.default.createElement("span", { className: "str-chat__slash-command-description" }, entity.description)
  );
};
var CommandItem = import_react109.default.memo(UnMemoizedCommandItem);

// node_modules/stream-chat-react/dist/components/UserItem/UserItem.js
var import_react111 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Avatar/Avatar.js
var import_react110 = __toESM(require_react());

// node_modules/stream-chat-react/dist/utils/getWholeChar.js
var getWholeChar = function(str, i) {
  var code3 = str.charCodeAt(i);
  if (Number.isNaN(code3))
    return "";
  if (code3 < 55296 || code3 > 57343)
    return str.charAt(i);
  if (55296 <= code3 && code3 <= 56319) {
    if (str.length <= i + 1) {
      throw "High surrogate without following low surrogate";
    }
    var next = str.charCodeAt(i + 1);
    if (56320 > next || next > 57343) {
      throw "High surrogate without following low surrogate";
    }
    return str.charAt(i) + str.charAt(i + 1);
  }
  if (i === 0) {
    throw "Low surrogate without preceding high surrogate";
  }
  var prev = str.charCodeAt(i - 1);
  if (55296 > prev || prev > 56319) {
    throw "Low surrogate without preceding high surrogate";
  }
  return "";
};

// node_modules/stream-chat-react/dist/components/Avatar/Avatar.js
var Avatar = function(props) {
  var image2 = props.image, name = props.name, _a = props.onClick, onClick = _a === void 0 ? function() {
    return void 0;
  } : _a, _b = props.onMouseOver, onMouseOver = _b === void 0 ? function() {
    return void 0;
  } : _b, _c = props.shape, shape = _c === void 0 ? "circle" : _c, _d = props.size, size = _d === void 0 ? 32 : _d;
  var _e = (0, import_react110.useState)(false), error2 = _e[0], setError = _e[1];
  var _f = (0, import_react110.useState)(false), loaded = _f[0], setLoaded = _f[1];
  (0, import_react110.useEffect)(function() {
    setError(false);
    setLoaded(false);
  }, [image2]);
  var nameStr = (name === null || name === void 0 ? void 0 : name.toString()) || "";
  var initials = getWholeChar(nameStr, 0);
  return import_react110.default.createElement("div", { className: "str-chat__avatar str-chat__avatar--".concat(shape, " str-chat__message-sender-avatar"), "data-testid": "avatar", onClick, onMouseOver, style: {
    flexBasis: "".concat(size, "px"),
    fontSize: "".concat(size / 2, "px"),
    height: "".concat(size, "px"),
    lineHeight: "".concat(size, "px"),
    width: "".concat(size, "px")
  }, title: name }, image2 && !error2 ? import_react110.default.createElement("img", { alt: initials, className: "str-chat__avatar-image".concat(loaded ? " str-chat__avatar-image--loaded" : ""), "data-testid": "avatar-img", onError: function() {
    return setError(true);
  }, onLoad: function() {
    return setLoaded(true);
  }, src: image2, style: {
    flexBasis: "".concat(size, "px"),
    height: "".concat(size, "px"),
    objectFit: "cover",
    width: "".concat(size, "px")
  } }) : import_react110.default.createElement("div", { className: "str-chat__avatar-fallback", "data-testid": "avatar-fallback" }, initials));
};

// node_modules/stream-chat-react/dist/components/UserItem/UserItem.js
var UnMemoizedUserItem = function(_a) {
  var _b = _a.Avatar, Avatar2 = _b === void 0 ? Avatar : _b, entity = _a.entity;
  var themeVersion = useChatContext("UserItem").themeVersion;
  var hasEntity = !!Object.keys(entity).length;
  var itemParts = entity === null || entity === void 0 ? void 0 : entity.itemNameParts;
  var renderName = function() {
    if (!hasEntity)
      return null;
    return itemParts.parts.map(function(part, i) {
      var matches = part.toLowerCase() === itemParts.match.toLowerCase();
      return import_react111.default.createElement("span", { className: clsx_default({
        "str-chat__emoji-item--highlight": matches,
        "str-chat__emoji-item--part": !matches
      }), key: "part-".concat(i) }, part);
    });
  };
  return import_react111.default.createElement(
    "div",
    { className: "str-chat__user-item" },
    import_react111.default.createElement(Avatar2, { image: entity.image, name: entity.name || entity.id, size: 20 }),
    import_react111.default.createElement("span", { className: "str-chat__user-item--name", "data-testid": "user-item-name" }, renderName()),
    themeVersion === "2" && import_react111.default.createElement("div", { className: "str-chat__user-item-at" }, "@")
  );
};
var UserItem = import_react111.default.memo(UnMemoizedUserItem);

// node_modules/stream-chat-react/dist/utils/browsers.js
var isSafari = function() {
  if (typeof navigator === "undefined")
    return false;
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || "");
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Textarea.js
var ReactTextareaAutocomplete = (
  /** @class */
  function(_super) {
    __extends(ReactTextareaAutocomplete2, _super);
    function ReactTextareaAutocomplete2(props) {
      var _this = _super.call(this, props) || this;
      _this.getSelectionPosition = function() {
        if (!_this.textareaRef)
          return null;
        return {
          selectionEnd: _this.textareaRef.selectionEnd,
          selectionStart: _this.textareaRef.selectionStart
        };
      };
      _this.getSelectedText = function() {
        if (!_this.textareaRef)
          return null;
        var _a2 = _this.textareaRef, selectionEnd = _a2.selectionEnd, selectionStart = _a2.selectionStart;
        if (selectionStart === selectionEnd)
          return null;
        return _this.state.value.substr(selectionStart, selectionEnd - selectionStart);
      };
      _this.setCaretPosition = function(position3) {
        if (position3 === void 0) {
          position3 = 0;
        }
        if (!_this.textareaRef)
          return;
        _this.textareaRef.focus();
        _this.textareaRef.setSelectionRange(position3, position3);
      };
      _this.getCaretPosition = function() {
        if (!_this.textareaRef)
          return 0;
        return _this.textareaRef.selectionEnd;
      };
      _this._defaultShouldSubmit = function(event) {
        return event.key === "Enter" && !event.shiftKey && !event.nativeEvent.isComposing;
      };
      _this._handleKeyDown = function(event) {
        var _a2 = _this.props.shouldSubmit, shouldSubmit = _a2 === void 0 ? _this._defaultShouldSubmit : _a2;
        if ((event.key === "ArrowUp" || event.key === "ArrowDown") && _this.dropdownRef)
          event.preventDefault();
        if (shouldSubmit === null || shouldSubmit === void 0 ? void 0 : shouldSubmit(event))
          return _this._onEnter(event);
        if (event.key === " ")
          return _this._onSpace(event);
        if (event.key === "Escape")
          return _this._closeAutocomplete();
      };
      _this._onEnter = function(event) {
        return __awaiter(_this, void 0, void 0, function() {
          var trigger2;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (!this.textareaRef)
                  return [
                    2
                    /*return*/
                  ];
                trigger2 = this.state.currentTrigger;
                if (!(!trigger2 || !this.state.data)) return [3, 2];
                event.persist();
                return [4, this._replaceWord()];
              case 1:
                _a2.sent();
                if (this.textareaRef) {
                  this.textareaRef.selectionEnd = 0;
                }
                this.props.handleSubmit(event);
                this._closeAutocomplete();
                _a2.label = 2;
              case 2:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      _this._onSpace = function() {
        if (!_this.props.replaceWord || !_this.textareaRef)
          return;
        var hasFocus = _this.textareaRef.matches(":focus");
        if (!hasFocus)
          return;
        _this._replaceWord();
      };
      _this._replaceWord = function() {
        return __awaiter(_this, void 0, void 0, function() {
          var value2, lastWordRegex, match, lastWord, spaces, newWord, textBeforeWord, textAfterCaret, newText;
          var _this2 = this;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                value2 = this.state.value;
                lastWordRegex = /([^\s]+)(\s*)$/;
                match = lastWordRegex.exec(value2.slice(0, this.getCaretPosition()));
                lastWord = match && match[1];
                if (!lastWord)
                  return [
                    2
                    /*return*/
                  ];
                spaces = match[2];
                return [4, this.props.replaceWord(lastWord)];
              case 1:
                newWord = _a2.sent();
                if (newWord == null)
                  return [
                    2
                    /*return*/
                  ];
                textBeforeWord = value2.slice(0, this.getCaretPosition() - match[0].length);
                textAfterCaret = value2.slice(this.getCaretPosition(), -1);
                newText = textBeforeWord + newWord + spaces + textAfterCaret;
                this.setState({
                  value: newText
                }, function() {
                  var e = new CustomEvent("change", { bubbles: true });
                  _this2.textareaRef.dispatchEvent(e);
                  if (_this2.props.onChange)
                    _this2.props.onChange(e);
                });
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      _this._onSelect = function(newToken) {
        var _a2 = _this.props, closeCommandsList = _a2.closeCommandsList, closeMentionsList = _a2.closeMentionsList, onChange = _a2.onChange, showCommandsList = _a2.showCommandsList, showMentionsList = _a2.showMentionsList;
        var _b = _this.state, stateTrigger = _b.currentTrigger, selectionEnd = _b.selectionEnd, textareaValue = _b.value;
        var currentTrigger = showCommandsList ? "/" : showMentionsList ? "@" : stateTrigger;
        if (!currentTrigger)
          return;
        var computeCaretPosition = function(position3, token, startToken) {
          switch (position3) {
            case "start":
              return startToken;
            case "next":
            case "end":
              return startToken + token.length;
            default:
              if (!Number.isInteger(position3)) {
                throw new Error('RTA: caretPosition should be "start", "next", "end" or number.');
              }
              return position3;
          }
        };
        var textToModify = showCommandsList ? "/" : showMentionsList ? "@" : textareaValue.slice(0, selectionEnd);
        var startOfTokenPosition = textToModify.lastIndexOf(currentTrigger);
        var newTokenString = newToken.caretPosition === "next" ? "".concat(newToken.text, " ") : newToken.text;
        var newCaretPosition = computeCaretPosition(newToken.caretPosition, newTokenString, startOfTokenPosition);
        var modifiedText = textToModify.substring(0, startOfTokenPosition) + newTokenString;
        var valueToReplace = textareaValue.replace(textToModify, modifiedText);
        _this.setState({
          dataLoading: false,
          value: valueToReplace
        }, function() {
          var e = new CustomEvent("change", { bubbles: true });
          _this.textareaRef.dispatchEvent(e);
          if (onChange)
            onChange(e);
          _this.setCaretPosition(newCaretPosition);
        });
        _this._closeAutocomplete();
        if (showCommandsList)
          closeCommandsList();
        if (showMentionsList)
          closeMentionsList();
      };
      _this._getItemOnSelect = function(paramTrigger) {
        var stateTrigger = _this.state.currentTrigger;
        var triggerSettings = _this._getCurrentTriggerSettings(paramTrigger);
        var currentTrigger = paramTrigger || stateTrigger;
        if (!currentTrigger || !triggerSettings)
          return null;
        var callback = triggerSettings.callback;
        if (!callback)
          return null;
        return function(item) {
          if (typeof callback !== "function") {
            throw new Error('Output functor is not defined! You have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
          }
          if (callback) {
            return callback(item, currentTrigger);
          }
          return null;
        };
      };
      _this._getTextToReplace = function(paramTrigger) {
        var _a2 = _this.state, actualToken = _a2.actualToken, stateTrigger = _a2.currentTrigger;
        var triggerSettings = _this._getCurrentTriggerSettings(paramTrigger);
        var currentTrigger = paramTrigger || stateTrigger;
        if (!currentTrigger || !triggerSettings)
          return null;
        var output2 = triggerSettings.output;
        return function(item) {
          if (typeof item === "object" && (!output2 || typeof output2 !== "function")) {
            throw new Error('Output functor is not defined! If you are using items as object you have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
          }
          if (output2) {
            var textToReplace = output2(item, currentTrigger);
            if (!textToReplace || typeof textToReplace === "number") {
              throw new Error('Output functor should return string or object in shape {text: string, caretPosition: string | number}.\nGot "'.concat(String(textToReplace), '". Check the implementation for trigger "').concat(currentTrigger, '" and its token "').concat(actualToken, '"\n\nSee https://github.com/webscopeio/react-textarea-autocomplete#trigger-type for more informations.\n'));
            }
            if (typeof textToReplace === "string") {
              return {
                caretPosition: DEFAULT_CARET_POSITION,
                text: textToReplace
              };
            }
            if (!textToReplace.text && currentTrigger !== ":") {
              throw new Error('Output "text" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger "'.concat(currentTrigger, '" and its token "').concat(actualToken, '"\n'));
            }
            if (!textToReplace.caretPosition) {
              throw new Error('Output "caretPosition" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger "'.concat(currentTrigger, '" and its token "').concat(actualToken, '"\n'));
            }
            return textToReplace;
          }
          if (typeof item !== "string") {
            throw new Error("Output item should be string\n");
          }
          return {
            caretPosition: DEFAULT_CARET_POSITION,
            text: "".concat(currentTrigger).concat(item).concat(currentTrigger)
          };
        };
      };
      _this._getCurrentTriggerSettings = function(paramTrigger) {
        var stateTrigger = _this.state.currentTrigger;
        var currentTrigger = paramTrigger || stateTrigger;
        if (!currentTrigger)
          return null;
        return _this.props.trigger[currentTrigger];
      };
      _this._getValuesFromProvider = function() {
        var _a2 = _this.state, actualToken = _a2.actualToken, currentTrigger = _a2.currentTrigger;
        var triggerSettings = _this._getCurrentTriggerSettings();
        if (!currentTrigger || !triggerSettings)
          return;
        var component = triggerSettings.component, dataProvider = triggerSettings.dataProvider;
        if (typeof dataProvider !== "function") {
          throw new Error("Trigger provider has to be a function!");
        }
        _this.setState({ dataLoading: true });
        dataProvider(actualToken, _this.state.value, function(data, token) {
          if (token !== _this.state.actualToken)
            return;
          if (!Array.isArray(data)) {
            throw new Error("Trigger provider has to provide an array!");
          }
          if (!(0, import_react_is3.isValidElementType)(component)) {
            throw new Error("Component should be defined!");
          }
          if (currentTrigger !== _this.state.currentTrigger)
            return;
          if (!data.length) {
            _this._closeAutocomplete();
            return;
          }
          _this.setState({
            component,
            data,
            dataLoading: false
          });
        });
      };
      _this._getSuggestions = function(paramTrigger) {
        var _a2 = _this.state, stateTrigger = _a2.currentTrigger, data = _a2.data;
        var currentTrigger = paramTrigger || stateTrigger;
        if (!currentTrigger || !data || data && !data.length)
          return null;
        return data;
      };
      _this._closeAutocomplete = function() {
        _this.setState({
          currentTrigger: null,
          data: null,
          dataLoading: false,
          left: null,
          top: null
        });
      };
      _this._cleanUpProps = function() {
        var props2 = __assign({}, _this.props);
        var notSafe = [
          "additionalTextareaProps",
          "className",
          "closeCommandsList",
          "closeMentionsList",
          "closeOnClickOutside",
          "containerClassName",
          "containerStyle",
          "disableMentions",
          "dropdownClassName",
          "dropdownStyle",
          "grow",
          "handleSubmit",
          "innerRef",
          "itemClassName",
          "itemStyle",
          "listClassName",
          "listStyle",
          "loaderClassName",
          "loaderStyle",
          "loadingComponent",
          "minChar",
          "movePopupAsYouType",
          "onCaretPositionChange",
          "onChange",
          "ref",
          "replaceWord",
          "scrollToItem",
          "shouldSubmit",
          "showCommandsList",
          "showMentionsList",
          "SuggestionItem",
          "SuggestionList",
          "trigger",
          "value"
        ];
        for (var prop in props2) {
          if (notSafe.includes(prop))
            delete props2[prop];
        }
        return props2;
      };
      _this._isCommand = function(text5) {
        if (text5[0] !== "/")
          return false;
        var tokens = text5.split(" ");
        return tokens.length <= 1;
      };
      _this._changeHandler = function(e) {
        var _a2 = _this.props, minChar = _a2.minChar, movePopupAsYouType = _a2.movePopupAsYouType, onCaretPositionChange = _a2.onCaretPositionChange, onChange = _a2.onChange, trigger2 = _a2.trigger;
        var _b = _this.state, left2 = _b.left, top2 = _b.top;
        var textarea = e.target;
        var selectionEnd = textarea.selectionEnd, selectionStart = textarea.selectionStart, value2 = textarea.value;
        if (onChange) {
          e.persist();
          onChange(e);
        }
        if (onCaretPositionChange)
          onCaretPositionChange(_this.getCaretPosition());
        _this.setState({ value: value2 });
        var currentTrigger;
        var lastToken;
        if (_this._isCommand(value2)) {
          currentTrigger = "/";
          lastToken = value2;
        } else {
          var triggerTokens = Object.keys(trigger2).join().replace("/", "");
          var triggerNorWhitespace = "[^\\s".concat(triggerTokens, "]*");
          var regex = new RegExp("(?!^|\\W)?[".concat(triggerTokens, "]").concat(triggerNorWhitespace, "\\s?").concat(triggerNorWhitespace, "$"), "g");
          var tokenMatch = value2.slice(0, selectionEnd).match(regex);
          lastToken = tokenMatch && tokenMatch[tokenMatch.length - 1].trim();
          currentTrigger = lastToken && Object.keys(trigger2).find(function(a) {
            return a === lastToken[0];
          }) || null;
        }
        if (!lastToken || lastToken.length <= minChar) {
          _this._closeAutocomplete();
          return;
        }
        var actualToken = lastToken.slice(1);
        if (!currentTrigger)
          return;
        if (movePopupAsYouType || top2 === null && left2 === null || // if we have single char - trigger it means we want to re-position the autocomplete
        lastToken.length === 1) {
          var _c = (0, import_textarea_caret.default)(textarea, selectionEnd), newLeft = _c.left, newTop = _c.top;
          _this.setState({
            // make position relative to textarea
            left: newLeft,
            top: newTop - _this.textareaRef.scrollTop || 0
          });
        }
        _this.setState({
          actualToken,
          currentTrigger,
          selectionEnd,
          selectionStart
        }, function() {
          try {
            _this._getValuesFromProvider();
          } catch (err) {
            errorMessage(err.message);
          }
        });
      };
      _this._selectHandler = function(e) {
        var _a2 = _this.props, onCaretPositionChange = _a2.onCaretPositionChange, onSelect = _a2.onSelect;
        if (onCaretPositionChange)
          onCaretPositionChange(_this.getCaretPosition());
        if (onSelect) {
          e.persist();
          onSelect(e);
        }
      };
      _this._onClickAndBlurHandler = function(e) {
        var _a2 = _this.props, closeOnClickOutside = _a2.closeOnClickOutside, onBlur = _a2.onBlur;
        var el = e.relatedTarget;
        var focusedAwayInSafari = isSafari() && e.type === "blur";
        if (_this.dropdownRef && el instanceof Node && _this.dropdownRef.contains(el) || focusedAwayInSafari) {
          return;
        }
        if (closeOnClickOutside)
          _this._closeAutocomplete();
        if (onBlur) {
          e.persist();
          onBlur(e);
        }
      };
      _this._onScrollHandler = function() {
        return _this._closeAutocomplete();
      };
      _this._dropdownScroll = function(item) {
        var scrollToItem = _this.props.scrollToItem;
        if (!scrollToItem)
          return;
        if (scrollToItem === true) {
          defaultScrollToItem(_this.dropdownRef, item);
          return;
        }
        if (typeof scrollToItem !== "function" || scrollToItem.length !== 2) {
          throw new Error("`scrollToItem` has to be boolean (true for default implementation) or function with two parameters: container, item.");
        }
        scrollToItem(_this.dropdownRef, item);
      };
      _this.getTriggerProps = function() {
        var _a2 = _this.props, showCommandsList = _a2.showCommandsList, showMentionsList = _a2.showMentionsList, trigger2 = _a2.trigger;
        var _b = _this.state, component = _b.component, currentTrigger = _b.currentTrigger, selectionEnd = _b.selectionEnd, value2 = _b.value;
        var selectedItem = _this._getItemOnSelect();
        var suggestionData = _this._getSuggestions();
        var textToReplace = _this._getTextToReplace();
        var triggerProps = {
          component,
          currentTrigger,
          getSelectedItem: selectedItem,
          getTextToReplace: textToReplace,
          selectionEnd,
          value: value2,
          values: suggestionData
        };
        if (showCommandsList && trigger2["/"] || showMentionsList && trigger2["@"]) {
          var currentCommands_1;
          var getCommands = trigger2[showCommandsList ? "/" : "@"].dataProvider;
          getCommands === null || getCommands === void 0 ? void 0 : getCommands("", showCommandsList ? "/" : "@", function(data) {
            currentCommands_1 = data;
          });
          triggerProps.component = showCommandsList ? CommandItem : UserItem;
          triggerProps.currentTrigger = showCommandsList ? "/" : "@";
          triggerProps.getTextToReplace = _this._getTextToReplace(showCommandsList ? "/" : "@");
          triggerProps.getSelectedItem = _this._getItemOnSelect(showCommandsList ? "/" : "@");
          triggerProps.selectionEnd = 1;
          triggerProps.value = showCommandsList ? "/" : "@";
          triggerProps.values = currentCommands_1;
        }
        return triggerProps;
      };
      _this.setDropdownRef = function(element3) {
        _this.dropdownRef = element3;
      };
      var _a = _this.props, loadingComponent = _a.loadingComponent, trigger = _a.trigger, value = _a.value;
      if (!loadingComponent) {
        throw new Error("RTA: loadingComponent is not defined");
      }
      if (!trigger) {
        throw new Error("RTA: trigger is not defined");
      }
      _this.state = {
        actualToken: "",
        component: null,
        currentTrigger: null,
        data: null,
        dataLoading: false,
        isComposing: false,
        left: null,
        selectionEnd: 0,
        selectionStart: 0,
        top: null,
        value: value || ""
      };
      return _this;
    }
    ReactTextareaAutocomplete2.getDerivedStateFromProps = function(props, state) {
      if (props.value !== state.propsValue || !state.value) {
        return { propsValue: props.value, value: props.value };
      } else {
        return null;
      }
    };
    ReactTextareaAutocomplete2.prototype.renderSuggestionListContainer = function() {
      var _a = this.props, disableMentions = _a.disableMentions, dropdownClassName = _a.dropdownClassName, dropdownStyle = _a.dropdownStyle, itemClassName = _a.itemClassName, itemStyle = _a.itemStyle, listClassName = _a.listClassName, SuggestionItem = _a.SuggestionItem, _b = _a.SuggestionList, SuggestionList = _b === void 0 ? List : _b;
      var isComposing = this.state.isComposing;
      var triggerProps = this.getTriggerProps();
      if (isComposing || !triggerProps.values || !triggerProps.currentTrigger || disableMentions && triggerProps.currentTrigger === "@")
        return null;
      return import_react112.default.createElement(
        "div",
        { className: clsx_default("rta__autocomplete", "str-chat__suggestion-list-container", dropdownClassName), ref: this.setDropdownRef, style: dropdownStyle },
        import_react112.default.createElement(SuggestionList, __assign({ className: clsx_default("str-chat__suggestion-list", listClassName), dropdownScroll: this._dropdownScroll, itemClassName: clsx_default("str-chat__suggestion-list-item", itemClassName), itemStyle, onSelect: this._onSelect, SuggestionItem }, triggerProps))
      );
    };
    ReactTextareaAutocomplete2.prototype.render = function() {
      var _this = this;
      var _a = this.props, className = _a.className, containerClassName = _a.containerClassName, containerStyle = _a.containerStyle, style = _a.style;
      var _b = this.props.additionalTextareaProps || {}, onBlur = _b.onBlur, onChange = _b.onChange, onClick = _b.onClick, onFocus = _b.onFocus, onKeyDown = _b.onKeyDown, onScroll = _b.onScroll, onSelect = _b.onSelect, restAdditionalTextareaProps = __rest(_b, ["onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onScroll", "onSelect"]);
      var maxRows = this.props.maxRows;
      var _c = this.state, dataLoading = _c.dataLoading, value = _c.value;
      if (!this.props.grow)
        maxRows = 1;
      return import_react112.default.createElement(
        "div",
        { className: clsx_default("rta", containerClassName, {
          "rta--loading": dataLoading
        }), style: containerStyle },
        this.renderSuggestionListContainer(),
        import_react112.default.createElement(index3, __assign({ "data-testid": "message-input" }, this._cleanUpProps(), { className: clsx_default("rta__textarea", className), maxRows, onBlur: function(e) {
          _this._onClickAndBlurHandler(e);
          onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
        }, onChange: function(e) {
          _this._changeHandler(e);
          onChange === null || onChange === void 0 ? void 0 : onChange(e);
        }, onClick: function(e) {
          _this._onClickAndBlurHandler(e);
          onClick === null || onClick === void 0 ? void 0 : onClick(e);
        }, onCompositionEnd: function() {
          return _this.setState(function(pv) {
            return __assign(__assign({}, pv), { isComposing: false });
          });
        }, onCompositionStart: function() {
          return _this.setState(function(pv) {
            return __assign(__assign({}, pv), { isComposing: true });
          });
        }, onFocus: function(e) {
          var _a2, _b2;
          (_b2 = (_a2 = _this.props).onFocus) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, e);
          onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
        }, onKeyDown: function(e) {
          _this._handleKeyDown(e);
          onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
        }, onScroll: function(e) {
          _this._onScrollHandler(e);
          onScroll === null || onScroll === void 0 ? void 0 : onScroll(e);
        }, onSelect: function(e) {
          _this._selectHandler(e);
          onSelect === null || onSelect === void 0 ? void 0 : onSelect(e);
        }, ref: function(ref) {
          var _a2;
          (_a2 = _this.props) === null || _a2 === void 0 ? void 0 : _a2.innerRef(ref);
          _this.textareaRef = ref;
        }, style, value }, restAdditionalTextareaProps, { defaultValue: void 0 }))
      );
    };
    ReactTextareaAutocomplete2.defaultProps = {
      closeOnClickOutside: true,
      maxRows: 10,
      minChar: 1,
      movePopupAsYouType: false,
      scrollToItem: true,
      value: ""
    };
    return ReactTextareaAutocomplete2;
  }(import_react112.default.Component)
);
ReactTextareaAutocomplete.propTypes = {
  className: import_prop_types3.default.string,
  closeOnClickOutside: import_prop_types3.default.bool,
  containerClassName: import_prop_types3.default.string,
  containerStyle: import_prop_types3.default.object,
  disableMentions: import_prop_types3.default.bool,
  dropdownClassName: import_prop_types3.default.string,
  dropdownStyle: import_prop_types3.default.object,
  itemClassName: import_prop_types3.default.string,
  itemStyle: import_prop_types3.default.object,
  listClassName: import_prop_types3.default.string,
  listStyle: import_prop_types3.default.object,
  loaderClassName: import_prop_types3.default.string,
  loaderStyle: import_prop_types3.default.object,
  loadingComponent: import_prop_types3.default.elementType,
  minChar: import_prop_types3.default.number,
  onBlur: import_prop_types3.default.func,
  onCaretPositionChange: import_prop_types3.default.func,
  onChange: import_prop_types3.default.func,
  onSelect: import_prop_types3.default.func,
  shouldSubmit: import_prop_types3.default.func,
  style: import_prop_types3.default.object,
  SuggestionList: import_prop_types3.default.elementType,
  trigger: triggerPropsCheck,
  value: import_prop_types3.default.string
};

// node_modules/stream-chat-react/dist/components/Channel/Channel.js
var import_react229 = __toESM(require_react());
var import_lodash9 = __toESM(require_lodash3());
var import_lodash10 = __toESM(require_lodash4());
var import_lodash11 = __toESM(require_lodash());

// node_modules/nanoid/index.browser.js
var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/stream-chat-react/dist/components/Channel/channelState.js
var channelReducer = function(state, action) {
  var _a;
  switch (action.type) {
    case "closeThread": {
      return __assign(__assign({}, state), { thread: null, threadLoadingMore: false, threadMessages: [] });
    }
    case "copyMessagesFromChannel": {
      var channel = action.channel, parentId = action.parentId;
      return __assign(__assign({}, state), {
        messages: __spreadArray([], channel.state.messages, true),
        pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true),
        // copying messages from channel happens with new message - this resets the suppressAutoscroll
        suppressAutoscroll: false,
        threadMessages: parentId ? __assign({}, channel.state.threads)[parentId] || [] : state.threadMessages
      });
    }
    case "copyStateFromChannelOnEvent": {
      var channel = action.channel;
      return __assign(__assign({}, state), { members: __assign({}, channel.state.members), messages: __spreadArray([], channel.state.messages, true), pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true), read: __assign({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign({}, channel.state.watchers) });
    }
    case "initStateFromChannel": {
      var channel = action.channel, hasMore = action.hasMore;
      return __assign(__assign({}, state), { hasMore, loading: false, members: __assign({}, channel.state.members), messages: __spreadArray([], channel.state.messages, true), pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true), read: __assign({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign({}, channel.state.watchers) });
    }
    case "jumpToLatestMessage": {
      return __assign(__assign({}, state), { hasMoreNewer: false, highlightedMessageId: void 0, loading: false, suppressAutoscroll: false });
    }
    case "jumpToMessageFinished": {
      return __assign(__assign({}, state), { hasMoreNewer: action.hasMoreNewer, highlightedMessageId: action.highlightedMessageId });
    }
    case "clearHighlightedMessage": {
      return __assign(__assign({}, state), { highlightedMessageId: void 0 });
    }
    case "loadMoreFinished": {
      var hasMore = action.hasMore, messages = action.messages;
      return __assign(__assign({}, state), { hasMore, loadingMore: false, messages, suppressAutoscroll: false });
    }
    case "loadMoreNewerFinished": {
      var hasMoreNewer = action.hasMoreNewer, messages = action.messages;
      return __assign(__assign({}, state), { hasMoreNewer, loadingMoreNewer: false, messages });
    }
    case "loadMoreThreadFinished": {
      var threadHasMore = action.threadHasMore, threadMessages = action.threadMessages;
      return __assign(__assign({}, state), { threadHasMore, threadLoadingMore: false, threadMessages });
    }
    case "openThread": {
      var channel = action.channel, message = action.message;
      return __assign(__assign({}, state), { thread: message, threadHasMore: true, threadMessages: message.id ? __assign({}, channel.state.threads)[message.id] || [] : [], threadSuppressAutoscroll: false });
    }
    case "setError": {
      var error2 = action.error;
      return __assign(__assign({}, state), { error: error2 });
    }
    case "setLoadingMore": {
      var loadingMore = action.loadingMore;
      return __assign(__assign({}, state), { loadingMore, suppressAutoscroll: loadingMore });
    }
    case "setLoadingMoreNewer": {
      var loadingMoreNewer = action.loadingMoreNewer;
      return __assign(__assign({}, state), { loadingMoreNewer });
    }
    case "setThread": {
      var message = action.message;
      return __assign(__assign({}, state), { thread: message });
    }
    case "setTyping": {
      var channel = action.channel;
      return __assign(__assign({}, state), { typing: __assign({}, channel.state.typing) });
    }
    case "startLoadingThread": {
      return __assign(__assign({}, state), { threadLoadingMore: true, threadSuppressAutoscroll: true });
    }
    case "updateThreadOnEvent": {
      var channel = action.channel, message = action.message;
      if (!state.thread)
        return state;
      return __assign(__assign({}, state), { thread: (message === null || message === void 0 ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread, threadMessages: ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id) ? __assign({}, channel.state.threads)[state.thread.id] || [] : [] });
    }
    default:
      return state;
  }
};
var initialState2 = {
  error: null,
  hasMore: true,
  hasMoreNewer: false,
  loading: true,
  loadingMore: false,
  members: {},
  messages: [],
  pinnedMessages: [],
  read: {},
  suppressAutoscroll: false,
  thread: null,
  threadHasMore: true,
  threadLoadingMore: false,
  threadMessages: [],
  threadSuppressAutoscroll: false,
  typing: {},
  watcherCount: 0,
  watchers: {}
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateChannelStateContext.js
var import_react113 = __toESM(require_react());
var useCreateChannelStateContext = function(value) {
  var _a, _b;
  var acceptedFiles = value.acceptedFiles, channel = value.channel, _c = value.channelCapabilitiesArray, channelCapabilitiesArray = _c === void 0 ? [] : _c, channelConfig = value.channelConfig, debounceURLEnrichmentMs = value.debounceURLEnrichmentMs, dragAndDropWindow = value.dragAndDropWindow, enrichURLForPreview = value.enrichURLForPreview, giphyVersion = value.giphyVersion, error2 = value.error, findURLFn = value.findURLFn, hasMore = value.hasMore, hasMoreNewer = value.hasMoreNewer, imageAttachmentSizeHandler = value.imageAttachmentSizeHandler, suppressAutoscroll = value.suppressAutoscroll, highlightedMessageId = value.highlightedMessageId, loading = value.loading, loadingMore = value.loadingMore, maxNumberOfFiles = value.maxNumberOfFiles, members = value.members, _d = value.messages, messages = _d === void 0 ? [] : _d, multipleUploads = value.multipleUploads, mutes = value.mutes, notifications = value.notifications, onLinkPreviewDismissed = value.onLinkPreviewDismissed, pinnedMessages = value.pinnedMessages, quotedMessage = value.quotedMessage, _e = value.read, read2 = _e === void 0 ? {} : _e, shouldGenerateVideoThumbnail = value.shouldGenerateVideoThumbnail, skipMessageDataMemoization = value.skipMessageDataMemoization, thread = value.thread, threadHasMore = value.threadHasMore, threadLoadingMore = value.threadLoadingMore, _f = value.threadMessages, threadMessages = _f === void 0 ? [] : _f, channelUnreadUiState = value.channelUnreadUiState, videoAttachmentSizeHandler = value.videoAttachmentSizeHandler, watcherCount = value.watcherCount, watcher_count = value.watcher_count, watchers = value.watchers;
  var channelId = channel.cid;
  var lastRead = channel.initialized && ((_a = channel.lastRead()) === null || _a === void 0 ? void 0 : _a.getTime());
  var membersLength = Object.keys(members || []).length;
  var notificationsLength = notifications.length;
  var readUsers = Object.values(read2);
  var readUsersLength = readUsers.length;
  var readUsersLastReads = readUsers.map(function(_a2) {
    var last_read = _a2.last_read;
    return last_read.toISOString();
  }).join();
  var threadMessagesLength = threadMessages === null || threadMessages === void 0 ? void 0 : threadMessages.length;
  var channelCapabilities = {};
  channelCapabilitiesArray.forEach(function(capability) {
    channelCapabilities[capability] = true;
  });
  var memoizedMessageData = skipMessageDataMemoization ? messages : messages.map(function(_a2) {
    var deleted_at = _a2.deleted_at, latest_reactions = _a2.latest_reactions, pinned = _a2.pinned, reply_count = _a2.reply_count, status = _a2.status, updated_at = _a2.updated_at, user = _a2.user;
    return "".concat(deleted_at).concat(latest_reactions ? latest_reactions.map(function(_a3) {
      var type = _a3.type;
      return type;
    }).join() : "").concat(pinned).concat(reply_count).concat(status).concat(updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || "").concat(user === null || user === void 0 ? void 0 : user.updated_at);
  }).join();
  var memoizedThreadMessageData = threadMessages.map(function(_a2) {
    var deleted_at = _a2.deleted_at, latest_reactions = _a2.latest_reactions, pinned = _a2.pinned, status = _a2.status, updated_at = _a2.updated_at, user = _a2.user;
    return "".concat(deleted_at).concat(latest_reactions ? latest_reactions.map(function(_a3) {
      var type = _a3.type;
      return type;
    }).join() : "").concat(pinned).concat(status).concat(updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || "").concat(user === null || user === void 0 ? void 0 : user.updated_at);
  }).join();
  var channelStateContext = (0, import_react113.useMemo)(
    function() {
      return {
        acceptedFiles,
        channel,
        channelCapabilities,
        channelConfig,
        channelUnreadUiState,
        debounceURLEnrichmentMs,
        dragAndDropWindow,
        enrichURLForPreview,
        error: error2,
        findURLFn,
        giphyVersion,
        hasMore,
        hasMoreNewer,
        highlightedMessageId,
        imageAttachmentSizeHandler,
        loading,
        loadingMore,
        maxNumberOfFiles,
        members,
        messages,
        multipleUploads,
        mutes,
        notifications,
        onLinkPreviewDismissed,
        pinnedMessages,
        quotedMessage,
        read: read2,
        shouldGenerateVideoThumbnail,
        suppressAutoscroll,
        thread,
        threadHasMore,
        threadLoadingMore,
        threadMessages,
        videoAttachmentSizeHandler,
        watcher_count,
        watcherCount,
        watchers
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      (_b = channel.data) === null || _b === void 0 ? void 0 : _b.name,
      channelId,
      channelUnreadUiState,
      debounceURLEnrichmentMs,
      enrichURLForPreview,
      error2,
      findURLFn,
      hasMore,
      hasMoreNewer,
      highlightedMessageId,
      lastRead,
      loading,
      loadingMore,
      membersLength,
      memoizedMessageData,
      memoizedThreadMessageData,
      notificationsLength,
      onLinkPreviewDismissed,
      quotedMessage,
      readUsersLength,
      readUsersLastReads,
      shouldGenerateVideoThumbnail,
      skipMessageDataMemoization,
      suppressAutoscroll,
      thread,
      threadHasMore,
      threadLoadingMore,
      threadMessagesLength,
      watcherCount
    ]
  );
  return channelStateContext;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateTypingContext.js
var import_react114 = __toESM(require_react());
var useCreateTypingContext = function(value) {
  var typing = value.typing;
  var typingValue = Object.keys(typing || {}).join();
  var typingContext = (0, import_react114.useMemo)(
    function() {
      return {
        typing
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [typingValue]
  );
  return typingContext;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useEditMessageHandler.js
var useEditMessageHandler = function(doUpdateMessageRequest) {
  var _a = useChatContext("useEditMessageHandler"), channel = _a.channel, client = _a.client;
  return function(updatedMessage, options2) {
    if (doUpdateMessageRequest && channel) {
      return Promise.resolve(doUpdateMessageRequest(channel.cid, updatedMessage, options2));
    }
    return client.updateMessage(updatedMessage, void 0, options2);
  };
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useIsMounted.js
var import_react115 = __toESM(require_react());
var useIsMounted = function() {
  var isMounted = (0, import_react115.useRef)(false);
  (0, import_react115.useEffect)(function() {
    isMounted.current = true;
    return function() {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useMentionsHandlers.js
var import_react116 = __toESM(require_react());
var useMentionsHandlers = function(onMentionsHover, onMentionsClick) {
  return (0, import_react116.useCallback)(function(event, mentioned_users) {
    if (!onMentionsHover && !onMentionsClick || !(event.target instanceof HTMLElement)) {
      return;
    }
    var target = event.target;
    var textContent = target.innerHTML.replace("*", "");
    if (textContent[0] === "@") {
      var userName_1 = textContent.replace("@", "");
      var user = mentioned_users === null || mentioned_users === void 0 ? void 0 : mentioned_users.find(function(_a) {
        var id = _a.id, name = _a.name;
        return name === userName_1 || id === userName_1;
      });
      if (onMentionsHover && typeof onMentionsHover === "function" && event.type === "mouseover") {
        onMentionsHover(event, user);
      }
      if (onMentionsClick && event.type === "click" && typeof onMentionsClick === "function") {
        onMentionsClick(event, user);
      }
    }
  }, [onMentionsClick, onMentionsHover]);
};

// node_modules/stream-chat-react/dist/components/Loading/LoadingChannels.js
var import_react117 = __toESM(require_react());
var LoadingItems = function() {
  return import_react117.default.createElement(
    "div",
    { className: "str-chat__loading-channels-item str-chat__channel-preview-loading" },
    import_react117.default.createElement("div", { className: "str-chat__loading-channels-avatar" }),
    import_react117.default.createElement(
      "div",
      { className: "str-chat__loading-channels-meta str-chat__channel-preview-end-loading" },
      import_react117.default.createElement("div", { className: "str-chat__loading-channels-username" }),
      import_react117.default.createElement("div", { className: "str-chat__loading-channels-status" })
    )
  );
};
var UnMemoizedLoadingChannels = function() {
  return import_react117.default.createElement(
    "div",
    { className: "str-chat__loading-channels" },
    import_react117.default.createElement(LoadingItems, null),
    import_react117.default.createElement(LoadingItems, null),
    import_react117.default.createElement(LoadingItems, null)
  );
};
var LoadingChannels = import_react117.default.memo(UnMemoizedLoadingChannels);

// node_modules/stream-chat-react/dist/components/Loading/LoadingErrorIndicator.js
var import_react118 = __toESM(require_react());
var UnMemoizedLoadingErrorIndicator = function(_a) {
  var error2 = _a.error;
  var t2 = useTranslationContext("LoadingErrorIndicator").t;
  if (!error2)
    return null;
  return import_react118.default.createElement("div", null, t2("Error: {{ errorMessage }}", { errorMessage: error2.message }));
};
var LoadingErrorIndicator = import_react118.default.memo(UnMemoizedLoadingErrorIndicator, function(prevProps, nextProps) {
  var _a, _b;
  return ((_a = prevProps.error) === null || _a === void 0 ? void 0 : _a.message) === ((_b = nextProps.error) === null || _b === void 0 ? void 0 : _b.message);
});

// node_modules/stream-chat-react/dist/components/Loading/LoadingIndicator.js
var import_react119 = __toESM(require_react());
var UnMemoizedLoadingIndicator = function(props) {
  var _a = props.color, color6 = _a === void 0 ? "#006CFF" : _a, _b = props.size, size = _b === void 0 ? 15 : _b;
  return import_react119.default.createElement(
    "div",
    { className: "str-chat__loading-indicator", "data-testid": "loading-indicator-wrapper", style: { height: size, width: size } },
    import_react119.default.createElement(
      "svg",
      { height: size, viewBox: "0 0 30 30", width: size, xmlns: "http://www.w3.org/2000/svg" },
      import_react119.default.createElement(
        "defs",
        null,
        import_react119.default.createElement(
          "linearGradient",
          { id: "a", x1: "50%", x2: "50%", y1: "0%", y2: "100%" },
          import_react119.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }),
          import_react119.default.createElement("stop", { "data-testid": "loading-indicator-circle", offset: "100%", stopColor: color6, stopOpacity: "1", style: { stopColor: color6 } })
        )
      ),
      import_react119.default.createElement("path", { d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z", fill: "url(#a)", fillRule: "evenodd" })
    )
  );
};
var LoadingIndicator2 = import_react119.default.memo(UnMemoizedLoadingIndicator, function(prevProps, nextProps) {
  return prevProps.color === nextProps.color && prevProps.size === nextProps.size;
});

// node_modules/stream-chat-react/dist/components/Channel/LoadingChannel.js
var import_react120 = __toESM(require_react());
var LoadingMessage = function() {
  return import_react120.default.createElement(
    "div",
    { className: "str-chat__loading-channel-message" },
    import_react120.default.createElement("div", { className: "str-chat__loading-channel-message-avatar" }),
    import_react120.default.createElement(
      "div",
      { className: "str-chat__loading-channel-message-end" },
      import_react120.default.createElement("div", { className: "str-chat__loading-channel-message-sender" }),
      import_react120.default.createElement(
        "div",
        { className: "str-chat__loading-channel-message-last-row" },
        import_react120.default.createElement("div", { className: "str-chat__loading-channel-message-text" }),
        import_react120.default.createElement("div", { className: "str-chat__loading-channel-message-date" })
      )
    )
  );
};
var LoadingMessageInput = function() {
  return import_react120.default.createElement(
    "div",
    { className: "str-chat__loading-channel-message-input-row" },
    import_react120.default.createElement("div", { className: "str-chat__loading-channel-message-input" }),
    import_react120.default.createElement("div", { className: "str-chat__loading-channel-message-send" })
  );
};
var LoadingChannelHeader = function() {
  return import_react120.default.createElement(
    "div",
    { className: "str-chat__loading-channel-header" },
    import_react120.default.createElement("div", { className: "str-chat__loading-channel-header-avatar" }),
    import_react120.default.createElement(
      "div",
      { className: "str-chat__loading-channel-header-end" },
      import_react120.default.createElement("div", { className: "str-chat__loading-channel-header-name" }),
      import_react120.default.createElement("div", { className: "str-chat__loading-channel-header-info" })
    )
  );
};
var LoadingChannel = function() {
  return import_react120.default.createElement(
    "div",
    { className: "str-chat__loading-channel" },
    import_react120.default.createElement(LoadingChannelHeader, null),
    import_react120.default.createElement("div", { className: "str-chat__loading-channel-message-list" }, Array.from(Array(3)).map(function(_23, i) {
      return import_react120.default.createElement(LoadingMessage, { key: "loading-message-".concat(i) });
    })),
    import_react120.default.createElement(LoadingMessageInput, null)
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageSimple.js
var import_react191 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/icons.js
var import_react121 = __toESM(require_react());
var ActionsIcon = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b;
  return import_react121.default.createElement(
    "svg",
    { className, height: "4", viewBox: "0 0 11 4", width: "11", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement("path", { d: "M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z", fillRule: "nonzero" })
  );
};
var ReplyIcon = function() {
  return import_react121.default.createElement(
    "svg",
    { "data-testid": "reply-icon", height: "15", width: "18", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement("path", { d: "M.56 10.946H.06l-.002-.498L.025.92a.5.5 0 1 1 1-.004l.032 9.029H9.06v-4l9 4.5-9 4.5v-4H.56z", fillRule: "nonzero" })
  );
};
var DeliveredCheckIcon = function() {
  return import_react121.default.createElement(
    "svg",
    { height: "16", width: "16", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement("path", { d: "M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm3.72 6.633a.955.955 0 1 0-1.352-1.352L6.986 8.663 5.633 7.31A.956.956 0 1 0 4.28 8.663l2.029 2.028a.956.956 0 0 0 1.353 0l4.058-4.058z", fill: "#006CFF", fillRule: "evenodd" })
  );
};
var ReactionIcon = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b;
  return import_react121.default.createElement(
    "svg",
    { className, height: "12", viewBox: "0 0 12 12", width: "12", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement(
      "g",
      { clipRule: "evenodd", fillRule: "evenodd" },
      import_react121.default.createElement("path", { d: "M6 1.2C3.3 1.2 1.2 3.3 1.2 6c0 2.7 2.1 4.8 4.8 4.8 2.7 0 4.8-2.1 4.8-4.8 0-2.7-2.1-4.8-4.8-4.8zM0 6c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z" }),
      import_react121.default.createElement("path", { d: "M5.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM8.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM3.3 6.7c.3-.2.6-.1.8.1.3.4.8.9 1.5 1 .6.2 1.4.1 2.4-1 .2-.2.6-.3.8 0 .2.2.3.6 0 .8-1.1 1.3-2.4 1.7-3.5 1.5-1-.2-1.8-.9-2.2-1.5-.2-.3-.1-.7.2-.9z" })
    )
  );
};
var ThreadIcon = function(_a) {
  var _b = _a.className, className = _b === void 0 ? "" : _b;
  return import_react121.default.createElement(
    "svg",
    { className, height: "10", width: "14", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement("path", { d: "M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z", fillRule: "evenodd" })
  );
};
var ErrorIcon = function() {
  return import_react121.default.createElement(
    "svg",
    { height: "14", width: "14", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement("path", { d: "M7 0a7 7 0 1 0 0 14A7 7 0 0 0 7 0zm.875 10.938a.438.438 0 0 1-.438.437h-.875a.438.438 0 0 1-.437-.438v-.874c0-.242.196-.438.438-.438h.875c.241 0 .437.196.437.438v.874zm0-2.626a.438.438 0 0 1-.438.438h-.875a.438.438 0 0 1-.437-.438v-5.25c0-.241.196-.437.438-.437h.875c.241 0 .437.196.437.438v5.25z", fill: "#EA152F", fillRule: "evenodd" })
  );
};
var PinIcon = function() {
  return import_react121.default.createElement(
    "svg",
    { height: "13", viewBox: "0 0 14 13", width: "14", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement("path", { d: "M13.3518 6.686L6.75251 0.0866699L5.80984 1.02867L6.75318 1.972V1.97334L3.45318 5.272L3.45251 5.27334L2.50984 4.32934L1.56718 5.27267L4.39584 8.10067L0.624512 11.8713L1.56718 12.814L5.33851 9.04334L8.16718 11.8713L9.10984 10.9293L8.16718 9.986L11.4672 6.686L12.4098 7.62867L13.3518 6.686ZM7.22451 9.04267L7.22385 9.04334L4.39584 6.21467L7.69518 2.91467L10.5232 5.74267L7.22451 9.04267Z", fillRule: "evenodd" })
  );
};
var PinIndicator = function(_a) {
  var _b, _c;
  var message = _a.message, t2 = _a.t;
  if (!message || !t2)
    return null;
  return import_react121.default.createElement(
    "div",
    { style: { alignItems: "center", display: "flex" } },
    import_react121.default.createElement(PinIcon, null),
    import_react121.default.createElement("div", { style: {
      fontSize: "14px",
      marginBottom: "0",
      marginLeft: "8px",
      marginTop: "0"
    } }, message.pinned_by ? "".concat(t2("Pinned by"), " ").concat(((_b = message.pinned_by) === null || _b === void 0 ? void 0 : _b.name) || ((_c = message.pinned_by) === null || _c === void 0 ? void 0 : _c.id)) : t2("Message pinned"))
  );
};
var MessageDeliveredIcon = function() {
  return import_react121.default.createElement(
    "svg",
    { "data-testid": "delivered-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react121.default.createElement("path", { clipRule: "evenodd", d: "M8.9999 16.2L4.7999 12L3.3999 13.4L8.9999 19L20.9999 6.99998L19.5999 5.59998L8.9999 16.2Z", fill: "black", fillRule: "evenodd" })
  );
};
var MessageErrorIcon = function() {
  return import_react121.default.createElement(
    "div",
    { className: "str-chat__message-error-icon" },
    import_react121.default.createElement(
      "svg",
      { "data-testid": "error", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
      import_react121.default.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z", fill: "black", id: "background" }),
      import_react121.default.createElement("path", { d: "M13 17H11V15H13V17ZM13 13H11V7H13V13Z", fill: "white" })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageBounce/MessageBounceModal.js
var import_react122 = __toESM(require_react());
function MessageBounceModal(_a) {
  var MessageBouncePrompt2 = _a.MessageBouncePrompt, modalProps = __rest(_a, ["MessageBouncePrompt"]);
  return import_react122.default.createElement(
    Modal,
    __assign({ className: "str-chat__message-bounce-modal" }, modalProps),
    import_react122.default.createElement(
      MessageBounceProvider,
      null,
      import_react122.default.createElement(MessageBouncePrompt2, { onClose: modalProps.onClose })
    )
  );
}

// node_modules/stream-chat-react/dist/components/MessageBounce/MessageBouncePrompt.js
var import_react123 = __toESM(require_react());
function MessageBouncePrompt(_a) {
  var children = _a.children, onClose = _a.onClose;
  var _b = useMessageBounceContext("MessageBouncePrompt"), handleDelete2 = _b.handleDelete, handleEdit = _b.handleEdit, handleRetry = _b.handleRetry;
  var t2 = useTranslationContext("MessageBouncePrompt").t;
  function createHandler(handle2) {
    return function(e) {
      handle2(e);
      onClose === null || onClose === void 0 ? void 0 : onClose(e);
    };
  }
  return import_react123.default.createElement(
    "div",
    { className: "str-chat__message-bounce-prompt", "data-testid": "message-bounce-prompt" },
    import_react123.default.createElement("div", { className: "str-chat__message-bounce-prompt-header" }, children !== null && children !== void 0 ? children : t2("This message did not meet our content guidelines")),
    import_react123.default.createElement(
      "div",
      { className: "str-chat__message-bounce-actions" },
      import_react123.default.createElement("button", { className: "str-chat__message-bounce-edit", "data-testid": "message-bounce-edit", onClick: createHandler(handleEdit), type: "button" }, t2("Edit Message")),
      import_react123.default.createElement("button", { className: "str-chat__message-bounce-send", "data-testid": "message-bounce-send", onClick: createHandler(handleRetry) }, t2("Send Anyway")),
      import_react123.default.createElement("button", { className: "str-chat__message-bounce-delete", "data-testid": "message-bounce-delete", onClick: createHandler(handleDelete2) }, t2("Delete"))
    )
  );
}

// node_modules/stream-chat-react/dist/components/Message/MessageDeleted.js
var import_react124 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/hooks/useUserRole.js
var useUserRole = function(message, onlySenderCanEdit, disableQuotedMessages) {
  var _a, _b, _c;
  var _d = useChannelStateContext("useUserRole"), channel = _d.channel, _e = _d.channelCapabilities, channelCapabilities = _e === void 0 ? {} : _e;
  var client = useChatContext("useUserRole").client;
  var isAdmin = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) === "admin" || channel.state.membership.role === "admin";
  var isOwner = channel.state.membership.role === "owner";
  var isModerator = ((_b = client.user) === null || _b === void 0 ? void 0 : _b.role) === "channel_moderator" || channel.state.membership.role === "channel_moderator" || channel.state.membership.role === "moderator" || channel.state.membership.is_moderator === true || channel.state.membership.channel_role === "channel_moderator";
  var isMyMessage = client.userID === ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id);
  var canEdit = !onlySenderCanEdit && channelCapabilities["update-any-message"] || isMyMessage && channelCapabilities["update-own-message"];
  var canDelete = channelCapabilities["delete-any-message"] || isMyMessage && channelCapabilities["delete-own-message"];
  var canFlag = !isMyMessage && channelCapabilities["flag-message"];
  var canMarkUnread = channelCapabilities["read-events"];
  var canMute = !isMyMessage && channelCapabilities["mute-channel"];
  var canQuote = !disableQuotedMessages && channelCapabilities["quote-message"];
  var canReact = channelCapabilities["send-reaction"];
  var canReply = channelCapabilities["send-reply"];
  return {
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canQuote,
    canReact,
    canReply,
    isAdmin,
    isModerator,
    isMyMessage,
    isOwner
  };
};

// node_modules/stream-chat-react/dist/components/Message/MessageDeleted.js
var MessageDeleted = function(props) {
  var message = props.message;
  var t2 = useTranslationContext("MessageDeleted").t;
  var isMyMessage = useUserRole(message).isMyMessage;
  var messageClasses = isMyMessage ? "str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me" : "str-chat__message str-chat__message-simple str-chat__message--other";
  return import_react124.default.createElement(
    "div",
    { className: "".concat(messageClasses, " str-chat__message--deleted ").concat(message.type, " "), "data-testid": "message-deleted-component", key: message.id },
    import_react124.default.createElement("div", { className: "str-chat__message--deleted-inner" }, t2("This message was deleted..."))
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageOptions.js
var import_react129 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/utils.js
var import_react_fast_compare = __toESM(require_react_fast_compare());
var import_emoji_regex2 = __toESM(require_emoji_regex());
var validateAndGetMessage = function(func, args) {
  if (!func || typeof func !== "function")
    return null;
  if (!(args instanceof Array)) {
    args = [args];
  }
  var returnValue = func.apply(void 0, args);
  if (typeof returnValue !== "string")
    return null;
  return returnValue;
};
var isUserMuted = function(message, mutes) {
  if (!mutes || !message)
    return false;
  var userMuted = mutes.filter(function(el) {
    var _a;
    return el.target.id === ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id);
  });
  return !!userMuted.length;
};
var MESSAGE_ACTIONS = {
  delete: "delete",
  edit: "edit",
  flag: "flag",
  markUnread: "markUnread",
  mute: "mute",
  pin: "pin",
  quote: "quote",
  react: "react",
  reply: "reply"
};
var defaultPinPermissions = {
  commerce: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  gaming: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: false,
    user: false
  },
  livestream: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  messaging: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  },
  team: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  }
};
var getMessageActions = function(actions, _a) {
  var canDelete = _a.canDelete, canEdit = _a.canEdit, canFlag = _a.canFlag, canMarkUnread = _a.canMarkUnread, canMute = _a.canMute, canPin = _a.canPin, canQuote = _a.canQuote, canReact = _a.canReact, canReply = _a.canReply;
  var messageActionsAfterPermission = [];
  var messageActions = [];
  if (actions && typeof actions === "boolean") {
    messageActions = Object.keys(MESSAGE_ACTIONS);
  } else if (actions && actions.length > 0) {
    messageActions = __spreadArray([], actions, true);
  } else {
    return [];
  }
  if (canDelete && messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.delete);
  }
  if (canEdit && messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.edit);
  }
  if (canFlag && messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.flag);
  }
  if (canMarkUnread && messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.markUnread);
  }
  if (canMute && messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.mute);
  }
  if (canPin && messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.pin);
  }
  if (canQuote && messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.quote);
  }
  if (canReact && messageActions.indexOf(MESSAGE_ACTIONS.react) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.react);
  }
  if (canReply && messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.reply);
  }
  return messageActionsAfterPermission;
};
var ACTIONS_NOT_WORKING_IN_THREAD = [
  MESSAGE_ACTIONS.pin,
  MESSAGE_ACTIONS.react,
  MESSAGE_ACTIONS.reply,
  MESSAGE_ACTIONS.markUnread
];
var showMessageActionsBox = function(actions, inThread) {
  return shouldRenderMessageActions({ inThread, messageActions: actions });
};
var shouldRenderMessageActions = function(_a) {
  var customMessageActions = _a.customMessageActions, CustomMessageActionsList2 = _a.CustomMessageActionsList, inThread = _a.inThread, messageActions = _a.messageActions;
  if (typeof CustomMessageActionsList2 !== "undefined" || typeof customMessageActions !== "undefined")
    return true;
  if (!messageActions.length)
    return false;
  if (inThread && messageActions.filter(function(action) {
    return !ACTIONS_NOT_WORKING_IN_THREAD.includes(action);
  }).length === 0) {
    return false;
  }
  if (messageActions.length === 1 && (messageActions.includes(MESSAGE_ACTIONS.react) || messageActions.includes(MESSAGE_ACTIONS.reply))) {
    return false;
  }
  if (messageActions.length === 2 && messageActions.includes(MESSAGE_ACTIONS.react) && messageActions.includes(MESSAGE_ACTIONS.reply)) {
    return false;
  }
  return true;
};
function areMessagesEqual(prevMessage, nextMessage) {
  var _a, _b, _c, _d, _e, _f;
  return prevMessage.deleted_at === nextMessage.deleted_at && ((_a = prevMessage.latest_reactions) === null || _a === void 0 ? void 0 : _a.length) === ((_b = nextMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) && ((_c = prevMessage.own_reactions) === null || _c === void 0 ? void 0 : _c.length) === ((_d = nextMessage.own_reactions) === null || _d === void 0 ? void 0 : _d.length) && prevMessage.pinned === nextMessage.pinned && prevMessage.reply_count === nextMessage.reply_count && prevMessage.status === nextMessage.status && prevMessage.text === nextMessage.text && prevMessage.type === nextMessage.type && prevMessage.updated_at === nextMessage.updated_at && ((_e = prevMessage.user) === null || _e === void 0 ? void 0 : _e.updated_at) === ((_f = nextMessage.user) === null || _f === void 0 ? void 0 : _f.updated_at) && Boolean(prevMessage.quoted_message) === Boolean(nextMessage.quoted_message) && (!prevMessage.quoted_message || areMessagesEqual(prevMessage.quoted_message, nextMessage.quoted_message));
}
var areMessagePropsEqual = function(prevProps, nextProps) {
  var prevMessage = prevProps.message, prevMessageUI = prevProps.Message;
  var nextMessage = nextProps.message, nextMessageUI = nextProps.Message;
  if (prevMessageUI !== nextMessageUI)
    return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup)
    return false;
  if (nextProps.showDetailedReactions !== prevProps.showDetailedReactions) {
    return false;
  }
  var messagesAreEqual = areMessagesEqual(prevMessage, nextMessage);
  if (!messagesAreEqual)
    return false;
  var deepEqualProps = (0, import_react_fast_compare.default)(nextProps.messageActions, prevProps.messageActions) && (0, import_react_fast_compare.default)(nextProps.readBy, prevProps.readBy) && (0, import_react_fast_compare.default)(nextProps.highlighted, prevProps.highlighted) && (0, import_react_fast_compare.default)(nextProps.groupStyles, prevProps.groupStyles) && // last 3 messages can have different group styles
  (0, import_react_fast_compare.default)(nextProps.mutes, prevProps.mutes) && (0, import_react_fast_compare.default)(nextProps.lastReceivedId, prevProps.lastReceivedId);
  if (!deepEqualProps)
    return false;
  return prevProps.messageListRect === nextProps.messageListRect;
};
var areMessageUIPropsEqual = function(prevProps, nextProps) {
  var _a, _b, _c, _d;
  var prevLastReceivedId = prevProps.lastReceivedId, prevMessage = prevProps.message;
  var nextLastReceivedId = nextProps.lastReceivedId, nextMessage = nextProps.message;
  if (prevProps.editing !== nextProps.editing)
    return false;
  if (prevProps.highlighted !== nextProps.highlighted)
    return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup)
    return false;
  if (((_a = prevProps.mutes) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = nextProps.mutes) === null || _b === void 0 ? void 0 : _b.length))
    return false;
  if (((_c = prevProps.readBy) === null || _c === void 0 ? void 0 : _c.length) !== ((_d = nextProps.readBy) === null || _d === void 0 ? void 0 : _d.length))
    return false;
  if (prevProps.groupStyles !== nextProps.groupStyles)
    return false;
  if (prevProps.showDetailedReactions !== nextProps.showDetailedReactions) {
    return false;
  }
  if ((prevMessage.id === prevLastReceivedId || prevMessage.id === nextLastReceivedId) && prevLastReceivedId !== nextLastReceivedId) {
    return false;
  }
  return areMessagesEqual(prevMessage, nextMessage);
};
var messageHasReactions = function(message) {
  var _a;
  return Object.values((_a = message === null || message === void 0 ? void 0 : message.reaction_groups) !== null && _a !== void 0 ? _a : {}).some(function(_a2) {
    var count = _a2.count;
    return count > 0;
  });
};
var messageHasAttachments = function(message) {
  return !!(message === null || message === void 0 ? void 0 : message.attachments) && !!message.attachments.length;
};
var getImages = function(message) {
  if (!(message === null || message === void 0 ? void 0 : message.attachments)) {
    return [];
  }
  return message.attachments.filter(function(item) {
    return item.type === "image";
  });
};
var getNonImageAttachments = function(message) {
  if (!(message === null || message === void 0 ? void 0 : message.attachments)) {
    return [];
  }
  return message.attachments.filter(function(item) {
    return item.type !== "image";
  });
};
var mapToUserNameOrId = function(user) {
  return user.name || user.id;
};
var getReadByTooltipText = function(users, t2, client, tooltipUserNameMapper) {
  var outStr = "";
  if (!t2) {
    throw new Error("getReadByTooltipText was called, but translation function is not available");
  }
  if (!tooltipUserNameMapper) {
    throw new Error("getReadByTooltipText was called, but tooltipUserNameMapper function is not available");
  }
  var otherUsers = users.filter(function(item) {
    return item && (client === null || client === void 0 ? void 0 : client.user) && item.id !== client.user.id;
  }).map(tooltipUserNameMapper);
  var slicedArr = otherUsers.slice(0, 5);
  var restLength = otherUsers.length - slicedArr.length;
  if (slicedArr.length === 1) {
    outStr = "".concat(slicedArr[0], " ");
  } else if (slicedArr.length === 2) {
    outStr = t2("{{ firstUser }} and {{ secondUser }}", {
      firstUser: slicedArr[0],
      secondUser: slicedArr[1]
    });
  } else if (slicedArr.length > 2) {
    if (restLength === 0) {
      var lastUser = slicedArr.splice(slicedArr.length - 1, 1);
      outStr = t2("{{ commaSeparatedUsers }}, and {{ lastUser }}", {
        commaSeparatedUsers: slicedArr.join(", "),
        lastUser
      });
    } else {
      outStr = t2("{{ commaSeparatedUsers }} and {{ moreCount }} more", {
        commaSeparatedUsers: slicedArr.join(", "),
        moreCount: restLength
      });
    }
  }
  return outStr;
};
var isOnlyEmojis = function(text5) {
  if (!text5)
    return false;
  var noEmojis = text5.replace((0, import_emoji_regex2.default)(), "");
  var noSpace = noEmojis.replace(/[\s\n]/gm, "");
  return !noSpace;
};
var isMessageBounced = function(message) {
  var _a;
  return message.type === "error" && ((_a = message.moderation_details) === null || _a === void 0 ? void 0 : _a.action) === "MESSAGE_RESPONSE_ACTION_BOUNCE";
};
var isMessageEdited = function(message) {
  return !!message.message_text_updated_at;
};

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActions.js
var import_react128 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js
var import_react126 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageActions/CustomMessageActionsList.js
var import_react125 = __toESM(require_react());
var CustomMessageActionsList = function(props) {
  var customMessageActions = props.customMessageActions, message = props.message;
  if (!customMessageActions)
    return null;
  var customActionsArray = Object.keys(customMessageActions);
  return import_react125.default.createElement(import_react125.default.Fragment, null, customActionsArray.map(function(customAction) {
    var customHandler = customMessageActions[customAction];
    return import_react125.default.createElement("button", { "aria-selected": "false", className: "str-chat__message-actions-list-item str-chat__message-actions-list-item-button", key: customAction, onClick: function(event) {
      return customHandler(message, event);
    }, role: "option" }, customAction);
  }));
};

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js
var UnMemoizedMessageActionsBox = import_react126.default.forwardRef(function(props, ref) {
  var getMessageActions2 = props.getMessageActions, handleDelete2 = props.handleDelete, handleEdit = props.handleEdit, handleFlag = props.handleFlag, handleMarkUnread = props.handleMarkUnread, handleMute = props.handleMute, handlePin = props.handlePin, isUserMuted2 = props.isUserMuted, mine = props.mine, _a = props.open, open = _a === void 0 ? false : _a, restDivProps = __rest(props, ["getMessageActions", "handleDelete", "handleEdit", "handleFlag", "handleMarkUnread", "handleMute", "handlePin", "isUserMuted", "mine", "open"]);
  var _b = useComponentContext("MessageActionsBox").CustomMessageActionsList, CustomMessageActionsList2 = _b === void 0 ? CustomMessageActionsList : _b;
  var setQuotedMessage = useChannelActionContext("MessageActionsBox").setQuotedMessage;
  var _c = useMessageContext("MessageActionsBox"), customMessageActions = _c.customMessageActions, message = _c.message, threadList = _c.threadList;
  var t2 = useTranslationContext("MessageActionsBox").t;
  var messageActions = getMessageActions2();
  var handleQuote = function() {
    setQuotedMessage(message);
    var elements = message.parent_id ? document.querySelectorAll(".str-chat__thread .str-chat__textarea__textarea") : document.getElementsByClassName("str-chat__textarea__textarea");
    var textarea = elements.item(0);
    if (textarea instanceof HTMLTextAreaElement) {
      textarea.focus();
    }
  };
  var rootClassName2 = clsx_default("str-chat__message-actions-box", {
    "str-chat__message-actions-box--open": open
  });
  var buttonClassName = "str-chat__message-actions-list-item str-chat__message-actions-list-item-button";
  return import_react126.default.createElement(
    "div",
    __assign({}, restDivProps, { className: rootClassName2, "data-testid": "message-actions-box", ref }),
    import_react126.default.createElement(
      "div",
      { "aria-label": t2("aria/Message Options"), className: "str-chat__message-actions-list", role: "listbox" },
      import_react126.default.createElement(CustomMessageActionsList2, { customMessageActions, message }),
      messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && import_react126.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleQuote, role: "option" }, t2("Reply")),
      messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && import_react126.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handlePin, role: "option" }, !message.pinned ? t2("Pin") : t2("Unpin")),
      messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && import_react126.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleMarkUnread, role: "option" }, t2("Mark as unread")),
      messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && import_react126.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleFlag, role: "option" }, t2("Flag")),
      messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && import_react126.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleMute, role: "option" }, isUserMuted2() ? t2("Unmute") : t2("Mute")),
      messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && import_react126.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleEdit, role: "option" }, t2("Edit Message")),
      messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && import_react126.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleDelete2, role: "option" }, t2("Delete"))
    )
  );
});
var MessageActionsBox = import_react126.default.memo(UnMemoizedMessageActionsBox);

// node_modules/stream-chat-react/dist/components/MessageActions/hooks/useMessageActionsBoxPopper.js
var import_react127 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Popper.js
var React83 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Manager.js
var React80 = __toESM(require_react());
var ManagerReferenceNodeContext = React80.createContext();
var ManagerReferenceNodeSetterContext = React80.createContext();

// node_modules/react-popper/lib/esm/utils.js
var React81 = __toESM(require_react());
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" && window.document && window.document.createElement ? React81.useLayoutEffect : React81.useEffect;

// node_modules/react-popper/lib/esm/usePopper.js
var React82 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element3) {
  return element3 ? (element3.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node2) {
  if (node2 == null) {
    return window;
  }
  if (node2.toString() !== "[object Window]") {
    var ownerDocument = node2.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node2;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement2(node2) {
  var OwnElement = getWindow(node2).Element;
  return node2 instanceof OwnElement || node2 instanceof Element;
}
function isHTMLElement(node2) {
  var OwnElement = getWindow(node2).HTMLElement;
  return node2 instanceof OwnElement || node2 instanceof HTMLElement;
}
function isShadowRoot(node2) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node2).ShadowRoot;
  return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element3 = state.elements[name];
    if (!isHTMLElement(element3) || !getNodeName(element3)) {
      return;
    }
    Object.assign(element3.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element3.removeAttribute(name2);
      } else {
        element3.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element3 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element3) || !getNodeName(element3)) {
        return;
      }
      Object.assign(element3.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element3.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element3, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element3.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element3)) {
    scaleX = element3.offsetWidth > 0 ? round(clientRect.width) / element3.offsetWidth || 1 : 1;
    scaleY = element3.offsetHeight > 0 ? round(clientRect.height) / element3.offsetHeight || 1 : 1;
  }
  var _ref = isElement2(element3) ? getWindow(element3) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element3) {
  var clientRect = getBoundingClientRect(element3);
  var width = element3.offsetWidth;
  var height = element3.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element3.offsetLeft,
    y: element3.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element3) {
  return getWindow(element3).getComputedStyle(element3);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element3) {
  return ["table", "td", "th"].indexOf(getNodeName(element3)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element3) {
  return ((isElement2(element3) ? element3.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element3.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element3) {
  if (getNodeName(element3) === "html") {
    return element3;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element3.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element3.parentNode || // DOM Element detected
    (isShadowRoot(element3) ? element3.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element3)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element3) {
  if (!isHTMLElement(element3) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element3).position === "fixed") {
    return null;
  }
  return element3.offsetParent;
}
function getContainingBlock(element3) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE2 = /Trident/i.test(getUAString());
  if (isIE2 && isHTMLElement(element3)) {
    var elementCss = getComputedStyle2(element3);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element3);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element3) {
  var window2 = getWindow(element3);
  var offsetParent = getTrueOffsetParent(element3);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element3) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys2) {
  return keys2.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options2 = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options2.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options2 = _ref2.options;
  var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position3 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position3 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position3
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options2 = _ref5.options;
  var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance2 = _ref.instance, options2 = _ref.options;
  var _options$scroll = options2.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance2.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance2.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance2.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance2.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node2) {
  var win = getWindow(node2);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element3) {
  return getBoundingClientRect(getDocumentElement(element3)).left + getWindowScroll(element3).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element3, strategy) {
  var win = getWindow(element3);
  var html4 = getDocumentElement(element3);
  var visualViewport = win.visualViewport;
  var width = html4.clientWidth;
  var height = html4.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element3),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element3) {
  var _element$ownerDocumen;
  var html4 = getDocumentElement(element3);
  var winScroll = getWindowScroll(element3);
  var body = (_element$ownerDocumen = element3.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html4.scrollWidth, html4.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html4.scrollHeight, html4.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element3);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html4).direction === "rtl") {
    x += max(html4.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element3) {
  var _getComputedStyle = getComputedStyle2(element3), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node2) {
  if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
    return node2.ownerDocument.body;
  }
  if (isHTMLElement(node2) && isScrollParent(node2)) {
    return node2;
  }
  return getScrollParent(getParentNode(node2));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element3, list3) {
  var _element$ownerDocumen;
  if (list3 === void 0) {
    list3 = [];
  }
  var scrollParent = getScrollParent(element3);
  var isBody = scrollParent === ((_element$ownerDocumen = element3.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list3.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element3, strategy) {
  var rect = getBoundingClientRect(element3, false, strategy === "fixed");
  rect.top = rect.top + element3.clientTop;
  rect.left = rect.left + element3.clientLeft;
  rect.bottom = rect.top + element3.clientHeight;
  rect.right = rect.left + element3.clientWidth;
  rect.width = element3.clientWidth;
  rect.height = element3.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element3, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element3, strategy)) : isElement2(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element3)));
}
function getClippingParents(element3) {
  var clippingParents2 = listScrollParents(getParentNode(element3));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element3).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element3) ? getOffsetParent(element3) : element3;
  if (!isElement2(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement2(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element3, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element3) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element3, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element3, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element3 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element3.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element3.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element3.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element3.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element3[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element3[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element3 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement2(element3) ? element3 : element3.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks2 = [];
    if (checkMainAxis) {
      checks2.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks2.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks2.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks2);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks3 = checksMap.get(placement2);
        if (checks3) {
          return checks3.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options2 = _ref2.options, name = _ref2.name;
  var _options$offset = options2.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element3) {
  return {
    scrollLeft: element3.scrollLeft,
    scrollTop: element3.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node2) {
  if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
    return getWindowScroll(node2);
  } else {
    return getHTMLElementScroll(node2);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element3) {
  var rect = element3.getBoundingClientRect();
  var scaleX = round(rect.width) / element3.offsetWidth || 1;
  var scaleY = round(rect.height) / element3.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order2(modifiers) {
  var map2 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map2.set(modifier.name, modifier);
  });
  function sort2(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map2.get(dep);
        if (depModifier) {
          sort2(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort2(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order2(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element3) {
    return !(element3 && typeof element3.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options2) {
    if (options2 === void 0) {
      options2 = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance2 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options3);
        state.scrollParents = {
          reference: isElement2(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance2.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index4 = 0; index4 < state.orderedModifiers.length; index4++) {
          if (state.reset === true) {
            state.reset = false;
            index4 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index4], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance2
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance2.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance2;
    }
    instance2.setOptions(options2).then(function(state2) {
      if (!isDestroyed && options2.onFirstUpdate) {
        options2.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options3 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance: instance2,
            options: options3
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance2;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/react-popper/lib/esm/usePopper.js
var import_react_fast_compare2 = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var prevOptions = React82.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options2.onFirstUpdate,
    placement: options2.placement || "bottom",
    strategy: options2.strategy || "absolute",
    modifiers: options2.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React82.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React82.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn2(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        ReactDOM.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element3) {
              return [element3, state2.styles[element3] || {}];
            })),
            attributes: fromEntries(elements.map(function(element3) {
              return [element3, state2.attributes[element3]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React82.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare2.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React82.useRef();
  useIsomorphicLayoutEffect(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper4 = options2.createPopper || createPopper3;
    var popperInstance = createPopper4(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options2.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/react-popper/lib/esm/Reference.js
var React84 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/stream-chat-react/dist/components/MessageActions/hooks/useMessageActionsBoxPopper.js
function useMessageActionsBoxPopper(_a) {
  var open = _a.open, placement = _a.placement, referenceElement = _a.referenceElement;
  var popperElementRef = (0, import_react127.useRef)(null);
  var _b = usePopper(referenceElement, popperElementRef.current, {
    modifiers: [
      {
        name: "eventListeners",
        options: {
          // It's not safe to update popper position on resize and scroll, since popper's
          // reference element might not be visible at the time.
          resize: false,
          scroll: false
        }
      }
    ],
    placement
  }), attributes = _b.attributes, styles = _b.styles, update = _b.update;
  (0, import_react127.useEffect)(function() {
    if (open) {
      update === null || update === void 0 ? void 0 : update();
    }
  }, [open, update]);
  return {
    attributes,
    popperElementRef,
    styles
  };
}

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActions.js
var MessageActions = function(props) {
  var _a = props.ActionsIcon, ActionsIcon2 = _a === void 0 ? ActionsIcon : _a, _b = props.customWrapperClass, customWrapperClass = _b === void 0 ? "" : _b, propGetMessageActions = props.getMessageActions, propHandleDelete = props.handleDelete, propHandleFlag = props.handleFlag, propHandleMarkUnread = props.handleMarkUnread, propHandleMute = props.handleMute, propHandlePin = props.handlePin, inline = props.inline, propMessage = props.message, messageWrapperRef = props.messageWrapperRef, mine = props.mine;
  var mutes = useChatContext("MessageActions").mutes;
  var _c = useMessageContext("MessageActions"), customMessageActions = _c.customMessageActions, contextGetMessageActions = _c.getMessageActions, contextHandleDelete = _c.handleDelete, contextHandleFlag = _c.handleFlag, contextHandleMarkUnread = _c.handleMarkUnread, contextHandleMute = _c.handleMute, contextHandlePin = _c.handlePin, isMyMessage = _c.isMyMessage, contextMessage = _c.message, setEditingState = _c.setEditingState, threadList = _c.threadList;
  var CustomMessageActionsList2 = useComponentContext("MessageActions").CustomMessageActionsList;
  var t2 = useTranslationContext("MessageActions").t;
  var getMessageActions2 = propGetMessageActions || contextGetMessageActions;
  var handleDelete2 = propHandleDelete || contextHandleDelete;
  var handleFlag = propHandleFlag || contextHandleFlag;
  var handleMarkUnread = propHandleMarkUnread || contextHandleMarkUnread;
  var handleMute = propHandleMute || contextHandleMute;
  var handlePin = propHandlePin || contextHandlePin;
  var message = propMessage || contextMessage;
  var isMine = mine ? mine() : isMyMessage();
  var _d = (0, import_react128.useState)(false), actionsBoxOpen = _d[0], setActionsBoxOpen = _d[1];
  var isMuted = (0, import_react128.useCallback)(function() {
    return isUserMuted(message, mutes);
  }, [message, mutes]);
  var messageActions = getMessageActions2();
  var renderMessageActions = shouldRenderMessageActions({
    customMessageActions,
    CustomMessageActionsList: CustomMessageActionsList2,
    inThread: threadList,
    messageActions
  });
  var hideOptions = (0, import_react128.useCallback)(function(event) {
    if (event instanceof KeyboardEvent && event.key !== "Escape") {
      return;
    }
    setActionsBoxOpen(false);
  }, []);
  var messageDeletedAt = !!(message === null || message === void 0 ? void 0 : message.deleted_at);
  (0, import_react128.useEffect)(function() {
    if (messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current) {
      messageWrapperRef.current.addEventListener("mouseleave", hideOptions);
    }
  }, [hideOptions, messageWrapperRef]);
  (0, import_react128.useEffect)(function() {
    if (messageDeletedAt) {
      document.removeEventListener("click", hideOptions);
    }
  }, [hideOptions, messageDeletedAt]);
  (0, import_react128.useEffect)(function() {
    if (!actionsBoxOpen)
      return;
    document.addEventListener("click", hideOptions);
    document.addEventListener("keyup", hideOptions);
    return function() {
      document.removeEventListener("click", hideOptions);
      document.removeEventListener("keyup", hideOptions);
    };
  }, [actionsBoxOpen, hideOptions]);
  var actionsBoxButtonRef = (0, import_react128.useRef)(null);
  var _e = useMessageActionsBoxPopper({
    open: actionsBoxOpen,
    placement: isMine ? "top-end" : "top-start",
    referenceElement: actionsBoxButtonRef.current
  }), attributes = _e.attributes, popperElementRef = _e.popperElementRef, styles = _e.styles;
  if (!renderMessageActions)
    return null;
  return import_react128.default.createElement(
    MessageActionsWrapper,
    { customWrapperClass, inline, setActionsBoxOpen },
    import_react128.default.createElement(MessageActionsBox, __assign({}, attributes.popper, { getMessageActions: getMessageActions2, handleDelete: handleDelete2, handleEdit: setEditingState, handleFlag, handleMarkUnread, handleMute, handlePin, isUserMuted: isMuted, mine: isMine, open: actionsBoxOpen, ref: popperElementRef, style: styles.popper })),
    import_react128.default.createElement(
      "button",
      { "aria-expanded": actionsBoxOpen, "aria-haspopup": "true", "aria-label": t2("aria/Open Message Actions Menu"), className: "str-chat__message-actions-box-button", ref: actionsBoxButtonRef },
      import_react128.default.createElement(ActionsIcon2, { className: "str-chat__message-action-icon" })
    )
  );
};
var MessageActionsWrapper = function(props) {
  var children = props.children, customWrapperClass = props.customWrapperClass, inline = props.inline, setActionsBoxOpen = props.setActionsBoxOpen;
  var defaultWrapperClass = clsx_default("str-chat__message-simple__actions__action", "str-chat__message-simple__actions__action--options", "str-chat__message-actions-container");
  var wrapperClass = customWrapperClass || defaultWrapperClass;
  var onClickOptionsAction = function(event) {
    event.stopPropagation();
    setActionsBoxOpen(function(prev) {
      return !prev;
    });
  };
  var wrapperProps = {
    className: wrapperClass,
    "data-testid": "message-actions",
    onClick: onClickOptionsAction
  };
  if (inline)
    return import_react128.default.createElement("span", __assign({}, wrapperProps), children);
  return import_react128.default.createElement("div", __assign({}, wrapperProps), children);
};

// node_modules/stream-chat-react/dist/components/Message/MessageOptions.js
var UnMemoizedMessageOptions = function(props) {
  var _a = props.ActionsIcon, ActionsIcon2 = _a === void 0 ? ActionsIcon : _a, _b = props.displayReplies, displayReplies = _b === void 0 ? true : _b, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _c = props.ReactionIcon, ReactionIcon2 = _c === void 0 ? ReactionIcon : _c, _d = props.theme, theme = _d === void 0 ? "simple" : _d, _e = props.ThreadIcon, ThreadIcon2 = _e === void 0 ? ThreadIcon : _e;
  var _f = useMessageContext("MessageOptions"), getMessageActions2 = _f.getMessageActions, contextHandleOpenThread = _f.handleOpenThread, initialMessage = _f.initialMessage, message = _f.message, onReactionListClick = _f.onReactionListClick, showDetailedReactions = _f.showDetailedReactions, threadList = _f.threadList;
  var t2 = useTranslationContext("MessageOptions").t;
  var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;
  var messageActions = getMessageActions2();
  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;
  if (!message.type || message.type === "error" || message.type === "system" || message.type === "ephemeral" || message.status === "failed" || message.status === "sending" || initialMessage) {
    return null;
  }
  var rootClassName2 = "str-chat__message-".concat(theme, "__actions str-chat__message-options");
  return import_react129.default.createElement(
    "div",
    { className: rootClassName2, "data-testid": "message-options" },
    import_react129.default.createElement(MessageActions, { ActionsIcon: ActionsIcon2, messageWrapperRef }),
    shouldShowReplies && import_react129.default.createElement(
      "button",
      { "aria-label": t2("aria/Open Thread"), className: "str-chat__message-".concat(theme, "__actions__action str-chat__message-").concat(theme, "__actions__action--thread str-chat__message-reply-in-thread-button"), "data-testid": "thread-action", onClick: handleOpenThread },
      import_react129.default.createElement(ThreadIcon2, { className: "str-chat__message-action-icon" })
    ),
    shouldShowReactions && import_react129.default.createElement(
      "button",
      { "aria-expanded": showDetailedReactions, "aria-label": t2("aria/Open Reaction Selector"), className: "str-chat__message-".concat(theme, "__actions__action str-chat__message-").concat(theme, "__actions__action--reactions str-chat__message-reactions-button"), "data-testid": "message-reaction-action", onClick: onReactionListClick },
      import_react129.default.createElement(ReactionIcon2, { className: "str-chat__message-action-icon" })
    )
  );
};
var MessageOptions = import_react129.default.memo(UnMemoizedMessageOptions);

// node_modules/stream-chat-react/dist/components/Message/MessageRepliesCountButton.js
var import_react130 = __toESM(require_react());
var UnMemoizedMessageRepliesCountButton = function(props) {
  var labelPlural = props.labelPlural, labelSingle = props.labelSingle, onClick = props.onClick, _a = props.reply_count, reply_count = _a === void 0 ? 0 : _a;
  var t2 = useTranslationContext("MessageRepliesCountButton").t;
  var themeVersion = useChatContext("MessageRepliesCountButton").themeVersion;
  if (!reply_count)
    return null;
  var replyCountText = t2("replyCount", { count: reply_count });
  if (labelPlural && reply_count > 1) {
    replyCountText = "".concat(reply_count, " ").concat(labelPlural);
  } else if (labelSingle) {
    replyCountText = "1 ".concat(labelSingle);
  }
  return import_react130.default.createElement(
    "div",
    { className: "str-chat__message-simple-reply-button str-chat__message-replies-count-button-wrapper" },
    import_react130.default.createElement(
      "button",
      { className: "str-chat__message-replies-count-button", "data-testid": "replies-count-button", onClick },
      themeVersion === "1" && import_react130.default.createElement(ReplyIcon, null),
      replyCountText
    )
  );
};
var MessageRepliesCountButton = import_react130.default.memo(UnMemoizedMessageRepliesCountButton);

// node_modules/stream-chat-react/dist/components/Message/MessageStatus.js
var import_react133 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Tooltip/Tooltip.js
var import_react131 = __toESM(require_react());
var Tooltip = function(_a) {
  var children = _a.children, rest = __rest(_a, ["children"]);
  return import_react131.default.createElement("div", __assign({ className: "str-chat__tooltip" }, rest), children);
};
var PopperTooltip = function(_a) {
  var children = _a.children, _b = _a.offset, offset2 = _b === void 0 ? [0, 10] : _b, referenceElement = _a.referenceElement, _c = _a.placement, placement = _c === void 0 ? "top" : _c, _d = _a.visible, visible = _d === void 0 ? false : _d;
  var _e = (0, import_react131.useState)(null), popperElement = _e[0], setPopperElement = _e[1];
  var _f = usePopper(referenceElement, popperElement, {
    modifiers: [
      {
        name: "offset",
        options: {
          offset: offset2
        }
      }
    ],
    placement
  }), attributes = _f.attributes, styles = _f.styles;
  if (!visible)
    return null;
  return import_react131.default.createElement("div", __assign({ className: "str-chat__tooltip", ref: setPopperElement, style: styles.popper }, attributes.popper), children);
};

// node_modules/stream-chat-react/dist/components/Tooltip/hooks/useEnterLeaveHandlers.js
var import_react132 = __toESM(require_react());
var useEnterLeaveHandlers = function(_a) {
  var _b = _a === void 0 ? {} : _a, onMouseEnter = _b.onMouseEnter, onMouseLeave = _b.onMouseLeave;
  var _c = (0, import_react132.useState)(false), tooltipVisible = _c[0], setTooltipVisible = _c[1];
  var handleEnter = (0, import_react132.useCallback)(function(e) {
    setTooltipVisible(true);
    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
  }, [onMouseEnter]);
  var handleLeave = (0, import_react132.useCallback)(function(e) {
    setTooltipVisible(false);
    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
  }, [onMouseLeave]);
  return { handleEnter, handleLeave, tooltipVisible };
};

// node_modules/stream-chat-react/dist/components/Message/MessageStatus.js
var UnMemoizedMessageStatus = function(props) {
  var _a;
  var propAvatar = props.Avatar, MessageDeliveredStatus = props.MessageDeliveredStatus, MessageReadStatus = props.MessageReadStatus, MessageSendingStatus = props.MessageSendingStatus, _b = props.messageType, messageType = _b === void 0 ? "simple" : _b, _c = props.tooltipUserNameMapper, tooltipUserNameMapper = _c === void 0 ? mapToUserNameOrId : _c;
  var _d = useEnterLeaveHandlers(), handleEnter = _d.handleEnter, handleLeave = _d.handleLeave, tooltipVisible = _d.tooltipVisible;
  var _e = useChatContext("MessageStatus"), client = _e.client, themeVersion = _e.themeVersion;
  var contextAvatar = useComponentContext("MessageStatus").Avatar;
  var _f = useMessageContext("MessageStatus"), isMyMessage = _f.isMyMessage, lastReceivedId = _f.lastReceivedId, message = _f.message, readBy = _f.readBy, threadList = _f.threadList;
  var t2 = useTranslationContext("MessageStatus").t;
  var _g = (0, import_react133.useState)(null), referenceElement = _g[0], setReferenceElement = _g[1];
  var Avatar2 = propAvatar || contextAvatar || Avatar;
  if (!isMyMessage() || message.type === "error")
    return null;
  var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);
  var rootClassName2 = "str-chat__message-".concat(messageType, "-status str-chat__message-status");
  var sending = message.status === "sending";
  var delivered = message.status === "received" && message.id === lastReceivedId && !threadList;
  var deliveredAndRead = !!((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe);
  var readersWithoutOwnUser = deliveredAndRead ? readBy.filter(function(item) {
    var _a2;
    return item.id !== ((_a2 = client.user) === null || _a2 === void 0 ? void 0 : _a2.id);
  }) : [];
  var lastReadUser = readersWithoutOwnUser[0];
  return import_react133.default.createElement(
    "span",
    { className: rootClassName2, "data-testid": clsx_default({
      "message-status-read-by": deliveredAndRead,
      "message-status-received": delivered && !deliveredAndRead,
      "message-status-sending": sending
    }), onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
    sending && (MessageSendingStatus ? import_react133.default.createElement(MessageSendingStatus, null) : import_react133.default.createElement(
      import_react133.default.Fragment,
      null,
      themeVersion === "1" && import_react133.default.createElement(Tooltip, null, t2("Sending...")),
      themeVersion === "2" && import_react133.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, t2("Sending...")),
      import_react133.default.createElement(LoadingIndicator2, null)
    )),
    delivered && !deliveredAndRead && (MessageDeliveredStatus ? import_react133.default.createElement(MessageDeliveredStatus, null) : import_react133.default.createElement(
      import_react133.default.Fragment,
      null,
      themeVersion === "1" && import_react133.default.createElement(Tooltip, null, t2("Delivered")),
      themeVersion === "2" && import_react133.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, t2("Delivered")),
      themeVersion === "2" ? import_react133.default.createElement(MessageDeliveredIcon, null) : import_react133.default.createElement(DeliveredCheckIcon, null)
    )),
    deliveredAndRead && (MessageReadStatus ? import_react133.default.createElement(MessageReadStatus, null) : import_react133.default.createElement(
      import_react133.default.Fragment,
      null,
      themeVersion === "1" && import_react133.default.createElement(Tooltip, null, getReadByTooltipText(readBy, t2, client, tooltipUserNameMapper)),
      themeVersion === "2" && import_react133.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, getReadByTooltipText(readBy, t2, client, tooltipUserNameMapper)),
      import_react133.default.createElement(Avatar2, { image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, size: 15, user: lastReadUser }),
      readersWithoutOwnUser.length > 1 && import_react133.default.createElement("span", { className: "str-chat__message-".concat(messageType, "-status-number"), "data-testid": "message-status-read-by-many" }, readersWithoutOwnUser.length)
    ))
  );
};
var MessageStatus = import_react133.default.memo(UnMemoizedMessageStatus);

// node_modules/stream-chat-react/dist/components/Message/MessageText.js
var import_react136 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/QuotedMessage.js
var import_react134 = __toESM(require_react());
var QuotedMessage = function() {
  var _a, _b, _c;
  var _d = useComponentContext("QuotedMessage"), Attachment2 = _d.Attachment, ContextAvatar = _d.Avatar;
  var _e = useMessageContext("QuotedMessage"), isMyMessage = _e.isMyMessage, message = _e.message;
  var _f = useTranslationContext("QuotedMessage"), t2 = _f.t, userLanguage = _f.userLanguage;
  var jumpToMessage = useChannelActionContext("QuotedMessage").jumpToMessage;
  var Avatar2 = ContextAvatar || Avatar;
  var quoted_message = message.quoted_message;
  if (!quoted_message)
    return null;
  var quotedMessageDeleted = quoted_message.deleted_at || quoted_message.type === "deleted";
  var quotedMessageText = quotedMessageDeleted ? t2("This message was deleted...") : ((_a = quoted_message.i18n) === null || _a === void 0 ? void 0 : _a["".concat(userLanguage, "_text")]) || quoted_message.text;
  var quotedMessageAttachment = ((_b = quoted_message.attachments) === null || _b === void 0 ? void 0 : _b.length) && !quotedMessageDeleted ? quoted_message.attachments[0] : null;
  if (!quotedMessageText && !quotedMessageAttachment)
    return null;
  return import_react134.default.createElement(
    import_react134.default.Fragment,
    null,
    import_react134.default.createElement(
      "div",
      { className: clsx_default("str-chat__quoted-message-preview quoted-message", { mine: isMyMessage() }), "data-testid": "quoted-message", onClickCapture: function(e) {
        e.stopPropagation();
        e.preventDefault();
        jumpToMessage(quoted_message.id);
      } },
      quoted_message.user && import_react134.default.createElement(Avatar2, { image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, size: 20, user: quoted_message.user }),
      import_react134.default.createElement(
        "div",
        { className: "quoted-message-inner str-chat__quoted-message-bubble", "data-testid": "quoted-message-contents" },
        quotedMessageAttachment && import_react134.default.createElement(Attachment2, { attachments: [quotedMessageAttachment], isQuoted: true }),
        import_react134.default.createElement("div", { "data-testid": "quoted-message-text" }, quotedMessageText)
      )
    ),
    ((_c = message.attachments) === null || _c === void 0 ? void 0 : _c.length) ? import_react134.default.createElement(Attachment2, { attachments: message.attachments }) : null
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageErrorText.js
var import_react135 = __toESM(require_react());
function MessageErrorText(_a) {
  var message = _a.message, theme = _a.theme;
  var t2 = useTranslationContext("MessageText").t;
  if (message.type === "error" && !isMessageBounced(message)) {
    return import_react135.default.createElement("div", { className: "str-chat__".concat(theme, "-message--error-message str-chat__message--error-message") }, t2("Error · Unsent"));
  }
  if (message.status === "failed") {
    return import_react135.default.createElement("div", { className: "str-chat__".concat(theme, "-message--error-message str-chat__message--error-message") }, message.errorStatusCode !== 403 ? t2("Message Failed · Click to try again") : t2("Message Failed · Unauthorized"));
  }
  return null;
}

// node_modules/stream-chat-react/dist/components/Message/MessageText.js
var UnMemoizedMessageTextComponent = function(props) {
  var _a, _b;
  var customInnerClass = props.customInnerClass, _c = props.customWrapperClass, customWrapperClass = _c === void 0 ? "" : _c, propMessage = props.message, propsRenderText = props.renderText, _d = props.theme, theme = _d === void 0 ? "simple" : _d;
  var _e = useComponentContext("MessageText").QuotedMessage, QuotedMessage2 = _e === void 0 ? QuotedMessage : _e;
  var _f = useMessageContext("MessageText"), contextMessage = _f.message, onMentionsClickMessage = _f.onMentionsClickMessage, onMentionsHoverMessage = _f.onMentionsHoverMessage, contextRenderText = _f.renderText, unsafeHTML = _f.unsafeHTML;
  var renderText2 = (_a = propsRenderText !== null && propsRenderText !== void 0 ? propsRenderText : contextRenderText) !== null && _a !== void 0 ? _a : renderText;
  var userLanguage = useTranslationContext("MessageText").userLanguage;
  var message = propMessage || contextMessage;
  var hasAttachment = messageHasAttachments(message);
  var messageTextToRender = ((_b = message.i18n) === null || _b === void 0 ? void 0 : _b["".concat(userLanguage, "_text")]) || message.text;
  var messageText = (0, import_react136.useMemo)(function() {
    return renderText2(messageTextToRender, message.mentioned_users);
  }, [
    message.mentioned_users,
    messageTextToRender
  ]);
  var wrapperClass = customWrapperClass || "str-chat__message-text";
  var innerClass = customInnerClass || "str-chat__message-text-inner str-chat__message-".concat(theme, "-text-inner");
  if (!messageTextToRender && !message.quoted_message)
    return null;
  return import_react136.default.createElement(
    "div",
    { className: wrapperClass, tabIndex: 0 },
    import_react136.default.createElement(
      "div",
      { className: "\n          ".concat(innerClass, "\n          ").concat(hasAttachment ? " str-chat__message-".concat(theme, "-text-inner--has-attachment") : "", "\n          ").concat(isOnlyEmojis(message.text) && !message.quoted_message ? " str-chat__message-".concat(theme, "-text-inner--is-emoji") : "", "\n        ").trim(), "data-testid": "message-text-inner-wrapper", onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage },
      message.quoted_message && import_react136.default.createElement(QuotedMessage2, null),
      import_react136.default.createElement(MessageErrorText, { message, theme }),
      unsafeHTML && message.html ? import_react136.default.createElement("div", { dangerouslySetInnerHTML: { __html: message.html } }) : import_react136.default.createElement("div", null, messageText)
    )
  );
};
var MessageText = import_react136.default.memo(UnMemoizedMessageTextComponent);

// node_modules/stream-chat-react/dist/components/Message/MessageTimestamp.js
var import_react138 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/Timestamp.js
var import_react137 = __toESM(require_react());
var defaultTimestampFormat = "h:mmA";
function Timestamp(props) {
  var calendar3 = props.calendar, calendarFormats = props.calendarFormats, customClass = props.customClass, _a = props.format, format = _a === void 0 ? defaultTimestampFormat : _a, timestamp = props.timestamp;
  var formatDate = useMessageContext("MessageTimestamp").formatDate;
  var _b = useTranslationContext("MessageTimestamp"), t2 = _b.t, tDateTimeParser = _b.tDateTimeParser;
  var normalizedTimestamp = timestamp && isDate(timestamp) ? timestamp.toISOString() : timestamp;
  var when = (0, import_react137.useMemo)(function() {
    return getDateString({
      calendar: calendar3,
      calendarFormats,
      format,
      formatDate,
      messageCreatedAt: normalizedTimestamp,
      t: t2,
      tDateTimeParser,
      timestampTranslationKey: "timestamp/MessageTimestamp"
    });
  }, [calendar3, calendarFormats, format, formatDate, normalizedTimestamp, t2, tDateTimeParser]);
  if (!when) {
    return null;
  }
  return import_react137.default.createElement("time", { className: customClass, dateTime: normalizedTimestamp, title: normalizedTimestamp }, when);
}

// node_modules/stream-chat-react/dist/components/Message/MessageTimestamp.js
var defaultTimestampFormat2 = "h:mmA";
var UnMemoizedMessageTimestamp = function(props) {
  var propMessage = props.message, timestampProps = __rest(props, ["message"]);
  var contextMessage = useMessageContext("MessageTimestamp").message;
  var _a = useComponentContext("MessageTimestamp").Timestamp, Timestamp2 = _a === void 0 ? Timestamp : _a;
  var message = propMessage || contextMessage;
  return import_react138.default.createElement(Timestamp2, __assign({ timestamp: message.created_at }, timestampProps));
};
var MessageTimestamp = import_react138.default.memo(UnMemoizedMessageTimestamp);

// node_modules/stream-chat-react/dist/constants/messageTypes.js
var CUSTOM_MESSAGE_TYPE = {
  date: "message.date",
  intro: "channel.intro"
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.js
var import_react152 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/UnsupportedAttachmentPreview.js
var import_react140 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/icons.js
var import_react139 = __toESM(require_react());
var EmojiIconLarge = function() {
  var t2 = useTranslationContext("EmojiIconLarge").t;
  return import_react139.default.createElement(
    "svg",
    { height: "28", viewBox: "0 0 28 28", width: "28", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("title", null, t2("Open emoji picker")),
    import_react139.default.createElement(
      "g",
      { clipRule: "evenodd", fillRule: "evenodd" },
      import_react139.default.createElement("path", { d: "M14 4.4C8.6 4.4 4.4 8.6 4.4 14c0 5.4 4.2 9.6 9.6 9.6c5.4 0 9.6-4.2 9.6-9.6c0-5.4-4.2-9.6-9.6-9.6zM2 14c0-6.6 5.4-12 12-12s12 5.4 12 12s-5.4 12-12 12s-12-5.4-12-12zM12.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM18.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM8.6 15.4c.6-.4 1.2-.2 1.6.2c.6.8 1.6 1.8 3 2c1.2.4 2.8.2 4.8-2c.4-.4 1.2-.6 1.6 0c.4.4.6 1.2 0 1.6c-2.2 2.6-4.8 3.4-7 3c-2-.4-3.6-1.8-4.4-3c-.4-.6-.2-1.2.4-1.8z" })
    )
  );
};
var EmojiIconSmall = function() {
  var t2 = useTranslationContext("EmojiIconSmall").t;
  return import_react139.default.createElement(
    "svg",
    { height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("title", null, t2("Open emoji picker")),
    import_react139.default.createElement(
      "g",
      { clipRule: "evenodd", fillRule: "evenodd" },
      import_react139.default.createElement("path", { d: "M6.7 1.42C3.73 1.42 1.42 3.73 1.42 6.7c0 2.97 2.31 5.28 5.28 5.28c2.97 0 5.28-2.31 5.28-5.28c0-2.97-2.31-5.28-5.28-5.28zM.1 6.7c0-3.63 2.97-6.6 6.6-6.6s6.6 2.97 6.6 6.6s-2.97 6.6-6.6 6.6s-6.6-2.97-6.6-6.6zM6.04 5.05c0 .55-.44.99-.99.99s-.99-.44-.99-.99s.44-.99.99-.99s.99.44.99.99zM9.34 5.05c0 .55-.44.99-.99.99s-.99-.44-.99-.99s.44-.99.99-.99s.99.44.99.99zM3.73 7.47c.33-.22.66-.11.88.11c.33.44.88.99 1.65 1.1c.66.22 1.54.11 2.64-1.1c.22-.22.66-.33.88 0c.22.22.33.66 0 .88c-1.21 1.43-2.64 1.87-3.85 1.65c-1.1-.22-1.98-.99-2.42-1.65c-.22-.33-.11-.66.22-.99z" })
    )
  );
};
var EmojiPickerIcon = function() {
  return import_react139.default.createElement(
    "svg",
    { preserveAspectRatio: "xMinYMin", viewBox: "0 0 28 28", width: "100%", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement(
      "g",
      { clipRule: "evenodd", fillRule: "evenodd" },
      import_react139.default.createElement("path", { d: "M14 4.4C8.6 4.4 4.4 8.6 4.4 14c0 5.4 4.2 9.6 9.6 9.6c5.4 0 9.6-4.2 9.6-9.6c0-5.4-4.2-9.6-9.6-9.6zM2 14c0-6.6 5.4-12 12-12s12 5.4 12 12s-5.4 12-12 12s-12-5.4-12-12zM12.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM18.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM8.6 15.4c.6-.4 1.2-.2 1.6.2c.6.8 1.6 1.8 3 2c1.2.4 2.8.2 4.8-2c.4-.4 1.2-.6 1.6 0c.4.4.6 1.2 0 1.6c-2.2 2.6-4.8 3.4-7 3c-2-.4-3.6-1.8-4.4-3c-.4-.6-.2-1.2.4-1.8z" })
    )
  );
};
var FileUploadIcon = function() {
  var t2 = useTranslationContext("FileUploadIcon").t;
  return import_react139.default.createElement(
    "svg",
    { height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("title", null, t2("Attach files")),
    import_react139.default.createElement("path", { d: "M7 .5c3.59 0 6.5 2.91 6.5 6.5s-2.91 6.5-6.5 6.5S.5 10.59.5 7 3.41.5 7 .5zm0 12c3.031 0 5.5-2.469 5.5-5.5S10.031 1.5 7 1.5A5.506 5.506 0 0 0 1.5 7c0 3.034 2.469 5.5 5.5 5.5zM7.506 3v3.494H11v1.05H7.506V11h-1.05V7.544H3v-1.05h3.456V3h1.05z", fillRule: "nonzero" })
  );
};
var FileUploadIconFlat = function() {
  var t2 = useTranslationContext("FileUploadIconFlat").t;
  return import_react139.default.createElement(
    "svg",
    { height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("title", null, t2("Attach files")),
    import_react139.default.createElement("path", { d: "M1.667.333h10.666c.737 0 1.334.597 1.334 1.334v10.666c0 .737-.597 1.334-1.334 1.334H1.667a1.333 1.333 0 0 1-1.334-1.334V1.667C.333.93.93.333 1.667.333zm2 1.334a1.667 1.667 0 1 0 0 3.333 1.667 1.667 0 0 0 0-3.333zm-2 9.333v1.333h10.666v-4l-2-2-4 4-2-2L1.667 11z", fillRule: "nonzero" })
  );
};
var LoadingIndicatorIcon = function(_a) {
  var _b = _a.size, size = _b === void 0 ? 20 : _b;
  var id = (0, import_react139.useMemo)(function() {
    return nanoid();
  }, []);
  return import_react139.default.createElement(
    "div",
    { className: "str-chat__loading-indicator" },
    import_react139.default.createElement(
      "svg",
      { "data-testid": "loading-indicator", height: size, viewBox: "0 0 30 30", width: size, xmlns: "http://www.w3.org/2000/svg" },
      import_react139.default.createElement(
        "defs",
        null,
        import_react139.default.createElement(
          "linearGradient",
          { id: "".concat(id, "-linear-gradient"), x1: "50%", x2: "50%", y1: "0%", y2: "100%" },
          import_react139.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }),
          import_react139.default.createElement("stop", { "data-testid": "stop-color", offset: "100%", stopOpacity: "1" })
        )
      ),
      import_react139.default.createElement("path", { d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z", fill: "url(#".concat(id, "-linear-gradient)"), fillRule: "evenodd" })
    )
  );
};
var UploadIcon = function() {
  return import_react139.default.createElement(
    "svg",
    { "data-testid": "attach", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement(
      "g",
      { clipPath: "url(#clip0_10878_5)" },
      import_react139.default.createElement("path", { d: "M12.9997 6.99993L10.9997 6.99993L10.9997 10.9999L6.99972 10.9999L6.99972 12.9999L10.9997 12.9999L10.9997 16.9999L12.9997 16.9999L12.9997 12.9999L16.9997 12.9999L16.9997 10.9999L12.9997 10.9999L12.9997 6.99993ZM11.9997 1.99992C6.47972 1.99992 1.99972 6.47993 1.99972 11.9999C1.99972 17.5199 6.47972 21.9999 11.9997 21.9999C17.5197 21.9999 21.9997 17.5199 21.9997 11.9999C21.9997 6.47993 17.5197 1.99992 11.9997 1.99992ZM11.9997 19.9999C7.58972 19.9999 3.99972 16.4099 3.99972 11.9999C3.99972 7.58993 7.58972 3.99993 11.9997 3.99993C16.4097 3.99993 19.9997 7.58993 19.9997 11.9999C19.9997 16.4099 16.4097 19.9999 11.9997 19.9999Z", fill: "black" })
    ),
    import_react139.default.createElement(
      "defs",
      null,
      import_react139.default.createElement(
        "clipPath",
        { id: "clip0_10878_5" },
        import_react139.default.createElement("rect", { fill: "white", height: "24", width: "24" })
      )
    )
  );
};
var CloseIcon2 = function() {
  return import_react139.default.createElement(
    "svg",
    { "data-testid": "close-no-outline", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "black" })
  );
};
var RetryIcon2 = function() {
  return import_react139.default.createElement(
    "svg",
    { "data-testid": "retry", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M17.6449 6.35C16.1949 4.9 14.2049 4 11.9949 4C7.57488 4 4.00488 7.58 4.00488 12C4.00488 16.42 7.57488 20 11.9949 20C15.7249 20 18.8349 17.45 19.7249 14H17.6449C16.8249 16.33 14.6049 18 11.9949 18C8.68488 18 5.99488 15.31 5.99488 12C5.99488 8.69 8.68488 6 11.9949 6C13.6549 6 15.1349 6.69 16.2149 7.78L12.9949 11H19.9949V4L17.6449 6.35Z", fill: "black" })
  );
};
var DownloadIcon2 = function() {
  return import_react139.default.createElement(
    "svg",
    { "data-testid": "download", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z", fill: "black" })
  );
};
var LinkIcon = function() {
  return import_react139.default.createElement(
    "svg",
    { fill: "none", height: "11", viewBox: "0 0 20 11", width: "20", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { clipRule: "evenodd", d: "M1.9 5.5C1.9 3.79 3.29 2.4 5 2.4H8.05C8.57467 2.4 9 1.97467 9 1.45C9 0.925329 8.57467 0.5 8.05 0.5H5C2.24 0.5 0 2.74 0 5.5C0 8.26 2.24 10.5 5 10.5H8.05C8.57467 10.5 9 10.0747 9 9.55C9 9.02533 8.57467 8.6 8.05 8.6H5C3.29 8.6 1.9 7.21 1.9 5.5ZM6 5.5C6 6.05228 6.44772 6.5 7 6.5H13C13.5523 6.5 14 6.05228 14 5.5C14 4.94772 13.5523 4.5 13 4.5H7C6.44772 4.5 6 4.94772 6 5.5ZM15 0.5H11.95C11.4253 0.5 11 0.925329 11 1.45C11 1.97467 11.4253 2.4 11.95 2.4H15C16.71 2.4 18.1 3.79 18.1 5.5C18.1 7.21 16.71 8.6 15 8.6H11.95C11.4253 8.6 11 9.02533 11 9.55C11 10.0747 11.4253 10.5 11.95 10.5H15C17.76 10.5 20 8.26 20 5.5C20 2.74 17.76 0.5 15 0.5Z", fill: "#005DFF", fillRule: "evenodd" })
  );
};
var SendIconV1 = function() {
  var t2 = useTranslationContext("SendButton").t;
  return import_react139.default.createElement(
    "svg",
    { height: "17", viewBox: "0 0 18 17", width: "18", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("title", null, t2("Send")),
    import_react139.default.createElement("path", { d: "M0 17.015l17.333-8.508L0 0v6.617l12.417 1.89L0 10.397z", fill: "#006cff", fillRule: "evenodd" })
  );
};
var SendIconV2 = function() {
  var t2 = useTranslationContext("SendButton").t;
  return import_react139.default.createElement(
    "svg",
    { "data-testid": "send", fill: "currentColor", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("title", null, t2("Send")),
    import_react139.default.createElement("path", { d: "M4.00952 22L24 12L4.00952 2L4 9.77778L18.2857 12L4 14.2222L4.00952 22Z" })
  );
};
var MicIcon = function() {
  return import_react139.default.createElement(
    "svg",
    { fill: "currentColor", viewBox: "0 0 14 20", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M7 12.5C8.66 12.5 10 11.16 10 9.5V3.5C10 1.84 8.66 0.5 7 0.5C5.34 0.5 4 1.84 4 3.5V9.5C4 11.16 5.34 12.5 7 12.5Z" }),
    import_react139.default.createElement("path", { d: "M12 9.5C12 12.26 9.76 14.5 7 14.5C4.24 14.5 2 12.26 2 9.5H0C0 13.03 2.61 15.93 6 16.42V19.5H8V16.42C11.39 15.93 14 13.03 14 9.5H12Z" })
  );
};
var BinIcon = function() {
  return import_react139.default.createElement(
    "svg",
    { fill: "currentColor", viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M8.00033 25.3333C8.00033 26.8 9.20033 28 10.667 28H21.3337C22.8003 28 24.0003 26.8 24.0003 25.3333V12C24.0003 10.5333 22.8003 9.33333 21.3337 9.33333H10.667C9.20033 9.33333 8.00033 10.5333 8.00033 12V25.3333ZM24.0003 5.33333H20.667L19.7203 4.38667C19.4803 4.14667 19.1337 4 18.787 4H13.2137C12.867 4 12.5203 4.14667 12.2803 4.38667L11.3337 5.33333H8.00033C7.26699 5.33333 6.66699 5.93333 6.66699 6.66667C6.66699 7.4 7.26699 8 8.00033 8H24.0003C24.7337 8 25.3337 7.4 25.3337 6.66667C25.3337 5.93333 24.7337 5.33333 24.0003 5.33333Z" })
  );
};
var PauseIcon2 = function() {
  return import_react139.default.createElement(
    "svg",
    { "data-testid": "str-chat__pause-icon", fill: "currentColor", viewBox: "0 0 16 20", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M0 19.3333H5.33333V0.666626H0V19.3333ZM10.6667 0.666626V19.3333H16V0.666626H10.6667Z" })
  );
};
var PlayIcon = function() {
  return import_react139.default.createElement(
    "svg",
    { "data-testid": "str-chat__play-icon", fill: "currentColor", viewBox: "0 0 14 18", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M0.236328 2.09338V15.9067C0.236328 16.9601 1.39633 17.6001 2.28966 17.0267L13.143 10.1201C13.9697 9.60005 13.9697 8.40005 13.143 7.86672L2.28966 0.973385C1.39633 0.400051 0.236328 1.04005 0.236328 2.09338Z" })
  );
};
var CheckSignIcon = function() {
  return import_react139.default.createElement(
    "svg",
    { fill: "currentColor", viewBox: "0 0 18 14", xmlns: "http://www.w3.org/2000/svg" },
    import_react139.default.createElement("path", { d: "M5.79457 10.875L2.32457 7.40502C1.93457 7.01502 1.30457 7.01502 0.91457 7.40502C0.52457 7.79502 0.52457 8.42502 0.91457 8.81502L5.09457 12.995C5.48457 13.385 6.11457 13.385 6.50457 12.995L17.0846 2.41502C17.4746 2.02502 17.4746 1.39502 17.0846 1.00502C16.6946 0.615024 16.0646 0.615024 15.6746 1.00502L5.79457 10.875Z" })
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/UnsupportedAttachmentPreview.js
var UnsupportedAttachmentPreview = function(_a) {
  var _b, _c, _d, _e, _f;
  var attachment = _a.attachment, handleRetry = _a.handleRetry, removeAttachments = _a.removeAttachments;
  var t2 = useTranslationContext("UnsupportedAttachmentPreview").t;
  var title = (_b = attachment.title) !== null && _b !== void 0 ? _b : t2("Unsupported attachment");
  return import_react140.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-unsupported", "data-testid": "attachment-preview-unknown" },
    import_react140.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react140.default.createElement(FileIcon, { filename: title, mimeType: attachment.mime_type, version: "2" })
    ),
    import_react140.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_c = attachment.localMetadata) === null || _c === void 0 ? void 0 : _c.uploadState) === "uploading", onClick: function() {
        var _a2, _b2;
        return ((_a2 = attachment.localMetadata) === null || _a2 === void 0 ? void 0 : _a2.id) && removeAttachments([(_b2 = attachment.localMetadata) === null || _b2 === void 0 ? void 0 : _b2.id]);
      } },
      import_react140.default.createElement(CloseIcon2, null)
    ),
    ((_d = attachment.localMetadata) === null || _d === void 0 ? void 0 : _d.uploadState) === "failed" && !!handleRetry && import_react140.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: function() {
        return handleRetry(attachment);
      } },
      import_react140.default.createElement(RetryIcon2, null)
    ),
    import_react140.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-metadata" },
      import_react140.default.createElement("div", { className: "str-chat__attachment-preview-title", title }, title),
      ((_e = attachment.localMetadata) === null || _e === void 0 ? void 0 : _e.uploadState) === "finished" && !!attachment.asset_url && import_react140.default.createElement(
        "a",
        { className: "str-chat__attachment-preview-file-download", download: true, href: attachment.asset_url, rel: "noreferrer", target: "_blank" },
        import_react140.default.createElement(DownloadIcon2, null)
      ),
      ((_f = attachment.localMetadata) === null || _f === void 0 ? void 0 : _f.uploadState) === "uploading" && import_react140.default.createElement(LoadingIndicatorIcon, { size: 17 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.js
var import_react148 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/RecordingPermissionDeniedNotification.js
var import_react141 = __toESM(require_react());
var RecordingPermissionDeniedNotification = function(_a) {
  var onClose = _a.onClose, permissionName = _a.permissionName;
  var t2 = useTranslationContext().t;
  var permissionTranslations = {
    body: {
      camera: t2("To start recording, allow the camera access in your browser"),
      microphone: t2("To start recording, allow the microphone access in your browser")
    },
    heading: {
      camera: t2("Allow access to camera"),
      microphone: t2("Allow access to microphone")
    }
  };
  return import_react141.default.createElement(
    "div",
    { className: "str-chat__recording-permission-denied-notification" },
    import_react141.default.createElement("div", { className: "str-chat__recording-permission-denied-notification__heading" }, permissionTranslations.heading[permissionName]),
    import_react141.default.createElement("p", { className: "str-chat__recording-permission-denied-notification__message" }, permissionTranslations.body[permissionName]),
    import_react141.default.createElement(
      "div",
      { className: "str-chat__recording-permission-denied-notification__dismiss-button-container" },
      import_react141.default.createElement("button", { className: "str-chat__recording-permission-denied-notification__dismiss-button", onClick: onClose }, t2("Ok"))
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecorder.js
var import_react146 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.js
var import_react143 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/RecordingTimer.js
var import_react142 = __toESM(require_react());
var RecordingTimer = function(_a) {
  var durationSeconds = _a.durationSeconds;
  return import_react142.default.createElement("div", { className: clsx_default("str-chat__recording-timer", {
    "str-chat__recording-timer--hours": durationSeconds >= 3600
  }) }, displayDuration(durationSeconds));
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.js
var AudioRecordingPreview = function(_a) {
  var durationSeconds = _a.durationSeconds, mimeType = _a.mimeType, waveformData = _a.waveformData, props = __rest(_a, ["durationSeconds", "mimeType", "waveformData"]);
  var _b = useAudioController({
    durationSeconds,
    mimeType
  }), audioRef = _b.audioRef, isPlaying = _b.isPlaying, progress = _b.progress, secondsElapsed = _b.secondsElapsed, seek = _b.seek, togglePlay = _b.togglePlay;
  var displayedDuration = secondsElapsed || durationSeconds;
  return import_react143.default.createElement(
    import_react143.default.Fragment,
    null,
    import_react143.default.createElement(
      "audio",
      { ref: audioRef },
      import_react143.default.createElement("source", { src: props.src, type: mimeType })
    ),
    import_react143.default.createElement("button", { className: "str-chat__audio_recorder__toggle-playback-button", "data-testid": "audio-recording-preview-toggle-play-btn", onClick: togglePlay }, isPlaying ? import_react143.default.createElement(PauseIcon2, null) : import_react143.default.createElement(PlayIcon, null)),
    import_react143.default.createElement(RecordingTimer, { durationSeconds: displayedDuration }),
    import_react143.default.createElement(
      "div",
      { className: "str-chat__wave-progress-bar__track-container" },
      import_react143.default.createElement(WaveProgressBar, { progress, seek, waveformData: waveformData || [] })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.js
var import_react145 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useTimeElapsed.js
var import_react144 = __toESM(require_react());
var useTimeElapsed = function(_a) {
  var _b = _a === void 0 ? {} : _a, startOnMount = _b.startOnMount;
  var _c = (0, import_react144.useState)(0), secondsElapsed = _c[0], setSecondsElapsed = _c[1];
  var updateInterval = (0, import_react144.useRef)();
  var startCounter = (0, import_react144.useCallback)(function() {
    if (updateInterval.current)
      return;
    updateInterval.current = setInterval(function() {
      setSecondsElapsed(function(prev) {
        return prev + 1;
      });
    }, 1e3);
  }, []);
  var stopCounter = (0, import_react144.useCallback)(function() {
    clearInterval(updateInterval.current);
    updateInterval.current = void 0;
  }, []);
  (0, import_react144.useEffect)(function() {
    if (!startOnMount)
      return;
    startCounter();
    return function() {
      stopCounter();
    };
  }, [startCounter, startOnMount, stopCounter]);
  return {
    secondsElapsed,
    startCounter,
    stopCounter
  };
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.js
var AudioRecordingWaveform = function(_a) {
  var _b = _a.maxDataPointsDrawn, maxDataPointsDrawn = _b === void 0 ? 100 : _b;
  var recorder = useMessageInputContext().recordingController.recorder;
  var _c = (0, import_react145.useState)([]), amplitudes = _c[0], setAmplitudes = _c[1];
  (0, import_react145.useEffect)(function() {
    if (!(recorder === null || recorder === void 0 ? void 0 : recorder.amplitudeRecorder))
      return;
    var amplitudesSubscription = recorder.amplitudeRecorder.amplitudes.subscribe(setAmplitudes);
    return function() {
      amplitudesSubscription.unsubscribe();
    };
  }, [recorder]);
  if (!recorder)
    return null;
  return import_react145.default.createElement(
    "div",
    { className: "str-chat__waveform-box-container" },
    import_react145.default.createElement("div", { className: "str-chat__audio_recorder__waveform-box" }, amplitudes.slice(-maxDataPointsDrawn).map(function(amplitude, i) {
      return import_react145.default.createElement("div", { className: "str-chat__wave-progress-bar__amplitude-bar", key: "amplitude-".concat(i, "-voice-recording"), style: {
        "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
      } });
    }))
  );
};
var AudioRecordingInProgress = function() {
  var _a = useTimeElapsed(), secondsElapsed = _a.secondsElapsed, startCounter = _a.startCounter, stopCounter = _a.stopCounter;
  var recorder = useMessageInputContext().recordingController.recorder;
  (0, import_react145.useEffect)(function() {
    if (!(recorder === null || recorder === void 0 ? void 0 : recorder.mediaRecorder))
      return;
    var mediaRecorder = recorder.mediaRecorder;
    if (mediaRecorder.state === "recording") {
      startCounter();
    }
    mediaRecorder.addEventListener("start", startCounter);
    mediaRecorder.addEventListener("resume", startCounter);
    mediaRecorder.addEventListener("stop", stopCounter);
    mediaRecorder.addEventListener("pause", stopCounter);
    return function() {
      mediaRecorder.removeEventListener("start", startCounter);
      mediaRecorder.removeEventListener("resume", startCounter);
      mediaRecorder.removeEventListener("stop", stopCounter);
      mediaRecorder.removeEventListener("pause", stopCounter);
    };
  }, [recorder, startCounter, stopCounter]);
  return import_react145.default.createElement(
    import_react145.default.Fragment,
    null,
    import_react145.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed }),
    import_react145.default.createElement(AudioRecordingWaveform, null)
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Subscription.js
var Subscription = (
  /** @class */
  function() {
    function Subscription2(unsubscribe) {
      this.closed = false;
      this._unsubscribe = unsubscribe;
    }
    Subscription2.prototype.unsubscribe = function() {
      var _a;
      this.closed = true;
      (_a = this._unsubscribe) === null || _a === void 0 ? void 0 : _a.call(this);
    };
    return Subscription2;
  }()
);

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Observer.js
function createObserver(observerOrNext) {
  return typeof observerOrNext === "function" ? { next: observerOrNext } : observerOrNext;
}

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Observable.js
var Observable = (
  /** @class */
  function() {
    function Observable2(producer) {
      this._closed = false;
      if (producer)
        this._producer = producer;
    }
    Object.defineProperty(Observable2.prototype, "closed", {
      get: function() {
        return this._closed;
      },
      enumerable: false,
      configurable: true
    });
    Observable2.prototype.subscribe = function(observerOrNext) {
      var _this = this;
      var _a;
      var observer = createObserver(observerOrNext);
      if (!this.closed) {
        (_a = this._producer) === null || _a === void 0 ? void 0 : _a.call(this, observer);
      }
      return new Subscription(function() {
        _this._closed = true;
      });
    };
    return Observable2;
  }()
);

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Subject.js
var Subject = (
  /** @class */
  function(_super) {
    __extends(Subject2, _super);
    function Subject2() {
      var _this = _super.call(this) || this;
      _this._observers = /* @__PURE__ */ new Map();
      _this._observerCounter = 0;
      return _this;
    }
    Object.defineProperty(Subject2.prototype, "observers", {
      get: function() {
        return Array.from(this._observers.values());
      },
      enumerable: false,
      configurable: true
    });
    Subject2.prototype.next = function(value) {
      if (this.closed)
        return;
      var observers = this.observers;
      for (var i = 0; i < observers.length; i++) {
        observers[i].next(value);
      }
    };
    Subject2.prototype.error = function(err) {
      var _a, _b;
      if (this.closed)
        return;
      this.thrownError = err;
      var observers = this.observers;
      for (var i = 0; i < observers.length; i++) {
        (_b = (_a = observers[i]).error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      }
      this._observers.clear();
    };
    Subject2.prototype.complete = function() {
      var _a, _b;
      if (this.closed)
        return;
      this._closed = true;
      var observers = this.observers;
      for (var i = 0; i < observers.length; i++) {
        (_b = (_a = observers[i]).complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      this._observers.clear();
    };
    Subject2.prototype.subscribe = function(observerOrNext) {
      var _this = this;
      var observer = createObserver(observerOrNext);
      if (this.thrownError || this.closed) {
        var subscription = new Subscription();
        subscription.closed = true;
        return subscription;
      }
      var observerId = this._observerCounter++;
      this._observers.set(observerId, observer);
      return new Subscription(function() {
        _this._observers.delete(observerId);
      });
    };
    Subject2.prototype.unsubscribe = function() {
      this._closed = true;
      this._observers.clear();
    };
    return Subject2;
  }(Observable)
);

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/BehaviorSubject.js
var BehaviorSubject = (
  /** @class */
  function(_super) {
    __extends(BehaviorSubject2, _super);
    function BehaviorSubject2(_value) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      return _this;
    }
    Object.defineProperty(BehaviorSubject2.prototype, "value", {
      get: function() {
        var _a = this, _value = _a._value, thrownError = _a.thrownError;
        if (thrownError) {
          throw thrownError;
        }
        return _value;
      },
      enumerable: false,
      configurable: true
    });
    BehaviorSubject2.prototype.subscribe = function(observerOrNext) {
      var observer = createObserver(observerOrNext);
      var subscription = _super.prototype.subscribe.call(this, observerOrNext);
      if (!subscription.closed)
        observer.next(this._value);
      return subscription;
    };
    BehaviorSubject2.prototype.next = function(value) {
      _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject2;
  }(Subject)
);

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/BrowserPermission.js
var RecordingPermission;
(function(RecordingPermission2) {
  RecordingPermission2["CAM"] = "camera";
  RecordingPermission2["MIC"] = "microphone";
})(RecordingPermission || (RecordingPermission = {}));
var MEDIA_TO_PERMISSION = {
  audio: RecordingPermission.MIC,
  video: RecordingPermission.CAM
};
var BrowserPermission = (
  /** @class */
  function() {
    function BrowserPermission2(_a) {
      var mediaType = _a.mediaType;
      this.state = new BehaviorSubject(void 0);
      this.status = new BehaviorSubject(void 0);
      this.error = new Subject();
      this.changeSubscriptions = [];
      this.name = MEDIA_TO_PERMISSION[mediaType];
    }
    Object.defineProperty(BrowserPermission2.prototype, "isWatching", {
      get: function() {
        return this.changeSubscriptions.some(function(subscription) {
          return !subscription.closed;
        });
      },
      enumerable: false,
      configurable: true
    });
    BrowserPermission2.prototype.watch = function() {
      return __awaiter(this, void 0, void 0, function() {
        var status, handlePermissionChange;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this.status.value) return [3, 2];
              return [4, this.check()];
            case 1:
              _a.sent();
              if (!this.status.value)
                return [
                  2
                  /*return*/
                ];
              _a.label = 2;
            case 2:
              status = this.status.value;
              handlePermissionChange = function(e) {
                var state = e.target.state;
                _this.state.next(state);
              };
              status.addEventListener("change", handlePermissionChange);
              this.changeSubscriptions.push(new Subscription(function() {
                status.removeEventListener("change", handlePermissionChange);
              }));
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    BrowserPermission2.prototype.unwatch = function() {
      this.changeSubscriptions.forEach(function(subscription) {
        return subscription.unsubscribe();
      });
    };
    BrowserPermission2.prototype.check = function() {
      return __awaiter(this, void 0, void 0, function() {
        var permissionState, permissionStatus, e_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.name) {
                this.error.next(new Error("Unknown media recording permission"));
                return [
                  2
                  /*return*/
                ];
              }
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, navigator.permissions.query({
                name: this.name
              })];
            case 2:
              permissionStatus = _a.sent();
              permissionState = permissionStatus.state;
              this.status.next(permissionStatus);
              return [3, 4];
            case 3:
              e_1 = _a.sent();
              permissionState = "granted";
              return [3, 4];
            case 4:
              this.state.next(permissionState);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return BrowserPermission2;
  }()
);

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/MediaRecorderController.js
var import_fix_webm_duration = __toESM(require_fix_webm_duration());

// node_modules/stream-chat-react/dist/utils/mergeDeep.js
var import_lodash4 = __toESM(require_lodash5());
var overrideEverything = function(_23, source) {
  return source;
};
var mergeDeep = function(target, source) {
  return (0, import_lodash4.default)(target, source, overrideEverything);
};
var overrideUndefinedOnly = function(object, source) {
  return object !== null && object !== void 0 ? object : source;
};
var mergeDeepUndefined = function(target, source) {
  return (0, import_lodash4.default)(target, source, overrideUndefinedOnly);
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/AmplitudeRecorder.js
var MAX_FREQUENCY_AMPLITUDE = 255;
var logError2 = function(e) {
  return e && console.error("[AMPLITUDE RECORDER ERROR]", e);
};
var rootMeanSquare = function(values2) {
  return Math.sqrt(values2.reduce(function(acc, val) {
    return acc + Math.pow(val, 2);
  }, 0) / values2.length);
};
var DEFAULT_AMPLITUDE_RECORDER_CONFIG = {
  analyserConfig: {
    fftSize: 32,
    maxDecibels: 0,
    minDecibels: -100
  },
  sampleCount: 100,
  samplingFrequencyMs: 60
};
var AmplitudeRecorderState;
(function(AmplitudeRecorderState2) {
  AmplitudeRecorderState2["CLOSED"] = "closed";
  AmplitudeRecorderState2["RECORDING"] = "recording";
  AmplitudeRecorderState2["STOPPED"] = "stopped";
})(AmplitudeRecorderState || (AmplitudeRecorderState = {}));
var AmplitudeRecorder = (
  /** @class */
  function() {
    function AmplitudeRecorder2(_a) {
      var config = _a.config, stream = _a.stream;
      var _this = this;
      this.amplitudes = new BehaviorSubject([]);
      this.state = new BehaviorSubject(void 0);
      this.error = new Subject();
      this.start = function() {
        if (_this.state.value === AmplitudeRecorderState.CLOSED)
          return;
        if (!_this.stream) {
          throw new Error("Missing MediaStream instance. Cannot to start amplitude recording");
        }
        if (_this.state.value === AmplitudeRecorderState.RECORDING)
          _this.stop();
        if (!_this.analyserNode) {
          if (!_this.stream)
            return;
          _this.init();
        }
        _this.state.next(AmplitudeRecorderState.RECORDING);
        _this.amplitudeSamplingInterval = setInterval(function() {
          if (!(_this.analyserNode && _this.state.value === AmplitudeRecorderState.RECORDING))
            return;
          var frequencyBins = new Uint8Array(_this.analyserNode.frequencyBinCount);
          try {
            _this.analyserNode.getByteFrequencyData(frequencyBins);
          } catch (e) {
            logError2(e);
            _this.error.next(e);
            return;
          }
          var normalizedSignalStrength = rootMeanSquare(frequencyBins) / MAX_FREQUENCY_AMPLITUDE;
          _this.amplitudes.next(__spreadArray(__spreadArray([], _this.amplitudes.value, true), [normalizedSignalStrength], false));
        }, _this.config.samplingFrequencyMs);
      };
      this.config = mergeDeepUndefined(__assign({}, config), DEFAULT_AMPLITUDE_RECORDER_CONFIG);
      this.stream = stream;
    }
    AmplitudeRecorder2.prototype.init = function() {
      this.audioContext = new AudioContext();
      this.analyserNode = this.audioContext.createAnalyser();
      var analyserConfig = this.config.analyserConfig;
      this.analyserNode.fftSize = analyserConfig.fftSize;
      this.analyserNode.maxDecibels = analyserConfig.maxDecibels;
      this.analyserNode.minDecibels = analyserConfig.minDecibels;
      this.microphone = this.audioContext.createMediaStreamSource(this.stream);
      this.microphone.connect(this.analyserNode);
    };
    AmplitudeRecorder2.prototype.stop = function() {
      clearInterval(this.amplitudeSamplingInterval);
      this.amplitudeSamplingInterval = void 0;
      this.state.next(AmplitudeRecorderState.STOPPED);
    };
    AmplitudeRecorder2.prototype.close = function() {
      var _a, _b, _c, _d;
      if (this.state.value !== AmplitudeRecorderState.STOPPED)
        this.stop();
      this.state.next(AmplitudeRecorderState.CLOSED);
      this.amplitudes.next([]);
      (_a = this.microphone) === null || _a === void 0 ? void 0 : _a.disconnect();
      (_b = this.analyserNode) === null || _b === void 0 ? void 0 : _b.disconnect();
      if (((_c = this.audioContext) === null || _c === void 0 ? void 0 : _c.state) !== "closed")
        (_d = this.audioContext) === null || _d === void 0 ? void 0 : _d.close();
    };
    return AmplitudeRecorder2;
  }()
);

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/audioProcessing.js
var toAudioBuffer = function(file) {
  return __awaiter(void 0, void 0, void 0, function() {
    var audioCtx, arrayBuffer, decodedData;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          audioCtx = new AudioContext();
          return [4, readFileAsArrayBuffer(file)];
        case 1:
          arrayBuffer = _a.sent();
          return [4, audioCtx.decodeAudioData(arrayBuffer)];
        case 2:
          decodedData = _a.sent();
          if (!(audioCtx.state !== "closed")) return [3, 4];
          return [4, audioCtx.close()];
        case 3:
          _a.sent();
          _a.label = 4;
        case 4:
          return [2, decodedData];
      }
    });
  });
};
var renderAudio2 = function(audioBuffer, sampleRate) {
  return __awaiter(void 0, void 0, void 0, function() {
    var offlineAudioCtx, source;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);
          source = offlineAudioCtx.createBufferSource();
          source.buffer = audioBuffer;
          source.connect(offlineAudioCtx.destination);
          source.start();
          return [4, offlineAudioCtx.startRendering()];
        case 1:
          return [2, _a.sent()];
      }
    });
  });
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/wav.js
var WAV_HEADER_LENGTH_BYTES = 44;
var BYTES_PER_SAMPLE = 2;
var RIFF_FILE_MAX_BYTES = 4294967295;
var HEADER = {
  AUDIO_FORMAT: { offset: 20, value: 1 },
  BITS_PER_SAMPLE: { offset: 34, value: BYTES_PER_SAMPLE * 8 },
  BLOCK_ALIGN: { offset: 32 },
  BYTE_RATE: { offset: 28 },
  CHANNEL_COUNT: { offset: 22 },
  CHUNK_ID: { offset: 0, value: 1380533830 },
  CHUNK_SIZE: { offset: 4 },
  FILE_FORMAT: { offset: 8, value: 1463899717 },
  SAMPLE_RATE: { offset: 24 },
  SUBCHUNK1_ID: { offset: 12, value: 1718449184 },
  SUBCHUNK1_SIZE: { offset: 16, value: 16 },
  SUBCHUNK2_ID: { offset: 36, value: 1684108385 },
  SUBCHUNK2_SIZE: { offset: 40 }
  // actual audio data size
};
var fourCharsToInt = function(chars3) {
  return chars3.charCodeAt(0) << 24 | chars3.charCodeAt(1) << 16 | chars3.charCodeAt(2) << 8 | chars3.charCodeAt(3);
};
var WAV_HEADER_FLAGS = {
  data: fourCharsToInt("data"),
  fmt: fourCharsToInt("fmt "),
  RIFF: fourCharsToInt("RIFF"),
  WAVE: fourCharsToInt("WAVE")
};
var writeWavHeader = function(_a) {
  var arrayBuffer = _a.arrayBuffer, channelCount = _a.channelCount, sampleRate = _a.sampleRate;
  var byteRate = sampleRate * channelCount * BYTES_PER_SAMPLE;
  var blockAlign = channelCount * BYTES_PER_SAMPLE;
  var dataView = new DataView(arrayBuffer);
  var dataChunkSize = Math.min(dataView.byteLength - WAV_HEADER_LENGTH_BYTES, RIFF_FILE_MAX_BYTES - WAV_HEADER_LENGTH_BYTES);
  dataView.setUint32(HEADER.CHUNK_ID.offset, HEADER.CHUNK_ID.value);
  dataView.setUint32(HEADER.CHUNK_SIZE.offset, arrayBuffer.byteLength - 8, true);
  dataView.setUint32(HEADER.FILE_FORMAT.offset, HEADER.FILE_FORMAT.value);
  dataView.setUint32(HEADER.SUBCHUNK1_ID.offset, HEADER.SUBCHUNK1_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK1_SIZE.offset, HEADER.SUBCHUNK1_SIZE.value, true);
  dataView.setUint16(HEADER.AUDIO_FORMAT.offset, HEADER.AUDIO_FORMAT.value, true);
  dataView.setUint16(HEADER.CHANNEL_COUNT.offset, channelCount, true);
  dataView.setUint32(HEADER.SAMPLE_RATE.offset, sampleRate, true);
  dataView.setUint32(HEADER.BYTE_RATE.offset, byteRate, true);
  dataView.setUint16(HEADER.BLOCK_ALIGN.offset, blockAlign, true);
  dataView.setUint16(HEADER.BITS_PER_SAMPLE.offset, HEADER.BITS_PER_SAMPLE.value, true);
  dataView.setUint32(HEADER.SUBCHUNK2_ID.offset, HEADER.SUBCHUNK2_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK2_SIZE.offset, dataChunkSize, true);
};
var splitDataByChannel = function(audioBuffer) {
  return Array.from({ length: audioBuffer.numberOfChannels }, function(_23, i) {
    return audioBuffer.getChannelData(i);
  });
};
var writeWavAudioData = function(_a) {
  var arrayBuffer = _a.arrayBuffer, dataByChannel = _a.dataByChannel;
  var dataView = new DataView(arrayBuffer);
  var channelCount = dataByChannel.length;
  dataByChannel.forEach(function(channelData, channelIndex) {
    var writeOffset = WAV_HEADER_LENGTH_BYTES + channelCount * channelIndex;
    channelData.forEach(function(float32Value) {
      dataView.setInt16(writeOffset, float32Value < 0 ? Math.max(-1, float32Value) * 32768 : Math.min(1, float32Value) * 32767, true);
      writeOffset += channelCount * BYTES_PER_SAMPLE;
    });
  });
};
var encodeToWaw = function(file, sampleRate) {
  return __awaiter(void 0, void 0, void 0, function() {
    var audioBuffer, _a, numberOfSamples, fileSizeBytes, arrayBuffer;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _a = renderAudio2;
          return [4, toAudioBuffer(file)];
        case 1:
          return [4, _a.apply(void 0, [_b.sent(), sampleRate])];
        case 2:
          audioBuffer = _b.sent();
          numberOfSamples = audioBuffer.duration * sampleRate;
          fileSizeBytes = numberOfSamples * audioBuffer.numberOfChannels * BYTES_PER_SAMPLE + WAV_HEADER_LENGTH_BYTES;
          arrayBuffer = new ArrayBuffer(fileSizeBytes);
          writeWavHeader({ arrayBuffer, channelCount: audioBuffer.numberOfChannels, sampleRate });
          writeWavAudioData({ arrayBuffer, dataByChannel: splitDataByChannel(audioBuffer) });
          return [2, new Blob([arrayBuffer], { type: "audio/wav" })];
      }
    });
  });
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/mp3.js
var ENCODING_BIT_RATE = 128;
var COUNT_SAMPLES_PER_ENCODED_BLOCK = 1152;
var float32ArrayToInt16Array = function(float32Arr) {
  var int16Arr = new Int16Array(float32Arr.length);
  for (var i = 0; i < float32Arr.length; i++) {
    var float32Value = float32Arr[i];
    var clampedValue = Math.max(-1, Math.min(1, float32Value));
    int16Arr[i] = Math.round(clampedValue * 32767);
  }
  return int16Arr;
};
var splitDataByChannel2 = function(audioBuffer) {
  return Array.from({ length: audioBuffer.numberOfChannels }, function(_23, i) {
    return audioBuffer.getChannelData(i);
  }).map(float32ArrayToInt16Array);
};
function encodeToMp3(file, sampleRate) {
  return __awaiter(this, void 0, void 0, function() {
    var lameJs, audioBuffer, _a, channelCount, dataByChannel, mp3Encoder, dataBuffer, remaining, _loop_1, i, lastBlock;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, import("./lamejs-X2U5CNQD.js")];
        case 1:
          lameJs = _b.sent();
          _a = renderAudio2;
          return [4, toAudioBuffer(file)];
        case 2:
          return [4, _a.apply(void 0, [_b.sent(), sampleRate])];
        case 3:
          audioBuffer = _b.sent();
          channelCount = audioBuffer.numberOfChannels;
          dataByChannel = splitDataByChannel2(audioBuffer);
          mp3Encoder = new lameJs.Mp3Encoder(channelCount, sampleRate, ENCODING_BIT_RATE);
          dataBuffer = [];
          remaining = dataByChannel[0].length;
          _loop_1 = function(i2) {
            var _c = dataByChannel.map(function(channel) {
              return channel.subarray(i2, i2 + COUNT_SAMPLES_PER_ENCODED_BLOCK);
            }), leftChannelBlock = _c[0], rightChannelBlock = _c[1];
            dataBuffer.push(new Int8Array(mp3Encoder.encodeBuffer(leftChannelBlock, rightChannelBlock)));
            remaining -= COUNT_SAMPLES_PER_ENCODED_BLOCK;
          };
          for (i = 0; remaining >= COUNT_SAMPLES_PER_ENCODED_BLOCK; i += COUNT_SAMPLES_PER_ENCODED_BLOCK) {
            _loop_1(i);
          }
          lastBlock = mp3Encoder.flush();
          if (lastBlock.length)
            dataBuffer.push(new Int8Array(lastBlock));
          return [2, new Blob(dataBuffer, { type: "audio/mp3;sbu_type=voice" })];
      }
    });
  });
}

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/index.js
var transcode = function(_a) {
  var blob = _a.blob, sampleRate = _a.sampleRate, targetMimeType = _a.targetMimeType;
  var file = createFileFromBlobs({
    blobsArray: [blob],
    fileName: "audio_recording_".concat((/* @__PURE__ */ new Date()).toISOString(), ".").concat(getExtensionFromMimeType(blob.type)),
    mimeType: blob.type
  });
  if (targetMimeType.match("audio/wav")) {
    return encodeToWaw(file, sampleRate);
  }
  if (targetMimeType.match("audio/mp3")) {
    return encodeToMp3(file, sampleRate);
  }
  return Promise.resolve(blob);
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/MediaRecorderController.js
var RECORDED_MIME_TYPE_BY_BROWSER = {
  audio: {
    others: "audio/webm",
    safari: "audio/mp4;codecs=mp4a.40.2"
  }
};
var POSSIBLE_TRANSCODING_MIME_TYPES = ["audio/wav", "audio/mp3"];
var DEFAULT_MEDIA_RECORDER_CONFIG = {
  mimeType: isSafari() ? RECORDED_MIME_TYPE_BY_BROWSER.audio.safari : RECORDED_MIME_TYPE_BY_BROWSER.audio.others
};
var DEFAULT_AUDIO_TRANSCODER_CONFIG = {
  sampleRate: 16e3,
  targetMimeType: "audio/mp3"
};
var disposeOfMediaStream = function(stream) {
  if (!(stream === null || stream === void 0 ? void 0 : stream.active))
    return;
  stream.getTracks().forEach(function(track2) {
    track2.stop();
    stream.removeTrack(track2);
  });
};
var logError3 = function(e) {
  return e && console.error("[MEDIA RECORDER ERROR]", e);
};
var MediaRecordingState;
(function(MediaRecordingState2) {
  MediaRecordingState2["PAUSED"] = "paused";
  MediaRecordingState2["RECORDING"] = "recording";
  MediaRecordingState2["STOPPED"] = "stopped";
})(MediaRecordingState || (MediaRecordingState = {}));
var RecordingAttachmentType;
(function(RecordingAttachmentType2) {
  RecordingAttachmentType2["VOICE_RECORDING"] = "voiceRecording";
})(RecordingAttachmentType || (RecordingAttachmentType = {}));
var MediaRecorderController = (
  /** @class */
  function() {
    function MediaRecorderController2(_a) {
      var _b = _a === void 0 ? {} : _a, config = _b.config, generateRecordingTitle = _b.generateRecordingTitle, t2 = _b.t;
      var _this = this;
      this.recordedChunkDurations = [];
      this.recordedData = [];
      this.recordingState = new BehaviorSubject(void 0);
      this.recording = new BehaviorSubject(void 0);
      this.error = new Subject();
      this.notification = new Subject();
      this.generateRecordingTitle = function(mimeType) {
        if (_this.customGenerateRecordingTitle) {
          return _this.customGenerateRecordingTitle(mimeType);
        }
        return "".concat(_this.mediaType, "_recording_").concat((/* @__PURE__ */ new Date()).toISOString(), ".").concat(getExtensionFromMimeType(mimeType));
      };
      this.makeVoiceRecording = function() {
        return __awaiter(_this, void 0, void 0, function() {
          var mimeType, blob, file;
          var _a2, _b2;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                if (this.recordingUri)
                  URL.revokeObjectURL(this.recordingUri);
                if (!this.recordedData.length)
                  return [
                    2
                    /*return*/
                  ];
                mimeType = this.mediaRecorderConfig.mimeType;
                blob = new Blob(this.recordedData, { type: mimeType });
                if (!mimeType.match("audio/webm")) return [3, 2];
                return [4, (0, import_fix_webm_duration.default)(blob, this.durationMs, {
                  logger: function() {
                    return null;
                  }
                  // prevents polluting the browser console
                })];
              case 1:
                blob = _c.sent();
                _c.label = 2;
              case 2:
                if (!!mimeType.match("audio/mp4")) return [3, 4];
                return [4, transcode(__assign({ blob }, this.transcoderConfig))];
              case 3:
                blob = _c.sent();
                _c.label = 4;
              case 4:
                if (!blob)
                  return [
                    2
                    /*return*/
                  ];
                this.recordingUri = URL.createObjectURL(blob);
                file = createFileFromBlobs({
                  blobsArray: [blob],
                  fileName: this.generateRecordingTitle(blob.type),
                  mimeType: blob.type
                });
                return [2, {
                  asset_url: this.recordingUri,
                  duration: this.durationMs / 1e3,
                  file_size: blob.size,
                  localMetadata: {
                    file,
                    id: nanoid()
                  },
                  mime_type: blob.type,
                  title: file.name,
                  type: RecordingAttachmentType.VOICE_RECORDING,
                  waveform_data: resampleWaveformData((_b2 = (_a2 = this.amplitudeRecorder) === null || _a2 === void 0 ? void 0 : _a2.amplitudes.value) !== null && _b2 !== void 0 ? _b2 : [], this.amplitudeRecorderConfig.sampleCount)
                }];
            }
          });
        });
      };
      this.handleErrorEvent = function(e) {
        var error2 = e.error;
        logError3(error2);
        _this.error.next(error2);
        _this.notification.next({
          text: _this.t("An error has occurred during recording"),
          type: "error"
        });
      };
      this.handleDataavailableEvent = function(e) {
        return __awaiter(_this, void 0, void 0, function() {
          var recording, e_1;
          var _a2;
          return __generator(this, function(_b2) {
            switch (_b2.label) {
              case 0:
                if (!e.data.size)
                  return [
                    2
                    /*return*/
                  ];
                if (this.mediaType !== "audio")
                  return [
                    2
                    /*return*/
                  ];
                _b2.label = 1;
              case 1:
                _b2.trys.push([1, 3, , 4]);
                this.recordedData.push(e.data);
                return [4, this.makeVoiceRecording()];
              case 2:
                recording = _b2.sent();
                if (!recording)
                  return [
                    2
                    /*return*/
                  ];
                (_a2 = this.signalRecordingReady) === null || _a2 === void 0 ? void 0 : _a2.call(this, recording);
                this.recording.next(recording);
                return [3, 4];
              case 3:
                e_1 = _b2.sent();
                logError3(e_1);
                this.error.next(e_1);
                this.notification.next({
                  text: this.t("An error has occurred during the recording processing"),
                  type: "error"
                });
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      this.resetRecordingState = function() {
        _this.recordedData = [];
        _this.recording.next(void 0);
        _this.recordingState.next(void 0);
        _this.recordedChunkDurations = [];
        _this.startTime = void 0;
      };
      this.cleanUp = function() {
        var _a2;
        _this.resetRecordingState();
        if (_this.recordingUri)
          URL.revokeObjectURL(_this.recordingUri);
        (_a2 = _this.amplitudeRecorder) === null || _a2 === void 0 ? void 0 : _a2.close();
        if (_this.mediaRecorder) {
          disposeOfMediaStream(_this.mediaRecorder.stream);
          _this.mediaRecorder.removeEventListener("dataavailable", _this.handleDataavailableEvent);
          _this.mediaRecorder.removeEventListener("error", _this.handleErrorEvent);
        }
      };
      this.start = function() {
        return __awaiter(_this, void 0, void 0, function() {
          var error2, error2, error2, stream, error_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if ([MediaRecordingState.RECORDING, MediaRecordingState.PAUSED].includes(this.recordingState.value)) {
                  error2 = new Error("Cannot start recording. Recording already in progress");
                  logError3(error2);
                  this.error.next(error2);
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!navigator.mediaDevices) {
                  error2 = new Error("Media recording is not supported");
                  logError3(error2);
                  this.error.next(error2);
                  this.notification.next({ text: this.t("Error starting recording"), type: "error" });
                  return [
                    2
                    /*return*/
                  ];
                }
                if (this.mediaType === "video") {
                  error2 = new Error("Video recording is not supported. Provided MIME type: ".concat(this.mediaRecorderConfig.mimeType));
                  logError3(error2);
                  this.error.next(error2);
                  this.notification.next({ text: this.t("Error starting recording"), type: "error" });
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!!this.permission.state.value) return [3, 2];
                return [4, this.permission.check()];
              case 1:
                _a2.sent();
                _a2.label = 2;
              case 2:
                if (this.permission.state.value === "denied") {
                  logError3(new Error("Permission denied"));
                  return [
                    2
                    /*return*/
                  ];
                }
                _a2.label = 3;
              case 3:
                _a2.trys.push([3, 5, , 6]);
                return [4, navigator.mediaDevices.getUserMedia({ audio: true })];
              case 4:
                stream = _a2.sent();
                this.mediaRecorder = new MediaRecorder(stream, this.mediaRecorderConfig);
                this.mediaRecorder.addEventListener("dataavailable", this.handleDataavailableEvent);
                this.mediaRecorder.addEventListener("error", this.handleErrorEvent);
                this.startTime = (/* @__PURE__ */ new Date()).getTime();
                this.mediaRecorder.start();
                if (this.mediaType === "audio" && stream) {
                  this.amplitudeRecorder = new AmplitudeRecorder({
                    config: this.amplitudeRecorderConfig,
                    stream
                  });
                  this.amplitudeRecorder.start();
                }
                this.recordingState.next(MediaRecordingState.RECORDING);
                return [3, 6];
              case 5:
                error_1 = _a2.sent();
                logError3(error_1);
                this.cancel();
                this.error.next(error_1);
                this.notification.next({ text: this.t("Error starting recording"), type: "error" });
                return [3, 6];
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      this.pause = function() {
        var _a2, _b2;
        if (_this.recordingState.value !== MediaRecordingState.RECORDING)
          return;
        if (_this.startTime) {
          _this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - _this.startTime);
          _this.startTime = void 0;
        }
        (_a2 = _this.mediaRecorder) === null || _a2 === void 0 ? void 0 : _a2.pause();
        (_b2 = _this.amplitudeRecorder) === null || _b2 === void 0 ? void 0 : _b2.stop();
        _this.recordingState.next(MediaRecordingState.PAUSED);
      };
      this.resume = function() {
        var _a2, _b2;
        if (_this.recordingState.value !== MediaRecordingState.PAUSED)
          return;
        _this.startTime = (/* @__PURE__ */ new Date()).getTime();
        (_a2 = _this.mediaRecorder) === null || _a2 === void 0 ? void 0 : _a2.resume();
        (_b2 = _this.amplitudeRecorder) === null || _b2 === void 0 ? void 0 : _b2.start();
        _this.recordingState.next(MediaRecordingState.RECORDING);
      };
      this.stop = function() {
        var _a2, _b2, _c;
        var recording = _this.recording.value;
        if (recording)
          return Promise.resolve(recording);
        if (![MediaRecordingState.PAUSED, MediaRecordingState.RECORDING].includes(((_a2 = _this.mediaRecorder) === null || _a2 === void 0 ? void 0 : _a2.state) || ""))
          return Promise.resolve(void 0);
        if (_this.startTime) {
          _this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - _this.startTime);
          _this.startTime = void 0;
        }
        var result = new Promise(function(res) {
          _this.signalRecordingReady = res;
        });
        (_b2 = _this.mediaRecorder) === null || _b2 === void 0 ? void 0 : _b2.stop();
        (_c = _this.amplitudeRecorder) === null || _c === void 0 ? void 0 : _c.stop();
        _this.recordingState.next(MediaRecordingState.STOPPED);
        return result;
      };
      this.cancel = function() {
        _this.stop();
        _this.cleanUp();
      };
      this.t = t2 || defaultTranslatorFunction;
      this.amplitudeRecorderConfig = mergeDeepUndefined(__assign({}, config === null || config === void 0 ? void 0 : config.amplitudeRecorderConfig), DEFAULT_AMPLITUDE_RECORDER_CONFIG);
      this.mediaRecorderConfig = mergeDeepUndefined(__assign({}, config === null || config === void 0 ? void 0 : config.mediaRecorderConfig), DEFAULT_MEDIA_RECORDER_CONFIG);
      this.transcoderConfig = mergeDeepUndefined(__assign({}, config === null || config === void 0 ? void 0 : config.transcoderConfig), DEFAULT_AUDIO_TRANSCODER_CONFIG);
      if (!POSSIBLE_TRANSCODING_MIME_TYPES.includes(this.transcoderConfig.targetMimeType)) {
        this.transcoderConfig.targetMimeType = DEFAULT_AUDIO_TRANSCODER_CONFIG.targetMimeType;
      }
      var mediaType = getRecordedMediaTypeFromMimeType(this.mediaRecorderConfig.mimeType);
      if (!mediaType) {
        throw new Error("Unsupported media type (supported audio or video only). Provided mimeType: ".concat(this.mediaRecorderConfig.mimeType));
      }
      this.mediaType = mediaType;
      this.permission = new BrowserPermission({ mediaType });
      this.customGenerateRecordingTitle = generateRecordingTitle;
    }
    Object.defineProperty(MediaRecorderController2.prototype, "durationMs", {
      get: function() {
        return this.recordedChunkDurations.reduce(function(acc, val) {
          return acc + val;
        }, 0);
      },
      enumerable: false,
      configurable: true
    });
    return MediaRecorderController2;
  }()
);

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecorder.js
var AudioRecorder = function() {
  var _a, _b;
  var _c = useMessageInputContext().recordingController, completeRecording = _c.completeRecording, recorder = _c.recorder, recording = _c.recording, recordingState = _c.recordingState;
  var isUploadingFile = ((_a = recording === null || recording === void 0 ? void 0 : recording.localMetadata) === null || _a === void 0 ? void 0 : _a.uploadState) === "uploading";
  var state = (0, import_react146.useMemo)(function() {
    return {
      paused: recordingState === MediaRecordingState.PAUSED,
      recording: recordingState === MediaRecordingState.RECORDING,
      stopped: recordingState === MediaRecordingState.STOPPED
    };
  }, [recordingState]);
  if (!recorder)
    return null;
  return import_react146.default.createElement(
    "div",
    { className: "str-chat__audio_recorder-container" },
    import_react146.default.createElement(
      "div",
      { className: "str-chat__audio_recorder", "data-testid": "audio-recorder" },
      import_react146.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__cancel-button", "data-testid": "cancel-recording-audio-button", disabled: isUploadingFile, onClick: recorder.cancel },
        import_react146.default.createElement(BinIcon, null)
      ),
      state.stopped && (recording === null || recording === void 0 ? void 0 : recording.asset_url) ? import_react146.default.createElement(AudioRecordingPreview, { durationSeconds: (_b = recording.duration) !== null && _b !== void 0 ? _b : 0, mimeType: recording.mime_type, src: recording.asset_url, waveformData: recording.waveform_data }) : state.paused || state.recording ? import_react146.default.createElement(AudioRecordingInProgress, null) : null,
      state.paused && import_react146.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__resume-recording-button", onClick: recorder.resume },
        import_react146.default.createElement(MicIcon, null)
      ),
      state.recording && import_react146.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__pause-recording-button", "data-testid": "pause-recording-audio-button", onClick: recorder.pause },
        import_react146.default.createElement(PauseIcon2, null)
      ),
      state.stopped ? import_react146.default.createElement("button", { className: "str-chat__audio_recorder__complete-button", "data-testid": "audio-recorder-complete-button", disabled: isUploadingFile, onClick: completeRecording }, isUploadingFile ? import_react146.default.createElement(LoadingIndicatorIcon, null) : import_react146.default.createElement(SendIconV2, null)) : import_react146.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__stop-button", "data-testid": "audio-recorder-stop-button", onClick: recorder.stop },
        import_react146.default.createElement(CheckSignIcon, null)
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingButtons.js
var import_react147 = __toESM(require_react());
var StartRecordingAudioButton = function(props) {
  return import_react147.default.createElement(
    "button",
    __assign({ "aria-label": "Start recording audio", className: "str-chat__start-recording-audio-button", "data-testid": "start-recording-audio-button" }, props),
    import_react147.default.createElement(MicIcon, null)
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.js
var VoiceRecordingPreview = function(_a) {
  var _b, _c, _d;
  var attachment = _a.attachment, handleRetry = _a.handleRetry, removeAttachments = _a.removeAttachments;
  var _e = useAudioController({
    mimeType: attachment.mime_type
  }), audioRef = _e.audioRef, isPlaying = _e.isPlaying, secondsElapsed = _e.secondsElapsed, togglePlay = _e.togglePlay;
  return import_react148.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-voice-recording", "data-testid": "attachment-preview-voice-recording" },
    import_react148.default.createElement(
      "audio",
      { ref: audioRef },
      import_react148.default.createElement("source", { "data-testid": "audio-source", src: attachment.asset_url, type: attachment.mime_type })
    ),
    import_react148.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }),
    import_react148.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_b = attachment.localMetadata) === null || _b === void 0 ? void 0 : _b.uploadState) === "uploading", onClick: function() {
        var _a2;
        return ((_a2 = attachment.localMetadata) === null || _a2 === void 0 ? void 0 : _a2.id) && removeAttachments([attachment.localMetadata.id]);
      } },
      import_react148.default.createElement(CloseIcon2, null)
    ),
    ((_c = attachment.localMetadata) === null || _c === void 0 ? void 0 : _c.uploadState) === "failed" && !!handleRetry && import_react148.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: function() {
        return handleRetry(attachment);
      } },
      import_react148.default.createElement(RetryIcon2, null)
    ),
    import_react148.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-metadata" },
      import_react148.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title),
      typeof attachment.duration !== "undefined" && import_react148.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed || attachment.duration }),
      ((_d = attachment.localMetadata) === null || _d === void 0 ? void 0 : _d.uploadState) === "uploading" && import_react148.default.createElement(LoadingIndicatorIcon, { size: 17 })
    ),
    import_react148.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react148.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type, version: "2" })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/FileAttachmentPreview.js
var import_react149 = __toESM(require_react());
var FileAttachmentPreview = function(_a) {
  var _b, _c, _d, _e;
  var attachment = _a.attachment, handleRetry = _a.handleRetry, removeAttachments = _a.removeAttachments;
  return import_react149.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-file", "data-testid": "attachment-preview-file" },
    import_react149.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react149.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type, version: "2" })
    ),
    import_react149.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_b = attachment.localMetadata) === null || _b === void 0 ? void 0 : _b.uploadState) === "uploading", onClick: function() {
        var _a2, _b2;
        return ((_a2 = attachment.localMetadata) === null || _a2 === void 0 ? void 0 : _a2.id) && removeAttachments([(_b2 = attachment.localMetadata) === null || _b2 === void 0 ? void 0 : _b2.id]);
      } },
      import_react149.default.createElement(CloseIcon2, null)
    ),
    ((_c = attachment.localMetadata) === null || _c === void 0 ? void 0 : _c.uploadState) === "failed" && !!handleRetry && import_react149.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: function() {
        return handleRetry(attachment);
      } },
      import_react149.default.createElement(RetryIcon2, null)
    ),
    import_react149.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-end" },
      import_react149.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title),
      ((_d = attachment.localMetadata) === null || _d === void 0 ? void 0 : _d.uploadState) === "finished" && !!attachment.asset_url && import_react149.default.createElement(
        "a",
        { className: "str-chat__attachment-preview-file-download", download: true, href: attachment.asset_url, rel: "noreferrer", target: "_blank" },
        import_react149.default.createElement(DownloadIcon2, null)
      ),
      ((_e = attachment.localMetadata) === null || _e === void 0 ? void 0 : _e.uploadState) === "uploading" && import_react149.default.createElement(LoadingIndicatorIcon, { size: 17 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/UploadPreviewItem.js
var import_react151 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/ImageAttachmentPreview.js
var import_react150 = __toESM(require_react());
var ImageAttachmentPreview = function(_a) {
  var _b;
  var attachment = _a.attachment, handleRetry = _a.handleRetry, removeAttachments = _a.removeAttachments;
  var _c = useComponentContext("ImagePreview").BaseImage, BaseImage3 = _c === void 0 ? BaseImage : _c;
  var _d = (0, import_react150.useState)(false), previewError = _d[0], setPreviewError = _d[1];
  var _e = (_b = attachment.localMetadata) !== null && _b !== void 0 ? _b : {}, id = _e.id, uploadState = _e.uploadState;
  var handleLoadError = (0, import_react150.useCallback)(function() {
    return setPreviewError(true);
  }, []);
  return import_react150.default.createElement(
    "div",
    { className: clsx_default("str-chat__attachment-preview-image", {
      "str-chat__attachment-preview-image--error": previewError
    }), "data-testid": "attachment-preview-image" },
    import_react150.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-delete", "data-testid": "image-preview-item-delete-button", disabled: uploadState === "uploading", onClick: function() {
        return id && removeAttachments([id]);
      } },
      import_react150.default.createElement(CloseIcon2, null)
    ),
    uploadState === "failed" && import_react150.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-image", "data-testid": "image-preview-item-retry-button", onClick: function() {
        return handleRetry(attachment);
      } },
      import_react150.default.createElement(RetryIcon2, null)
    ),
    uploadState === "uploading" && import_react150.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-image-loading" },
      import_react150.default.createElement(LoadingIndicatorIcon, { size: 17 })
    ),
    attachment.image_url && import_react150.default.createElement(BaseImage3, { alt: attachment.title, className: "str-chat__attachment-preview-thumbnail", onError: handleLoadError, src: attachment.image_url, title: attachment.title })
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/UploadPreviewItem.js
var ImageUploadPreviewAdapter = function(_a) {
  var id = _a.id, _b = _a.Preview, Preview = _b === void 0 ? ImageAttachmentPreview : _b;
  var _c = useMessageInputContext("ImageUploadPreviewAdapter"), imageUploads = _c.imageUploads, removeImage = _c.removeImage, uploadImage = _c.uploadImage;
  var removeAttachments = (0, import_react151.useCallback)(function(ids) {
    return removeImage(ids[0]);
  }, [removeImage]);
  var handleRetry = (0, import_react151.useCallback)(function(attachment2) {
    return attachment2.localMetadata && uploadImage(attachment2.localMetadata.id);
  }, [uploadImage]);
  var image2 = imageUploads[id];
  var attachment = (0, import_react151.useMemo)(function() {
    var _a2;
    return !image2 || image2.og_scrape_url ? void 0 : {
      image_url: (_a2 = image2.previewUri) !== null && _a2 !== void 0 ? _a2 : image2.url,
      localMetadata: {
        file: image2.file,
        id,
        uploadState: image2.state
      },
      title: image2.file.name,
      type: "image"
    };
  }, [id, image2]);
  if (!attachment)
    return null;
  return import_react151.default.createElement(Preview, { attachment, handleRetry, removeAttachments });
};
var FileUploadPreviewAdapter = function(_a) {
  var id = _a.id, _b = _a.Preview, Preview = _b === void 0 ? FileAttachmentPreview : _b;
  var _c = useMessageInputContext("FileUploadPreviewAdapter"), fileUploads = _c.fileUploads, removeFile = _c.removeFile, uploadFile = _c.uploadFile;
  var removeAttachments = (0, import_react151.useCallback)(function(ids) {
    removeFile(ids[0]);
  }, [removeFile]);
  var handleRetry = (0, import_react151.useCallback)(function(attachment2) {
    return attachment2.localMetadata && uploadFile(attachment2.localMetadata.id);
  }, [uploadFile]);
  var file = fileUploads[id];
  var attachment = (0, import_react151.useMemo)(function() {
    return !file ? void 0 : {
      asset_url: file.url,
      localMetadata: {
        file: file.file,
        id,
        uploadState: file.state
      },
      mime_type: file.file.type,
      title: file.file.name,
      type: "file"
    };
  }, [file, id]);
  if (!attachment)
    return null;
  return import_react151.default.createElement(Preview, { attachment, handleRetry, removeAttachments });
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.js
var AttachmentPreviewList = function(_a) {
  var _b = _a.AudioAttachmentPreview, AudioAttachmentPreview = _b === void 0 ? FileAttachmentPreview : _b, _c = _a.FileAttachmentPreview, FileAttachmentPreview2 = _c === void 0 ? FileAttachmentPreview : _c, _d = _a.ImageAttachmentPreview, ImageAttachmentPreview2 = _d === void 0 ? ImageAttachmentPreview : _d, _e = _a.UnsupportedAttachmentPreview, UnsupportedAttachmentPreview2 = _e === void 0 ? UnsupportedAttachmentPreview : _e, _f = _a.VideoAttachmentPreview, VideoAttachmentPreview = _f === void 0 ? FileAttachmentPreview : _f, _g = _a.VoiceRecordingPreview, VoiceRecordingPreview2 = _g === void 0 ? VoiceRecordingPreview : _g;
  var _h = useMessageInputContext("AttachmentPreviewList"), attachments = _h.attachments, fileOrder = _h.fileOrder, imageOrder = _h.imageOrder, removeAttachments = _h.removeAttachments, uploadAttachment = _h.uploadAttachment;
  return import_react152.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-list" },
    import_react152.default.createElement(
      "div",
      { className: "str-chat__attachment-list-scroll-container", "data-testid": "attachment-list-scroll-container" },
      attachments.map(function(attachment) {
        if (isScrapedContent(attachment))
          return null;
        if (isLocalVoiceRecordingAttachment(attachment)) {
          return import_react152.default.createElement(VoiceRecordingPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
        } else if (isLocalAudioAttachment(attachment)) {
          return import_react152.default.createElement(AudioAttachmentPreview, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
        } else if (isLocalMediaAttachment(attachment)) {
          return import_react152.default.createElement(VideoAttachmentPreview, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
        } else if (isLocalImageAttachment(attachment)) {
          return import_react152.default.createElement(ImageAttachmentPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.image_url, removeAttachments });
        } else if (isLocalFileAttachment(attachment)) {
          return import_react152.default.createElement(FileAttachmentPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
        } else if (isLocalAttachment(attachment)) {
          return import_react152.default.createElement(UnsupportedAttachmentPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id, removeAttachments });
        }
        return null;
      }),
      imageOrder.map(function(id) {
        return import_react152.default.createElement(ImageUploadPreviewAdapter, { id, key: id, Preview: ImageAttachmentPreview2 });
      }),
      fileOrder.map(function(id) {
        return import_react152.default.createElement(FileUploadPreviewAdapter, { id, key: id, Preview: FileAttachmentPreview2 });
      })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/CooldownTimer.js
var import_react154 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useTimer.js
var import_react153 = __toESM(require_react());
var useTimer = function(_a) {
  var startFrom = _a.startFrom;
  var _b = (0, import_react153.useState)(), secondsLeft = _b[0], setSecondsLeft = _b[1];
  (0, import_react153.useEffect)(function() {
    var countdownTimeout;
    if (typeof secondsLeft === "number" && secondsLeft > 0) {
      countdownTimeout = setTimeout(function() {
        setSecondsLeft(secondsLeft - 1);
      }, 1e3);
    }
    return function() {
      clearTimeout(countdownTimeout);
    };
  }, [secondsLeft]);
  (0, import_react153.useEffect)(function() {
    setSecondsLeft(startFrom !== null && startFrom !== void 0 ? startFrom : 0);
  }, [startFrom]);
  return secondsLeft;
};

// node_modules/stream-chat-react/dist/components/MessageInput/CooldownTimer.js
var CooldownTimer = function(_a) {
  var cooldownInterval = _a.cooldownInterval;
  var secondsLeft = useTimer({ startFrom: cooldownInterval });
  return import_react154.default.createElement("div", { className: "str-chat__message-input-cooldown", "data-testid": "cooldown-timer" }, secondsLeft);
};

// node_modules/stream-chat-react/dist/components/MessageInput/DefaultTriggerProvider.js
var import_react157 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCommandTrigger.js
var useCommandTrigger = function() {
  var themeVersion = useChatContext("useCommandTrigger").themeVersion;
  var channelConfig = useChannelStateContext("useCommandTrigger").channelConfig;
  var t2 = useTranslationContext("useCommandTrigger").t;
  var commands = channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.commands;
  return {
    component: CommandItem,
    dataProvider: function(query, text5, onReady) {
      if (text5.indexOf("/") !== 0 || !commands) {
        return [];
      }
      var selectedCommands = commands.filter(function(command) {
        var _a;
        return ((_a = command.name) === null || _a === void 0 ? void 0 : _a.indexOf(query)) !== -1;
      });
      selectedCommands.sort(function(a, b) {
        var _a, _b;
        var nameA = (_a = a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        var nameB = (_b = b.name) === null || _b === void 0 ? void 0 : _b.toLowerCase();
        if ((nameA === null || nameA === void 0 ? void 0 : nameA.indexOf(query)) === 0) {
          nameA = "0".concat(nameA);
        }
        if ((nameB === null || nameB === void 0 ? void 0 : nameB.indexOf(query)) === 0) {
          nameB = "0".concat(nameB);
        }
        if (nameA != null && nameB != null) {
          if (nameA < nameB) {
            return -1;
          }
          if (nameA > nameB) {
            return 1;
          }
        }
        return 0;
      });
      var result = selectedCommands.slice(0, themeVersion === "2" ? 5 : 10);
      if (onReady)
        onReady(result.filter(function(result2) {
          return result2.name !== void 0;
        }).map(function(commandData) {
          var translatedCommandData = {
            name: commandData.name
          };
          if (commandData.args)
            translatedCommandData.args = t2("".concat(commandData.name, "-command-args"), {
              defaultValue: commandData.args
            });
          if (commandData.description)
            translatedCommandData.description = t2("".concat(commandData.name, "-command-description"), {
              defaultValue: commandData.description
            });
          return translatedCommandData;
        }), query);
      return result;
    },
    output: function(entity) {
      return {
        caretPosition: "next",
        key: entity.name,
        text: "/".concat(entity.name)
      };
    }
  };
};

// node_modules/stream-chat-react/dist/components/EmoticonItem/EmoticonItem.js
var import_react155 = __toESM(require_react());
var UnMemoizedEmoticonItem = function(props) {
  var entity = props.entity;
  var hasEntity = Object.keys(entity).length;
  var itemParts = entity === null || entity === void 0 ? void 0 : entity.itemNameParts;
  var renderName = function() {
    if (!hasEntity)
      return null;
    return hasEntity && itemParts.parts.map(function(part, i) {
      return part.toLowerCase() === itemParts.match.toLowerCase() ? import_react155.default.createElement("span", { className: "str-chat__emoji-item--highlight", key: "part-".concat(i) }, part) : import_react155.default.createElement("span", { className: "str-chat__emoji-item--part", key: "part-".concat(i) }, part);
    });
  };
  return import_react155.default.createElement(
    "div",
    { className: "str-chat__emoji-item" },
    import_react155.default.createElement("span", { className: "str-chat__emoji-item--entity" }, entity.native),
    import_react155.default.createElement("span", { className: "str-chat__emoji-item--name" }, renderName())
  );
};
var EmoticonItem = import_react155.default.memo(UnMemoizedEmoticonItem);

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useEmojiTrigger.js
var useEmojiTrigger = function(emojiSearchIndex) {
  var themeVersion = useChatContext("useEmojiTrigger").themeVersion;
  return {
    component: EmoticonItem,
    dataProvider: function(query, _23, onReady) {
      return __awaiter(void 0, void 0, void 0, function() {
        var emojis, result;
        var _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (query.length === 0 || query.charAt(0).match(/[^a-zA-Z0-9+-]/)) {
                return [2, onReady([], query)];
              }
              return [4, emojiSearchIndex === null || emojiSearchIndex === void 0 ? void 0 : emojiSearchIndex.search(query)];
            case 1:
              emojis = (_a = _b.sent()) !== null && _a !== void 0 ? _a : [];
              result = emojis.filter(Boolean).slice(0, themeVersion === "2" ? 7 : 10).map(function(_a2) {
                var id = _a2.id, name = _a2.name, native = _a2.native, _b2 = _a2.skins, skins = _b2 === void 0 ? [] : _b2;
                var firstSkin = skins[0];
                return {
                  id,
                  name,
                  native: native !== null && native !== void 0 ? native : firstSkin.native
                };
              });
              if (onReady)
                onReady(result, query);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    },
    output: function(entity) {
      return {
        caretPosition: "next",
        key: entity.id,
        text: "".concat("native" in entity ? entity.native : "")
      };
    }
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useUserTrigger.js
var import_react156 = __toESM(require_react());
var import_lodash5 = __toESM(require_lodash());
var useUserTrigger = function(params) {
  var disableMentions = params.disableMentions, mentionAllAppUsers = params.mentionAllAppUsers, _a = params.mentionQueryParams, mentionQueryParams = _a === void 0 ? {} : _a, onSelectUser = params.onSelectUser, useMentionsTransliteration = params.useMentionsTransliteration;
  var _b = (0, import_react156.useState)(false), searching = _b[0], setSearching = _b[1];
  var _c = useChatContext("useUserTrigger"), client = _c.client, mutes = _c.mutes, themeVersion = _c.themeVersion;
  var channel = useChannelStateContext("useUserTrigger").channel;
  var members = channel.state.members;
  var watchers = channel.state.watchers;
  var getMembersAndWatchers = (0, import_react156.useCallback)(function() {
    var memberUsers = members ? Object.values(members).map(function(_a2) {
      var user = _a2.user;
      return user;
    }) : [];
    var watcherUsers = watchers ? Object.values(watchers) : [];
    var users = __spreadArray(__spreadArray([], memberUsers, true), watcherUsers, true);
    var uniqueUsers = {};
    users.forEach(function(user) {
      if (user && !uniqueUsers[user.id]) {
        uniqueUsers[user.id] = user;
      }
    });
    return Object.values(uniqueUsers);
  }, [members, watchers]);
  var queryMembersThrottled = (0, import_react156.useCallback)((0, import_lodash5.default)(function(query, onReady) {
    return __awaiter(void 0, void 0, void 0, function() {
      var response, users, error_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            _a2.trys.push([0, 2, , 3]);
            return [4, channel.queryMembers({
              name: { $autocomplete: query }
            })];
          case 1:
            response = _a2.sent();
            users = response.members.map(function(member) {
              return member.user;
            });
            if (onReady && users.length) {
              onReady(users);
            } else {
              onReady([]);
            }
            return [3, 3];
          case 2:
            error_1 = _a2.sent();
            console.log({ error: error_1 });
            return [3, 3];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, 200), [channel]);
  var queryUsers = function(query, onReady) {
    return __awaiter(void 0, void 0, void 0, function() {
      var users, error_2;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!query || searching)
              return [
                2
                /*return*/
              ];
            setSearching(true);
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, client.queryUsers(__assign({ $or: [{ id: { $autocomplete: query } }, { name: { $autocomplete: query } }], id: { $ne: client.userID } }, typeof mentionQueryParams.filters === "function" ? mentionQueryParams.filters(query) : mentionQueryParams.filters), Array.isArray(mentionQueryParams.sort) ? __spreadArray([{ id: 1 }], mentionQueryParams.sort, true) : __assign({ id: 1 }, mentionQueryParams.sort), __assign({ limit: 10 }, mentionQueryParams.options))];
          case 2:
            users = _a2.sent().users;
            if (onReady && users.length) {
              onReady(users);
            } else {
              onReady([]);
            }
            return [3, 4];
          case 3:
            error_2 = _a2.sent();
            console.log({ error: error_2 });
            return [3, 4];
          case 4:
            setSearching(false);
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var queryUsersThrottled = (0, import_lodash5.default)(queryUsers, 200);
  return {
    callback: function(item) {
      return onSelectUser(item);
    },
    component: UserItem,
    dataProvider: function(query, text5, onReady) {
      var _a2, _b2;
      if (disableMentions)
        return;
      var filterMutes = function(data2) {
        if (text5.includes("/unmute") && !mutes.length) {
          return [];
        }
        if (!mutes.length)
          return data2;
        if (text5.includes("/unmute")) {
          return data2.filter(function(suggestion) {
            return mutes.some(function(mute) {
              return mute.target.id === suggestion.id;
            });
          });
        }
        return data2.filter(function(suggestion) {
          return mutes.every(function(mute) {
            return mute.target.id !== suggestion.id;
          });
        });
      };
      if (mentionAllAppUsers) {
        return queryUsersThrottled(query, function(data2) {
          if (onReady)
            onReady(filterMutes(data2), query);
        });
      }
      if (!query || Object.values(members || {}).length < 100) {
        var users = getMembersAndWatchers();
        var params_1 = {
          ownUserId: client.userID,
          query,
          text: text5,
          useMentionsTransliteration,
          users
        };
        var matchingUsers = searchLocalUsers(params_1);
        var usersToShow = (_b2 = (_a2 = mentionQueryParams.options) === null || _a2 === void 0 ? void 0 : _a2.limit) !== null && _b2 !== void 0 ? _b2 : themeVersion === "2" ? 7 : 10;
        var data = matchingUsers.slice(0, usersToShow);
        if (onReady)
          onReady(filterMutes(data), query);
        return data;
      }
      return queryMembersThrottled(query, function(data2) {
        if (onReady)
          onReady(filterMutes(data2), query);
      });
    },
    output: function(entity) {
      return {
        caretPosition: "next",
        key: entity.id,
        text: "@".concat(entity.name || entity.id)
      };
    }
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/DefaultTriggerProvider.js
var DefaultTriggerProvider = function(_a) {
  var children = _a.children;
  var currentValue = useMessageInputContext("DefaultTriggerProvider");
  var defaultAutocompleteTriggers = {
    "/": useCommandTrigger(),
    ":": useEmojiTrigger(currentValue.emojiSearchIndex),
    "@": useUserTrigger({
      disableMentions: currentValue.disableMentions,
      mentionAllAppUsers: currentValue.mentionAllAppUsers,
      mentionQueryParams: currentValue.mentionQueryParams,
      onSelectUser: currentValue.onSelectUser,
      useMentionsTransliteration: currentValue.useMentionsTransliteration
    })
  };
  var newValue = __assign(__assign({}, currentValue), { autocompleteTriggers: defaultAutocompleteTriggers });
  return import_react157.default.createElement(MessageInputContextProvider, { value: newValue }, children);
};

// node_modules/stream-chat-react/dist/components/MessageInput/EditMessageForm.js
var import_react164 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/UploadsPreview.js
var import_react158 = __toESM(require_react());
var UploadsPreview = function() {
  var themeVersion = useChatContext("UploadsPreview").themeVersion;
  var _a = useChannelStateContext("UploadsPreview"), _b = _a.maxNumberOfFiles, maxNumberOfFiles = _b === void 0 ? 0 : _b, multipleUploads = _a.multipleUploads;
  var _c = useMessageInputContext("UploadsPreview"), fileOrder = _c.fileOrder, fileUploads = _c.fileUploads, imageOrder = _c.imageOrder, imageUploads = _c.imageUploads, _d = _c.numberOfUploads, numberOfUploads = _d === void 0 ? 0 : _d, removeFile = _c.removeFile, removeImage = _c.removeImage, uploadFile = _c.uploadFile, uploadImage = _c.uploadImage, uploadNewFiles = _c.uploadNewFiles;
  var imagesToPreview = imageOrder.map(function(id) {
    return imageUploads[id];
  }).filter(function(image2) {
    return !image2.og_scrape_url;
  });
  var filesToPreview = fileOrder.map(function(id) {
    return fileUploads[id];
  });
  return import_react158.default.createElement(
    import_react158.default.Fragment,
    null,
    imageOrder.length > 0 && import_react158.default.createElement(ImagePreviewer, { disabled: !multipleUploads || numberOfUploads >= maxNumberOfFiles, handleFiles: uploadNewFiles, handleRemove: removeImage, handleRetry: uploadImage, imageUploads: imagesToPreview, multiple: multipleUploads }),
    fileOrder.length > 0 && import_react158.default.createElement(FilePreviewer, { fileIconProps: {
      className: "str-chat__file-icon",
      version: themeVersion
    }, handleFiles: uploadNewFiles, handleRemove: removeFile, handleRetry: uploadFile, uploads: filesToPreview })
  );
};

// node_modules/stream-chat-react/dist/components/ChatAutoComplete/ChatAutoComplete.js
var import_react159 = __toESM(require_react());
var UnMemoizedChatAutoComplete = function(props) {
  var _a = useComponentContext("ChatAutoComplete"), SuggestionItem = _a.AutocompleteSuggestionItem, SuggestionList = _a.AutocompleteSuggestionList;
  var t2 = useTranslationContext("ChatAutoComplete").t;
  var messageInput = useMessageInputContext("ChatAutoComplete");
  var cooldownRemaining = messageInput.cooldownRemaining, disabled = messageInput.disabled, emojiSearchIndex = messageInput.emojiSearchIndex, innerRef = messageInput.textareaRef;
  var placeholder = props.placeholder || t2("Type your message");
  var emojiReplace = props.wordReplace ? function(word) {
    var _a2;
    return (_a2 = props.wordReplace) === null || _a2 === void 0 ? void 0 : _a2.call(props, word, emojiSearchIndex);
  } : function(word) {
    return __awaiter(void 0, void 0, void 0, function() {
      var found, emoji2, firstSkin;
      var _a2, _b;
      return __generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            return [4, emojiSearchIndex === null || emojiSearchIndex === void 0 ? void 0 : emojiSearchIndex.search(word)];
          case 1:
            found = _c.sent() || [];
            emoji2 = found.filter(Boolean).slice(0, 10).find(function(_a3) {
              var emoticons = _a3.emoticons;
              return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));
            });
            if (!emoji2)
              return [2, null];
            firstSkin = ((_a2 = emoji2.skins) !== null && _a2 !== void 0 ? _a2 : [])[0];
            return [2, (_b = emoji2.native) !== null && _b !== void 0 ? _b : firstSkin.native];
        }
      });
    });
  };
  var updateInnerRef = (0, import_react159.useCallback)(function(ref) {
    if (innerRef) {
      innerRef.current = ref;
    }
  }, [innerRef]);
  return import_react159.default.createElement(ReactTextareaAutocomplete, { additionalTextareaProps: messageInput.additionalTextareaProps, "aria-label": cooldownRemaining ? t2("Slow Mode ON") : placeholder, className: "str-chat__textarea__textarea str-chat__message-textarea", closeCommandsList: messageInput.closeCommandsList, closeMentionsList: messageInput.closeMentionsList, containerClassName: "str-chat__textarea str-chat__message-textarea-react-host", disabled: disabled || !!cooldownRemaining, disableMentions: messageInput.disableMentions, dropdownClassName: "str-chat__emojisearch", grow: messageInput.grow, handleSubmit: props.handleSubmit || messageInput.handleSubmit, innerRef: updateInnerRef, itemClassName: "str-chat__emojisearch__item", listClassName: "str-chat__emojisearch__list", loadingComponent: LoadingIndicator2, maxRows: messageInput.maxRows, minChar: 0, minRows: messageInput.minRows, onBlur: props.onBlur, onChange: props.onChange || messageInput.handleChange, onFocus: props.onFocus, onPaste: props.onPaste || messageInput.onPaste, placeholder: cooldownRemaining ? t2("Slow Mode ON") : placeholder, replaceWord: emojiReplace, rows: props.rows || 1, shouldSubmit: messageInput.shouldSubmit, showCommandsList: messageInput.showCommandsList, showMentionsList: messageInput.showMentionsList, SuggestionItem, SuggestionList, trigger: messageInput.autocompleteTriggers || {}, value: props.value || messageInput.text });
};
var ChatAutoComplete = import_react159.default.memo(UnMemoizedChatAutoComplete);

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInputFlat.js
var import_react163 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/SendButton.js
var import_react160 = __toESM(require_react());
var SendButton = function(_a) {
  var sendMessage = _a.sendMessage, rest = __rest(_a, ["sendMessage"]);
  var themeVersion = useChatContext("SendButton").themeVersion;
  return import_react160.default.createElement("button", __assign({ "aria-label": "Send", className: "str-chat__send-button", "data-testid": "send-button", onClick: sendMessage, type: "button" }, rest), themeVersion === "2" ? import_react160.default.createElement(SendIconV2, null) : import_react160.default.createElement(SendIconV1, null));
};

// node_modules/stream-chat-react/dist/components/MessageInput/QuotedMessagePreview.js
var import_react161 = __toESM(require_react());
var QuotedMessagePreviewHeader = function() {
  var setQuotedMessage = useChannelActionContext("QuotedMessagePreview").setQuotedMessage;
  var t2 = useTranslationContext("QuotedMessagePreview").t;
  return import_react161.default.createElement(
    "div",
    { className: "quoted-message-preview-header str-chat__quoted-message-preview-header" },
    import_react161.default.createElement("div", { className: "str-chat__quoted-message-reply-to-message" }, t2("Reply to Message")),
    import_react161.default.createElement(
      "button",
      { "aria-label": t2("aria/Cancel Reply"), className: "str-chat__square-button str-chat__quoted-message-remove", onClick: function() {
        return setQuotedMessage(void 0);
      } },
      import_react161.default.createElement(CloseIcon2, null)
    )
  );
};
var QuotedMessagePreview = function(_a) {
  var _b;
  var quotedMessage = _a.quotedMessage;
  var _c = useComponentContext("QuotedMessagePreview"), Attachment2 = _c.Attachment, _d = _c.Avatar, Avatar2 = _d === void 0 ? Avatar : _d;
  var userLanguage = useTranslationContext("QuotedMessagePreview").userLanguage;
  var themeVersion = useChatContext("QuotedMessagePreview").themeVersion;
  var quotedMessageText = ((_b = quotedMessage.i18n) === null || _b === void 0 ? void 0 : _b["".concat(userLanguage, "_text")]) || quotedMessage.text;
  var quotedMessageAttachment = (0, import_react161.useMemo)(function() {
    var _a2;
    var attachment = ((_a2 = quotedMessage.attachments) !== null && _a2 !== void 0 ? _a2 : [])[0];
    return attachment ? [attachment] : [];
  }, [quotedMessage.attachments]);
  if (!quotedMessageText && !quotedMessageAttachment)
    return null;
  return import_react161.default.createElement(
    "div",
    { className: "quoted-message-preview", "data-testid": "quoted-message-preview" },
    themeVersion === "1" && import_react161.default.createElement(QuotedMessagePreviewHeader, null),
    import_react161.default.createElement(
      "div",
      { className: "quoted-message-preview-content str-chat__quoted-message-preview" },
      quotedMessage.user && import_react161.default.createElement(Avatar2, { image: quotedMessage.user.image, name: quotedMessage.user.name || quotedMessage.user.id, size: 20, user: quotedMessage.user }),
      import_react161.default.createElement(
        "div",
        { className: "quoted-message-preview-content-inner str-chat__quoted-message-bubble" },
        !!quotedMessageAttachment.length && import_react161.default.createElement(Attachment2, { attachments: quotedMessageAttachment, isQuoted: true }),
        import_react161.default.createElement(
          "div",
          { className: "str-chat__quoted-message-text", "data-testid": "quoted-message-text" },
          themeVersion === "2" && import_react161.default.createElement("p", null, quotedMessageText),
          themeVersion === "1" && import_react161.default.createElement(import_react161.default.Fragment, null, quotedMessageText)
        )
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/LinkPreviewList.js
var import_react162 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/types.js
var LinkPreviewState;
(function(LinkPreviewState2) {
  LinkPreviewState2["DISMISSED"] = "dismissed";
  LinkPreviewState2["FAILED"] = "failed";
  LinkPreviewState2["LOADED"] = "loaded";
  LinkPreviewState2["LOADING"] = "loading";
  LinkPreviewState2["QUEUED"] = "queued";
})(LinkPreviewState || (LinkPreviewState = {}));
var SetLinkPreviewMode;
(function(SetLinkPreviewMode2) {
  SetLinkPreviewMode2[SetLinkPreviewMode2["UPSERT"] = 0] = "UPSERT";
  SetLinkPreviewMode2[SetLinkPreviewMode2["SET"] = 1] = "SET";
  SetLinkPreviewMode2[SetLinkPreviewMode2["REMOVE"] = 2] = "REMOVE";
})(SetLinkPreviewMode || (SetLinkPreviewMode = {}));

// node_modules/stream-chat-react/dist/components/MessageInput/LinkPreviewList.js
var LinkPreviewList = function(_a) {
  var linkPreviews = _a.linkPreviews;
  var quotedMessage = useChannelStateContext().quotedMessage;
  var showLinkPreviews = linkPreviews.length > 0 && !quotedMessage;
  if (!showLinkPreviews)
    return null;
  return import_react162.default.createElement("div", { className: "str-chat__link-preview-list" }, Array.from(linkPreviews.values()).map(function(linkPreview) {
    return linkPreview.state === LinkPreviewState.LOADED ? import_react162.default.createElement(LinkPreviewCard, { key: linkPreview.og_scrape_url, linkPreview }) : null;
  }));
};
var LinkPreviewCard = function(_a) {
  var linkPreview = _a.linkPreview;
  var dismissLinkPreview = useMessageInputContext().dismissLinkPreview;
  var _b = useEnterLeaveHandlers(), handleEnter = _b.handleEnter, handleLeave = _b.handleLeave, tooltipVisible = _b.tooltipVisible;
  var _c = (0, import_react162.useState)(null), referenceElement = _c[0], setReferenceElement = _c[1];
  return import_react162.default.createElement(
    "div",
    { className: clsx_default("str-chat__link-preview-card", {
      "str-chat__link-preview-card--loading": linkPreview.state === LinkPreviewState.LOADING
    }), "data-testid": "link-preview-card" },
    import_react162.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, linkPreview.og_scrape_url),
    import_react162.default.createElement(
      "div",
      { className: "str-chat__link-preview-card__icon-container", onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
      import_react162.default.createElement(LinkIcon, null)
    ),
    import_react162.default.createElement(
      "div",
      { className: "str-chat__link-preview-card__content" },
      import_react162.default.createElement("div", { className: "str-chat__link-preview-card__content-title" }, linkPreview.title),
      import_react162.default.createElement("div", { className: "str-chat__link-preview-card__content-description" }, linkPreview.text)
    ),
    import_react162.default.createElement(
      "button",
      { className: "str-chat__link-preview-card__dismiss-button", "data-testid": "link-preview-card-dismiss-btn", onClick: function() {
        return dismissLinkPreview(linkPreview);
      } },
      import_react162.default.createElement(CloseIcon2, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInputFlat.js
var MessageInputFlat = function() {
  var quotedMessage = useChannelStateContext("MessageInputFlat").quotedMessage;
  var setQuotedMessage = useChannelActionContext("MessageInputFlat").setQuotedMessage;
  var _a = useChatContext("MessageInputFlat"), channel = _a.channel, themeVersion = _a.themeVersion;
  (0, import_react163.useEffect)(function() {
    var handleQuotedMessageUpdate = function(e) {
      var _a2;
      if (((_a2 = e.message) === null || _a2 === void 0 ? void 0 : _a2.id) !== (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.id))
        return;
      if (e.type === "message.deleted") {
        setQuotedMessage(void 0);
        return;
      }
      setQuotedMessage(e.message);
    };
    channel === null || channel === void 0 ? void 0 : channel.on("message.deleted", handleQuotedMessageUpdate);
    channel === null || channel === void 0 ? void 0 : channel.on("message.updated", handleQuotedMessageUpdate);
    return function() {
      channel === null || channel === void 0 ? void 0 : channel.off("message.deleted", handleQuotedMessageUpdate);
      channel === null || channel === void 0 ? void 0 : channel.off("message.updated", handleQuotedMessageUpdate);
    };
  }, [channel, quotedMessage]);
  return themeVersion === "2" ? import_react163.default.createElement(MessageInputV2, null) : import_react163.default.createElement(MessageInputV1, null);
};
var MessageInputV1 = function() {
  var _a = useChannelStateContext("MessageInputFlat"), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
  var t2 = useTranslationContext("MessageInputFlat").t;
  var _b = useMessageInputContext("MessageInputFlat"), cooldownRemaining = _b.cooldownRemaining, handleSubmit = _b.handleSubmit, hideSendButton = _b.hideSendButton, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, numberOfUploads = _b.numberOfUploads, setCooldownRemaining = _b.setCooldownRemaining, uploadNewFiles = _b.uploadNewFiles;
  var _c = useComponentContext("MessageInputFlat"), _d = _c.CooldownTimer, CooldownTimer2 = _d === void 0 ? CooldownTimer : _d, _e = _c.FileUploadIcon, FileUploadIcon2 = _e === void 0 ? FileUploadIconFlat : _e, _f = _c.QuotedMessagePreview, QuotedMessagePreview2 = _f === void 0 ? QuotedMessagePreview : _f, _g = _c.SendButton, SendButton2 = _g === void 0 ? SendButton : _g, _h = _c.AttachmentPreviewList, AttachmentPreviewList2 = _h === void 0 ? UploadsPreview : _h, EmojiPicker = _c.EmojiPicker;
  return import_react163.default.createElement(
    "div",
    { className: clsx_default("str-chat__input-flat", "str-chat__message-input", {
      "str-chat__input-flat--send-button-active": !!SendButton2,
      "str-chat__input-flat-has-attachments": numberOfUploads,
      "str-chat__input-flat-quoted": quotedMessage && !quotedMessage.parent_id
    }) },
    import_react163.default.createElement(
      ImageDropzone,
      { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
      quotedMessage && !quotedMessage.parent_id && import_react163.default.createElement(QuotedMessagePreview2, { quotedMessage }),
      import_react163.default.createElement(
        "div",
        { className: "str-chat__input-flat-wrapper" },
        isUploadEnabled && import_react163.default.createElement(AttachmentPreviewList2, null),
        import_react163.default.createElement(
          "div",
          { className: "str-chat__input-flat--textarea-wrapper" },
          EmojiPicker && import_react163.default.createElement(EmojiPicker, null),
          !!cooldownRemaining && import_react163.default.createElement(
            "div",
            { className: "str-chat__input-flat-cooldown" },
            import_react163.default.createElement(CooldownTimer2, { cooldownInterval: cooldownRemaining, setCooldownRemaining })
          ),
          import_react163.default.createElement(ChatAutoComplete, null),
          isUploadEnabled && !cooldownRemaining && import_react163.default.createElement(
            "div",
            { className: "str-chat__fileupload-wrapper", "data-testid": "fileinput" },
            import_react163.default.createElement(Tooltip, null, maxFilesLeft ? t2("Attach files") : t2("You've reached the maximum number of files")),
            import_react163.default.createElement(
              FileUploadButton,
              { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
              import_react163.default.createElement(
                "span",
                { className: "str-chat__input-flat-fileupload" },
                import_react163.default.createElement(FileUploadIcon2, null)
              )
            )
          )
        ),
        !(cooldownRemaining || hideSendButton) && import_react163.default.createElement(SendButton2, { sendMessage: handleSubmit })
      )
    )
  );
};
var MessageInputV2 = function() {
  var _a = useChannelStateContext("MessageInputV2"), _b = _a.acceptedFiles, acceptedFiles = _b === void 0 ? [] : _b, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
  var t2 = useTranslationContext("MessageInputV2").t;
  var _c = useMessageInputContext("MessageInputV2"), asyncMessagesMultiSendEnabled = _c.asyncMessagesMultiSendEnabled, attachments = _c.attachments, cooldownRemaining = _c.cooldownRemaining, findAndEnqueueURLsToEnrich = _c.findAndEnqueueURLsToEnrich, handleSubmit = _c.handleSubmit, hideSendButton = _c.hideSendButton, isUploadEnabled = _c.isUploadEnabled, linkPreviews = _c.linkPreviews, maxFilesLeft = _c.maxFilesLeft, message = _c.message, numberOfUploads = _c.numberOfUploads, recordingController = _c.recordingController, setCooldownRemaining = _c.setCooldownRemaining, text5 = _c.text, uploadNewFiles = _c.uploadNewFiles;
  var _d = useComponentContext("MessageInputV2"), _e = _d.AudioRecorder, AudioRecorder2 = _e === void 0 ? AudioRecorder : _e, _f = _d.AttachmentPreviewList, AttachmentPreviewList2 = _f === void 0 ? AttachmentPreviewList : _f, _g = _d.CooldownTimer, CooldownTimer2 = _g === void 0 ? CooldownTimer : _g, _h = _d.FileUploadIcon, FileUploadIcon2 = _h === void 0 ? UploadIcon : _h, _j = _d.LinkPreviewList, LinkPreviewList2 = _j === void 0 ? LinkPreviewList : _j, _k = _d.QuotedMessagePreview, QuotedMessagePreview2 = _k === void 0 ? QuotedMessagePreview : _k, _l = _d.RecordingPermissionDeniedNotification, RecordingPermissionDeniedNotification2 = _l === void 0 ? RecordingPermissionDeniedNotification : _l, _m = _d.SendButton, SendButton2 = _m === void 0 ? SendButton : _m, _o = _d.StartRecordingAudioButton, StartRecordingAudioButton2 = _o === void 0 ? StartRecordingAudioButton : _o, EmojiPicker = _d.EmojiPicker;
  var _p = (0, import_react163.useState)(false), showRecordingPermissionDeniedNotification = _p[0], setShowRecordingPermissionDeniedNotification = _p[1];
  var closePermissionDeniedNotification = (0, import_react163.useCallback)(function() {
    setShowRecordingPermissionDeniedNotification(false);
  }, []);
  var id = (0, import_react163.useMemo)(function() {
    return nanoid();
  }, []);
  var accept = (0, import_react163.useMemo)(function() {
    return acceptedFiles.reduce(function(mediaTypeMap, mediaType) {
      var _a2;
      (_a2 = mediaTypeMap[mediaType]) !== null && _a2 !== void 0 ? _a2 : mediaTypeMap[mediaType] = [];
      return mediaTypeMap;
    }, {});
  }, [acceptedFiles]);
  var _q = useDropzone({
    accept,
    disabled: !isUploadEnabled || maxFilesLeft === 0,
    multiple: multipleUploads,
    noClick: true,
    onDrop: uploadNewFiles
  }), getRootProps = _q.getRootProps, isDragActive = _q.isDragActive, isDragReject = _q.isDragReject;
  if (recordingController.recordingState)
    return import_react163.default.createElement(AudioRecorder2, null);
  var displayQuotedMessage = !message && quotedMessage && !quotedMessage.parent_id;
  var recordingEnabled = !!(recordingController.recorder && navigator.mediaDevices);
  var isRecording = !!recordingController.recordingState;
  return import_react163.default.createElement(
    import_react163.default.Fragment,
    null,
    import_react163.default.createElement(
      "div",
      __assign({}, getRootProps({ className: "str-chat__message-input" })),
      recordingEnabled && recordingController.permissionState === "denied" && showRecordingPermissionDeniedNotification && import_react163.default.createElement(RecordingPermissionDeniedNotification2, { onClose: closePermissionDeniedNotification, permissionName: RecordingPermission.MIC }),
      findAndEnqueueURLsToEnrich && import_react163.default.createElement(LinkPreviewList2, { linkPreviews: Array.from(linkPreviews.values()) }),
      isDragActive && import_react163.default.createElement(
        "div",
        { className: clsx_default("str-chat__dropzone-container", {
          "str-chat__dropzone-container--not-accepted": isDragReject
        }) },
        !isDragReject && import_react163.default.createElement("p", null, t2("Drag your files here")),
        isDragReject && import_react163.default.createElement("p", null, t2("Some of the files will not be accepted"))
      ),
      displayQuotedMessage && import_react163.default.createElement(QuotedMessagePreviewHeader, null),
      import_react163.default.createElement(
        "div",
        { className: "str-chat__message-input-inner" },
        import_react163.default.createElement(
          "div",
          { className: "str-chat__file-input-container", "data-testid": "file-upload-button" },
          import_react163.default.createElement(UploadButton, { accept: acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(","), "aria-label": t2("aria/File upload"), className: "str-chat__file-input", "data-testid": "file-input", disabled: !isUploadEnabled || maxFilesLeft === 0, id, multiple: multipleUploads, onFileChange: uploadNewFiles }),
          import_react163.default.createElement(
            "label",
            { className: "str-chat__file-input-label", htmlFor: id },
            import_react163.default.createElement(FileUploadIcon2, null)
          )
        ),
        import_react163.default.createElement(
          "div",
          { className: "str-chat__message-textarea-container" },
          displayQuotedMessage && import_react163.default.createElement(QuotedMessagePreview2, { quotedMessage }),
          isUploadEnabled && !!(numberOfUploads || attachments.length && attachments.length !== linkPreviews.size) && import_react163.default.createElement(AttachmentPreviewList2, null),
          import_react163.default.createElement(
            "div",
            { className: "str-chat__message-textarea-with-emoji-picker" },
            import_react163.default.createElement(ChatAutoComplete, null),
            EmojiPicker && import_react163.default.createElement(EmojiPicker, null)
          )
        ),
        !hideSendButton && import_react163.default.createElement(import_react163.default.Fragment, null, cooldownRemaining ? import_react163.default.createElement(CooldownTimer2, { cooldownInterval: cooldownRemaining, setCooldownRemaining }) : import_react163.default.createElement(
          import_react163.default.Fragment,
          null,
          import_react163.default.createElement(SendButton2, { disabled: !numberOfUploads && !text5.length && !attachments.length, sendMessage: handleSubmit }),
          recordingEnabled && import_react163.default.createElement(StartRecordingAudioButton2, { disabled: isRecording || !asyncMessagesMultiSendEnabled && attachments.some(function(a) {
            return a.type === RecordingAttachmentType.VOICE_RECORDING;
          }), onClick: function() {
            var _a2;
            (_a2 = recordingController.recorder) === null || _a2 === void 0 ? void 0 : _a2.start();
            setShowRecordingPermissionDeniedNotification(true);
          } })
        ))
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/EditMessageForm.js
var EditMessageForm = function() {
  var _a = useChannelStateContext("EditMessageForm"), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads;
  var t2 = useTranslationContext("EditMessageForm").t;
  var _b = useMessageInputContext("EditMessageForm"), clearEditingState = _b.clearEditingState, handleSubmit = _b.handleSubmit, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, uploadNewFiles = _b.uploadNewFiles;
  var _c = useComponentContext("EditMessageForm"), _d = _c.FileUploadIcon, FileUploadIcon2 = _d === void 0 ? FileUploadIcon : _d, EmojiPicker = _c.EmojiPicker;
  var themeVersion = useChatContext("EditMessageForm").themeVersion;
  (0, import_react164.useEffect)(function() {
    var onKeyDown = function(event) {
      if (event.key === "Escape")
        clearEditingState === null || clearEditingState === void 0 ? void 0 : clearEditingState();
    };
    document.addEventListener("keydown", onKeyDown);
    return function() {
      return document.removeEventListener("keydown", onKeyDown);
    };
  }, [clearEditingState]);
  if (themeVersion === "2")
    return import_react164.default.createElement(
      "form",
      { className: "str-chat__edit-message-form", onSubmit: handleSubmit },
      import_react164.default.createElement(MessageInputFlat, null),
      import_react164.default.createElement(
        "div",
        { className: "str-chat__edit-message-form-options" },
        import_react164.default.createElement("button", { className: "str-chat__edit-message-cancel", "data-testid": "cancel-button", onClick: clearEditingState }, t2("Cancel")),
        import_react164.default.createElement("button", { className: "str-chat__edit-message-send", "data-testid": "send-button", type: "submit" }, t2("Send"))
      )
    );
  return import_react164.default.createElement(
    "div",
    { className: "str-chat__edit-message-form" },
    import_react164.default.createElement(
      ImageDropzone,
      { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
      import_react164.default.createElement(
        "form",
        { onSubmit: handleSubmit },
        isUploadEnabled && import_react164.default.createElement(UploadsPreview, null),
        import_react164.default.createElement(ChatAutoComplete, null),
        import_react164.default.createElement(
          "div",
          { className: "str-chat__message-team-form-footer" },
          import_react164.default.createElement(
            "div",
            { className: "str-chat__edit-message-form-options" },
            EmojiPicker && import_react164.default.createElement(EmojiPicker, null),
            isUploadEnabled && import_react164.default.createElement(
              "div",
              { className: "str-chat__fileupload-wrapper", "data-testid": "fileinput" },
              import_react164.default.createElement(Tooltip, null, maxFilesLeft ? t2("Attach files") : t2("You've reached the maximum number of files")),
              import_react164.default.createElement(
                FileUploadButton,
                { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                import_react164.default.createElement(
                  "span",
                  { className: "str-chat__input-fileupload" },
                  import_react164.default.createElement(FileUploadIcon2, null)
                )
              )
            )
          ),
          import_react164.default.createElement(
            "div",
            null,
            import_react164.default.createElement("button", { className: "str-chat__edit-message-cancel", onClick: clearEditingState }, t2("Cancel")),
            import_react164.default.createElement("button", { className: "str-chat__edit-message-send", type: "submit" }, t2("Send"))
          )
        )
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js
var import_react165 = __toESM(require_react());
var useCooldownTimer = function() {
  var _a;
  var _b = useChatContext("useCooldownTimer"), client = _b.client, latestMessageDatesByChannels = _b.latestMessageDatesByChannels;
  var _c = useChannelStateContext("useCooldownTimer"), channel = _c.channel, _d = _c.messages, messages = _d === void 0 ? [] : _d;
  var _e = (0, import_react165.useState)(), cooldownRemaining = _e[0], setCooldownRemaining = _e[1];
  var _f = channel.data || {}, _g = _f.cooldown, cooldownInterval = _g === void 0 ? 0 : _g, own_capabilities = _f.own_capabilities;
  var skipCooldown = own_capabilities === null || own_capabilities === void 0 ? void 0 : own_capabilities.includes("skip-slow-mode");
  var ownLatestMessageDate = (0, import_react165.useMemo)(function() {
    var _a2, _b2;
    return (_a2 = latestMessageDatesByChannels[channel.cid]) !== null && _a2 !== void 0 ? _a2 : (_b2 = __spreadArray([], messages, true).sort(function(a, b) {
      var _a3, _b3;
      return ((_a3 = b.created_at) === null || _a3 === void 0 ? void 0 : _a3.getTime()) - ((_b3 = a.created_at) === null || _b3 === void 0 ? void 0 : _b3.getTime());
    }).find(function(v) {
      var _a3, _b3;
      return ((_a3 = v.user) === null || _a3 === void 0 ? void 0 : _a3.id) === ((_b3 = client.user) === null || _b3 === void 0 ? void 0 : _b3.id);
    })) === null || _b2 === void 0 ? void 0 : _b2.created_at;
  }, [messages, (_a = client.user) === null || _a === void 0 ? void 0 : _a.id, latestMessageDatesByChannels, channel.cid]);
  (0, import_react165.useEffect)(function() {
    var timeSinceOwnLastMessage = ownLatestMessageDate ? (
      // prevent negative values
      Math.max(0, ((/* @__PURE__ */ new Date()).getTime() - ownLatestMessageDate.getTime()) / 1e3)
    ) : void 0;
    var remaining = !skipCooldown && typeof timeSinceOwnLastMessage !== "undefined" && cooldownInterval > timeSinceOwnLastMessage ? Math.round(cooldownInterval - timeSinceOwnLastMessage) : 0;
    setCooldownRemaining(remaining);
    if (!remaining)
      return;
    var timeout = setTimeout(function() {
      setCooldownRemaining(0);
    }, remaining * 1e3);
    return function() {
      clearTimeout(timeout);
    };
  }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);
  return {
    cooldownInterval,
    cooldownRemaining,
    setCooldownRemaining
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputState.js
var import_react174 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachments.js
var import_react168 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useImageUploads.js
var import_react166 = __toESM(require_react());
var useImageUploads = function(props, state, dispatch) {
  var doImageUploadRequest = props.doImageUploadRequest, errorHandler = props.errorHandler;
  var imageUploads = state.imageUploads;
  var channel = useChannelStateContext("useImageUploads").channel;
  var getAppSettings = useChatContext("useImageUploads").getAppSettings;
  var addNotification = useChannelActionContext("useImageUploads").addNotification;
  var t2 = useTranslationContext("useImageUploads").t;
  var removeImage = (0, import_react166.useCallback)(function(id) {
    dispatch({ id, type: "removeImageUpload" });
  }, []);
  var uploadImage = (0, import_react166.useCallback)(
    function(id) {
      return __awaiter(void 0, void 0, void 0, function() {
        var img, file, canUpload, response, error_1, errorMessage2, alreadyRemoved;
        var _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              img = imageUploads[id];
              if (!img)
                return [
                  2
                  /*return*/
                ];
              file = img.file;
              if (img.state !== "uploading") {
                dispatch({ id, state: "uploading", type: "setImageUpload" });
              }
              return [4, checkUploadPermissions({
                addNotification,
                file,
                getAppSettings,
                t: t2,
                uploadType: "image"
              })];
            case 1:
              canUpload = _b.sent();
              if (!canUpload)
                return [2, removeImage(id)];
              _b.label = 2;
            case 2:
              _b.trys.push([2, 7, , 8]);
              if (!doImageUploadRequest) return [3, 4];
              return [4, doImageUploadRequest(file, channel)];
            case 3:
              response = _b.sent();
              return [3, 6];
            case 4:
              return [4, channel.sendImage(file)];
            case 5:
              response = _b.sent();
              _b.label = 6;
            case 6:
              return [3, 8];
            case 7:
              error_1 = _b.sent();
              errorMessage2 = typeof error_1.message === "string" ? error_1.message : t2("Error uploading image");
              addNotification(errorMessage2, "error");
              alreadyRemoved = false;
              if (!imageUploads[id]) {
                alreadyRemoved = true;
              } else {
                dispatch({ id, state: "failed", type: "setImageUpload" });
              }
              if (!alreadyRemoved && errorHandler) {
                errorHandler(error_1, "upload-image", __assign(__assign({}, file), { id }));
              }
              return [
                2
                /*return*/
              ];
            case 8:
              if (!response) {
                removeImage(id);
                return [
                  2
                  /*return*/
                ];
              }
              if (img.previewUri)
                (_a = URL.revokeObjectURL) === null || _a === void 0 ? void 0 : _a.call(URL, img.previewUri);
              dispatch({
                id,
                previewUri: void 0,
                state: "finished",
                type: "setImageUpload",
                url: response.file
              });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [imageUploads, channel, doImageUploadRequest, errorHandler, removeImage]
  );
  (0, import_react166.useEffect)(function() {
    var upload = Object.values(imageUploads).find(function(imageUpload) {
      return imageUpload.state === "uploading" && imageUpload.file;
    });
    if (!upload)
      return;
    uploadImage(upload.id);
  }, [imageUploads, uploadImage]);
  return {
    removeImage,
    uploadImage
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useFileUploads.js
var import_react167 = __toESM(require_react());
var useFileUploads = function(props, state, dispatch) {
  var doFileUploadRequest = props.doFileUploadRequest, errorHandler = props.errorHandler;
  var fileUploads = state.fileUploads;
  var channel = useChannelStateContext("useFileUploads").channel;
  var addNotification = useChannelActionContext("useFileUploads").addNotification;
  var getAppSettings = useChatContext("useFileUploads").getAppSettings;
  var t2 = useTranslationContext("useFileUploads").t;
  var uploadFile = (0, import_react167.useCallback)(function(id) {
    dispatch({ id, state: "uploading", type: "setFileUpload" });
  }, []);
  var removeFile = (0, import_react167.useCallback)(function(id) {
    dispatch({ id, type: "removeFileUpload" });
  }, []);
  (0, import_react167.useEffect)(function() {
    (function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var upload, file, id, canUpload, response, error_1, errorMessage2, alreadyRemoved;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              upload = Object.values(fileUploads).find(function(fileUpload) {
                return fileUpload.state === "uploading" && fileUpload.file;
              });
              if (!upload)
                return [
                  2
                  /*return*/
                ];
              file = upload.file, id = upload.id;
              return [4, checkUploadPermissions({
                addNotification,
                file,
                getAppSettings,
                t: t2,
                uploadType: "file"
              })];
            case 1:
              canUpload = _a.sent();
              if (!canUpload)
                return [2, removeFile(id)];
              _a.label = 2;
            case 2:
              _a.trys.push([2, 7, , 8]);
              if (!doFileUploadRequest) return [3, 4];
              return [4, doFileUploadRequest(file, channel)];
            case 3:
              response = _a.sent();
              return [3, 6];
            case 4:
              return [4, channel.sendFile(file)];
            case 5:
              response = _a.sent();
              _a.label = 6;
            case 6:
              return [3, 8];
            case 7:
              error_1 = _a.sent();
              errorMessage2 = typeof error_1.message === "string" ? error_1.message : t2("Error uploading file");
              addNotification(errorMessage2, "error");
              alreadyRemoved = false;
              if (!fileUploads[id]) {
                alreadyRemoved = true;
              } else {
                dispatch({ id, state: "failed", type: "setFileUpload" });
              }
              if (!alreadyRemoved && errorHandler) {
                errorHandler(error_1, "upload-file", file);
              }
              return [
                2
                /*return*/
              ];
            case 8:
              if (!response) {
                removeFile(id);
                return [
                  2
                  /*return*/
                ];
              }
              dispatch({
                id,
                state: "finished",
                thumb_url: response.thumb_url,
                type: "setFileUpload",
                url: response.file
              });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    })();
  }, [fileUploads, channel, doFileUploadRequest, errorHandler, removeFile]);
  return {
    removeFile,
    uploadFile
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachments.js
var apiMaxNumberOfFiles = 10;
var ensureIsLocalAttachment = function(attachment) {
  if (isLocalAttachment(attachment)) {
    return attachment;
  }
  var localMetadata = attachment.localMetadata, rest = __rest(attachment, ["localMetadata"]);
  return __assign({ localMetadata: __assign(__assign({}, localMetadata !== null && localMetadata !== void 0 ? localMetadata : {}), { id: (localMetadata === null || localMetadata === void 0 ? void 0 : localMetadata.id) || nanoid() }) }, rest);
};
var useAttachments = function(props, state, dispatch, textareaRef) {
  var doFileUploadRequest = props.doFileUploadRequest, doImageUploadRequest = props.doImageUploadRequest, errorHandler = props.errorHandler, noFiles = props.noFiles;
  var fileUploads = state.fileUploads, imageUploads = state.imageUploads;
  var getAppSettings = useChatContext("useAttachments").getAppSettings;
  var t2 = useTranslationContext("useAttachments").t;
  var addNotification = useChannelActionContext("useAttachments").addNotification;
  var _a = useChannelStateContext("useAttachments"), channel = _a.channel, maxNumberOfFiles = _a.maxNumberOfFiles, multipleUploads = _a.multipleUploads;
  var _b = useFileUploads(props, state, dispatch), removeFile = _b.removeFile, uploadFile = _b.uploadFile;
  var _c = useImageUploads(props, state, dispatch), removeImage = _c.removeImage, uploadImage = _c.uploadImage;
  var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;
  var numberOfImages = Object.values(imageUploads).filter(function(_a2) {
    var og_scrape_url = _a2.og_scrape_url, state2 = _a2.state;
    return state2 !== "failed" && !og_scrape_url;
  }).length;
  var numberOfFiles = Object.values(fileUploads).filter(function(_a2) {
    var state2 = _a2.state;
    return state2 !== "failed";
  }).length;
  var numberOfUploads = numberOfImages + numberOfFiles;
  var maxFilesLeft = maxFilesAllowed - numberOfUploads;
  var uploadNewFiles = (0, import_react168.useCallback)(
    function(files) {
      var _a2;
      Array.from(files).slice(0, maxFilesLeft).forEach(function(file) {
        var _a3;
        var id = nanoid();
        if (file.type.startsWith("image/") && !file.type.endsWith(".photoshop")) {
          dispatch({
            file,
            id,
            previewUri: (_a3 = URL.createObjectURL) === null || _a3 === void 0 ? void 0 : _a3.call(URL, file),
            state: "uploading",
            type: "setImageUpload"
          });
        } else if (file instanceof File && !noFiles) {
          dispatch({ file, id, state: "uploading", type: "setFileUpload" });
        }
      });
      (_a2 = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [maxFilesLeft, noFiles]
  );
  var removeAttachments = (0, import_react168.useCallback)(function(ids) {
    if (!ids.length)
      return;
    dispatch({ ids, type: "removeAttachments" });
  }, [dispatch]);
  var upsertAttachments = (0, import_react168.useCallback)(function(attachments) {
    if (!attachments.length)
      return;
    dispatch({
      attachments: attachments.map(ensureIsLocalAttachment),
      type: "upsertAttachments"
    });
  }, [dispatch]);
  var uploadAttachment = (0, import_react168.useCallback)(function(att) {
    return __awaiter(void 0, void 0, void 0, function() {
      var localMetadata, attachment, isImage, id, file, canUpload, notificationText, response, doUploadRequest, error_1, finalError, failedAttachment, uploadedAttachment;
      var _a2;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            localMetadata = att.localMetadata, attachment = __rest(att, ["localMetadata"]);
            if (!(localMetadata === null || localMetadata === void 0 ? void 0 : localMetadata.file))
              return [2, att];
            isImage = isUploadedImage(attachment);
            id = (_a2 = localMetadata === null || localMetadata === void 0 ? void 0 : localMetadata.id) !== null && _a2 !== void 0 ? _a2 : nanoid();
            file = localMetadata.file;
            return [4, checkUploadPermissions({
              addNotification,
              file,
              getAppSettings,
              t: t2,
              uploadType: isImage ? "image" : "file"
            })];
          case 1:
            canUpload = _b2.sent();
            if (!canUpload) {
              notificationText = t2("Missing permissions to upload the attachment");
              console.error(new Error(notificationText));
              addNotification(notificationText, "error");
              return [2, att];
            }
            upsertAttachments([
              __assign(__assign({}, attachment), { localMetadata: __assign(__assign({}, localMetadata), { id, uploadState: "uploading" }) })
            ]);
            _b2.label = 2;
          case 2:
            _b2.trys.push([2, 7, , 8]);
            doUploadRequest = isImage ? doImageUploadRequest : doFileUploadRequest;
            if (!doUploadRequest) return [3, 4];
            return [4, doUploadRequest(file, channel)];
          case 3:
            response = _b2.sent();
            return [3, 6];
          case 4:
            return [4, channel[isImage ? "sendImage" : "sendFile"](file)];
          case 5:
            response = _b2.sent();
            _b2.label = 6;
          case 6:
            return [3, 8];
          case 7:
            error_1 = _b2.sent();
            finalError = { message: t2("Error uploading attachment"), name: "Error" };
            if (typeof error_1.message === "string") {
              finalError = error_1;
            } else if (typeof error_1 === "object") {
              finalError = Object.assign(finalError, error_1);
            }
            console.error(finalError);
            addNotification(finalError.message, "error");
            failedAttachment = __assign(__assign({}, attachment), { localMetadata: __assign(__assign({}, localMetadata), { uploadState: "failed" }) });
            upsertAttachments([failedAttachment]);
            if (errorHandler) {
              errorHandler(finalError, "upload-attachment", file);
            }
            return [2, failedAttachment];
          case 8:
            if (!response) {
              removeAttachments([id]);
              return [
                2
                /*return*/
              ];
            }
            uploadedAttachment = __assign(__assign({}, attachment), { localMetadata: __assign(__assign({}, localMetadata), { uploadState: "finished" }) });
            if (isLocalImageAttachment(uploadedAttachment)) {
              if (uploadedAttachment.localMetadata.previewUri) {
                URL.revokeObjectURL(uploadedAttachment.localMetadata.previewUri);
                delete uploadedAttachment.localMetadata.previewUri;
              }
              uploadedAttachment.image_url = response.file;
            } else {
              uploadedAttachment.asset_url = response.file;
            }
            upsertAttachments([uploadedAttachment]);
            return [2, uploadedAttachment];
        }
      });
    });
  }, [
    addNotification,
    channel,
    doFileUploadRequest,
    doImageUploadRequest,
    errorHandler,
    getAppSettings,
    removeAttachments,
    t2,
    upsertAttachments
  ]);
  return {
    maxFilesLeft,
    numberOfUploads,
    removeAttachments,
    removeFile,
    removeImage,
    uploadAttachment,
    uploadFile,
    uploadImage,
    uploadNewFiles,
    upsertAttachments
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useLinkPreviews.js
var import_react169 = __toESM(require_react());
var import_lodash6 = __toESM(require_lodash3());
var useLinkPreviews = function(_a) {
  var _b;
  var debounceURLEnrichmentMsInputContext = _a.debounceURLEnrichmentMs, dispatch = _a.dispatch, _c = _a.enrichURLForPreview, enrichURLForPreview = _c === void 0 ? false : _c, findURLFnInputContext = _a.findURLFn, linkPreviews = _a.linkPreviews, onLinkPreviewDismissedInputContext = _a.onLinkPreviewDismissed;
  var client = useChatContext().client;
  var _d = useChannelStateContext(), channelConfig = _d.channelConfig, debounceURLEnrichmentMsChannelContext = _d.debounceURLEnrichmentMs, findURLFnChannelContext = _d.findURLFn, onLinkPreviewDismissedChannelContext = _d.onLinkPreviewDismissed;
  var shouldDiscardEnrichQueries = (0, import_react169.useRef)(false);
  var findURLFn = findURLFnInputContext !== null && findURLFnInputContext !== void 0 ? findURLFnInputContext : findURLFnChannelContext;
  var onLinkPreviewDismissed = onLinkPreviewDismissedInputContext !== null && onLinkPreviewDismissedInputContext !== void 0 ? onLinkPreviewDismissedInputContext : onLinkPreviewDismissedChannelContext;
  var debounceURLEnrichmentMs = (_b = debounceURLEnrichmentMsInputContext !== null && debounceURLEnrichmentMsInputContext !== void 0 ? debounceURLEnrichmentMsInputContext : debounceURLEnrichmentMsChannelContext) !== null && _b !== void 0 ? _b : 1500;
  var dismissLinkPreview = (0, import_react169.useCallback)(
    function(linkPreview) {
      onLinkPreviewDismissed === null || onLinkPreviewDismissed === void 0 ? void 0 : onLinkPreviewDismissed(linkPreview);
      var previewToRemoveMap = /* @__PURE__ */ new Map();
      linkPreview.state = LinkPreviewState.DISMISSED;
      previewToRemoveMap.set(linkPreview.og_scrape_url, linkPreview);
      dispatch({
        linkPreviews: previewToRemoveMap,
        mode: SetLinkPreviewMode.UPSERT,
        type: "setLinkPreviews"
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [onLinkPreviewDismissed]
  );
  var findAndEnqueueURLsToEnrich = (0, import_react169.useCallback)((0, import_lodash6.default)(function(text5, mode) {
    if (mode === void 0) {
      mode = SetLinkPreviewMode.SET;
    }
    var urls = findURLFn ? findURLFn(text5) : find(text5, "url").reduce(function(acc, link2) {
      if (link2.isLink)
        acc.push(link2.href);
      return acc;
    }, []);
    shouldDiscardEnrichQueries.current = urls.length === 0;
    dispatch({
      linkPreviews: urls.reduce(function(acc, url) {
        acc.set(url, { og_scrape_url: url, state: LinkPreviewState.QUEUED });
        return acc;
      }, /* @__PURE__ */ new Map()),
      mode,
      type: "setLinkPreviews"
    });
  }, debounceURLEnrichmentMs, { leading: false, trailing: true }), [debounceURLEnrichmentMs, shouldDiscardEnrichQueries, findURLFn]);
  var cancelURLEnrichment = (0, import_react169.useCallback)(function() {
    findAndEnqueueURLsToEnrich.cancel();
    findAndEnqueueURLsToEnrich("");
    findAndEnqueueURLsToEnrich.flush();
  }, [findAndEnqueueURLsToEnrich]);
  (0, import_react169.useEffect)(function() {
    var enqueuedLinks = Array.from(linkPreviews.values()).reduce(function(acc, linkPreview) {
      if (linkPreview.state === "queued") {
        var loadingLinkPreview = __assign(__assign({}, linkPreview), { state: LinkPreviewState.LOADING });
        acc.set(linkPreview.og_scrape_url, loadingLinkPreview);
      }
      return acc;
    }, /* @__PURE__ */ new Map());
    if (!enqueuedLinks.size)
      return;
    dispatch({
      linkPreviews: enqueuedLinks,
      mode: SetLinkPreviewMode.UPSERT,
      type: "setLinkPreviews"
    });
    enqueuedLinks.forEach(function(linkPreview) {
      client.enrichURL(linkPreview.og_scrape_url).then(function(_a2) {
        var duration = _a2.duration, ogAttachment = __rest(_a2, ["duration"]);
        if (shouldDiscardEnrichQueries.current)
          return;
        var linkPreviewsMap = /* @__PURE__ */ new Map();
        linkPreviewsMap.set(linkPreview.og_scrape_url, __assign(__assign({}, ogAttachment), { state: LinkPreviewState.LOADED }));
        dispatch({
          linkPreviews: linkPreviewsMap,
          mode: SetLinkPreviewMode.UPSERT,
          type: "setLinkPreviews"
        });
      }).catch(function() {
        var linkPreviewsMap = /* @__PURE__ */ new Map();
        linkPreviewsMap.set(linkPreview.og_scrape_url, __assign(__assign({}, linkPreview), { state: LinkPreviewState.FAILED }));
        dispatch({
          linkPreviews: linkPreviewsMap,
          mode: SetLinkPreviewMode.UPSERT,
          type: "setLinkPreviews"
        });
      });
    });
  }, [shouldDiscardEnrichQueries, linkPreviews]);
  return {
    cancelURLEnrichment,
    dismissLinkPreview,
    findAndEnqueueURLsToEnrich: (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.url_enrichment) && enrichURLForPreview ? findAndEnqueueURLsToEnrich : void 0
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputText.js
var import_react170 = __toESM(require_react());
var useMessageInputText = function(props, state, dispatch, findAndEnqueueURLsToEnrich) {
  var channel = useChannelStateContext("useMessageInputText").channel;
  var additionalTextareaProps = props.additionalTextareaProps, focus = props.focus, parent = props.parent, _a = props.publishTypingEvent, publishTypingEvent = _a === void 0 ? true : _a;
  var text5 = state.text;
  var textareaRef = (0, import_react170.useRef)();
  (0, import_react170.useEffect)(function() {
    if (focus && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [focus]);
  var newCursorPosition = (0, import_react170.useRef)();
  var insertText = (0, import_react170.useCallback)(
    function(textToInsert) {
      var maxLength = (additionalTextareaProps || {}).maxLength;
      if (!textareaRef.current) {
        return dispatch({
          getNewText: function(text6) {
            var updatedText = text6 + textToInsert;
            if (maxLength && updatedText.length > maxLength) {
              return updatedText.slice(0, maxLength);
            }
            return updatedText;
          },
          type: "setText"
        });
      }
      var _a2 = textareaRef.current, selectionEnd = _a2.selectionEnd, selectionStart = _a2.selectionStart;
      newCursorPosition.current = selectionStart + textToInsert.length;
      dispatch({
        getNewText: function(prevText) {
          var updatedText = prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd);
          if (maxLength && updatedText.length > maxLength) {
            return updatedText.slice(0, maxLength);
          }
          return updatedText;
        },
        type: "setText"
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [additionalTextareaProps, newCursorPosition, textareaRef]
  );
  (0, import_react170.useEffect)(function() {
    var textareaElement = textareaRef.current;
    if (textareaElement && newCursorPosition.current !== void 0) {
      textareaElement.selectionStart = newCursorPosition.current;
      textareaElement.selectionEnd = newCursorPosition.current;
      newCursorPosition.current = void 0;
    }
  }, [text5, newCursorPosition]);
  var handleChange = (0, import_react170.useCallback)(
    function(event) {
      event.preventDefault();
      if (!event || !event.target) {
        return;
      }
      var newText = event.target.value;
      dispatch({
        getNewText: function() {
          return newText;
        },
        type: "setText"
      });
      findAndEnqueueURLsToEnrich === null || findAndEnqueueURLsToEnrich === void 0 ? void 0 : findAndEnqueueURLsToEnrich(newText);
      if (publishTypingEvent && newText && channel) {
        logChatPromiseExecution(channel.keystroke(parent === null || parent === void 0 ? void 0 : parent.id), "start typing event");
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [channel, findAndEnqueueURLsToEnrich, parent, publishTypingEvent]
  );
  return {
    handleChange,
    insertText,
    textareaRef
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useSubmitHandler.js
var import_react171 = __toESM(require_react());
var getAttachmentTypeFromMime = function(mime) {
  if (mime.includes("video/"))
    return "video";
  if (mime.includes("audio/"))
    return "audio";
  return "file";
};
var useSubmitHandler = function(props, state, dispatch, numberOfUploads, enrichURLsController) {
  var clearEditingState = props.clearEditingState, message = props.message, overrideSubmitHandler = props.overrideSubmitHandler, parent = props.parent, publishTypingEvent = props.publishTypingEvent;
  var attachments = state.attachments, fileOrder = state.fileOrder, fileUploads = state.fileUploads, imageOrder = state.imageOrder, imageUploads = state.imageUploads, linkPreviews = state.linkPreviews, mentioned_users = state.mentioned_users, text5 = state.text;
  var cancelURLEnrichment = enrichURLsController.cancelURLEnrichment, findAndEnqueueURLsToEnrich = enrichURLsController.findAndEnqueueURLsToEnrich;
  var channel = useChannelStateContext("useSubmitHandler").channel;
  var _a = useChannelActionContext("useSubmitHandler"), addNotification = _a.addNotification, editMessage = _a.editMessage, sendMessage = _a.sendMessage;
  var t2 = useTranslationContext("useSubmitHandler").t;
  var textReference = (0, import_react171.useRef)({ hasChanged: false, initialText: text5 });
  (0, import_react171.useEffect)(function() {
    if (!textReference.current.initialText.length) {
      textReference.current.initialText = text5;
      return;
    }
    textReference.current.hasChanged = text5 !== textReference.current.initialText;
  }, [text5]);
  var getAttachmentsFromUploads = function() {
    var imageAttachments = imageOrder.map(function(id) {
      return imageUploads[id];
    }).filter(function(upload) {
      return upload.state !== "failed";
    }).filter(function(_a2, _23, self2) {
      var id = _a2.id, url = _a2.url;
      return self2.every(function(upload) {
        return upload.id === id || upload.url !== url;
      });
    }).filter(function(upload) {
      if (!textReference.current.hasChanged)
        return true;
      return !upload.og_scrape_url;
    }).map(function(_a2) {
      var name = _a2.file.name, url = _a2.url, rest = __rest(_a2, ["file", "url"]);
      return {
        author_name: rest.author_name,
        fallback: name,
        image_url: url,
        og_scrape_url: rest.og_scrape_url,
        text: rest.text,
        title: rest.title,
        title_link: rest.title_link,
        type: "image"
      };
    });
    var fileAttachments = fileOrder.map(function(id) {
      return fileUploads[id];
    }).filter(function(upload) {
      return upload.state !== "failed";
    }).map(function(upload) {
      return {
        asset_url: upload.url,
        file_size: upload.file.size,
        mime_type: upload.file.type,
        thumb_url: upload.thumb_url,
        title: upload.file.name,
        type: getAttachmentTypeFromMime(upload.file.type || "")
      };
    });
    var otherAttachments = attachments.filter(function(att) {
      var _a2;
      return ((_a2 = att.localMetadata) === null || _a2 === void 0 ? void 0 : _a2.uploadState) !== "failed";
    }).map(function(localAttachment) {
      var _23 = localAttachment.localMetadata, attachment = __rest(localAttachment, ["localMetadata"]);
      return attachment;
    });
    return __spreadArray(__spreadArray(__spreadArray([], otherAttachments, true), imageAttachments, true), fileAttachments, true);
  };
  var handleSubmit = function(event, customMessageData, options2) {
    return __awaiter(void 0, void 0, void 0, function() {
      var trimmedMessage, isEmptyMessage, someAttachmentsUploading, attachmentsFromUploads, attachmentsFromLinkPreviews, someLinkPreviewsLoading, someLinkPreviewsDismissed, newAttachments, actualMentionedUsers, updatedMessage, linkPreviewsEnabled, skip_enrich_url, sendOptions, err_1, err_2;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            event === null || event === void 0 ? void 0 : event.preventDefault();
            trimmedMessage = text5.trim();
            isEmptyMessage = trimmedMessage === "" || trimmedMessage === ">" || trimmedMessage === "``````" || trimmedMessage === "``" || trimmedMessage === "**" || trimmedMessage === "____" || trimmedMessage === "__" || trimmedMessage === "****";
            if (isEmptyMessage && numberOfUploads === 0 && attachments.length === 0)
              return [
                2
                /*return*/
              ];
            someAttachmentsUploading = Object.values(imageUploads).some(function(upload) {
              return upload.state === "uploading";
            }) || Object.values(fileUploads).some(function(upload) {
              return upload.state === "uploading";
            }) || attachments.some(function(att) {
              var _a3;
              return ((_a3 = att.localMetadata) === null || _a3 === void 0 ? void 0 : _a3.uploadState) === "uploading";
            });
            if (someAttachmentsUploading) {
              return [2, addNotification(t2("Wait until all attachments have uploaded"), "error")];
            }
            attachmentsFromUploads = getAttachmentsFromUploads();
            attachmentsFromLinkPreviews = [];
            if (findAndEnqueueURLsToEnrich) {
              attachmentsFromUploads = attachmentsFromUploads.filter(function(attachment) {
                return !attachment.og_scrape_url;
              });
              cancelURLEnrichment();
              someLinkPreviewsLoading = Array.from(linkPreviews.values()).some(function(linkPreview) {
                return [LinkPreviewState.QUEUED, LinkPreviewState.LOADING].includes(linkPreview.state);
              });
              someLinkPreviewsDismissed = Array.from(linkPreviews.values()).some(function(linkPreview) {
                return linkPreview.state === LinkPreviewState.DISMISSED;
              });
              if (!someLinkPreviewsLoading) {
                attachmentsFromLinkPreviews = Array.from(linkPreviews.values()).filter(function(linkPreview) {
                  return linkPreview.state === LinkPreviewState.LOADED && !attachmentsFromUploads.find(function(attFromUpload) {
                    return attFromUpload.og_scrape_url === linkPreview.og_scrape_url;
                  });
                }).map(function(_a3) {
                  var linkPreviewState = _a3.state, ogAttachment = __rest(_a3, ["state"]);
                  return ogAttachment;
                });
              }
            }
            newAttachments = __spreadArray(__spreadArray([], attachmentsFromUploads, true), attachmentsFromLinkPreviews, true);
            actualMentionedUsers = Array.from(new Set(mentioned_users.filter(function(_a3) {
              var id = _a3.id, name = _a3.name;
              return text5.includes("@".concat(id)) || text5.includes("@".concat(name));
            })));
            updatedMessage = {
              attachments: newAttachments,
              mentioned_users: actualMentionedUsers,
              text: text5
            };
            linkPreviewsEnabled = !!findAndEnqueueURLsToEnrich;
            skip_enrich_url = linkPreviewsEnabled && (!someLinkPreviewsLoading && attachmentsFromLinkPreviews.length > 0 || someLinkPreviewsDismissed);
            sendOptions = linkPreviewsEnabled || options2 ? Object.assign(linkPreviewsEnabled ? { skip_enrich_url } : {}, options2 !== null && options2 !== void 0 ? options2 : {}) : void 0;
            if (!(message && message.type !== "error")) return [3, 5];
            delete message.i18n;
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, editMessage(__assign(__assign(__assign({}, message), updatedMessage), customMessageData), sendOptions)];
          case 2:
            _a2.sent();
            clearEditingState === null || clearEditingState === void 0 ? void 0 : clearEditingState();
            dispatch({ type: "clear" });
            return [3, 4];
          case 3:
            err_1 = _a2.sent();
            addNotification(t2("Edit message request failed"), "error");
            return [3, 4];
          case 4:
            return [3, 13];
          case 5:
            _a2.trys.push([5, 12, , 13]);
            dispatch({ type: "clear" });
            if (!overrideSubmitHandler) return [3, 7];
            return [4, overrideSubmitHandler(__assign(__assign({}, updatedMessage), { parent }), channel.cid, customMessageData, sendOptions)];
          case 6:
            _a2.sent();
            return [3, 9];
          case 7:
            return [4, sendMessage(__assign(__assign({}, updatedMessage), { parent }), customMessageData, sendOptions)];
          case 8:
            _a2.sent();
            _a2.label = 9;
          case 9:
            if (!publishTypingEvent) return [3, 11];
            return [4, channel.stopTyping()];
          case 10:
            _a2.sent();
            _a2.label = 11;
          case 11:
            return [3, 13];
          case 12:
            err_2 = _a2.sent();
            dispatch({
              getNewText: function() {
                return text5;
              },
              type: "setText"
            });
            actualMentionedUsers === null || actualMentionedUsers === void 0 ? void 0 : actualMentionedUsers.forEach(function(user) {
              dispatch({ type: "addMentionedUser", user });
            });
            addNotification(t2("Send message request failed"), "error");
            return [3, 13];
          case 13:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  return { handleSubmit };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/usePasteHandler.js
var import_react172 = __toESM(require_react());
var usePasteHandler = function(uploadNewFiles, insertText, isUploadEnabled, findAndEnqueueURLsToEnrich) {
  var onPaste = (0, import_react172.useCallback)(
    function(clipboardEvent) {
      if (!isUploadEnabled)
        return;
      (function(event) {
        return __awaiter(void 0, void 0, void 0, function() {
          var items, plainTextPromise, _loop_1, i, state_1, fileLikes, pastedText;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                items = event.clipboardData.items;
                if (!dataTransferItemsHaveFiles(Array.from(items)))
                  return [
                    2
                    /*return*/
                  ];
                event.preventDefault();
                plainTextPromise = void 0;
                _loop_1 = function(i2) {
                  var item = items[i2];
                  if (item.kind === "string" && item.type === "text/plain") {
                    plainTextPromise = new Promise(function(resolve) {
                      item.getAsString(function(string3) {
                        resolve(string3);
                      });
                    });
                    return "break";
                  }
                };
                for (i = 0; i < items.length; i++) {
                  state_1 = _loop_1(i);
                  if (state_1 === "break")
                    break;
                }
                return [4, dataTransferItemsToFiles(Array.from(items))];
              case 1:
                fileLikes = _a.sent();
                if (fileLikes.length) {
                  uploadNewFiles(fileLikes);
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!plainTextPromise) return [3, 3];
                return [4, plainTextPromise];
              case 2:
                pastedText = _a.sent();
                insertText(pastedText);
                findAndEnqueueURLsToEnrich === null || findAndEnqueueURLsToEnrich === void 0 ? void 0 : findAndEnqueueURLsToEnrich(pastedText, SetLinkPreviewMode.UPSERT);
                findAndEnqueueURLsToEnrich === null || findAndEnqueueURLsToEnrich === void 0 ? void 0 : findAndEnqueueURLsToEnrich.flush();
                _a.label = 3;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      })(clipboardEvent);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [insertText, uploadNewFiles]
  );
  return { onPaste };
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/hooks/useMediaRecorder.js
var import_react173 = __toESM(require_react());
var useMediaRecorder = function(_a) {
  var asyncMessagesMultiSendEnabled = _a.asyncMessagesMultiSendEnabled, enabled = _a.enabled, generateRecordingTitle = _a.generateRecordingTitle, handleSubmit = _a.handleSubmit, recordingConfig = _a.recordingConfig, uploadAttachment = _a.uploadAttachment;
  var t2 = useTranslationContext("useMediaRecorder").t;
  var _b = (0, import_react173.useState)(), recording = _b[0], setRecording = _b[1];
  var _c = (0, import_react173.useState)(), recordingState = _c[0], setRecordingState = _c[1];
  var _d = (0, import_react173.useState)(), permissionState = _d[0], setPermissionState = _d[1];
  var _e = (0, import_react173.useState)(false), isScheduledForSubmit = _e[0], scheduleForSubmit = _e[1];
  var recorder = (0, import_react173.useMemo)(function() {
    return enabled ? new MediaRecorderController({
      config: recordingConfig !== null && recordingConfig !== void 0 ? recordingConfig : {},
      generateRecordingTitle,
      t: t2
    }) : void 0;
  }, [recordingConfig, enabled, generateRecordingTitle, t2]);
  var completeRecording = (0, import_react173.useCallback)(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var recording2;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!recorder)
              return [
                2
                /*return*/
              ];
            return [4, recorder.stop()];
          case 1:
            recording2 = _a2.sent();
            if (!recording2)
              return [
                2
                /*return*/
              ];
            return [4, uploadAttachment(recording2)];
          case 2:
            _a2.sent();
            if (!asyncMessagesMultiSendEnabled) {
              scheduleForSubmit(true);
            }
            recorder.cleanUp();
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [asyncMessagesMultiSendEnabled, recorder, uploadAttachment]);
  (0, import_react173.useEffect)(function() {
    if (!isScheduledForSubmit)
      return;
    handleSubmit();
    scheduleForSubmit(false);
  }, [handleSubmit, isScheduledForSubmit]);
  (0, import_react173.useEffect)(function() {
    if (!recorder)
      return;
    recorder.permission.watch();
    var recordingSubscription = recorder.recording.subscribe(setRecording);
    var recordingStateSubscription = recorder.recordingState.subscribe(setRecordingState);
    var permissionStateSubscription = recorder.permission.state.subscribe(setPermissionState);
    return function() {
      recorder.cancel();
      recorder.permission.unwatch();
      recordingSubscription.unsubscribe();
      recordingStateSubscription.unsubscribe();
      permissionStateSubscription.unsubscribe();
    };
  }, [recorder]);
  return {
    completeRecording,
    permissionState,
    recorder,
    recording,
    recordingState
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputState.js
var makeEmptyMessageInputState = function() {
  return {
    attachments: [],
    fileOrder: [],
    fileUploads: {},
    imageOrder: [],
    imageUploads: {},
    linkPreviews: /* @__PURE__ */ new Map(),
    mentioned_users: [],
    setText: function() {
      return null;
    },
    text: ""
  };
};
var initState = function(message) {
  var _a, _b, _c, _d, _e, _f, _g;
  if (!message) {
    return makeEmptyMessageInputState();
  }
  var imageUploads = (_b = (_a = message.attachments) === null || _a === void 0 ? void 0 : _a.filter(function(_a2) {
    var type = _a2.type;
    return type === "image";
  }).reduce(function(acc, _a2) {
    var author_name = _a2.author_name, _b2 = _a2.fallback, fallback = _b2 === void 0 ? "" : _b2, image_url = _a2.image_url, og_scrape_url = _a2.og_scrape_url, text5 = _a2.text, title = _a2.title, title_link = _a2.title_link;
    var id = nanoid();
    acc[id] = {
      author_name,
      file: {
        name: fallback
      },
      id,
      og_scrape_url,
      state: "finished",
      text: text5,
      title,
      title_link,
      url: image_url
    };
    return acc;
  }, {})) !== null && _b !== void 0 ? _b : {};
  var fileUploads = (_d = (_c = message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function(_a2) {
    var type = _a2.type;
    return type === "file";
  }).reduce(function(acc, _a2) {
    var asset_url = _a2.asset_url, file_size = _a2.file_size, mime_type = _a2.mime_type, thumb_url = _a2.thumb_url, _b2 = _a2.title, title = _b2 === void 0 ? "" : _b2;
    var id = nanoid();
    acc[id] = {
      file: {
        name: title,
        size: file_size,
        type: mime_type
      },
      id,
      state: "finished",
      thumb_url,
      url: asset_url
    };
    return acc;
  }, {})) !== null && _d !== void 0 ? _d : {};
  var linkPreviews = (_f = (_e = message.attachments) === null || _e === void 0 ? void 0 : _e.reduce(function(acc, attachment) {
    if (!attachment.og_scrape_url)
      return acc;
    acc.set(attachment.og_scrape_url, __assign(__assign({}, attachment), { state: LinkPreviewState.LOADED }));
    return acc;
  }, /* @__PURE__ */ new Map())) !== null && _f !== void 0 ? _f : /* @__PURE__ */ new Map();
  var imageOrder = Object.keys(imageUploads);
  var fileOrder = Object.keys(fileUploads);
  var attachments = ((_g = message.attachments) === null || _g === void 0 ? void 0 : _g.filter(function(_a2) {
    var type = _a2.type;
    return type !== "file" && type !== "image";
  }).map(function(att) {
    return __assign(__assign({}, att), { localMetadata: { id: nanoid() } });
  })) || [];
  var mentioned_users = message.mentioned_users || [];
  return {
    attachments,
    fileOrder,
    fileUploads,
    imageOrder,
    imageUploads,
    linkPreviews,
    mentioned_users,
    setText: function() {
      return null;
    },
    text: message.text || ""
  };
};
var messageInputReducer = function(state, action) {
  var _a, _b;
  switch (action.type) {
    case "setText":
      return __assign(__assign({}, state), { text: action.getNewText(state.text) });
    case "clear":
      return makeEmptyMessageInputState();
    case "upsertAttachments": {
      var attachments_1 = __spreadArray([], state.attachments, true);
      action.attachments.forEach(function(actionAttachment) {
        var _a2;
        var attachmentIndex = state.attachments.findIndex(function(att) {
          var _a3, _b2, _c;
          return ((_a3 = att.localMetadata) === null || _a3 === void 0 ? void 0 : _a3.id) && ((_b2 = att.localMetadata) === null || _b2 === void 0 ? void 0 : _b2.id) === ((_c = actionAttachment.localMetadata) === null || _c === void 0 ? void 0 : _c.id);
        });
        if (attachmentIndex === -1) {
          attachments_1.push(actionAttachment);
        } else {
          var upsertedAttachment = mergeDeep((_a2 = state.attachments[attachmentIndex]) !== null && _a2 !== void 0 ? _a2 : {}, actionAttachment);
          attachments_1.splice(attachmentIndex, 1, upsertedAttachment);
        }
      });
      return __assign(__assign({}, state), { attachments: attachments_1 });
    }
    case "removeAttachments": {
      return __assign(__assign({}, state), { attachments: state.attachments.filter(function(att) {
        var _a2;
        return !action.ids.includes((_a2 = att.localMetadata) === null || _a2 === void 0 ? void 0 : _a2.id);
      }) });
    }
    case "setImageUpload": {
      var imageAlreadyExists = state.imageUploads[action.id];
      if (!imageAlreadyExists && !action.file)
        return state;
      var imageOrder = imageAlreadyExists ? state.imageOrder : state.imageOrder.concat(action.id);
      var newUploadFields = __assign({}, action);
      delete newUploadFields.type;
      return __assign(__assign({}, state), { imageOrder, imageUploads: __assign(__assign({}, state.imageUploads), (_a = {}, _a[action.id] = __assign(__assign({}, state.imageUploads[action.id]), newUploadFields), _a)) });
    }
    case "setFileUpload": {
      var fileAlreadyExists = state.fileUploads[action.id];
      if (!fileAlreadyExists && !action.file)
        return state;
      var fileOrder = fileAlreadyExists ? state.fileOrder : state.fileOrder.concat(action.id);
      var newUploadFields = __assign({}, action);
      delete newUploadFields.type;
      return __assign(__assign({}, state), { fileOrder, fileUploads: __assign(__assign({}, state.fileUploads), (_b = {}, _b[action.id] = __assign(__assign({}, state.fileUploads[action.id]), newUploadFields), _b)) });
    }
    case "setLinkPreviews": {
      var linkPreviews_1 = new Map(state.linkPreviews);
      if (action.mode === SetLinkPreviewMode.REMOVE) {
        Array.from(action.linkPreviews.keys()).forEach(function(key) {
          linkPreviews_1.delete(key);
        });
      } else {
        Array.from(action.linkPreviews.values()).reduce(function(acc, linkPreview) {
          var existingPreview = acc.get(linkPreview.og_scrape_url);
          var alreadyEnqueued = linkPreview.state === LinkPreviewState.QUEUED && (existingPreview === null || existingPreview === void 0 ? void 0 : existingPreview.state) !== LinkPreviewState.FAILED;
          if (existingPreview && alreadyEnqueued)
            return acc;
          acc.set(linkPreview.og_scrape_url, linkPreview);
          return acc;
        }, linkPreviews_1);
        if (action.mode === SetLinkPreviewMode.SET) {
          Array.from(state.linkPreviews.keys()).forEach(function(key) {
            if (!action.linkPreviews.get(key))
              linkPreviews_1.delete(key);
          });
        }
      }
      return __assign(__assign({}, state), { linkPreviews: linkPreviews_1 });
    }
    case "removeImageUpload": {
      if (!state.imageUploads[action.id])
        return state;
      var newImageUploads = __assign({}, state.imageUploads);
      delete newImageUploads[action.id];
      return __assign(__assign({}, state), { imageOrder: state.imageOrder.filter(function(_id) {
        return _id !== action.id;
      }), imageUploads: newImageUploads });
    }
    case "removeFileUpload": {
      if (!state.fileUploads[action.id])
        return state;
      var newFileUploads = __assign({}, state.fileUploads);
      delete newFileUploads[action.id];
      return __assign(__assign({}, state), { fileOrder: state.fileOrder.filter(function(_id) {
        return _id !== action.id;
      }), fileUploads: newFileUploads });
    }
    case "addMentionedUser":
      return __assign(__assign({}, state), { mentioned_users: state.mentioned_users.concat(action.user) });
    default:
      return state;
  }
};
var useMessageInputState = function(props) {
  var _a;
  var additionalTextareaProps = props.additionalTextareaProps, asyncMessagesMultiSendEnabled = props.asyncMessagesMultiSendEnabled, audioRecordingConfig = props.audioRecordingConfig, audioRecordingEnabled = props.audioRecordingEnabled, getDefaultValue = props.getDefaultValue, message = props.message, urlEnrichmentConfig = props.urlEnrichmentConfig;
  var _b = useChannelStateContext("useMessageInputState"), _c = _b.channelCapabilities, channelCapabilities = _c === void 0 ? {} : _c, channelConfig = _b.channelConfig, enrichURLForPreviewChannelContext = _b.enrichURLForPreview;
  var defaultValue = (getDefaultValue === null || getDefaultValue === void 0 ? void 0 : getDefaultValue()) || (additionalTextareaProps === null || additionalTextareaProps === void 0 ? void 0 : additionalTextareaProps.defaultValue);
  var initialStateValue = message || (Array.isArray(defaultValue) ? { text: defaultValue.join("") } : { text: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.toString() });
  var _d = (0, import_react174.useReducer)(messageInputReducer, initialStateValue, initState), state = _d[0], dispatch = _d[1];
  var enrichURLsController = useLinkPreviews(__assign(__assign({ dispatch, linkPreviews: state.linkPreviews }, urlEnrichmentConfig), { enrichURLForPreview: (_a = urlEnrichmentConfig === null || urlEnrichmentConfig === void 0 ? void 0 : urlEnrichmentConfig.enrichURLForPreview) !== null && _a !== void 0 ? _a : enrichURLForPreviewChannelContext }));
  var _e = useMessageInputText(props, state, dispatch, enrichURLsController.findAndEnqueueURLsToEnrich), handleChange = _e.handleChange, insertText = _e.insertText, textareaRef = _e.textareaRef;
  var _f = (0, import_react174.useState)(false), showCommandsList = _f[0], setShowCommandsList = _f[1];
  var _g = (0, import_react174.useState)(false), showMentionsList = _g[0], setShowMentionsList = _g[1];
  var openCommandsList = function() {
    dispatch({
      getNewText: function() {
        return "/";
      },
      type: "setText"
    });
    setShowCommandsList(true);
  };
  var closeCommandsList = function() {
    return setShowCommandsList(false);
  };
  var openMentionsList = function() {
    dispatch({
      getNewText: function(currentText) {
        return currentText + "@";
      },
      type: "setText"
    });
    setShowMentionsList(true);
  };
  var closeMentionsList = function() {
    return setShowMentionsList(false);
  };
  var _h = useAttachments(props, state, dispatch, textareaRef), maxFilesLeft = _h.maxFilesLeft, numberOfUploads = _h.numberOfUploads, removeAttachments = _h.removeAttachments, removeFile = _h.removeFile, removeImage = _h.removeImage, uploadAttachment = _h.uploadAttachment, uploadFile = _h.uploadFile, uploadImage = _h.uploadImage, uploadNewFiles = _h.uploadNewFiles, upsertAttachments = _h.upsertAttachments;
  var handleSubmit = useSubmitHandler(props, state, dispatch, numberOfUploads, enrichURLsController).handleSubmit;
  var recordingController = useMediaRecorder({
    asyncMessagesMultiSendEnabled,
    enabled: !!audioRecordingEnabled,
    handleSubmit,
    recordingConfig: audioRecordingConfig,
    uploadAttachment
  });
  var isUploadEnabled = (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.uploads) !== false && channelCapabilities["upload-file"] !== false;
  var onPaste = usePasteHandler(uploadNewFiles, insertText, isUploadEnabled, enrichURLsController.findAndEnqueueURLsToEnrich).onPaste;
  var onSelectUser = (0, import_react174.useCallback)(function(item) {
    dispatch({ type: "addMentionedUser", user: item });
  }, []);
  var setText = (0, import_react174.useCallback)(function(text5) {
    dispatch({ getNewText: function() {
      return text5;
    }, type: "setText" });
  }, []);
  return __assign(__assign(__assign({}, state), enrichURLsController), { closeCommandsList, closeMentionsList, handleChange, handleSubmit, insertText, isUploadEnabled, maxFilesLeft, numberOfUploads, onPaste, onSelectUser, openCommandsList, openMentionsList, recordingController, removeAttachments, removeFile, removeImage, setText, showCommandsList, showMentionsList, textareaRef, uploadAttachment, uploadFile, uploadImage, uploadNewFiles, upsertAttachments });
};

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInput.js
var import_react176 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCreateMessageInputContext.js
var import_react175 = __toESM(require_react());
var useCreateMessageInputContext = function(value) {
  var additionalTextareaProps = value.additionalTextareaProps, asyncMessagesMultiSendEnabled = value.asyncMessagesMultiSendEnabled, attachments = value.attachments, audioRecordingEnabled = value.audioRecordingEnabled, autocompleteTriggers = value.autocompleteTriggers, cancelURLEnrichment = value.cancelURLEnrichment, clearEditingState = value.clearEditingState, closeCommandsList = value.closeCommandsList, closeMentionsList = value.closeMentionsList, cooldownInterval = value.cooldownInterval, cooldownRemaining = value.cooldownRemaining, disabled = value.disabled, disableMentions = value.disableMentions, dismissLinkPreview = value.dismissLinkPreview, doFileUploadRequest = value.doFileUploadRequest, doImageUploadRequest = value.doImageUploadRequest, emojiSearchIndex = value.emojiSearchIndex, errorHandler = value.errorHandler, fileOrder = value.fileOrder, fileUploads = value.fileUploads, findAndEnqueueURLsToEnrich = value.findAndEnqueueURLsToEnrich, focus = value.focus, grow = value.grow, handleChange = value.handleChange, handleSubmit = value.handleSubmit, hideSendButton = value.hideSendButton, imageOrder = value.imageOrder, imageUploads = value.imageUploads, insertText = value.insertText, isUploadEnabled = value.isUploadEnabled, linkPreviews = value.linkPreviews, maxFilesLeft = value.maxFilesLeft, maxRows = value.maxRows, mentionAllAppUsers = value.mentionAllAppUsers, mentioned_users = value.mentioned_users, mentionQueryParams = value.mentionQueryParams, message = value.message, minRows = value.minRows, noFiles = value.noFiles, numberOfUploads = value.numberOfUploads, onPaste = value.onPaste, onSelectUser = value.onSelectUser, openCommandsList = value.openCommandsList, openMentionsList = value.openMentionsList, overrideSubmitHandler = value.overrideSubmitHandler, parent = value.parent, publishTypingEvent = value.publishTypingEvent, recordingController = value.recordingController, removeAttachments = value.removeAttachments, removeFile = value.removeFile, removeImage = value.removeImage, setCooldownRemaining = value.setCooldownRemaining, setText = value.setText, shouldSubmit = value.shouldSubmit, showCommandsList = value.showCommandsList, showMentionsList = value.showMentionsList, text5 = value.text, textareaRef = value.textareaRef, uploadAttachment = value.uploadAttachment, uploadFile = value.uploadFile, uploadImage = value.uploadImage, uploadNewFiles = value.uploadNewFiles, upsertAttachments = value.upsertAttachments, useMentionsTransliteration = value.useMentionsTransliteration;
  var editing = message === null || message === void 0 ? void 0 : message.editing;
  var fileUploadsValue = Object.entries(fileUploads).map(function(_a) {
    var _23 = _a[0], value2 = _a[1];
    return value2.state;
  }).join();
  var imageUploadsValue = Object.entries(imageUploads).map(function(_a) {
    var _23 = _a[0], value2 = _a[1];
    return value2.state;
  }).join();
  var linkPreviewsValue = Array.from(linkPreviews.values()).join();
  var mentionedUsersLength = mentioned_users.length;
  var parentId = parent === null || parent === void 0 ? void 0 : parent.id;
  var messageInputContext = (0, import_react175.useMemo)(
    function() {
      return {
        additionalTextareaProps,
        asyncMessagesMultiSendEnabled,
        attachments,
        audioRecordingEnabled,
        autocompleteTriggers,
        cancelURLEnrichment,
        clearEditingState,
        closeCommandsList,
        closeMentionsList,
        cooldownInterval,
        cooldownRemaining,
        disabled,
        disableMentions,
        dismissLinkPreview,
        doFileUploadRequest,
        doImageUploadRequest,
        emojiSearchIndex,
        errorHandler,
        fileOrder,
        fileUploads,
        findAndEnqueueURLsToEnrich,
        focus,
        grow,
        handleChange,
        handleSubmit,
        hideSendButton,
        imageOrder,
        imageUploads,
        insertText,
        isUploadEnabled,
        linkPreviews,
        maxFilesLeft,
        maxRows,
        mentionAllAppUsers,
        mentioned_users,
        mentionQueryParams,
        message,
        minRows,
        noFiles,
        numberOfUploads,
        onPaste,
        onSelectUser,
        openCommandsList,
        openMentionsList,
        overrideSubmitHandler,
        parent,
        publishTypingEvent,
        recordingController,
        removeAttachments,
        removeFile,
        removeImage,
        setCooldownRemaining,
        setText,
        shouldSubmit,
        showCommandsList,
        showMentionsList,
        text: text5,
        textareaRef,
        uploadAttachment,
        uploadFile,
        uploadImage,
        uploadNewFiles,
        upsertAttachments,
        useMentionsTransliteration
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      asyncMessagesMultiSendEnabled,
      audioRecordingEnabled,
      cancelURLEnrichment,
      cooldownInterval,
      cooldownRemaining,
      dismissLinkPreview,
      editing,
      emojiSearchIndex,
      fileUploadsValue,
      findAndEnqueueURLsToEnrich,
      handleSubmit,
      hideSendButton,
      imageUploadsValue,
      isUploadEnabled,
      linkPreviewsValue,
      mentionedUsersLength,
      minRows,
      parentId,
      publishTypingEvent,
      recordingController,
      removeAttachments,
      showCommandsList,
      showMentionsList,
      text5,
      uploadAttachment,
      upsertAttachments
    ]
  );
  return messageInputContext;
};

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInput.js
var MessageInputProvider = function(props) {
  var _a;
  var cooldownTimerState = useCooldownTimer();
  var messageInputState = useMessageInputState(props);
  var emojiSearchIndex = useComponentContext("MessageInput").emojiSearchIndex;
  var messageInputContextValue = useCreateMessageInputContext(__assign(__assign(__assign(__assign({}, cooldownTimerState), messageInputState), props), { emojiSearchIndex: (_a = props.emojiSearchIndex) !== null && _a !== void 0 ? _a : emojiSearchIndex }));
  return import_react176.default.createElement(MessageInputContextProvider, { value: messageInputContextValue }, props.children);
};
var UnMemoizedMessageInput = function(props) {
  var PropInput = props.Input;
  var dragAndDropWindow = useChannelStateContext().dragAndDropWindow;
  var _a = useComponentContext("MessageInput"), ContextInput = _a.Input, _b = _a.TriggerProvider, TriggerProvider = _b === void 0 ? DefaultTriggerProvider : _b;
  var Input = PropInput || ContextInput || MessageInputFlat;
  if (dragAndDropWindow)
    return import_react176.default.createElement(
      import_react176.default.Fragment,
      null,
      import_react176.default.createElement(
        TriggerProvider,
        null,
        import_react176.default.createElement(Input, null)
      )
    );
  return import_react176.default.createElement(
    MessageInputProvider,
    __assign({}, props),
    import_react176.default.createElement(
      TriggerProvider,
      null,
      import_react176.default.createElement(Input, null)
    )
  );
};
var MessageInput = import_react176.default.memo(UnMemoizedMessageInput);

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInputSmall.js
var import_react177 = __toESM(require_react());
var MessageInputSmall = function() {
  var _a = useChannelStateContext("MessageInputSmall"), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
  var setQuotedMessage = useChannelActionContext("MessageInputSmall").setQuotedMessage;
  var t2 = useTranslationContext("MessageInputSmall").t;
  var channel = useChatContext("MessageInputSmall").channel;
  var _b = useMessageInputContext("MessageInputSmall"), cooldownRemaining = _b.cooldownRemaining, handleSubmit = _b.handleSubmit, hideSendButton = _b.hideSendButton, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, numberOfUploads = _b.numberOfUploads, setCooldownRemaining = _b.setCooldownRemaining, uploadNewFiles = _b.uploadNewFiles;
  var _c = useComponentContext("MessageInputSmall"), _d = _c.CooldownTimer, CooldownTimer2 = _d === void 0 ? CooldownTimer : _d, _e = _c.FileUploadIcon, FileUploadIcon2 = _e === void 0 ? FileUploadIconFlat : _e, _f = _c.SendButton, SendButton2 = _f === void 0 ? SendButton : _f, _g = _c.QuotedMessagePreview, QuotedMessagePreview2 = _g === void 0 ? QuotedMessagePreview : _g, EmojiPicker = _c.EmojiPicker;
  (0, import_react177.useEffect)(function() {
    var handleQuotedMessageUpdate = function(e) {
      var _a2;
      if (!(quotedMessage && ((_a2 = e.message) === null || _a2 === void 0 ? void 0 : _a2.id) === quotedMessage.id))
        return;
      if (e.type === "message.deleted") {
        setQuotedMessage(void 0);
        return;
      }
      setQuotedMessage(e.message);
    };
    channel === null || channel === void 0 ? void 0 : channel.on("message.deleted", handleQuotedMessageUpdate);
    channel === null || channel === void 0 ? void 0 : channel.on("message.updated", handleQuotedMessageUpdate);
    return function() {
      channel === null || channel === void 0 ? void 0 : channel.off("message.deleted", handleQuotedMessageUpdate);
      channel === null || channel === void 0 ? void 0 : channel.off("message.updated", handleQuotedMessageUpdate);
    };
  }, [channel, quotedMessage]);
  return import_react177.default.createElement(
    "div",
    { className: "str-chat__small-message-input__wrapper" },
    import_react177.default.createElement(
      ImageDropzone,
      { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
      import_react177.default.createElement(
        "div",
        { className: "str-chat__small-message-input ".concat(SendButton2 ? "str-chat__small-message-input--send-button-active" : "", " ").concat(quotedMessage && quotedMessage.parent_id ? "str-chat__input-flat-quoted" : "", " ").concat(numberOfUploads ? "str-chat__small-message-input-has-attachments" : "", " ") },
        quotedMessage && quotedMessage.parent_id && import_react177.default.createElement(QuotedMessagePreview2, { quotedMessage }),
        isUploadEnabled && import_react177.default.createElement(UploadsPreview, null),
        import_react177.default.createElement(
          "div",
          { className: "str-chat__small-message-input--textarea-wrapper" },
          import_react177.default.createElement(ChatAutoComplete, null),
          cooldownRemaining ? import_react177.default.createElement(
            "div",
            { className: "str-chat__input-small-cooldown" },
            import_react177.default.createElement(CooldownTimer2, { cooldownInterval: cooldownRemaining, setCooldownRemaining })
          ) : import_react177.default.createElement(
            import_react177.default.Fragment,
            null,
            isUploadEnabled && import_react177.default.createElement(
              "div",
              { className: "str-chat__fileupload-wrapper", "data-testid": "fileinput" },
              import_react177.default.createElement(Tooltip, null, maxFilesLeft ? t2("Attach files") : t2("You've reached the maximum number of files")),
              import_react177.default.createElement(
                FileUploadButton,
                { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                import_react177.default.createElement(
                  "span",
                  { className: "str-chat__small-message-input-fileupload" },
                  import_react177.default.createElement(FileUploadIcon2, null)
                )
              )
            ),
            EmojiPicker && import_react177.default.createElement(
              EmojiPicker,
              {
                // @ts-expect-error
                buttonClassName: "str-chat__small-message-input-emojiselect",
                ButtonIconComponent: EmojiIconSmall
              }
            )
          )
        ),
        !(cooldownRemaining || hideSendButton) && import_react177.default.createElement(SendButton2, { sendMessage: handleSubmit })
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MML/MML.js
var import_react178 = __toESM(require_react());
var MMLReact = import_react178.default.lazy(function() {
  return __awaiter(void 0, void 0, void 0, function() {
    var mml;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, import("./mml-react.esm-KUZQB5P3.js")];
        case 1:
          mml = _a.sent();
          return [2, { default: mml.MML }];
      }
    });
  });
});
var MML = function(props) {
  var actionHandler = props.actionHandler, _a = props.align, align = _a === void 0 ? "right" : _a, source = props.source;
  var theme = useChatContext("MML").theme;
  return import_react178.default.createElement(
    import_react178.Suspense,
    { fallback: null },
    import_react178.default.createElement(MMLReact, { className: "mml-align-".concat(align), Loading: null, onSubmit: actionHandler, source, Success: null, theme: (theme || "").replace(" ", "-") })
  );
};

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelector.js
var import_react179 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/utils/utils.js
var isMutableRef = function(ref) {
  if (ref) {
    return ref.current !== void 0;
  }
  return false;
};
var getImageDimensions = function(source) {
  return new Promise(function(resolve, reject) {
    var image2 = new Image();
    image2.addEventListener("load", function() {
      resolve([image2.width, image2.height]);
    }, { once: true });
    image2.addEventListener("error", function() {
      return reject("Couldn't load image from ".concat(source));
    }, {
      once: true
    });
    image2.src = source;
  });
};

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelector.js
var UnMemoizedReactionSelector = import_react179.default.forwardRef(function(props, ref) {
  var _a;
  var propAvatar = props.Avatar, _b = props.detailedView, detailedView = _b === void 0 ? true : _b, propHandleReaction = props.handleReaction, propLatestReactions = props.latest_reactions, propOwnReactions = props.own_reactions, propReactionGroups = props.reaction_groups, propReactionOptions = props.reactionOptions, _c = props.reverse, reverse = _c === void 0 ? false : _c;
  var _d = useComponentContext("ReactionSelector"), contextAvatar = _d.Avatar, contextReactionOptions = _d.reactionOptions;
  var _e = useMessageContext("ReactionSelector"), contextHandleReaction = _e.handleReaction, message = _e.message;
  var reactionOptions = propReactionOptions !== null && propReactionOptions !== void 0 ? propReactionOptions : contextReactionOptions;
  var Avatar2 = propAvatar || contextAvatar || Avatar;
  var handleReaction = propHandleReaction || contextHandleReaction;
  var latestReactions = propLatestReactions || (message === null || message === void 0 ? void 0 : message.latest_reactions) || [];
  var ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions) || [];
  var reactionGroups = propReactionGroups || (message === null || message === void 0 ? void 0 : message.reaction_groups) || {};
  var _f = (0, import_react179.useState)(null), tooltipReactionType = _f[0], setTooltipReactionType = _f[1];
  var _g = (0, import_react179.useState)(null), tooltipPositions = _g[0], setTooltipPositions = _g[1];
  var targetRef = (0, import_react179.useRef)(null);
  var tooltipRef = (0, import_react179.useRef)(null);
  var showTooltip = (0, import_react179.useCallback)(function(event, reactionType) {
    targetRef.current = event.currentTarget;
    setTooltipReactionType(reactionType);
  }, []);
  var hideTooltip = (0, import_react179.useCallback)(function() {
    setTooltipReactionType(null);
    setTooltipPositions(null);
  }, []);
  (0, import_react179.useEffect)(function() {
    var _a2, _b2, _c2;
    if (tooltipReactionType) {
      var tooltip = (_a2 = tooltipRef.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect();
      var target = (_b2 = targetRef.current) === null || _b2 === void 0 ? void 0 : _b2.getBoundingClientRect();
      var container = isMutableRef(ref) ? (_c2 = ref.current) === null || _c2 === void 0 ? void 0 : _c2.getBoundingClientRect() : null;
      if (!tooltip || !target || !container)
        return;
      var tooltipPosition = tooltip.width === container.width || tooltip.x < container.x ? 0 : target.left + target.width / 2 - container.left - tooltip.width / 2;
      var arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
      setTooltipPositions({
        arrow: arrowPosition,
        tooltip: tooltipPosition
      });
    }
  }, [tooltipReactionType, ref]);
  var getUsersPerReactionType = function(type) {
    return latestReactions.map(function(reaction) {
      var _a2, _b2;
      if (reaction.type === type) {
        return ((_a2 = reaction.user) === null || _a2 === void 0 ? void 0 : _a2.name) || ((_b2 = reaction.user) === null || _b2 === void 0 ? void 0 : _b2.id);
      }
      return null;
    }).filter(Boolean);
  };
  var iHaveReactedWithReaction = function(reactionType) {
    return ownReactions.find(function(reaction) {
      return reaction.type === reactionType;
    });
  };
  var getLatestUserForReactionType = function(type) {
    var _a2;
    return ((_a2 = latestReactions.find(function(reaction) {
      return reaction.type === type && !!reaction.user;
    })) === null || _a2 === void 0 ? void 0 : _a2.user) || void 0;
  };
  return import_react179.default.createElement(
    "div",
    { className: clsx_default("str-chat__reaction-selector str-chat__message-reaction-selector", {
      "str-chat__reaction-selector--reverse": reverse
    }), "data-testid": "reaction-selector", ref },
    !!tooltipReactionType && detailedView && import_react179.default.createElement(
      "div",
      { className: "str-chat__reaction-selector-tooltip", ref: tooltipRef, style: {
        left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.tooltip,
        visibility: tooltipPositions ? "visible" : "hidden"
      } },
      import_react179.default.createElement("div", { className: "arrow", style: { left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.arrow } }),
      (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 : _a.map(function(user, i, users) {
        return import_react179.default.createElement("span", { className: "latest-user-username", key: "key-".concat(i, "-").concat(user) }, "".concat(user).concat(i < users.length - 1 ? ", " : ""));
      })
    ),
    import_react179.default.createElement("ul", { className: "str-chat__message-reactions-list str-chat__message-reactions-options" }, reactionOptions.map(function(_a2) {
      var _b2, _c2;
      var Component2 = _a2.Component, reactionName = _a2.name, reactionType = _a2.type;
      var latestUser = getLatestUserForReactionType(reactionType);
      var count = (_c2 = (_b2 = reactionGroups[reactionType]) === null || _b2 === void 0 ? void 0 : _b2.count) !== null && _c2 !== void 0 ? _c2 : 0;
      return import_react179.default.createElement(
        "li",
        { key: reactionType },
        import_react179.default.createElement(
          "button",
          { "aria-label": "Select Reaction: ".concat(reactionName || reactionType), className: clsx_default("str-chat__message-reactions-list-item str-chat__message-reactions-option", {
            "str-chat__message-reactions-option-selected": iHaveReactedWithReaction(reactionType)
          }), "data-text": reactionType, onClick: function(event) {
            return handleReaction(reactionType, event);
          } },
          !!count && detailedView && import_react179.default.createElement("div", { className: "latest-user str-chat__message-reactions-last-user", onClick: hideTooltip, onMouseEnter: function(e) {
            return showTooltip(e, reactionType);
          }, onMouseLeave: hideTooltip }, latestUser ? import_react179.default.createElement(Avatar2, { image: latestUser.image, name: latestUser.name, size: 20, user: latestUser }) : import_react179.default.createElement("div", { className: "latest-user-not-found" })),
          import_react179.default.createElement(
            "span",
            { className: "str-chat__message-reaction-emoji" },
            import_react179.default.createElement(Component2, null)
          ),
          Boolean(count) && detailedView && import_react179.default.createElement("span", { className: "str-chat__message-reactions-list-item__count" }, count || "")
        )
      );
    }))
  );
});
var ReactionSelector = import_react179.default.memo(UnMemoizedReactionSelector);

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js
var import_react185 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/hooks/useProcessReactions.js
var import_react180 = __toESM(require_react());
var defaultReactionsSort = function(a, b) {
  if (a.firstReactionAt && b.firstReactionAt) {
    return +a.firstReactionAt - +b.firstReactionAt;
  }
  return a.reactionType.localeCompare(b.reactionType, "en");
};
var useProcessReactions = function(params) {
  var _a;
  var propOwnReactions = params.own_reactions, propReactionGroups = params.reaction_groups, propReactionOptions = params.reactionOptions, propReactions = params.reactions, propSortReactions = params.sortReactions;
  var _b = useMessageContext("useProcessReactions"), message = _b.message, contextSortReactions = _b.sortReactions;
  var contextReactionOptions = useComponentContext("useProcessReactions").reactionOptions;
  var reactionOptions = propReactionOptions !== null && propReactionOptions !== void 0 ? propReactionOptions : contextReactionOptions;
  var sortReactions = (_a = propSortReactions !== null && propSortReactions !== void 0 ? propSortReactions : contextSortReactions) !== null && _a !== void 0 ? _a : defaultReactionsSort;
  var latestReactions = propReactions || message.latest_reactions;
  var ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions);
  var reactionGroups = propReactionGroups || (message === null || message === void 0 ? void 0 : message.reaction_groups);
  var isOwnReaction = (0, import_react180.useCallback)(function(reactionType) {
    var _a2;
    return (_a2 = ownReactions === null || ownReactions === void 0 ? void 0 : ownReactions.some(function(reaction) {
      return reaction.type === reactionType;
    })) !== null && _a2 !== void 0 ? _a2 : false;
  }, [ownReactions]);
  var getEmojiByReactionType = (0, import_react180.useCallback)(function(reactionType) {
    var _a2, _b2;
    return (_b2 = (_a2 = reactionOptions.find(function(_a3) {
      var type = _a3.type;
      return type === reactionType;
    })) === null || _a2 === void 0 ? void 0 : _a2.Component) !== null && _b2 !== void 0 ? _b2 : null;
  }, [reactionOptions]);
  var isSupportedReaction = (0, import_react180.useCallback)(function(reactionType) {
    return reactionOptions.some(function(reactionOption) {
      return reactionOption.type === reactionType;
    });
  }, [reactionOptions]);
  var getLatestReactedUserNames = (0, import_react180.useCallback)(function(reactionType) {
    var _a2;
    return (_a2 = latestReactions === null || latestReactions === void 0 ? void 0 : latestReactions.flatMap(function(reaction) {
      var _a3, _b2;
      if (reactionType && reactionType === reaction.type) {
        var username = ((_a3 = reaction.user) === null || _a3 === void 0 ? void 0 : _a3.name) || ((_b2 = reaction.user) === null || _b2 === void 0 ? void 0 : _b2.id);
        return username ? [username] : [];
      }
      return [];
    })) !== null && _a2 !== void 0 ? _a2 : [];
  }, [latestReactions]);
  var existingReactions = (0, import_react180.useMemo)(function() {
    if (!reactionGroups) {
      return [];
    }
    var unsortedReactions = Object.entries(reactionGroups).flatMap(function(_a2) {
      var reactionType = _a2[0], _b2 = _a2[1], count = _b2.count, first_reaction_at = _b2.first_reaction_at, last_reaction_at = _b2.last_reaction_at;
      if (count === 0 || !isSupportedReaction(reactionType)) {
        return [];
      }
      var latestReactedUserNames = getLatestReactedUserNames(reactionType);
      return [
        {
          EmojiComponent: getEmojiByReactionType(reactionType),
          firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,
          isOwnReaction: isOwnReaction(reactionType),
          lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,
          latestReactedUserNames,
          reactionCount: count,
          reactionType,
          unlistedReactedUserCount: count - latestReactedUserNames.length
        }
      ];
    });
    return unsortedReactions.sort(sortReactions);
  }, [
    getEmojiByReactionType,
    getLatestReactedUserNames,
    isOwnReaction,
    isSupportedReaction,
    reactionGroups,
    sortReactions
  ]);
  var hasReactions = existingReactions.length > 0;
  var totalReactionCount = (0, import_react180.useMemo)(function() {
    return existingReactions.reduce(function(total, _a2) {
      var reactionCount = _a2.reactionCount;
      return total + reactionCount;
    }, 0);
  }, [existingReactions]);
  return {
    existingReactions,
    hasReactions,
    totalReactionCount
  };
};

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsListModal.js
var import_react182 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/hooks/useFetchReactions.js
var import_react181 = __toESM(require_react());
function useFetchReactions(options2) {
  var _this = this;
  var contextHandleFetchReactions = useMessageContext("useFetchReactions").handleFetchReactions;
  var _a = (0, import_react181.useState)([]), reactions = _a[0], setReactions = _a[1];
  var propHandleFetchReactions = options2.handleFetchReactions, reactionType = options2.reactionType, shouldFetch = options2.shouldFetch, sort2 = options2.sort;
  var _b = (0, import_react181.useState)(shouldFetch), isLoading = _b[0], setIsLoading = _b[1];
  var handleFetchReactions = propHandleFetchReactions !== null && propHandleFetchReactions !== void 0 ? propHandleFetchReactions : contextHandleFetchReactions;
  (0, import_react181.useEffect)(function() {
    if (!shouldFetch) {
      return;
    }
    var cancel = false;
    (function() {
      return __awaiter(_this, void 0, void 0, function() {
        var reactions_1, e_1;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 2, 3, 4]);
              setIsLoading(true);
              return [4, handleFetchReactions(reactionType, sort2)];
            case 1:
              reactions_1 = _a2.sent();
              if (!cancel) {
                setReactions(reactions_1);
              }
              return [3, 4];
            case 2:
              e_1 = _a2.sent();
              if (!cancel) {
                setReactions([]);
              }
              return [3, 4];
            case 3:
              if (!cancel) {
                setIsLoading(false);
              }
              return [
                7
                /*endfinally*/
              ];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    })();
    return function() {
      cancel = true;
    };
  }, [handleFetchReactions, reactionType, shouldFetch, sort2]);
  return { isLoading, reactions };
}

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsListModal.js
var defaultReactionDetailsSort = { created_at: -1 };
function ReactionsListModal(_a) {
  var _b, _c;
  var handleFetchReactions = _a.handleFetchReactions, onSelectedReactionTypeChange = _a.onSelectedReactionTypeChange, propReactionDetailsSort = _a.reactionDetailsSort, reactions = _a.reactions, selectedReactionType = _a.selectedReactionType, propSortReactionDetails = _a.sortReactionDetails, modalProps = __rest(_a, ["handleFetchReactions", "onSelectedReactionTypeChange", "reactionDetailsSort", "reactions", "selectedReactionType", "sortReactionDetails"]);
  var selectedReaction = reactions.find(function(_a2) {
    var reactionType = _a2.reactionType;
    return reactionType === selectedReactionType;
  });
  var SelectedEmojiComponent = (_b = selectedReaction === null || selectedReaction === void 0 ? void 0 : selectedReaction.EmojiComponent) !== null && _b !== void 0 ? _b : null;
  var _d = useMessageContext("ReactionsListModal"), contextReactionDetailsSort = _d.reactionDetailsSort, contextSortReactionDetails = _d.sortReactionDetails;
  var legacySortReactionDetails = propSortReactionDetails !== null && propSortReactionDetails !== void 0 ? propSortReactionDetails : contextSortReactionDetails;
  var reactionDetailsSort = (_c = propReactionDetailsSort !== null && propReactionDetailsSort !== void 0 ? propReactionDetailsSort : contextReactionDetailsSort) !== null && _c !== void 0 ? _c : defaultReactionDetailsSort;
  var _e = useFetchReactions({
    handleFetchReactions,
    reactionType: selectedReactionType,
    shouldFetch: modalProps.open,
    sort: reactionDetailsSort
  }), areReactionsLoading = _e.isLoading, reactionDetails = _e.reactions;
  var reactionDetailsWithLegacyFallback = (0, import_react182.useMemo)(function() {
    return legacySortReactionDetails ? __spreadArray([], reactionDetails, true).sort(legacySortReactionDetails) : reactionDetails;
  }, [legacySortReactionDetails, reactionDetails]);
  return import_react182.default.createElement(
    Modal,
    __assign({}, modalProps, { className: clsx_default("str-chat__message-reactions-details-modal", modalProps.className) }),
    import_react182.default.createElement(
      "div",
      { className: "str-chat__message-reactions-details", "data-testid": "reactions-list-modal" },
      import_react182.default.createElement("div", { className: "str-chat__message-reactions-details-reaction-types" }, reactions.map(function(_a2) {
        var EmojiComponent = _a2.EmojiComponent, reactionCount = _a2.reactionCount, reactionType = _a2.reactionType;
        return EmojiComponent && import_react182.default.createElement(
          "div",
          { className: clsx_default("str-chat__message-reactions-details-reaction-type", {
            "str-chat__message-reactions-details-reaction-type--selected": selectedReactionType === reactionType
          }), "data-testid": "reaction-details-selector-".concat(reactionType), key: reactionType, onClick: function() {
            return onSelectedReactionTypeChange === null || onSelectedReactionTypeChange === void 0 ? void 0 : onSelectedReactionTypeChange(reactionType);
          } },
          import_react182.default.createElement(
            "span",
            { className: "emoji str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback" },
            import_react182.default.createElement(EmojiComponent, null)
          ),
          " ",
          import_react182.default.createElement("span", { className: "str-chat__message-reaction-count" }, reactionCount)
        );
      })),
      SelectedEmojiComponent && import_react182.default.createElement(
        "div",
        { className: "emoji str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback str-chat__message-reaction-emoji-big" },
        import_react182.default.createElement(SelectedEmojiComponent, null)
      ),
      import_react182.default.createElement("div", { className: "str-chat__message-reactions-details-reacting-users", "data-testid": "all-reacting-users" }, areReactionsLoading ? import_react182.default.createElement(LoadingIndicator2, null) : reactionDetailsWithLegacyFallback.map(function(_a2) {
        var user = _a2.user;
        return import_react182.default.createElement(
          "div",
          { className: "str-chat__message-reactions-details-reacting-user", key: user === null || user === void 0 ? void 0 : user.id },
          import_react182.default.createElement(Avatar, { "data-testid": "avatar", image: user === null || user === void 0 ? void 0 : user.image, name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id) }),
          import_react182.default.createElement("span", { className: "str-chat__user-item--name", "data-testid": "reaction-user-username" }, (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id))
        );
      }))
    )
  );
}

// node_modules/stream-chat-react/dist/components/Message/hooks/useActionHandler.js
var handleActionWarning = "Action handler was called, but it is missing one of its required arguments. \nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.";
function useActionHandler(message) {
  var _this = this;
  var _a = useChannelActionContext("useActionHandler"), removeMessage = _a.removeMessage, updateMessage = _a.updateMessage;
  var channel = useChannelStateContext("useActionHandler").channel;
  return function(dataOrName, value, event) {
    return __awaiter(_this, void 0, void 0, function() {
      var messageID, formData, data;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (event)
              event.preventDefault();
            if (!message || !updateMessage || !removeMessage || !channel) {
              console.warn(handleActionWarning);
              return [
                2
                /*return*/
              ];
            }
            messageID = message.id;
            formData = {};
            if (typeof dataOrName === "string") {
              formData[dataOrName] = value;
            } else {
              formData = __assign({}, dataOrName);
            }
            if (!messageID) return [3, 2];
            return [4, channel.sendAction(messageID, formData)];
          case 1:
            data = _a2.sent();
            if (data === null || data === void 0 ? void 0 : data.message) {
              updateMessage(data.message);
            } else {
              removeMessage(message);
            }
            _a2.label = 2;
          case 2:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
}

// node_modules/stream-chat-react/dist/components/Message/hooks/useDeleteHandler.js
var useDeleteHandler = function(message, notifications) {
  if (notifications === void 0) {
    notifications = {};
  }
  var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
  var _a = useChannelActionContext("useDeleteHandler"), deleteMessage = _a.deleteMessage, updateMessage = _a.updateMessage;
  var client = useChatContext("useDeleteHandler").client;
  var t2 = useTranslationContext("useDeleteHandler").t;
  return function(event) {
    return __awaiter(void 0, void 0, void 0, function() {
      var deletedMessage, e_1, errorMessage2;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            event.preventDefault();
            if (!(message === null || message === void 0 ? void 0 : message.id) || !client || !updateMessage) {
              return [
                2
                /*return*/
              ];
            }
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, deleteMessage(message)];
          case 2:
            deletedMessage = _a2.sent();
            updateMessage(deletedMessage);
            return [3, 4];
          case 3:
            e_1 = _a2.sent();
            errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
            if (notify)
              notify(errorMessage2 || t2("Error deleting message"), "error");
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useEditHandler.js
var import_react183 = __toESM(require_react());
var useEditHandler = function(customInitialState, customSetEditing, customClearEditingHandler) {
  if (customInitialState === void 0) {
    customInitialState = false;
  }
  var _a = (0, import_react183.useState)(customInitialState), editing = _a[0], setEditing = _a[1];
  var setEdit = customSetEditing || function(event) {
    if (event === null || event === void 0 ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    setEditing(true);
  };
  var clearEdit = customClearEditingHandler || function(event) {
    if (event === null || event === void 0 ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    setEditing(false);
  };
  return { clearEdit, editing, setEdit };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useFlagHandler.js
var missingUseFlagHandlerParameterWarning = "useFlagHandler was called but it is missing one or more necessary parameters.";
var useFlagHandler = function(message, notifications) {
  if (notifications === void 0) {
    notifications = {};
  }
  var client = useChatContext("useFlagHandler").client;
  var t2 = useTranslationContext("useFlagHandler").t;
  return function(event) {
    return __awaiter(void 0, void 0, void 0, function() {
      var getErrorNotification, getSuccessNotification, notify, successMessage, e_1, errorMessage2;
      var _a;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            event.preventDefault();
            getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
            if (!client || !t2 || !notify || !(message === null || message === void 0 ? void 0 : message.id)) {
              console.warn(missingUseFlagHandlerParameterWarning);
              return [
                2
                /*return*/
              ];
            }
            if ((_a = client.user) === null || _a === void 0 ? void 0 : _a.banned) {
              return [2, notify(t2("Error adding flag"), "error")];
            }
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, client.flagMessage(message.id)];
          case 2:
            _b.sent();
            successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
            notify(successMessage || t2("Message has been successfully flagged"), "success");
            return [3, 4];
          case 3:
            e_1 = _b.sent();
            errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
            notify(errorMessage2 || t2("Error adding flag"), "error");
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMentionsHandler.js
function createEventHandler(fn2, message) {
  return function(event) {
    var _a;
    if (typeof fn2 !== "function" || !((_a = message === null || message === void 0 ? void 0 : message.mentioned_users) === null || _a === void 0 ? void 0 : _a.length)) {
      return;
    }
    fn2(event, message.mentioned_users);
  };
}
var useMentionsHandler = function(message, customMentionHandler) {
  var _a = useChannelActionContext("useMentionsHandler"), contextOnMentionsClick = _a.onMentionsClick, contextOnMentionsHover = _a.onMentionsHover;
  var onMentionsClick = (customMentionHandler === null || customMentionHandler === void 0 ? void 0 : customMentionHandler.onMentionsClick) || contextOnMentionsClick || function() {
    return null;
  };
  var onMentionsHover = (customMentionHandler === null || customMentionHandler === void 0 ? void 0 : customMentionHandler.onMentionsHover) || contextOnMentionsHover || function() {
    return null;
  };
  return {
    onMentionsClick: createEventHandler(onMentionsClick, message),
    onMentionsHover: createEventHandler(onMentionsHover, message)
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMarkUnreadHandler.js
var useMarkUnreadHandler = function(message, notifications) {
  if (notifications === void 0) {
    notifications = {};
  }
  var getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
  var channel = useChannelStateContext("useMarkUnreadHandler").channel;
  var t2 = useTranslationContext("useMarkUnreadHandler").t;
  return function(event) {
    return __awaiter(void 0, void 0, void 0, function() {
      var successMessage, e_1, errorMessage2;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            event.preventDefault();
            if (!(message === null || message === void 0 ? void 0 : message.id)) {
              console.warn("Mark unread handler does not have access to message id");
              return [
                2
                /*return*/
              ];
            }
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, channel.markUnread({ message_id: message.id })];
          case 2:
            _a.sent();
            if (!notify)
              return [
                2
                /*return*/
              ];
            successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
            if (successMessage)
              notify(successMessage, "success");
            return [3, 4];
          case 3:
            e_1 = _a.sent();
            if (!notify)
              return [
                2
                /*return*/
              ];
            errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
            if (getErrorNotification && !errorMessage2)
              return [
                2
                /*return*/
              ];
            notify(errorMessage2 || t2("Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages."), "error");
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMuteHandler.js
var missingUseMuteHandlerParamsWarning = "useMuteHandler was called but it is missing one or more necessary parameter.";
var useMuteHandler = function(message, notifications) {
  if (notifications === void 0) {
    notifications = {};
  }
  var mutes = useChannelStateContext("useMuteHandler").mutes;
  var client = useChatContext("useMuteHandler").client;
  var t2 = useTranslationContext("useMuteHandler").t;
  return function(event) {
    return __awaiter(void 0, void 0, void 0, function() {
      var getErrorNotification, getSuccessNotification, notify, successMessage, e_1, errorMessage2, fallbackMessage, successMessage, e_2, errorMessage2;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            event.preventDefault();
            getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
            if (!t2 || !(message === null || message === void 0 ? void 0 : message.user) || !notify || !client) {
              console.warn(missingUseMuteHandlerParamsWarning);
              return [
                2
                /*return*/
              ];
            }
            if (!!isUserMuted(message, mutes)) return [3, 5];
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, client.muteUser(message.user.id)];
          case 2:
            _a.sent();
            successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);
            notify(successMessage || t2("{{ user }} has been muted", {
              user: message.user.name || message.user.id
            }), "success");
            return [3, 4];
          case 3:
            e_1 = _a.sent();
            errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);
            notify(errorMessage2 || t2("Error muting a user ..."), "error");
            return [3, 4];
          case 4:
            return [3, 8];
          case 5:
            _a.trys.push([5, 7, , 8]);
            return [4, client.unmuteUser(message.user.id)];
          case 6:
            _a.sent();
            fallbackMessage = t2("{{ user }} has been unmuted", {
              user: message.user.name || message.user.id
            });
            successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]) || fallbackMessage;
            if (typeof successMessage === "string") {
              notify(successMessage, "success");
            }
            return [3, 8];
          case 7:
            e_2 = _a.sent();
            errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]) || t2("Error unmuting a user ...");
            if (typeof errorMessage2 === "string") {
              notify(errorMessage2, "error");
            }
            return [3, 8];
          case 8:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useOpenThreadHandler.js
var useOpenThreadHandler = function(message, customOpenThread) {
  var channelOpenThread = useChannelActionContext("useOpenThreadHandler").openThread;
  var openThread = customOpenThread || channelOpenThread;
  return function(event) {
    if (!openThread || !message) {
      console.warn("Open thread handler was called but it is missing one of its parameters");
      return;
    }
    openThread(message, event);
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/usePinHandler.js
var usePinHandler = function(message, _permissions, notifications) {
  if (_permissions === void 0) {
    _permissions = defaultPinPermissions;
  }
  if (notifications === void 0) {
    notifications = {};
  }
  var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
  var updateMessage = useChannelActionContext("usePinHandler").updateMessage;
  var _a = useChannelStateContext("usePinHandler").channelCapabilities, channelCapabilities = _a === void 0 ? {} : _a;
  var client = useChatContext("usePinHandler").client;
  var t2 = useTranslationContext("usePinHandler").t;
  var canPin = !!channelCapabilities["pin-message"];
  var handlePin = function(event) {
    return __awaiter(void 0, void 0, void 0, function() {
      var optimisticMessage, e_1, errorMessage2, optimisticMessage, e_2, errorMessage2;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            event.preventDefault();
            if (!message)
              return [
                2
                /*return*/
              ];
            if (!!message.pinned) return [3, 5];
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            optimisticMessage = __assign(__assign({}, message), { pinned: true, pinned_at: /* @__PURE__ */ new Date(), pinned_by: client.user });
            updateMessage(optimisticMessage);
            return [4, client.pinMessage(message)];
          case 2:
            _a2.sent();
            return [3, 4];
          case 3:
            e_1 = _a2.sent();
            errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
            if (notify)
              notify(errorMessage2 || t2("Error pinning message"), "error");
            updateMessage(message);
            return [3, 4];
          case 4:
            return [3, 8];
          case 5:
            _a2.trys.push([5, 7, , 8]);
            optimisticMessage = __assign(__assign({}, message), { pin_expires: null, pinned: false, pinned_at: null, pinned_by: null });
            updateMessage(optimisticMessage);
            return [4, client.unpinMessage(message)];
          case 6:
            _a2.sent();
            return [3, 8];
          case 7:
            e_2 = _a2.sent();
            errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
            if (notify)
              notify(errorMessage2 || t2("Error removing message pin"), "error");
            updateMessage(message);
            return [3, 8];
          case 8:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  return { canPin, handlePin };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useReactionHandler.js
var import_react184 = __toESM(require_react());
var import_lodash7 = __toESM(require_lodash());
var reactionHandlerWarning = "Reaction handler was called, but it is missing one of its required arguments.\nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.";
var useReactionHandler = function(message) {
  var updateMessage = useChannelActionContext("useReactionHandler").updateMessage;
  var _a = useChannelStateContext("useReactionHandler"), channel = _a.channel, channelCapabilities = _a.channelCapabilities;
  var client = useChatContext("useReactionHandler").client;
  var createMessagePreview = (0, import_react184.useCallback)(
    function(add, reaction, message2) {
      var _a2, _b;
      var newReactionGroups = (message2 === null || message2 === void 0 ? void 0 : message2.reaction_groups) || {};
      var reactionType = reaction.type;
      var hasReaction = !!newReactionGroups[reactionType];
      if (add) {
        var timestamp = (/* @__PURE__ */ new Date()).toISOString();
        newReactionGroups[reactionType] = hasReaction ? __assign(__assign({}, newReactionGroups[reactionType]), { count: newReactionGroups[reactionType].count + 1 }) : {
          count: 1,
          first_reaction_at: timestamp,
          last_reaction_at: timestamp,
          sum_scores: 1
        };
      } else {
        if (hasReaction && newReactionGroups[reactionType].count > 1) {
          newReactionGroups[reactionType] = __assign(__assign({}, newReactionGroups[reactionType]), { count: newReactionGroups[reactionType].count - 1 });
        } else {
          delete newReactionGroups[reactionType];
        }
      }
      var newReactions = add ? __spreadArray([reaction], (message2 === null || message2 === void 0 ? void 0 : message2.latest_reactions) || [], true) : (_a2 = message2.latest_reactions) === null || _a2 === void 0 ? void 0 : _a2.filter(function(item) {
        return !(item.type === reaction.type && item.user_id === reaction.user_id);
      });
      var newOwnReactions = add ? __spreadArray([reaction], (message2 === null || message2 === void 0 ? void 0 : message2.own_reactions) || [], true) : (_b = message2 === null || message2 === void 0 ? void 0 : message2.own_reactions) === null || _b === void 0 ? void 0 : _b.filter(function(item) {
        return item.type !== reaction.type;
      });
      return __assign(__assign({}, message2), { latest_reactions: newReactions || message2.latest_reactions, own_reactions: newOwnReactions, reaction_groups: newReactionGroups });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [client.user, client.userID]
  );
  var createReactionPreview = function(type) {
    var _a2;
    return {
      message_id: message === null || message === void 0 ? void 0 : message.id,
      score: 1,
      type,
      user: client.user,
      user_id: (_a2 = client.user) === null || _a2 === void 0 ? void 0 : _a2.id
    };
  };
  var toggleReaction = (0, import_lodash7.default)(function(id, type, add) {
    return __awaiter(void 0, void 0, void 0, function() {
      var newReaction, tempMessage, messageResponse, _a2, error_1;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!message || !channelCapabilities["send-reaction"])
              return [
                2
                /*return*/
              ];
            newReaction = createReactionPreview(type);
            tempMessage = createMessagePreview(add, newReaction, message);
            _b.label = 1;
          case 1:
            _b.trys.push([1, 6, , 7]);
            updateMessage(tempMessage);
            if (!add) return [3, 3];
            return [4, channel.sendReaction(id, { type })];
          case 2:
            _a2 = _b.sent();
            return [3, 5];
          case 3:
            return [4, channel.deleteReaction(id, type)];
          case 4:
            _a2 = _b.sent();
            _b.label = 5;
          case 5:
            messageResponse = _a2;
            updateMessage(messageResponse.message);
            return [3, 7];
          case 6:
            error_1 = _b.sent();
            updateMessage(message);
            return [3, 7];
          case 7:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, 1e3);
  return function(reactionType, event) {
    return __awaiter(void 0, void 0, void 0, function() {
      var userExistingReaction, error_2;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (event === null || event === void 0 ? void 0 : event.preventDefault) {
              event.preventDefault();
            }
            if (!message) {
              return [2, console.warn(reactionHandlerWarning)];
            }
            userExistingReaction = null;
            if (message.own_reactions) {
              message.own_reactions.forEach(function(reaction) {
                if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {
                  userExistingReaction = reaction;
                } else if (reaction.user && client.userID !== reaction.user.id) {
                  console.warn("message.own_reactions contained reactions from a different user, this indicates a bug");
                }
              });
            }
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 6, , 7]);
            if (!userExistingReaction) return [3, 3];
            return [4, toggleReaction(message.id, userExistingReaction.type, false)];
          case 2:
            _a2.sent();
            return [3, 5];
          case 3:
            return [4, toggleReaction(message.id, reactionType, true)];
          case 4:
            _a2.sent();
            _a2.label = 5;
          case 5:
            return [3, 7];
          case 6:
            error_2 = _a2.sent();
            console.log({ error: error_2 });
            return [3, 7];
          case 7:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};
var useReactionClick = function(message, reactionSelectorRef, messageWrapperRef, closeReactionSelectorOnClick) {
  var _a = useChannelStateContext("useReactionClick").channelCapabilities, channelCapabilities = _a === void 0 ? {} : _a;
  var _b = (0, import_react184.useState)(false), showDetailedReactions = _b[0], setShowDetailedReactions = _b[1];
  var hasListener = (0, import_react184.useRef)(false);
  var isReactionEnabled = channelCapabilities["send-reaction"];
  var messageDeleted = !!(message === null || message === void 0 ? void 0 : message.deleted_at);
  var closeDetailedReactions = (0, import_react184.useCallback)(
    function(event) {
      var _a2;
      if (event.target instanceof HTMLElement && ((_a2 = reactionSelectorRef === null || reactionSelectorRef === void 0 ? void 0 : reactionSelectorRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) && !closeReactionSelectorOnClick) {
        return;
      }
      setShowDetailedReactions(false);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [setShowDetailedReactions, reactionSelectorRef]
  );
  (0, import_react184.useEffect)(function() {
    var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;
    if (showDetailedReactions && !hasListener.current) {
      hasListener.current = true;
      document.addEventListener("click", closeDetailedReactions);
      if (messageWrapper) {
        messageWrapper.addEventListener("mouseleave", closeDetailedReactions);
      }
    }
    if (!showDetailedReactions && hasListener.current) {
      document.removeEventListener("click", closeDetailedReactions);
      if (messageWrapper) {
        messageWrapper.removeEventListener("mouseleave", closeDetailedReactions);
      }
      hasListener.current = false;
    }
    return function() {
      if (hasListener.current) {
        document.removeEventListener("click", closeDetailedReactions);
        if (messageWrapper) {
          messageWrapper.removeEventListener("mouseleave", closeDetailedReactions);
        }
        hasListener.current = false;
      }
    };
  }, [showDetailedReactions, closeDetailedReactions, messageWrapperRef]);
  (0, import_react184.useEffect)(function() {
    var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;
    if (messageDeleted && hasListener.current) {
      document.removeEventListener("click", closeDetailedReactions);
      if (messageWrapper) {
        messageWrapper.removeEventListener("mouseleave", closeDetailedReactions);
      }
      hasListener.current = false;
    }
  }, [messageDeleted, closeDetailedReactions, messageWrapperRef]);
  var onReactionListClick = function(event) {
    var _a2;
    (_a2 = event === null || event === void 0 ? void 0 : event.stopPropagation) === null || _a2 === void 0 ? void 0 : _a2.call(event);
    setShowDetailedReactions(function(prev) {
      return !prev;
    });
  };
  return {
    isReactionEnabled,
    onReactionListClick,
    showDetailedReactions
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useRetryHandler.js
var useRetryHandler = function(customRetrySendMessage) {
  var contextRetrySendMessage = useChannelActionContext("useRetryHandler").retrySendMessage;
  var retrySendMessage = customRetrySendMessage || contextRetrySendMessage;
  return function(message) {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!message) return [3, 2];
            return [4, retrySendMessage(message)];
          case 1:
            _a.sent();
            _a.label = 2;
          case 2:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useUserHandler.js
var useUserHandler = function(message, eventHandlers) {
  return {
    onUserClick: function(event) {
      if (typeof (eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.onUserClickHandler) !== "function" || !(message === null || message === void 0 ? void 0 : message.user)) {
        return;
      }
      eventHandlers.onUserClickHandler(event, message.user);
    },
    onUserHover: function(event) {
      if (typeof (eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.onUserHoverHandler) !== "function" || !(message === null || message === void 0 ? void 0 : message.user)) {
        return;
      }
      eventHandlers.onUserHoverHandler(event, message.user);
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useReactionsFetcher.js
var MAX_MESSAGE_REACTIONS_TO_FETCH = 1e3;
function useReactionsFetcher(message, notifications) {
  var _this = this;
  if (notifications === void 0) {
    notifications = {};
  }
  var client = useChatContext("useRectionsFetcher").client;
  var t2 = useTranslationContext("useReactionFetcher").t;
  var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
  return function(reactionType, sort2) {
    return __awaiter(_this, void 0, void 0, function() {
      var e_1, errorMessage2;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, fetchMessageReactions(client, message.id, reactionType, sort2)];
          case 1:
            return [2, _a.sent()];
          case 2:
            e_1 = _a.sent();
            errorMessage2 = getErrorNotification === null || getErrorNotification === void 0 ? void 0 : getErrorNotification(message);
            notify === null || notify === void 0 ? void 0 : notify(errorMessage2 || t2("Error fetching reactions"), "error");
            throw e_1;
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
}
function fetchMessageReactions(client, messageId, reactionType, sort2) {
  return __awaiter(this, void 0, void 0, function() {
    var reactions, limit, next, hasNext, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          reactions = [];
          limit = 25;
          hasNext = true;
          _a.label = 1;
        case 1:
          if (!(hasNext && reactions.length < MAX_MESSAGE_REACTIONS_TO_FETCH)) return [3, 3];
          return [4, client.queryReactions(messageId, reactionType ? { type: reactionType } : {}, sort2, { limit, next })];
        case 2:
          response = _a.sent();
          reactions.push.apply(reactions, response.reactions);
          next = response.next;
          hasNext = Boolean(next);
          return [3, 1];
        case 3:
          return [2, reactions];
      }
    });
  });
}

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js
var UnMemoizedReactionsList = function(props) {
  var handleFetchReactions = props.handleFetchReactions, reactionDetailsSort = props.reactionDetailsSort, _a = props.reverse, reverse = _a === void 0 ? false : _a, sortReactionDetails = props.sortReactionDetails, rest = __rest(props, ["handleFetchReactions", "reactionDetailsSort", "reverse", "sortReactionDetails"]);
  var _b = useProcessReactions(rest), existingReactions = _b.existingReactions, hasReactions = _b.hasReactions, totalReactionCount = _b.totalReactionCount;
  var _c = (0, import_react185.useState)(null), selectedReactionType = _c[0], setSelectedReactionType = _c[1];
  var t2 = useTranslationContext("ReactionsList").t;
  var handleReactionButtonClick = function(reactionType) {
    if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {
      return;
    }
    setSelectedReactionType(reactionType);
  };
  if (!hasReactions)
    return null;
  return import_react185.default.createElement(
    import_react185.default.Fragment,
    null,
    import_react185.default.createElement(
      "div",
      { "aria-label": t2("aria/Reaction list"), className: clsx_default("str-chat__reaction-list str-chat__message-reactions-container", {
        "str-chat__reaction-list--reverse": reverse
      }), "data-testid": "reaction-list", role: "figure" },
      import_react185.default.createElement(
        "ul",
        { className: "str-chat__message-reactions" },
        existingReactions.map(function(_a2) {
          var EmojiComponent = _a2.EmojiComponent, isOwnReaction = _a2.isOwnReaction, reactionCount = _a2.reactionCount, reactionType = _a2.reactionType;
          return EmojiComponent && import_react185.default.createElement(
            "li",
            { className: clsx_default("str-chat__message-reaction", {
              "str-chat__message-reaction-own": isOwnReaction
            }), key: reactionType },
            import_react185.default.createElement(
              "button",
              { "aria-label": "Reactions: ".concat(reactionType), "data-testid": "reactions-list-button-".concat(reactionType), onClick: function() {
                return handleReactionButtonClick(reactionType);
              }, type: "button" },
              import_react185.default.createElement(
                "span",
                { className: "str-chat__message-reaction-emoji" },
                import_react185.default.createElement(EmojiComponent, null)
              ),
              " ",
              import_react185.default.createElement("span", { className: "str-chat__message-reaction-count", "data-testclass": "reaction-list-reaction-count" }, reactionCount)
            )
          );
        }),
        import_react185.default.createElement(
          "li",
          null,
          import_react185.default.createElement("span", { className: "str-chat__reaction-list--counter" }, totalReactionCount)
        )
      )
    ),
    selectedReactionType !== null && import_react185.default.createElement(ReactionsListModal, { handleFetchReactions, onClose: function() {
      return setSelectedReactionType(null);
    }, onSelectedReactionTypeChange: setSelectedReactionType, open: selectedReactionType !== null, reactions: existingReactions, selectedReactionType, sortReactionDetails })
  );
};
var ReactionsList = import_react185.default.memo(UnMemoizedReactionsList);

// node_modules/stream-chat-react/dist/components/Reactions/SimpleReactionsList.js
var import_react186 = __toESM(require_react());
var WithTooltip = function(_a) {
  var children = _a.children, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, title = _a.title;
  var _b = (0, import_react186.useState)(null), referenceElement = _b[0], setReferenceElement = _b[1];
  var _c = useEnterLeaveHandlers({
    onMouseEnter,
    onMouseLeave
  }), handleEnter = _c.handleEnter, handleLeave = _c.handleLeave, tooltipVisible = _c.tooltipVisible;
  var themeVersion = useChatContext("WithTooltip").themeVersion;
  return import_react186.default.createElement(
    import_react186.default.Fragment,
    null,
    themeVersion === "2" && import_react186.default.createElement(PopperTooltip, { referenceElement, visible: tooltipVisible }, title),
    import_react186.default.createElement("span", { onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement }, children)
  );
};
var UnMemoizedSimpleReactionsList = function(props) {
  var propHandleReaction = props.handleReaction, rest = __rest(props, ["handleReaction"]);
  var contextHandleReaction = useMessageContext("SimpleReactionsList").handleReaction;
  var _a = useProcessReactions(rest), existingReactions = _a.existingReactions, hasReactions = _a.hasReactions, totalReactionCount = _a.totalReactionCount;
  var _b = (0, import_react186.useState)(void 0), tooltipReactionType = _b[0], setTooltipReactionType = _b[1];
  var themeVersion = useChatContext("SimpleReactionsList").themeVersion;
  var handleReaction = propHandleReaction || contextHandleReaction;
  if (!hasReactions)
    return null;
  return import_react186.default.createElement(
    "div",
    { className: "str-chat__message-reactions-container" },
    import_react186.default.createElement(
      "ul",
      { className: "str-chat__simple-reactions-list str-chat__message-reactions", "data-testid": "simple-reaction-list", onMouseLeave: function() {
        return setTooltipReactionType(void 0);
      } },
      existingReactions.map(function(_a2) {
        var EmojiComponent = _a2.EmojiComponent, isOwnReaction = _a2.isOwnReaction, latestReactedUserNames = _a2.latestReactedUserNames, reactionType = _a2.reactionType;
        var tooltipVisible = tooltipReactionType === reactionType;
        var tooltipContent = latestReactedUserNames.join(", ");
        return EmojiComponent && import_react186.default.createElement(
          "li",
          { className: clsx_default("str-chat__simple-reactions-list-item", {
            "str-chat__message-reaction-own": isOwnReaction
          }), key: reactionType, onClick: function(event) {
            return handleReaction(reactionType, event);
          }, onKeyUp: function(event) {
            return handleReaction(reactionType, event);
          } },
          import_react186.default.createElement(
            WithTooltip,
            { onMouseEnter: function() {
              return setTooltipReactionType(reactionType);
            }, onMouseLeave: function() {
              return setTooltipReactionType(void 0);
            }, title: tooltipContent },
            import_react186.default.createElement(EmojiComponent, null),
            " ",
            tooltipVisible && themeVersion === "1" && import_react186.default.createElement(
              "div",
              { className: "str-chat__simple-reactions-list-tooltip" },
              import_react186.default.createElement("div", { className: "arrow" }),
              tooltipContent
            )
          )
        );
      }),
      import_react186.default.createElement("li", { className: "str-chat__simple-reactions-list-item--last-number" }, totalReactionCount)
    )
  );
};
var SimpleReactionsList = import_react186.default.memo(UnMemoizedSimpleReactionsList);

// node_modules/stream-chat-react/dist/components/Reactions/SpriteImage.js
var import_react187 = __toESM(require_react());
var SpriteImage = function(_a) {
  var columns = _a.columns, fallback = _a.fallback, height = _a.height, position3 = _a.position, rows = _a.rows, spriteUrl = _a.spriteUrl, style = _a.style, width = _a.width;
  var _b = (0, import_react187.useState)([0, 0]), _c = _b[0], spriteWidth = _c[0], spriteHeight = _c[1], setSpriteDimensions = _b[1];
  (0, import_react187.useEffect)(function() {
    getImageDimensions(spriteUrl).then(setSpriteDimensions).catch(console.error);
  }, [spriteUrl]);
  var x = position3[0], y = position3[1];
  if (!spriteHeight || !spriteWidth)
    return import_react187.default.createElement(import_react187.default.Fragment, null, fallback);
  return import_react187.default.createElement("div", { "data-testid": "sprite-image", style: __assign(__assign(__assign(__assign(__assign({}, style), { "--str-chat__sprite-image-resize-ratio": "var(--str-chat__sprite-image-resize-ratio-x, var(--str-chat__sprite-image-resize-ratio-y, 1))", "--str-chat__sprite-image-resize-ratio-x": "calc(var(--str-chat__sprite-image-width) / var(--str-chat__sprite-item-width))", "--str-chat__sprite-image-resize-ratio-y": "calc(var(--str-chat__sprite-image-height) / var(--str-chat__sprite-item-height))", "--str-chat__sprite-item-height": "".concat(spriteHeight / rows), "--str-chat__sprite-item-width": "".concat(spriteWidth / columns) }), Number.isFinite(height) ? { "--str-chat__sprite-image-height": "".concat(height, "px") } : {}), Number.isFinite(width) ? { "--str-chat__sprite-image-width": "".concat(width, "px") } : {}), { backgroundImage: "url('".concat(spriteUrl, "')"), backgroundPosition: "".concat(x * (100 / (columns - 1)), "% ").concat(y * (100 / (rows - 1)), "%"), backgroundSize: "".concat(columns * 100, "% ").concat(rows * 100, "%"), height: "var(--str-chat__sprite-image-height, calc(var(--str-chat__sprite-item-height) * var(--str-chat__sprite-image-resize-ratio)))", width: "var(--str-chat__sprite-image-width, calc(var(--str-chat__sprite-item-width) * var(--str-chat__sprite-image-resize-ratio)))" }) });
};

// node_modules/stream-chat-react/dist/components/Reactions/StreamEmoji.js
var import_react188 = __toESM(require_react());
var StreamSpriteEmojiPositions = {
  angry: [1, 1],
  haha: [1, 0],
  like: [0, 0],
  love: [1, 2],
  sad: [0, 1],
  wow: [0, 2]
};
var STREAM_SPRITE_URL = "https://getstream.imgix.net/images/emoji-sprite.png";
var StreamEmoji = function(_a) {
  var fallback = _a.fallback, type = _a.type;
  var position3 = StreamSpriteEmojiPositions[type];
  return import_react188.default.createElement(SpriteImage, { columns: 2, fallback, position: position3, rows: 3, spriteUrl: STREAM_SPRITE_URL, style: {
    "--str-chat__sprite-image-height": "var(--str-chat__stream-emoji-size, 18px)"
  } });
};

// node_modules/stream-chat-react/dist/components/Reactions/reactionOptions.js
var import_react189 = __toESM(require_react());
var defaultReactionOptions = [
  { type: "haha", Component: function() {
    return import_react189.default.createElement(StreamEmoji, { fallback: "😂", type: "haha" });
  }, name: "Joy" },
  { type: "like", Component: function() {
    return import_react189.default.createElement(StreamEmoji, { fallback: "👍", type: "like" });
  }, name: "Thumbs up" },
  { type: "love", Component: function() {
    return import_react189.default.createElement(StreamEmoji, { fallback: "❤️", type: "love" });
  }, name: "Heart" },
  { type: "sad", Component: function() {
    return import_react189.default.createElement(StreamEmoji, { fallback: "😔", type: "sad" });
  }, name: "Sad" },
  { type: "wow", Component: function() {
    return import_react189.default.createElement(StreamEmoji, { fallback: "😲", type: "wow" });
  }, name: "Astonished" }
];

// node_modules/stream-chat-react/dist/components/Message/MessageEditedTimestamp.js
var import_react190 = __toESM(require_react());
function MessageEditedTimestamp(_a) {
  var propMessage = _a.message, open = _a.open, timestampProps = __rest(_a, ["message", "open"]);
  var t2 = useTranslationContext("MessageEditedTimestamp").t;
  var contextMessage = useMessageContext("MessageEditedTimestamp").message;
  var _b = useComponentContext("MessageEditedTimestamp").Timestamp, Timestamp2 = _b === void 0 ? Timestamp : _b;
  var message = propMessage || contextMessage;
  if (!isMessageEdited(message)) {
    return null;
  }
  return import_react190.default.createElement(
    "div",
    { className: clsx_default("str-chat__message-edited-timestamp", open ? "str-chat__message-edited-timestamp--open" : "str-chat__message-edited-timestamp--collapsed"), "data-testid": "message-edited-timestamp" },
    t2("Edited"),
    " ",
    import_react190.default.createElement(Timestamp2, __assign({ timestamp: message.message_text_updated_at }, timestampProps))
  );
}

// node_modules/stream-chat-react/dist/components/Message/MessageSimple.js
var MessageSimpleWithContext = function(props) {
  var _a;
  var additionalMessageInputProps = props.additionalMessageInputProps, clearEditingState = props.clearEditingState, editing = props.editing, endOfGroup = props.endOfGroup, firstOfGroup = props.firstOfGroup, groupedByUser = props.groupedByUser, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, handleRetry = props.handleRetry, highlighted = props.highlighted, isMyMessage = props.isMyMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, renderText2 = props.renderText, showDetailedReactions = props.showDetailedReactions, threadList = props.threadList;
  var t2 = useTranslationContext("MessageSimple").t;
  var _b = (0, import_react191.useState)(false), isBounceDialogOpen = _b[0], setIsBounceDialogOpen = _b[1];
  var _c = (0, import_react191.useState)(false), isEditedTimestampOpen = _c[0], setEditedTimestampOpen = _c[1];
  var _d = useComponentContext("MessageSimple"), Attachment2 = _d.Attachment, _e = _d.Avatar, Avatar2 = _e === void 0 ? Avatar : _e, _f = _d.EditMessageInput, EditMessageInput = _f === void 0 ? EditMessageForm : _f, _g = _d.MessageDeleted, MessageDeleted2 = _g === void 0 ? MessageDeleted : _g, _h = _d.MessageBouncePrompt, MessageBouncePrompt2 = _h === void 0 ? MessageBouncePrompt : _h, _j = _d.MessageOptions, MessageOptions2 = _j === void 0 ? MessageOptions : _j, _k = _d.MessageRepliesCountButton, MessageRepliesCountButton2 = _k === void 0 ? MessageRepliesCountButton : _k, _l = _d.MessageStatus, MessageStatus2 = _l === void 0 ? MessageStatus : _l, _m = _d.MessageTimestamp, MessageTimestamp2 = _m === void 0 ? MessageTimestamp : _m, _o = _d.ReactionSelector, ReactionSelector2 = _o === void 0 ? ReactionSelector : _o, _p = _d.ReactionsList, ReactionsList2 = _p === void 0 ? ReactionsList : _p, PinIndicator2 = _d.PinIndicator;
  var themeVersion = useChatContext("MessageSimple").themeVersion;
  var hasAttachment = messageHasAttachments(message);
  var hasReactions = messageHasReactions(message);
  if (message.customType === CUSTOM_MESSAGE_TYPE.date) {
    return null;
  }
  if (message.deleted_at || message.type === "deleted") {
    return import_react191.default.createElement(MessageDeleted2, { message });
  }
  var canReact = isReactionEnabled;
  var canShowReactions = hasReactions;
  var showMetadata = !groupedByUser || endOfGroup;
  var showReplyCountButton = !threadList && !!message.reply_count;
  var allowRetry = message.status === "failed" && message.errorStatusCode !== 403;
  var isBounced = isMessageBounced(message);
  var isEdited = isMessageEdited(message);
  var handleClick = void 0;
  if (allowRetry) {
    handleClick = function() {
      return handleRetry(message);
    };
  } else if (isBounced) {
    handleClick = function() {
      return setIsBounceDialogOpen(true);
    };
  } else if (isEdited) {
    handleClick = function() {
      return setEditedTimestampOpen(function(prev) {
        return !prev;
      });
    };
  }
  var rootClassName2 = clsx_default("str-chat__message str-chat__message-simple", "str-chat__message--".concat(message.type), "str-chat__message--".concat(message.status), isMyMessage() ? "str-chat__message--me str-chat__message-simple--me" : "str-chat__message--other", message.text ? "str-chat__message--has-text" : "has-no-text", {
    "str-chat__message--has-attachment": hasAttachment,
    "str-chat__message--highlighted": highlighted,
    "str-chat__message--pinned pinned-message": message.pinned,
    "str-chat__message--with-reactions": canShowReactions,
    "str-chat__message-send-can-be-retried": (message === null || message === void 0 ? void 0 : message.status) === "failed" && (message === null || message === void 0 ? void 0 : message.errorStatusCode) !== 403,
    "str-chat__message-with-thread-link": showReplyCountButton,
    "str-chat__virtual-message__wrapper--end": endOfGroup,
    "str-chat__virtual-message__wrapper--first": firstOfGroup,
    "str-chat__virtual-message__wrapper--group": groupedByUser
  });
  return import_react191.default.createElement(
    import_react191.default.Fragment,
    null,
    editing && import_react191.default.createElement(
      Modal,
      { className: "str-chat__edit-message-modal", onClose: clearEditingState, open: editing },
      import_react191.default.createElement(MessageInput, __assign({ clearEditingState, grow: true, hideSendButton: true, Input: EditMessageInput, message }, additionalMessageInputProps))
    ),
    isBounceDialogOpen && import_react191.default.createElement(MessageBounceModal, { MessageBouncePrompt: MessageBouncePrompt2, onClose: function() {
      return setIsBounceDialogOpen(false);
    }, open: isBounceDialogOpen }),
    import_react191.default.createElement(
      "div",
      { className: rootClassName2, key: message.id },
      PinIndicator2 && import_react191.default.createElement(PinIndicator2, null),
      themeVersion === "1" && import_react191.default.createElement(MessageStatus2, null),
      message.user && import_react191.default.createElement(Avatar2, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user }),
      import_react191.default.createElement(
        "div",
        { className: clsx_default("str-chat__message-inner", {
          "str-chat__simple-message--error-failed": allowRetry || isBounced
        }), "data-testid": "message-inner", onClick: handleClick, onKeyUp: handleClick },
        import_react191.default.createElement(MessageOptions2, null),
        import_react191.default.createElement(
          "div",
          { className: "str-chat__message-reactions-host" },
          canShowReactions && import_react191.default.createElement(ReactionsList2, { reverse: true }),
          showDetailedReactions && canReact && import_react191.default.createElement(ReactionSelector2, { ref: reactionSelectorRef })
        ),
        import_react191.default.createElement(
          "div",
          { className: "str-chat__message-bubble" },
          ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) && !message.quoted_message ? import_react191.default.createElement(Attachment2, { actionHandler: handleAction, attachments: message.attachments }) : null,
          import_react191.default.createElement(MessageText, { message, renderText: renderText2 }),
          message.mml && import_react191.default.createElement(MML, { actionHandler: handleAction, align: isMyMessage() ? "right" : "left", source: message.mml }),
          themeVersion === "2" && import_react191.default.createElement(MessageErrorIcon, null)
        ),
        showReplyCountButton && themeVersion === "1" && import_react191.default.createElement(MessageRepliesCountButton2, { onClick: handleOpenThread, reply_count: message.reply_count }),
        showMetadata && themeVersion === "1" && import_react191.default.createElement(
          "div",
          { className: "str-chat__message-data str-chat__message-simple-data" },
          !isMyMessage() && message.user ? import_react191.default.createElement("span", { className: "str-chat__message-simple-name" }, message.user.name || message.user.id) : null,
          import_react191.default.createElement(MessageTimestamp2, { calendar: true, customClass: "str-chat__message-simple-timestamp" })
        )
      ),
      showReplyCountButton && themeVersion === "2" && import_react191.default.createElement(MessageRepliesCountButton2, { onClick: handleOpenThread, reply_count: message.reply_count }),
      showMetadata && themeVersion === "2" && import_react191.default.createElement(
        "div",
        { className: "str-chat__message-data str-chat__message-simple-data str-chat__message-metadata" },
        import_react191.default.createElement(MessageStatus2, null),
        !isMyMessage() && !!message.user && import_react191.default.createElement("span", { className: "str-chat__message-simple-name" }, message.user.name || message.user.id),
        import_react191.default.createElement(MessageTimestamp2, { calendar: true, customClass: "str-chat__message-simple-timestamp" }),
        isEdited && import_react191.default.createElement("span", { className: "str-chat__mesage-simple-edited" }, t2("Edited")),
        isEdited && import_react191.default.createElement(MessageEditedTimestamp, { calendar: true, open: isEditedTimestampOpen })
      )
    )
  );
};
var MemoizedMessageSimple = import_react191.default.memo(MessageSimpleWithContext, areMessageUIPropsEqual);
var MessageSimple = function(props) {
  var messageContext = useMessageContext("MessageSimple");
  return import_react191.default.createElement(MemoizedMessageSimple, __assign({}, messageContext, props));
};

// node_modules/stream-chat-react/dist/components/MessageInput/DropzoneProvider.js
var import_react192 = __toESM(require_react());
var DropzoneInner = function(_a) {
  var children = _a.children;
  var _b = useChannelStateContext("DropzoneProvider"), acceptedFiles = _b.acceptedFiles, multipleUploads = _b.multipleUploads;
  var _c = useMessageInputContext("DropzoneProvider"), cooldownRemaining = _c.cooldownRemaining, isUploadEnabled = _c.isUploadEnabled, maxFilesLeft = _c.maxFilesLeft, uploadNewFiles = _c.uploadNewFiles;
  return import_react192.default.createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads }, children);
};
var DropzoneProvider = function(props) {
  var cooldownTimerState = useCooldownTimer();
  var messageInputState = useMessageInputState(props);
  var messageInputContextValue = useCreateMessageInputContext(__assign(__assign(__assign({}, cooldownTimerState), messageInputState), props));
  return import_react192.default.createElement(
    MessageInputContextProvider,
    { value: messageInputContextValue },
    import_react192.default.createElement(DropzoneInner, null, props.children)
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/ConnectionStatus.js
var import_react194 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/CustomNotification.js
var import_react193 = __toESM(require_react());
var UnMemoizedCustomNotification = function(props) {
  var active = props.active, children = props.children, className = props.className, type = props.type;
  if (!active)
    return null;
  return import_react193.default.createElement("div", { "aria-live": "polite", className: clsx_default("str-chat__custom-notification notification-".concat(type), "str-chat__notification", "str-chat-react__notification", className), "data-testid": "custom-notification" }, children);
};
var CustomNotification = import_react193.default.memo(UnMemoizedCustomNotification);

// node_modules/stream-chat-react/dist/components/MessageList/ConnectionStatus.js
var UnMemoizedConnectionStatus = function() {
  var client = useChatContext("ConnectionStatus").client;
  var t2 = useTranslationContext("ConnectionStatus").t;
  var _a = (0, import_react194.useState)(true), online = _a[0], setOnline = _a[1];
  (0, import_react194.useEffect)(function() {
    var connectionChanged = function(_a2) {
      var _b = _a2.online, onlineStatus = _b === void 0 ? false : _b;
      if (online !== onlineStatus) {
        setOnline(onlineStatus);
      }
    };
    client.on("connection.changed", connectionChanged);
    return function() {
      return client.off("connection.changed", connectionChanged);
    };
  }, [client, online]);
  return import_react194.default.createElement(CustomNotification, { active: !online, className: "str-chat__connection-status-notification", type: "error" }, t2("Connection failure, reconnecting now..."));
};
var ConnectionStatus = import_react194.default.memo(UnMemoizedConnectionStatus);

// node_modules/stream-chat-react/dist/components/MessageList/GiphyPreviewMessage.js
var import_react196 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/Message.js
var import_react195 = __toESM(require_react());
var MessageWithContext = function(props) {
  var canPin = props.canPin, groupedByUser = props.groupedByUser, propMessage = props.Message, message = props.message, _a = props.messageActions, messageActions = _a === void 0 ? Object.keys(MESSAGE_ACTIONS) : _a, propOnUserClick = props.onUserClick, propOnUserHover = props.onUserHover, userRoles = props.userRoles;
  var client = useChatContext("Message").client;
  var read2 = useChannelStateContext("Message").read;
  var contextMessage = useComponentContext("Message").Message;
  var actionsEnabled = message.type === "regular" && message.status === "received";
  var MessageUIComponent = propMessage || contextMessage;
  var _b = useEditHandler(), clearEdit = _b.clearEdit, editing = _b.editing, setEdit = _b.setEdit;
  var _c = useUserHandler(message, {
    onUserClickHandler: propOnUserClick,
    onUserHoverHandler: propOnUserHover
  }), onUserClick = _c.onUserClick, onUserHover = _c.onUserHover;
  var canDelete = userRoles.canDelete, canEdit = userRoles.canEdit, canFlag = userRoles.canFlag, canMarkUnread = userRoles.canMarkUnread, canMute = userRoles.canMute, canQuote = userRoles.canQuote, canReact = userRoles.canReact, canReply = userRoles.canReply, isMyMessage = userRoles.isMyMessage;
  var messageIsUnread = (0, import_react195.useMemo)(function() {
    var _a2;
    return !!(!isMyMessage && ((_a2 = client.user) === null || _a2 === void 0 ? void 0 : _a2.id) && read2 && (!read2[client.user.id] || (message === null || message === void 0 ? void 0 : message.created_at) && new Date(message.created_at).getTime() > read2[client.user.id].last_read.getTime()));
  }, [client, isMyMessage, message.created_at, read2]);
  var messageActionsHandler = (0, import_react195.useCallback)(function() {
    return getMessageActions(messageActions, {
      canDelete,
      canEdit,
      canFlag,
      canMarkUnread,
      canMute,
      canPin,
      canQuote,
      canReact,
      canReply
    });
  }, [
    messageActions,
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canPin,
    canQuote,
    canReact,
    canReply
  ]);
  var canPinPropToNotPass = props.canPin, messageActionsPropToNotPass = props.messageActions, onlySenderCanEditPropToNotPass = props.onlySenderCanEdit, onUserClickPropToNotPass = props.onUserClick, onUserHoverPropToNotPass = props.onUserHover, userRolesPropToNotPass = props.userRoles, rest = __rest(props, ["canPin", "messageActions", "onlySenderCanEdit", "onUserClick", "onUserHover", "userRoles"]);
  var messageContextValue = __assign(__assign({}, rest), { actionsEnabled, clearEditingState: clearEdit, editing, getMessageActions: messageActionsHandler, handleEdit: setEdit, isMyMessage: function() {
    return isMyMessage;
  }, messageIsUnread, onUserClick, onUserHover, setEditingState: setEdit });
  return import_react195.default.createElement(
    MessageProvider,
    { value: messageContextValue },
    import_react195.default.createElement(MessageUIComponent, { groupedByUser })
  );
};
var MemoizedMessage = import_react195.default.memo(MessageWithContext, areMessagePropsEqual);
var Message = function(props) {
  var closeReactionSelectorOnClick = props.closeReactionSelectorOnClick, disableQuotedMessages = props.disableQuotedMessages, getDeleteMessageErrorNotification = props.getDeleteMessageErrorNotification, getFetchReactionsErrorNotification = props.getFetchReactionsErrorNotification, getFlagMessageErrorNotification = props.getFlagMessageErrorNotification, getFlagMessageSuccessNotification = props.getFlagMessageSuccessNotification, getMarkMessageUnreadErrorNotification = props.getMarkMessageUnreadErrorNotification, getMarkMessageUnreadSuccessNotification = props.getMarkMessageUnreadSuccessNotification, getMuteUserErrorNotification = props.getMuteUserErrorNotification, getMuteUserSuccessNotification = props.getMuteUserSuccessNotification, getPinMessageErrorNotification = props.getPinMessageErrorNotification, message = props.message, _a = props.onlySenderCanEdit, onlySenderCanEdit = _a === void 0 ? false : _a, propOnMentionsClick = props.onMentionsClick, propOnMentionsHover = props.onMentionsHover, propOpenThread = props.openThread, pinPermissions = props.pinPermissions, reactionDetailsSort = props.reactionDetailsSort, propRetrySendMessage = props.retrySendMessage, sortReactionDetails = props.sortReactionDetails, sortReactions = props.sortReactions;
  var addNotification = useChannelActionContext("Message").addNotification;
  var _b = useChannelStateContext("Message"), highlightedMessageId = _b.highlightedMessageId, mutes = _b.mutes;
  var reactionSelectorRef = (0, import_react195.useRef)(null);
  var handleAction = useActionHandler(message);
  var handleOpenThread = useOpenThreadHandler(message, propOpenThread);
  var handleReaction = useReactionHandler(message);
  var handleRetry = useRetryHandler(propRetrySendMessage);
  var userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);
  var handleFetchReactions = useReactionsFetcher(message, {
    getErrorNotification: getFetchReactionsErrorNotification,
    notify: addNotification
  });
  var handleDelete2 = useDeleteHandler(message, {
    getErrorNotification: getDeleteMessageErrorNotification,
    notify: addNotification
  });
  var handleFlag = useFlagHandler(message, {
    getErrorNotification: getFlagMessageErrorNotification,
    getSuccessNotification: getFlagMessageSuccessNotification,
    notify: addNotification
  });
  var handleMarkUnread = useMarkUnreadHandler(message, {
    getErrorNotification: getMarkMessageUnreadErrorNotification,
    getSuccessNotification: getMarkMessageUnreadSuccessNotification,
    notify: addNotification
  });
  var handleMute = useMuteHandler(message, {
    getErrorNotification: getMuteUserErrorNotification,
    getSuccessNotification: getMuteUserSuccessNotification,
    notify: addNotification
  });
  var _c = useMentionsHandler(message, {
    onMentionsClick: propOnMentionsClick,
    onMentionsHover: propOnMentionsHover
  }), onMentionsClick = _c.onMentionsClick, onMentionsHover = _c.onMentionsHover;
  var _d = usePinHandler(message, pinPermissions, {
    getErrorNotification: getPinMessageErrorNotification,
    notify: addNotification
  }), canPin = _d.canPin, handlePin = _d.handlePin;
  var _e = useReactionClick(message, reactionSelectorRef, void 0, closeReactionSelectorOnClick), isReactionEnabled = _e.isReactionEnabled, onReactionListClick = _e.onReactionListClick, showDetailedReactions = _e.showDetailedReactions;
  var highlighted = highlightedMessageId === message.id;
  return import_react195.default.createElement(MemoizedMessage, { additionalMessageInputProps: props.additionalMessageInputProps, autoscrollToBottom: props.autoscrollToBottom, canPin, customMessageActions: props.customMessageActions, disableQuotedMessages: props.disableQuotedMessages, endOfGroup: props.endOfGroup, firstOfGroup: props.firstOfGroup, formatDate: props.formatDate, groupedByUser: props.groupedByUser, groupStyles: props.groupStyles, handleAction, handleDelete: handleDelete2, handleFetchReactions, handleFlag, handleMarkUnread, handleMute, handleOpenThread, handlePin, handleReaction, handleRetry, highlighted, initialMessage: props.initialMessage, isReactionEnabled, lastReceivedId: props.lastReceivedId, message, Message: props.Message, messageActions: props.messageActions, messageListRect: props.messageListRect, mutes, onMentionsClickMessage: onMentionsClick, onMentionsHoverMessage: onMentionsHover, onReactionListClick, onUserClick: props.onUserClick, onUserHover: props.onUserHover, pinPermissions: props.pinPermissions, reactionDetailsSort, reactionSelectorRef, readBy: props.readBy, renderText: props.renderText, showDetailedReactions, sortReactionDetails, sortReactions, threadList: props.threadList, unsafeHTML: props.unsafeHTML, userRoles });
};

// node_modules/stream-chat-react/dist/components/MessageList/GiphyPreviewMessage.js
var GiphyPreviewMessage = function(props) {
  var message = props.message;
  return import_react196.default.createElement(
    "div",
    { className: "giphy-preview-message" },
    import_react196.default.createElement(Message, { message })
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/MessageList.js
var import_react216 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useEnrichedMessages.js
var import_react197 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/utils.js
var processMessages = function(params) {
  var _a, _b;
  var messages = params.messages, reviewProcessedMessage = params.reviewProcessedMessage, setGiphyPreviewMessage = params.setGiphyPreviewMessage, context = __rest(params, ["messages", "reviewProcessedMessage", "setGiphyPreviewMessage"]);
  var enableDateSeparator = context.enableDateSeparator, hideDeletedMessages = context.hideDeletedMessages, hideNewMessageSeparator = context.hideNewMessageSeparator, lastRead = context.lastRead, userId = context.userId;
  var unread = false;
  var ephemeralMessagePresent = false;
  var lastDateSeparator;
  var newMessages = [];
  for (var i = 0; i < messages.length; i += 1) {
    var message = messages[i];
    if (hideDeletedMessages && message.type === "deleted") {
      continue;
    }
    if (setGiphyPreviewMessage && message.type === "ephemeral" && message.command === "giphy") {
      ephemeralMessagePresent = true;
      setGiphyPreviewMessage(message);
      continue;
    }
    var changes = [];
    var messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || "";
    var previousMessage = messages[i - 1];
    var prevMessageDate = messageDate;
    if (enableDateSeparator && (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.created_at) && isDate(previousMessage.created_at)) {
      prevMessageDate = previousMessage.created_at.toDateString();
    }
    if (!unread && !hideNewMessageSeparator) {
      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false;
      if (enableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {
        changes.push({
          customType: CUSTOM_MESSAGE_TYPE.date,
          date: message.created_at,
          id: makeDateMessageId(message.created_at),
          unread
        });
      }
    }
    if (enableDateSeparator && (i === 0 || // always put date separator before the first message
    messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date
    // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date
    hideDeletedMessages && (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.type) === "deleted" && lastDateSeparator !== messageDate) && ((_b = changes[changes.length - 1]) === null || _b === void 0 ? void 0 : _b.customType) !== CUSTOM_MESSAGE_TYPE.date) {
      lastDateSeparator = messageDate;
      changes.push({
        customType: CUSTOM_MESSAGE_TYPE.date,
        date: message.created_at,
        id: makeDateMessageId(message.created_at)
      }, message);
    } else {
      changes.push(message);
    }
    newMessages.push.apply(newMessages, (reviewProcessedMessage === null || reviewProcessedMessage === void 0 ? void 0 : reviewProcessedMessage({
      changes,
      context,
      index: i,
      messages,
      processedMessages: newMessages
    })) || changes);
  }
  if (setGiphyPreviewMessage && !ephemeralMessagePresent) {
    setGiphyPreviewMessage(void 0);
  }
  return newMessages;
};
var makeDateMessageId = function(date) {
  var idSuffix;
  try {
    idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;
  } catch (e) {
    idSuffix = nanoid();
  }
  return "".concat(CUSTOM_MESSAGE_TYPE.date, "-").concat(idSuffix);
};
var getLastReceived = function(messages) {
  for (var i = messages.length - 1; i > 0; i -= 1) {
    if (messages[i].status === "received") {
      return messages[i].id;
    }
  }
  return null;
};
var getReadStates = function(messages, read2, returnAllReadData) {
  if (read2 === void 0) {
    read2 = {};
  }
  var readData = {};
  Object.values(read2).forEach(function(readState) {
    if (!readState.last_read)
      return;
    var userLastReadMsgId;
    messages.forEach(function(msg) {
      if (msg.created_at && msg.created_at < readState.last_read) {
        userLastReadMsgId = msg.id;
        if (returnAllReadData) {
          if (!readData[userLastReadMsgId]) {
            readData[userLastReadMsgId] = [];
          }
          readData[userLastReadMsgId].push(readState.user);
        }
      }
    });
    if (userLastReadMsgId && !returnAllReadData) {
      if (!readData[userLastReadMsgId]) {
        readData[userLastReadMsgId] = [];
      }
      readData[userLastReadMsgId].push(readState.user);
    }
  });
  return readData;
};
var insertIntro = function(messages, headerPosition) {
  var newMessages = messages;
  var intro = {
    customType: CUSTOM_MESSAGE_TYPE.intro
  };
  if (!headerPosition) {
    newMessages.unshift(intro);
    return newMessages;
  }
  if (!newMessages.length) {
    newMessages.unshift(intro);
    return newMessages;
  }
  for (var i = 0; i < messages.length; i += 1) {
    var message = messages[i];
    var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;
    var nextMessage = messages[i + 1];
    var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null;
    if (messageTime && messageTime < headerPosition) {
      if (nextMessageTime && nextMessageTime < headerPosition) {
        if (messages[i + 1] && messages[i + 1].customType === CUSTOM_MESSAGE_TYPE.date)
          continue;
        if (!nextMessageTime) {
          newMessages.push(intro);
          return newMessages;
        }
      } else {
        newMessages.splice(i + 1, 0, intro);
        return newMessages;
      }
    }
  }
  return newMessages;
};
var getGroupStyles = function(message, previousMessage, nextMessage, noGroupByUser, maxTimeBetweenGroupedMessages) {
  var _a, _b, _c, _d, _e, _f, _g;
  if (message.customType === CUSTOM_MESSAGE_TYPE.date)
    return "";
  if (message.customType === CUSTOM_MESSAGE_TYPE.intro)
    return "";
  if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0)
    return "single";
  var isTopMessage = !previousMessage || previousMessage.customType === CUSTOM_MESSAGE_TYPE.intro || previousMessage.customType === CUSTOM_MESSAGE_TYPE.date || previousMessage.type === "system" || previousMessage.type === "error" || ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) || previousMessage.deleted_at || message.reaction_groups && Object.keys(message.reaction_groups).length > 0 || isMessageEdited(previousMessage) || maxTimeBetweenGroupedMessages !== void 0 && previousMessage.created_at && message.created_at && new Date(message.created_at).getTime() - new Date(previousMessage.created_at).getTime() > maxTimeBetweenGroupedMessages;
  var isBottomMessage = !nextMessage || nextMessage.customType === CUSTOM_MESSAGE_TYPE.intro || nextMessage.customType === CUSTOM_MESSAGE_TYPE.date || nextMessage.type === "system" || nextMessage.type === "error" || ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) || nextMessage.deleted_at || nextMessage.reaction_groups && Object.keys(nextMessage.reaction_groups).length > 0 || isMessageEdited(message) || maxTimeBetweenGroupedMessages !== void 0 && nextMessage.created_at && message.created_at && new Date(nextMessage.created_at).getTime() - new Date(message.created_at).getTime() > maxTimeBetweenGroupedMessages;
  if (!isTopMessage && !isBottomMessage) {
    if (message.deleted_at || message.type === "error")
      return "single";
    return "middle";
  }
  if (isBottomMessage) {
    if (isTopMessage || message.deleted_at || message.type === "error")
      return "single";
    return "bottom";
  }
  if (isTopMessage)
    return "top";
  return "";
};
var hasMoreMessagesProbably = function(returnedCountMessages, limit) {
  return returnedCountMessages >= limit;
};
var hasNotMoreMessages = function(returnedCountMessages, limit) {
  return returnedCountMessages < limit;
};
function isDateSeparatorMessage(message) {
  return message.customType === CUSTOM_MESSAGE_TYPE.date && !!message.date && isDate(message.date);
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useEnrichedMessages.js
var useEnrichedMessages = function(args) {
  var channel = args.channel, disableDateSeparator = args.disableDateSeparator, groupStyles = args.groupStyles, headerPosition = args.headerPosition, hideDeletedMessages = args.hideDeletedMessages, hideNewMessageSeparator = args.hideNewMessageSeparator, maxTimeBetweenGroupedMessages = args.maxTimeBetweenGroupedMessages, messages = args.messages, noGroupByUser = args.noGroupByUser, reviewProcessedMessage = args.reviewProcessedMessage;
  var client = useChatContext("useEnrichedMessages").client;
  var HeaderComponent = useComponentContext("useEnrichedMessages").HeaderComponent;
  var lastRead = (0, import_react197.useMemo)(function() {
    var _a;
    return (_a = channel.lastRead) === null || _a === void 0 ? void 0 : _a.call(channel);
  }, [channel]);
  var enableDateSeparator = !disableDateSeparator;
  var messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator ? messages : processMessages({
    enableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    reviewProcessedMessage,
    userId: client.userID || ""
  });
  if (HeaderComponent) {
    messagesWithDates = insertIntro(messagesWithDates, headerPosition);
  }
  var groupStylesFn = groupStyles || getGroupStyles;
  var messageGroupStyles = (0, import_react197.useMemo)(
    function() {
      return messagesWithDates.reduce(function(acc, message, i) {
        var style = groupStylesFn(message, messagesWithDates[i - 1], messagesWithDates[i + 1], noGroupByUser, maxTimeBetweenGroupedMessages);
        if (style)
          acc[message.id] = style;
        return acc;
      }, {});
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [maxTimeBetweenGroupedMessages, messagesWithDates, noGroupByUser]
  );
  return { messageGroupStyles, messages: messagesWithDates };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js
var import_react199 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/useLastReadData.js
var import_react198 = __toESM(require_react());
var useLastReadData = function(props) {
  var messages = props.messages, read2 = props.read, returnAllReadData = props.returnAllReadData, userID = props.userID;
  return (0, import_react198.useMemo)(function() {
    return getReadStates(messages.filter(function(_a) {
      var user = _a.user;
      return (user === null || user === void 0 ? void 0 : user.id) === userID;
    }), read2, returnAllReadData);
  }, [messages, read2, returnAllReadData, userID]);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js
var useMessageListElements = function(props) {
  var channelUnreadUiState = props.channelUnreadUiState, enrichedMessages = props.enrichedMessages, internalMessageProps = props.internalMessageProps, messageGroupStyles = props.messageGroupStyles, read2 = props.read, renderMessages = props.renderMessages, returnAllReadData = props.returnAllReadData, threadList = props.threadList;
  var _a = useChatContext("useMessageListElements"), client = _a.client, customClasses = _a.customClasses;
  var components = useComponentContext("useMessageListElements");
  var readData = useLastReadData({
    messages: enrichedMessages,
    read: read2,
    returnAllReadData,
    userID: client.userID
  });
  var lastReceivedMessageId = (0, import_react199.useMemo)(function() {
    return getLastReceived(enrichedMessages);
  }, [
    enrichedMessages
  ]);
  var elements = (0, import_react199.useMemo)(
    function() {
      return renderMessages({
        channelUnreadUiState,
        components,
        customClasses,
        lastReceivedMessageId,
        messageGroupStyles,
        messages: enrichedMessages,
        readData,
        sharedMessageProps: __assign(__assign({}, internalMessageProps), { threadList })
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      enrichedMessages,
      internalMessageProps,
      lastReceivedMessageId,
      messageGroupStyles,
      channelUnreadUiState,
      readData,
      renderMessages,
      threadList
    ]
  );
  return elements;
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListScrollManager.js
var import_react200 = __toESM(require_react());
function useMessageListScrollManager(params) {
  var loadMoreScrollThreshold = params.loadMoreScrollThreshold, onScrollBy = params.onScrollBy, scrollContainerMeasures = params.scrollContainerMeasures, scrolledUpThreshold = params.scrolledUpThreshold, scrollToBottom = params.scrollToBottom, showNewMessages = params.showNewMessages;
  var client = useChatContext("useMessageListScrollManager").client;
  var measures = (0, import_react200.useRef)({
    offsetHeight: 0,
    scrollHeight: 0
  });
  var messages = (0, import_react200.useRef)();
  var scrollTop = (0, import_react200.useRef)(0);
  (0, import_react200.useLayoutEffect)(function() {
    var _a, _b, _c;
    var prevMeasures = measures.current;
    var prevMessages = messages.current;
    var newMessages = params.messages;
    var lastNewMessage = newMessages[newMessages.length - 1] || {};
    var lastPrevMessage = prevMessages === null || prevMessages === void 0 ? void 0 : prevMessages[prevMessages.length - 1];
    var newMeasures = scrollContainerMeasures();
    var wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;
    if (typeof prevMessages !== "undefined") {
      if (prevMessages.length < newMessages.length) {
        if ((lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {
          if (scrollTop.current < loadMoreScrollThreshold) {
            var listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;
            onScrollBy(listHeightDelta);
          }
        } else {
          var lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID;
          if (lastMessageIsFromCurrentUser || wasAtBottom) {
            scrollToBottom();
          } else {
            showNewMessages();
          }
        }
      } else {
        var hasNewReactions = ((_b = lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) === null || _c === void 0 ? void 0 : _c.length);
        var hasNewReplies = (lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;
        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {
          scrollToBottom();
        }
      }
    }
    messages.current = newMessages;
    measures.current = newMeasures;
  }, [measures, messages, params.messages]);
  return function(scrollTopValue) {
    scrollTop.current = scrollTopValue;
  };
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useScrollLocationLogic.js
var import_react201 = __toESM(require_react());
var useScrollLocationLogic = function(params) {
  var loadMoreScrollThreshold = params.loadMoreScrollThreshold, _a = params.messages, messages = _a === void 0 ? [] : _a, _b = params.scrolledUpThreshold, scrolledUpThreshold = _b === void 0 ? 200 : _b, hasMoreNewer = params.hasMoreNewer, suppressAutoscroll = params.suppressAutoscroll, listElement = params.listElement;
  var _c = (0, import_react201.useState)(false), hasNewMessages = _c[0], setHasNewMessages = _c[1];
  var _d = (0, import_react201.useState)(), wrapperRect = _d[0], setWrapperRect = _d[1];
  var _e = (0, import_react201.useState)(true), isMessageListScrolledToBottom = _e[0], setIsMessageListScrolledToBottom = _e[1];
  var closeToBottom = (0, import_react201.useRef)(false);
  var closeToTop = (0, import_react201.useRef)(false);
  var scrollToBottom = (0, import_react201.useCallback)(function() {
    if (!(listElement === null || listElement === void 0 ? void 0 : listElement.scrollTo) || hasMoreNewer || suppressAutoscroll) {
      return;
    }
    listElement.scrollTo({
      top: listElement.scrollHeight
    });
    setHasNewMessages(false);
  }, [listElement, hasMoreNewer, suppressAutoscroll]);
  (0, import_react201.useLayoutEffect)(function() {
    if (listElement) {
      setWrapperRect(listElement.getBoundingClientRect());
      scrollToBottom();
    }
  }, [listElement, hasMoreNewer]);
  var updateScrollTop = useMessageListScrollManager({
    loadMoreScrollThreshold,
    messages,
    onScrollBy: function(scrollBy) {
      listElement === null || listElement === void 0 ? void 0 : listElement.scrollBy({ top: scrollBy });
    },
    scrollContainerMeasures: function() {
      return {
        offsetHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.offsetHeight) || 0,
        scrollHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.scrollHeight) || 0
      };
    },
    scrolledUpThreshold,
    scrollToBottom,
    showNewMessages: function() {
      return setHasNewMessages(true);
    }
  });
  var onScroll = (0, import_react201.useCallback)(function(event) {
    var element3 = event.target;
    var scrollTop = element3.scrollTop;
    updateScrollTop(scrollTop);
    var offsetHeight = element3.offsetHeight;
    var scrollHeight = element3.scrollHeight;
    var prevCloseToBottom = closeToBottom.current;
    closeToBottom.current = scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;
    closeToTop.current = scrollTop < scrolledUpThreshold;
    if (closeToBottom.current) {
      setHasNewMessages(false);
    }
    if (prevCloseToBottom && !closeToBottom.current) {
      setIsMessageListScrolledToBottom(false);
    } else if (!prevCloseToBottom && closeToBottom.current) {
      setIsMessageListScrolledToBottom(true);
    }
  }, [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]);
  return {
    hasNewMessages,
    isMessageListScrolledToBottom,
    onScroll,
    scrollToBottom,
    wrapperRect
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js
var import_react204 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/MessageListMainPanel.js
var import_react202 = __toESM(require_react());
var MESSAGE_LIST_MAIN_PANEL_CLASS = "str-chat__main-panel-inner";
var MessageListMainPanel = function(_a) {
  var children = _a.children;
  var themeVersion = useChatContext("MessageListMainPanel").themeVersion;
  if (themeVersion === "2")
    return import_react202.default.createElement("div", { className: MESSAGE_LIST_MAIN_PANEL_CLASS }, children);
  return import_react202.default.createElement(import_react202.default.Fragment, null, children);
};

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesSeparator.js
var import_react203 = __toESM(require_react());
var UNREAD_MESSAGE_SEPARATOR_CLASS = "str-chat__unread-messages-separator";
var UnreadMessagesSeparator = function(_a) {
  var showCount = _a.showCount, unreadCount = _a.unreadCount;
  var t2 = useTranslationContext("UnreadMessagesSeparator").t;
  return import_react203.default.createElement("div", { className: UNREAD_MESSAGE_SEPARATOR_CLASS, "data-testid": "unread-messages-separator" }, unreadCount && showCount ? t2("unreadMessagesSeparatorText", { count: unreadCount }) : t2("Unread messages"));
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js
var targetScrolledAboveVisibleContainerArea = function(element3) {
  var targetBottom = element3.getBoundingClientRect().bottom;
  return targetBottom < 0;
};
var targetScrolledBelowVisibleContainerArea = function(element3, container) {
  var targetTop = element3.getBoundingClientRect().top;
  var containerBottom = container.getBoundingClientRect().top;
  return targetTop > containerBottom;
};
var useUnreadMessagesNotification = function(_a) {
  var isMessageListScrolledToBottom = _a.isMessageListScrolledToBottom, showAlways = _a.showAlways, unreadCount = _a.unreadCount;
  var messages = useChannelStateContext("UnreadMessagesNotification").messages;
  var _b = (0, import_react204.useState)(false), show = _b[0], setShow = _b[1];
  var isScrolledAboveTargetTop = (0, import_react204.useRef)(false);
  var intersectionObserverIsSupported = typeof IntersectionObserver !== "undefined";
  (0, import_react204.useEffect)(function() {
    if (!(unreadCount && intersectionObserverIsSupported)) {
      setShow(false);
      return;
    }
    var msgListPanel = document.querySelector(".".concat(MESSAGE_LIST_MAIN_PANEL_CLASS));
    if (!msgListPanel)
      return;
    var observedTarget = document.querySelector(".".concat(UNREAD_MESSAGE_SEPARATOR_CLASS));
    if (!observedTarget) {
      setShow(true);
      return;
    }
    var scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);
    var scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(observedTarget, msgListPanel);
    setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
    var observer = new IntersectionObserver(function(elements) {
      if (!elements.length)
        return;
      var _a2 = elements[0], boundingClientRect = _a2.boundingClientRect, isIntersecting = _a2.isIntersecting;
      if (isIntersecting) {
        setShow(false);
        return;
      }
      var separatorIsAboveContainerTop = boundingClientRect.bottom < 0;
      setShow(showAlways || separatorIsAboveContainerTop);
      isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;
    }, { root: msgListPanel });
    observer.observe(observedTarget);
    return function() {
      observer.disconnect();
    };
  }, [
    intersectionObserverIsSupported,
    isMessageListScrolledToBottom,
    messages,
    showAlways,
    unreadCount
  ]);
  (0, import_react204.useEffect)(function() {
    if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {
      setShow(true);
      isScrolledAboveTargetTop.current = false;
    }
  }, [isMessageListScrolledToBottom, unreadCount]);
  return { show: show && intersectionObserverIsSupported };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/useMarkRead.js
var import_react205 = __toESM(require_react());
var useMarkRead = function(_a) {
  var isMessageListScrolledToBottom = _a.isMessageListScrolledToBottom, messageListIsThread = _a.messageListIsThread, unreadCount = _a.unreadCount, wasMarkedUnread = _a.wasMarkedUnread;
  var client = useChatContext("useMarkRead").client;
  var _b = useChannelActionContext("useMarkRead"), markRead = _b.markRead, setChannelUnreadUiState = _b.setChannelUnreadUiState;
  var channel = useChannelStateContext("useMarkRead").channel;
  var previousRenderMessageListScrolledToBottom = (0, import_react205.useRef)(isMessageListScrolledToBottom);
  (0, import_react205.useEffect)(function() {
    var shouldMarkRead = function(unreadMessages) {
      return !document.hidden && !wasMarkedUnread && !messageListIsThread && isMessageListScrolledToBottom && unreadMessages > 0;
    };
    var onVisibilityChange = function() {
      if (shouldMarkRead(channel.countUnread()))
        markRead();
    };
    var handleMessageNew = function(event) {
      var _a2, _b2, _c, _d;
      var newMessageToCurrentChannel = event.cid === channel.cid;
      var isOwnMessage = ((_a2 = event.user) === null || _a2 === void 0 ? void 0 : _a2.id) && event.user.id === ((_b2 = client.user) === null || _b2 === void 0 ? void 0 : _b2.id);
      var mainChannelUpdated = !((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id) || ((_d = event.message) === null || _d === void 0 ? void 0 : _d.show_in_channel);
      if (isOwnMessage)
        return;
      if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {
        setChannelUnreadUiState(function(prev) {
          var _a3, _b3;
          var previousUnreadCount = (_a3 = prev === null || prev === void 0 ? void 0 : prev.unread_messages) !== null && _a3 !== void 0 ? _a3 : 0;
          var previousLastMessage = getPreviousLastMessage(channel.state.messages, event.message);
          return __assign(__assign({}, prev || {}), { last_read: (_b3 = prev === null || prev === void 0 ? void 0 : prev.last_read) !== null && _b3 !== void 0 ? _b3 : previousUnreadCount === 0 && (previousLastMessage === null || previousLastMessage === void 0 ? void 0 : previousLastMessage.created_at) ? new Date(previousLastMessage.created_at) : /* @__PURE__ */ new Date(0), unread_messages: previousUnreadCount + 1 });
        });
      } else if (newMessageToCurrentChannel && mainChannelUpdated && shouldMarkRead(channel.countUnread())) {
        markRead();
      }
    };
    client.on("message.new", handleMessageNew);
    document.addEventListener("visibilitychange", onVisibilityChange);
    var hasScrolledToBottom = previousRenderMessageListScrolledToBottom.current !== isMessageListScrolledToBottom && isMessageListScrolledToBottom;
    if (hasScrolledToBottom && shouldMarkRead(channel.countUnread()))
      markRead();
    previousRenderMessageListScrolledToBottom.current = isMessageListScrolledToBottom;
    return function() {
      client.off("message.new", handleMessageNew);
      document.removeEventListener("visibilitychange", onVisibilityChange);
    };
  }, [
    channel,
    client,
    isMessageListScrolledToBottom,
    markRead,
    messageListIsThread,
    setChannelUnreadUiState,
    unreadCount,
    wasMarkedUnread
  ]);
};
function getPreviousLastMessage(messages, newMessage) {
  if (!newMessage)
    return;
  var previousLastMessage;
  for (var i = messages.length - 1; i >= 0; i--) {
    var msg = messages[i];
    if (!(msg === null || msg === void 0 ? void 0 : msg.id))
      break;
    if (msg.id !== newMessage.id) {
      previousLastMessage = msg;
      break;
    }
  }
  return previousLastMessage;
}

// node_modules/stream-chat-react/dist/components/MessageList/MessageNotification.js
var import_react206 = __toESM(require_react());
var UnMemoizedMessageNotification = function(props) {
  var children = props.children, onClick = props.onClick, _a = props.showNotification, showNotification = _a === void 0 ? true : _a;
  if (!showNotification)
    return null;
  return import_react206.default.createElement("button", { "aria-live": "polite", className: "str-chat__message-notification", "data-testid": "message-notification", onClick }, children);
};
var MessageNotification = import_react206.default.memo(UnMemoizedMessageNotification);

// node_modules/stream-chat-react/dist/components/MessageList/MessageListNotifications.js
var import_react207 = __toESM(require_react());
var MessageListNotifications = function(props) {
  var hasNewMessages = props.hasNewMessages, isMessageListScrolledToBottom = props.isMessageListScrolledToBottom, isNotAtLatestMessageSet = props.isNotAtLatestMessageSet, MessageNotification2 = props.MessageNotification, notifications = props.notifications, scrollToBottom = props.scrollToBottom, threadList = props.threadList, unreadCount = props.unreadCount;
  var t2 = useTranslationContext("MessageListNotifications").t;
  return import_react207.default.createElement(
    "div",
    { className: "str-chat__list-notifications" },
    notifications.map(function(notification) {
      return import_react207.default.createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text);
    }),
    import_react207.default.createElement(ConnectionStatus, null),
    import_react207.default.createElement(MessageNotification2, { isMessageListScrolledToBottom, onClick: scrollToBottom, showNotification: hasNewMessages || isNotAtLatestMessageSet, threadList, unreadCount }, isNotAtLatestMessageSet ? t2("Latest Messages") : t2("New Messages!"))
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js
var import_react209 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/icons.js
var import_react208 = __toESM(require_react());
var ArrowDown = function(_a) {
  var className = _a.className, color6 = _a.color;
  return import_react208.default.createElement(
    "svg",
    { className, "data-testid": "arrow-down", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react208.default.createElement("path", { d: "M7.41 8.29504L12 12.875L16.59 8.29504L18 9.70504L12 15.705L6 9.70504L7.41 8.29504Z", fill: color6 || "var(--primary-color)" })
  );
};
var CloseIcon3 = function() {
  return import_react208.default.createElement(
    "svg",
    { fill: "currentColor", viewBox: "0 0 14 13", xmlns: "http://www.w3.org/2000/svg" },
    import_react208.default.createElement("path", { d: "M1.32227 12.3408C0.944336 11.9629 0.953125 11.3213 1.32227 10.9521L5.60254 6.66309L1.32227 2.38281C0.953125 2.01367 0.944336 1.37207 1.32227 0.994141C1.7002 0.616211 2.3418 0.625 2.71094 0.985352L7 5.27441L11.2803 0.994141C11.6494 0.625 12.291 0.616211 12.6689 0.994141C13.0469 1.37207 13.0381 2.01367 12.6689 2.38281L8.38867 6.66309L12.6689 10.9521C13.0381 11.3213 13.0469 11.9629 12.6689 12.3408C12.291 12.7188 11.6494 12.71 11.2803 12.3408L7 8.06055L2.71094 12.3408C2.3418 12.71 1.7002 12.7188 1.32227 12.3408Z" })
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js
var UnreadMessagesNotification = function(_a) {
  var queryMessageLimit = _a.queryMessageLimit, showCount = _a.showCount, unreadCount = _a.unreadCount;
  var _b = useChannelActionContext("UnreadMessagesNotification"), jumpToFirstUnreadMessage = _b.jumpToFirstUnreadMessage, markRead = _b.markRead;
  var t2 = useTranslationContext("UnreadMessagesNotification").t;
  return import_react209.default.createElement(
    "div",
    { className: "str-chat__unread-messages-notification", "data-testid": "unread-messages-notification" },
    import_react209.default.createElement("button", { onClick: function() {
      return jumpToFirstUnreadMessage(queryMessageLimit);
    } }, unreadCount && showCount ? t2("{{count}} unread", { count: unreadCount !== null && unreadCount !== void 0 ? unreadCount : 0 }) : t2("Unread messages")),
    import_react209.default.createElement(
      "button",
      { onClick: function() {
        return markRead();
      } },
      import_react209.default.createElement(CloseIcon3, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/EmptyStateIndicator.js
var import_react211 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/icons.js
var import_react210 = __toESM(require_react());
var ChatBubble = function() {
  return import_react210.default.createElement(
    "svg",
    { "data-testid": "chat-bubble", fill: "none", height: "96", viewBox: "0 0 136 136", width: "96", xmlns: "http://www.w3.org/2000/svg" },
    import_react210.default.createElement("path", { d: "M106 24.5H30C24.775 24.5 20.5 28.775 20.5 34V119.5L39.5 100.5H106C111.225 100.5 115.5 96.225 115.5 91V34C115.5 28.775 111.225 24.5 106 24.5ZM106 91H39.5L30 100.5V34H106V91Z", fill: "#B4B7BB" })
  );
};

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/EmptyStateIndicator.js
var UnMemoizedEmptyStateIndicator = function(props) {
  var listType = props.listType;
  var t2 = useTranslationContext("EmptyStateIndicator").t;
  if (listType === "thread")
    return null;
  if (listType === "channel") {
    var text5 = t2("You have no channels currently");
    return import_react211.default.createElement(
      import_react211.default.Fragment,
      null,
      import_react211.default.createElement(
        "div",
        { className: "str-chat__channel-list-empty" },
        import_react211.default.createElement(ChatBubble, null),
        import_react211.default.createElement("p", { role: "listitem" }, text5)
      ),
      import_react211.default.createElement("p", { className: "str-chat__channel-list-empty-v1", role: "listitem" }, text5)
    );
  }
  if (listType === "message") {
    var text5 = t2("No chats here yet…");
    return import_react211.default.createElement(
      "div",
      { className: "str-chat__empty-channel" },
      import_react211.default.createElement(ChatBubble, null),
      import_react211.default.createElement("p", { className: "str-chat__empty-channel-text", role: "listitem" }, text5)
    );
  }
  return import_react211.default.createElement("p", null, "No items exist");
};
var EmptyStateIndicator = import_react211.default.memo(UnMemoizedEmptyStateIndicator);

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/InfiniteScroll.js
var import_react212 = __toESM(require_react());

// node_modules/stream-chat-react/dist/utils/deprecationWarning.js
var deprecationAndReplacementWarning = function(pairs, component) {
  pairs.forEach(function(data) {
    var _a = [
      Object.entries(data[0])[0],
      Object.entries(data[1])[0]
    ], _b = _a[0], oldName = _b[0], oldValue = _b[1], _c = _a[1], newName = _c[0], newValue = _c[1];
    if (typeof oldValue !== "undefined" && typeof newValue === "undefined" || typeof oldValue !== "undefined" && typeof newValue !== "undefined") {
      console.warn("[Deprecation notice (".concat(component, ")]: prefer using prop ").concat(newName, " instead of ").concat(oldName));
    }
  });
};

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/InfiniteScroll.js
var mousewheelListener = function(event) {
  if (event instanceof WheelEvent && event.deltaY === 1) {
    event.preventDefault();
  }
};
var InfiniteScroll = function(props) {
  var children = props.children, _a = props.element, element3 = _a === void 0 ? "div" : _a, hasMore = props.hasMore, hasMoreNewer = props.hasMoreNewer, hasNextPage = props.hasNextPage, hasPreviousPage = props.hasPreviousPage, head = props.head, _b = props.initialLoad, initialLoad = _b === void 0 ? true : _b, isLoading = props.isLoading, listenToScroll = props.listenToScroll, loader = props.loader, loadMore = props.loadMore, loadMoreNewer = props.loadMoreNewer, loadNextPage = props.loadNextPage, loadPreviousPage = props.loadPreviousPage, _c = props.threshold, threshold = _c === void 0 ? DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD : _c, _d = props.useCapture, useCapture = _d === void 0 ? false : _d, elementProps = __rest(props, ["children", "element", "hasMore", "hasMoreNewer", "hasNextPage", "hasPreviousPage", "head", "initialLoad", "isLoading", "listenToScroll", "loader", "loadMore", "loadMoreNewer", "loadNextPage", "loadPreviousPage", "threshold", "useCapture"]);
  var loadNextPageFn = loadNextPage || loadMoreNewer;
  var loadPreviousPageFn = loadPreviousPage || loadMore;
  var hasNextPageFlag = hasNextPage || hasMoreNewer;
  var hasPreviousPageFlag = hasPreviousPage || hasMore;
  var scrollComponent = (0, import_react212.useRef)();
  var previousOffset = (0, import_react212.useRef)();
  var previousReverseOffset = (0, import_react212.useRef)();
  var scrollListenerRef = (0, import_react212.useRef)();
  scrollListenerRef.current = function() {
    var element4 = scrollComponent.current;
    if (!element4 || element4.offsetParent === null) {
      return;
    }
    var parentElement = element4.parentElement;
    var offset2 = element4.scrollHeight - parentElement.scrollTop - parentElement.clientHeight;
    var reverseOffset = parentElement.scrollTop;
    if (listenToScroll) {
      listenToScroll(offset2, reverseOffset, threshold);
    }
    if (isLoading)
      return;
    if (previousOffset.current === offset2 && previousReverseOffset.current === reverseOffset)
      return;
    previousOffset.current = offset2;
    previousReverseOffset.current = reverseOffset;
    if (reverseOffset < Number(threshold) && typeof loadPreviousPageFn === "function" && hasPreviousPageFlag) {
      loadPreviousPageFn();
    }
    if (offset2 < Number(threshold) && typeof loadNextPageFn === "function" && hasNextPageFlag) {
      loadNextPageFn();
    }
  };
  (0, import_react212.useEffect)(function() {
    deprecationAndReplacementWarning([
      [{ hasMoreNewer }, { hasNextPage }],
      [{ loadMoreNewer }, { loadNextPage }],
      [{ hasMore }, { hasPreviousPage }],
      [{ loadMore }, { loadPreviousPage }]
    ], "InfiniteScroll");
  }, []);
  (0, import_react212.useEffect)(function() {
    var _a2;
    var scrollElement = (_a2 = scrollComponent.current) === null || _a2 === void 0 ? void 0 : _a2.parentNode;
    if (!scrollElement)
      return;
    var scrollListener = function() {
      var _a3;
      return (_a3 = scrollListenerRef.current) === null || _a3 === void 0 ? void 0 : _a3.call(scrollListenerRef);
    };
    scrollElement.addEventListener("scroll", scrollListener, useCapture);
    scrollElement.addEventListener("resize", scrollListener, useCapture);
    scrollListener();
    return function() {
      scrollElement.removeEventListener("scroll", scrollListener, useCapture);
      scrollElement.removeEventListener("resize", scrollListener, useCapture);
    };
  }, [initialLoad, useCapture]);
  (0, import_react212.useEffect)(function() {
    var _a2;
    var scrollElement = (_a2 = scrollComponent.current) === null || _a2 === void 0 ? void 0 : _a2.parentNode;
    if (scrollElement) {
      scrollElement.addEventListener("wheel", mousewheelListener, { passive: false });
    }
    return function() {
      if (scrollElement) {
        scrollElement.removeEventListener("wheel", mousewheelListener, useCapture);
      }
    };
  }, [useCapture]);
  var attributes = __assign(__assign({}, elementProps), { ref: function(element4) {
    scrollComponent.current = element4;
  } });
  var childrenArray = [loader, children];
  if (head) {
    childrenArray.unshift(head);
  }
  return import_react212.default.createElement(element3, attributes, childrenArray);
};

// node_modules/stream-chat-react/dist/components/TypingIndicator/TypingIndicator.js
var import_react213 = __toESM(require_react());
var useJoinTypingUsers = function(names) {
  var t2 = useTranslationContext().t;
  if (!names.length)
    return null;
  var name = names[0], rest = names.slice(1);
  if (names.length === 1)
    return t2("{{ user }} is typing...", {
      user: name
    });
  var MAX_JOINED_USERS = 3;
  var isLargeArray = names.length > MAX_JOINED_USERS;
  var joinedUsers = (isLargeArray ? names.slice(0, MAX_JOINED_USERS) : rest).join(", ").trim();
  if (isLargeArray)
    return t2("{{ users }} and more are typing...", {
      users: joinedUsers
    });
  return t2("{{ users }} and {{ user }} are typing...", {
    user: name,
    users: joinedUsers
  });
};
var UnMemoizedTypingIndicator = function(props) {
  var PropAvatar = props.Avatar, _a = props.avatarSize, avatarSize = _a === void 0 ? 32 : _a, threadList = props.threadList;
  var _b = useChannelStateContext("TypingIndicator"), channelConfig = _b.channelConfig, thread = _b.thread;
  var _c = useChatContext("TypingIndicator"), client = _c.client, themeVersion = _c.themeVersion;
  var ContextAvatar = useComponentContext("TypingIndicator").Avatar;
  var _d = useTypingContext("TypingIndicator").typing, typing = _d === void 0 ? {} : _d;
  var Avatar2 = PropAvatar || ContextAvatar || Avatar;
  var typingInChannel = !threadList ? Object.values(typing).filter(function(_a2) {
    var _b2;
    var parent_id = _a2.parent_id, user = _a2.user;
    return (user === null || user === void 0 ? void 0 : user.id) !== ((_b2 = client.user) === null || _b2 === void 0 ? void 0 : _b2.id) && !parent_id;
  }) : [];
  var typingInThread = threadList ? Object.values(typing).filter(function(_a2) {
    var _b2;
    var parent_id = _a2.parent_id, user = _a2.user;
    return (user === null || user === void 0 ? void 0 : user.id) !== ((_b2 = client.user) === null || _b2 === void 0 ? void 0 : _b2.id) && parent_id === (thread === null || thread === void 0 ? void 0 : thread.id);
  }) : [];
  var typingUserList = (threadList ? typingInThread : typingInChannel).map(function(_a2) {
    var user = _a2.user;
    return (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id);
  }).filter(Boolean);
  var joinedTypingUsers = useJoinTypingUsers(typingUserList);
  var isTypingActive = threadList && typingInThread.length || !threadList && typingInChannel.length;
  if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.typing_events) === false) {
    return null;
  }
  if (themeVersion === "2") {
    if (!isTypingActive)
      return null;
    return import_react213.default.createElement(
      "div",
      { className: clsx_default("str-chat__typing-indicator", {
        "str-chat__typing-indicator--typing": isTypingActive
      }), "data-testid": "typing-indicator" },
      import_react213.default.createElement(
        "div",
        { className: "str-chat__typing-indicator__dots" },
        import_react213.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
        import_react213.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
        import_react213.default.createElement("span", { className: "str-chat__typing-indicator__dot" })
      ),
      import_react213.default.createElement("div", { className: "str-chat__typing-indicator__users", "data-testid": "typing-users" }, joinedTypingUsers)
    );
  }
  return import_react213.default.createElement(
    "div",
    { className: clsx_default("str-chat__typing-indicator", {
      "str-chat__typing-indicator--typing": isTypingActive
    }) },
    import_react213.default.createElement("div", { className: "str-chat__typing-indicator__avatars" }, (threadList ? typingInThread : typingInChannel).map(function(_a2, i) {
      var user = _a2.user;
      return import_react213.default.createElement(Avatar2, { image: user === null || user === void 0 ? void 0 : user.image, key: "".concat(user === null || user === void 0 ? void 0 : user.id, "-").concat(i), name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id), size: avatarSize, user });
    })),
    import_react213.default.createElement(
      "div",
      { className: "str-chat__typing-indicator__dots" },
      import_react213.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
      import_react213.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
      import_react213.default.createElement("span", { className: "str-chat__typing-indicator__dot" })
    )
  );
};
var TypingIndicator = import_react213.default.memo(UnMemoizedTypingIndicator);

// node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js
var import_react215 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/FixedHeightMessage.js
var import_react214 = __toESM(require_react());
var selectColor = function(number2, dark) {
  var hue = number2 * 137.508;
  return "hsl(".concat(hue, ",").concat(dark ? "50%" : "85%", ", ").concat(dark ? "75%" : "55%", ")");
};
var hashUserId = function(userId) {
  var hash3 = userId.split("").reduce(function(acc, c) {
    acc = (acc << 5) - acc + c.charCodeAt(0);
    return acc & acc;
  }, 0);
  return Math.abs(hash3) / Math.pow(10, Math.ceil(Math.log10(Math.abs(hash3) + 1)));
};
var getUserColor = function(theme, userId) {
  return selectColor(hashUserId(userId), theme.includes("dark"));
};
var UnMemoizedFixedHeightMessage = function(props) {
  var _a, _b, _c, _d;
  var propGroupedByUser = props.groupedByUser, propMessage = props.message;
  var theme = useChatContext("FixedHeightMessage").theme;
  var _e = useMessageContext("FixedHeightMessage"), contextGroupedByUser = _e.groupedByUser, contextMessage = _e.message;
  var _f = useComponentContext("FixedHeightMessage").MessageDeleted, MessageDeleted2 = _f === void 0 ? MessageDeleted : _f;
  var userLanguage = useTranslationContext("FixedHeightMessage").userLanguage;
  var groupedByUser = propGroupedByUser !== void 0 ? propGroupedByUser : contextGroupedByUser;
  var message = propMessage || contextMessage;
  var handleAction = useActionHandler(message);
  var handleDelete2 = useDeleteHandler(message);
  var role = useUserRole(message);
  var messageTextToRender = ((_a = message === null || message === void 0 ? void 0 : message.i18n) === null || _a === void 0 ? void 0 : _a["".concat(userLanguage, "_text")]) || (message === null || message === void 0 ? void 0 : message.text);
  var renderedText = (0, import_react214.useMemo)(function() {
    return renderText(messageTextToRender, message.mentioned_users);
  }, [
    message.mentioned_users,
    messageTextToRender
  ]);
  var userId = ((_b = message.user) === null || _b === void 0 ? void 0 : _b.id) || "";
  var userColor = (0, import_react214.useMemo)(function() {
    return getUserColor(theme, userId);
  }, [userId, theme]);
  var messageActionsHandler = (0, import_react214.useCallback)(function() {
    return getMessageActions(["delete"], { canDelete: role.canDelete });
  }, [role]);
  var images = (_c = message === null || message === void 0 ? void 0 : message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function(_a2) {
    var type = _a2.type;
    return type === "image";
  });
  return import_react214.default.createElement(
    "div",
    { className: "str-chat__virtual-message__wrapper ".concat(role.isMyMessage ? "str-chat__virtual-message__wrapper--me" : "", " ").concat(groupedByUser ? "str-chat__virtual-message__wrapper--group" : ""), key: message.id },
    message.user && import_react214.default.createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, shape: "rounded", size: 38, user: message.user }),
    import_react214.default.createElement(
      "div",
      { className: "str-chat__virtual-message__content" },
      import_react214.default.createElement(
        "div",
        { className: "str-chat__virtual-message__meta" },
        import_react214.default.createElement(
          "div",
          { className: "str-chat__virtual-message__author", style: { color: userColor } },
          import_react214.default.createElement("strong", null, ((_d = message.user) === null || _d === void 0 ? void 0 : _d.name) || "unknown")
        )
      ),
      message.deleted_at || message.type === "deleted" ? import_react214.default.createElement(MessageDeleted2, { message }) : import_react214.default.createElement(
        import_react214.default.Fragment,
        null,
        images && import_react214.default.createElement(Gallery, { images }),
        import_react214.default.createElement(
          "div",
          { className: "str-chat__virtual-message__text", "data-testid": "msg-text" },
          renderedText,
          message.mml && import_react214.default.createElement(MML, { actionHandler: handleAction, align: "left", source: message.mml }),
          import_react214.default.createElement(
            "div",
            { className: "str-chat__virtual-message__data" },
            import_react214.default.createElement(MessageActions, { customWrapperClass: "str-chat__virtual-message__actions", getMessageActions: messageActionsHandler, handleDelete: handleDelete2, message, mine: function() {
              return role.isMyMessage;
            } }),
            import_react214.default.createElement(
              "span",
              { className: "str-chat__virtual-message__date" },
              import_react214.default.createElement(MessageTimestamp, { customClass: "str-chat__message-simple-timestamp", message })
            )
          )
        )
      )
    )
  );
};
var FixedHeightMessage = import_react214.default.memo(UnMemoizedFixedHeightMessage);

// node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js
function defaultRenderMessages(_a) {
  var channelUnreadUiState = _a.channelUnreadUiState, components = _a.components, customClasses = _a.customClasses, lastReceivedId = _a.lastReceivedMessageId, messageGroupStyles = _a.messageGroupStyles, messages = _a.messages, readData = _a.readData, messageProps = _a.sharedMessageProps;
  var DateSeparator2 = components.DateSeparator, HeaderComponent = components.HeaderComponent, MessageSystem = components.MessageSystem, UnreadMessagesSeparator2 = components.UnreadMessagesSeparator;
  var renderedMessages = [];
  var firstMessage;
  for (var index4 = 0; index4 < messages.length; index4++) {
    var message = messages[index4];
    if (isDateSeparatorMessage(message)) {
      renderedMessages.push(import_react215.default.createElement(
        "li",
        { key: "".concat(message.date.toISOString(), "-i") },
        import_react215.default.createElement(DateSeparator2, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })
      ));
    } else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {
      renderedMessages.push(import_react215.default.createElement(
        "li",
        { key: "intro" },
        import_react215.default.createElement(HeaderComponent, null)
      ));
    } else if (message.type === "system") {
      renderedMessages.push(import_react215.default.createElement(
        "li",
        { "data-message-id": message.id, key: message.id || message.created_at },
        import_react215.default.createElement(MessageSystem, { message })
      ));
    } else {
      if (!firstMessage) {
        firstMessage = message;
      }
      var groupStyles = messageGroupStyles[message.id] || "";
      var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || "str-chat__li str-chat__li--".concat(groupStyles);
      var createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();
      var lastReadTimestamp = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read.getTime();
      var isFirstMessage = (firstMessage === null || firstMessage === void 0 ? void 0 : firstMessage.id) && firstMessage.id === message.id;
      var isNewestMessage = index4 === messages.length - 1;
      var isLastReadMessage = (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id) === message.id || !(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) && createdAtTimestamp === lastReadTimestamp;
      var isFirstUnreadMessage = (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id) === message.id || !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) && !!createdAtTimestamp && !!lastReadTimestamp && createdAtTimestamp > lastReadTimestamp && isFirstMessage;
      var showUnreadSeparatorAbove = !(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id) && isFirstUnreadMessage;
      var showUnreadSeparatorBelow = isLastReadMessage && !isNewestMessage && ((channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id) || !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages));
      renderedMessages.push(import_react215.default.createElement(
        import_react215.Fragment,
        { key: message.id || message.created_at },
        showUnreadSeparatorAbove && UnreadMessagesSeparator2 && import_react215.default.createElement(
          "li",
          { className: "str-chat__li str-chat__unread-messages-separator-wrapper" },
          import_react215.default.createElement(UnreadMessagesSeparator2, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages })
        ),
        import_react215.default.createElement(
          "li",
          { className: messageClass, "data-message-id": message.id, "data-testid": messageClass },
          import_react215.default.createElement(Message, __assign({ groupStyles: [groupStyles], lastReceivedId, message, readBy: readData[message.id] || [] }, messageProps))
        ),
        showUnreadSeparatorBelow && UnreadMessagesSeparator2 && import_react215.default.createElement(
          "li",
          { className: "str-chat__li str-chat__unread-messages-separator-wrapper" },
          import_react215.default.createElement(UnreadMessagesSeparator2, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages })
        )
      ));
    }
  }
  return renderedMessages;
}

// node_modules/stream-chat-react/dist/components/MessageList/MessageList.js
var MessageListWithContext = function(props) {
  var _a;
  var channel = props.channel, channelUnreadUiState = props.channelUnreadUiState, _b = props.disableDateSeparator, disableDateSeparator = _b === void 0 ? false : _b, groupStyles = props.groupStyles, _c = props.hideDeletedMessages, hideDeletedMessages = _c === void 0 ? false : _c, _d = props.hideNewMessageSeparator, hideNewMessageSeparator = _d === void 0 ? false : _d, _e = props.internalInfiniteScrollProps, _f = _e === void 0 ? {} : _e, _g = _f.threshold, loadMoreScrollThreshold = _g === void 0 ? DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD : _g, restInternalInfiniteScrollProps = __rest(_f, ["threshold"]), maxTimeBetweenGroupedMessages = props.maxTimeBetweenGroupedMessages, _h = props.messageActions, messageActions = _h === void 0 ? Object.keys(MESSAGE_ACTIONS) : _h, _j = props.messages, messages = _j === void 0 ? [] : _j, notifications = props.notifications, _k = props.noGroupByUser, noGroupByUser = _k === void 0 ? false : _k, _l = props.pinPermissions, pinPermissions = _l === void 0 ? defaultPinPermissions : _l, _m = props.returnAllReadData, returnAllReadData = _m === void 0 ? false : _m, _o = props.threadList, threadList = _o === void 0 ? false : _o, _p = props.unsafeHTML, unsafeHTML = _p === void 0 ? false : _p, headerPosition = props.headerPosition, read2 = props.read, _q = props.renderMessages, renderMessages = _q === void 0 ? defaultRenderMessages : _q, reviewProcessedMessage = props.reviewProcessedMessage, _r = props.messageLimit, messageLimit = _r === void 0 ? DEFAULT_NEXT_CHANNEL_PAGE_SIZE : _r, loadMoreCallback = props.loadMore, loadMoreNewerCallback = props.loadMoreNewer, _s = props.hasMoreNewer, hasMoreNewer = _s === void 0 ? false : _s, reactionDetailsSort = props.reactionDetailsSort, showUnreadNotificationAlways = props.showUnreadNotificationAlways, sortReactionDetails = props.sortReactionDetails, sortReactions = props.sortReactions, suppressAutoscroll = props.suppressAutoscroll, highlightedMessageId = props.highlightedMessageId, _t = props.jumpToLatestMessage, jumpToLatestMessage = _t === void 0 ? function() {
    return Promise.resolve();
  } : _t;
  var _u = import_react216.default.useState(null), listElement = _u[0], setListElement = _u[1];
  var _v = import_react216.default.useState(null), ulElement = _v[0], setUlElement = _v[1];
  var customClasses = useChatContext("MessageList").customClasses;
  var _w = useComponentContext("MessageList"), _x = _w.EmptyStateIndicator, EmptyStateIndicator2 = _x === void 0 ? EmptyStateIndicator : _x, _y = _w.LoadingIndicator, LoadingIndicator3 = _y === void 0 ? LoadingIndicator2 : _y, _z = _w.MessageListNotifications, MessageListNotifications2 = _z === void 0 ? MessageListNotifications : _z, _0 = _w.MessageNotification, MessageNotification2 = _0 === void 0 ? MessageNotification : _0, _1 = _w.TypingIndicator, TypingIndicator2 = _1 === void 0 ? TypingIndicator : _1, _23 = _w.UnreadMessagesNotification, UnreadMessagesNotification2 = _23 === void 0 ? UnreadMessagesNotification : _23;
  var _32 = useScrollLocationLogic({
    hasMoreNewer,
    listElement,
    loadMoreScrollThreshold,
    messages,
    scrolledUpThreshold: props.scrolledUpThreshold,
    suppressAutoscroll
  }), hasNewMessages = _32.hasNewMessages, isMessageListScrolledToBottom = _32.isMessageListScrolledToBottom, onScroll = _32.onScroll, scrollToBottom = _32.scrollToBottom, wrapperRect = _32.wrapperRect;
  var showUnreadMessagesNotification = useUnreadMessagesNotification({
    isMessageListScrolledToBottom,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages
  }).show;
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: threadList,
    unreadCount: (_a = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) !== null && _a !== void 0 ? _a : 0,
    wasMarkedUnread: !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id)
  });
  var _42 = useEnrichedMessages({
    channel,
    disableDateSeparator,
    groupStyles,
    headerPosition,
    hideDeletedMessages,
    hideNewMessageSeparator,
    maxTimeBetweenGroupedMessages,
    messages,
    noGroupByUser,
    reviewProcessedMessage
  }), messageGroupStyles = _42.messageGroupStyles, enrichedMessages = _42.messages;
  var elements = useMessageListElements({
    channelUnreadUiState,
    enrichedMessages,
    internalMessageProps: {
      additionalMessageInputProps: props.additionalMessageInputProps,
      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,
      customMessageActions: props.customMessageActions,
      disableQuotedMessages: props.disableQuotedMessages,
      formatDate: props.formatDate,
      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,
      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,
      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,
      getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,
      getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,
      getMuteUserErrorNotification: props.getMuteUserErrorNotification,
      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,
      getPinMessageErrorNotification: props.getPinMessageErrorNotification,
      Message: props.Message,
      messageActions,
      messageListRect: wrapperRect,
      onlySenderCanEdit: props.onlySenderCanEdit,
      onMentionsClick: props.onMentionsClick,
      onMentionsHover: props.onMentionsHover,
      onUserClick: props.onUserClick,
      onUserHover: props.onUserHover,
      openThread: props.openThread,
      pinPermissions,
      reactionDetailsSort,
      renderText: props.renderText,
      retrySendMessage: props.retrySendMessage,
      sortReactionDetails,
      sortReactions,
      unsafeHTML
    },
    messageGroupStyles,
    read: read2,
    renderMessages,
    returnAllReadData,
    threadList
  });
  var messageListClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.messageList) || "str-chat__list";
  var threadListClass = threadList ? (customClasses === null || customClasses === void 0 ? void 0 : customClasses.threadList) || "str-chat__list--thread str-chat__thread-list" : "";
  var loadMore = import_react216.default.useCallback(function() {
    if (loadMoreCallback) {
      loadMoreCallback(messageLimit);
    }
  }, [loadMoreCallback, messageLimit]);
  var loadMoreNewer = import_react216.default.useCallback(function() {
    if (loadMoreNewerCallback) {
      loadMoreNewerCallback(messageLimit);
    }
  }, [loadMoreNewerCallback, messageLimit]);
  var scrollToBottomFromNotification = import_react216.default.useCallback(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!hasMoreNewer) return [3, 2];
            return [4, jumpToLatestMessage()];
          case 1:
            _a2.sent();
            return [3, 3];
          case 2:
            scrollToBottom();
            _a2.label = 3;
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [scrollToBottom, hasMoreNewer]);
  import_react216.default.useLayoutEffect(function() {
    if (highlightedMessageId) {
      var element3 = ulElement === null || ulElement === void 0 ? void 0 : ulElement.querySelector("[data-message-id='".concat(highlightedMessageId, "']"));
      element3 === null || element3 === void 0 ? void 0 : element3.scrollIntoView({ block: "center" });
    }
  }, [highlightedMessageId]);
  var showEmptyStateIndicator = elements.length === 0 && !threadList;
  return import_react216.default.createElement(
    MessageListContextProvider,
    { value: { listElement, scrollToBottom } },
    import_react216.default.createElement(
      MessageListMainPanel,
      null,
      !threadList && showUnreadMessagesNotification && import_react216.default.createElement(UnreadMessagesNotification2, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages }),
      import_react216.default.createElement("div", { className: "".concat(messageListClass, " ").concat(threadListClass), onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? import_react216.default.createElement(EmptyStateIndicator2, { key: "empty-state-indicator", listType: threadList ? "thread" : "message" }) : import_react216.default.createElement(
        InfiniteScroll,
        __assign({ className: "str-chat__reverse-infinite-scroll  str-chat__message-list-scroll", "data-testid": "reverse-infinite-scroll", hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: import_react216.default.createElement("div", { className: "str-chat__list__loading", key: "loading-indicator" }, props.loadingMore && import_react216.default.createElement(LoadingIndicator3, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold }, restInternalInfiniteScrollProps),
        import_react216.default.createElement("ul", { className: "str-chat__ul", ref: setUlElement }, elements),
        import_react216.default.createElement(TypingIndicator2, { threadList }),
        import_react216.default.createElement("div", { key: "bottom" })
      ))
    ),
    import_react216.default.createElement(MessageListNotifications2, { hasNewMessages, isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification2, notifications, scrollToBottom: scrollToBottomFromNotification, threadList, unreadCount: threadList ? void 0 : channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages })
  );
};
var MessageList = function(props) {
  var _a = useChannelActionContext("MessageList"), jumpToLatestMessage = _a.jumpToLatestMessage, loadMore = _a.loadMore, loadMoreNewer = _a.loadMoreNewer;
  var _b = useChannelStateContext("MessageList"), membersPropToNotPass = _b.members, mutesPropToNotPass = _b.mutes, watchersPropToNotPass = _b.watchers, restChannelStateContext = __rest(_b, ["members", "mutes", "watchers"]);
  return import_react216.default.createElement(MessageListWithContext, __assign({ jumpToLatestMessage, loadMore, loadMoreNewer }, restChannelStateContext, props));
};

// node_modules/stream-chat-react/dist/components/MessageList/ScrollToBottomButton.js
var import_react217 = __toESM(require_react());
var UnMemoizedScrollToBottomButton = function(props) {
  var isMessageListScrolledToBottom = props.isMessageListScrolledToBottom, onClick = props.onClick, threadList = props.threadList;
  var _a = useChatContext(), activeChannel = _a.channel, client = _a.client;
  var thread = useChannelStateContext().thread;
  var _b = (0, import_react217.useState)((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.countUnread()) || 0), countUnread = _b[0], setCountUnread = _b[1];
  var _c = (0, import_react217.useState)((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0), replyCount = _c[0], setReplyCount = _c[1];
  var observedEvent = threadList ? "message.updated" : "message.new";
  (0, import_react217.useEffect)(function() {
    var handleEvent = function(event) {
      var _a2, _b2, _c2, _d, _e;
      var newMessageInAnotherChannel = event.cid !== (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid);
      var newMessageIsMine = ((_a2 = event.user) === null || _a2 === void 0 ? void 0 : _a2.id) === ((_b2 = client.user) === null || _b2 === void 0 ? void 0 : _b2.id);
      var isThreadOpen = !!thread;
      var newMessageIsReply = !!((_c2 = event.message) === null || _c2 === void 0 ? void 0 : _c2.parent_id);
      var dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;
      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {
        return;
      }
      if (event.type === "message.new") {
        setCountUnread(function(prev) {
          return prev + 1;
        });
      } else if (((_d = event.message) === null || _d === void 0 ? void 0 : _d.id) === (thread === null || thread === void 0 ? void 0 : thread.id)) {
        var newReplyCount_1 = ((_e = event.message) === null || _e === void 0 ? void 0 : _e.reply_count) || 0;
        setCountUnread(function() {
          return newReplyCount_1 - replyCount;
        });
      }
    };
    client.on(observedEvent, handleEvent);
    return function() {
      client.off(observedEvent, handleEvent);
    };
  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);
  (0, import_react217.useEffect)(function() {
    if (isMessageListScrolledToBottom) {
      setCountUnread(0);
      setReplyCount((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0);
    }
  }, [isMessageListScrolledToBottom, thread]);
  if (isMessageListScrolledToBottom)
    return null;
  return import_react217.default.createElement(
    "div",
    { className: "str-chat__jump-to-latest-message" },
    import_react217.default.createElement(
      "button",
      { "aria-live": "polite", className: "\n        str-chat__message-notification-right\n        str-chat__message-notification-scroll-to-latest\n        str-chat__circle-fab\n      ", "data-testid": "message-notification", onClick },
      import_react217.default.createElement(ArrowDown, null),
      countUnread > 0 && import_react217.default.createElement("div", { className: clsx_default("str-chat__message-notification", "str-chat__message-notification-scroll-to-latest-unread-count", "str-chat__jump-to-latest-unread-count"), "data-testid": "unread-message-notification-counter" }, countUnread)
    )
  );
};
var ScrollToBottomButton = import_react217.default.memo(UnMemoizedScrollToBottomButton);

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js
var import_react226 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useNewMessageNotification.js
var import_react218 = __toESM(require_react());
function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {
  var _a = (0, import_react218.useState)(false), newMessagesNotification = _a[0], setNewMessagesNotification = _a[1];
  var _b = (0, import_react218.useState)(true), isMessageListScrolledToBottom = _b[0], setIsMessageListScrolledToBottom = _b[1];
  var didMount = (0, import_react218.useRef)(false);
  var lastMessageId = (0, import_react218.useRef)("");
  var atBottom = (0, import_react218.useRef)(false);
  (0, import_react218.useEffect)(function() {
    var _a2;
    if (hasMoreNewer) {
      setNewMessagesNotification(true);
      return;
    }
    if (!(messages === null || messages === void 0 ? void 0 : messages.length))
      return;
    var lastMessage = messages[messages.length - 1];
    var prevMessageId = lastMessageId.current;
    lastMessageId.current = lastMessage.id || "";
    if (lastMessage.id === prevMessageId)
      return;
    if (atBottom.current)
      return;
    if (((_a2 = lastMessage.user) === null || _a2 === void 0 ? void 0 : _a2.id) !== currentUserId && didMount.current) {
      setNewMessagesNotification(true);
    }
    didMount.current = true;
  }, [currentUserId, messages, hasMoreNewer]);
  return {
    atBottom,
    isMessageListScrolledToBottom,
    newMessagesNotification,
    setIsMessageListScrolledToBottom,
    setNewMessagesNotification
  };
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/usePrependMessagesCount.js
var import_react219 = __toESM(require_react());
var STATUSES_EXCLUDED_FROM_PREPEND = {
  failed: true,
  sending: true
};
function usePrependedMessagesCount(messages, hasDateSeparator) {
  var firstRealMessageIndex = hasDateSeparator ? 1 : 0;
  var firstMessageOnFirstLoadedPage = (0, import_react219.useRef)();
  var previousFirstMessageOnFirstLoadedPage = (0, import_react219.useRef)();
  var previousNumItemsPrepended = (0, import_react219.useRef)(0);
  var numItemsPrepended = (0, import_react219.useMemo)(function() {
    var _a, _b;
    if (!messages || !messages.length) {
      previousNumItemsPrepended.current = 0;
      return 0;
    }
    var currentFirstMessage = messages === null || messages === void 0 ? void 0 : messages[firstRealMessageIndex];
    var noNewMessages = (currentFirstMessage === null || currentFirstMessage === void 0 ? void 0 : currentFirstMessage.id) === ((_a = previousFirstMessageOnFirstLoadedPage.current) === null || _a === void 0 ? void 0 : _a.id);
    var firstMsgMovedAfterMessagesInExcludedStatus = !!((currentFirstMessage === null || currentFirstMessage === void 0 ? void 0 : currentFirstMessage.status) && STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessage.status]);
    if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {
      return previousNumItemsPrepended.current;
    }
    if (!firstMessageOnFirstLoadedPage.current) {
      firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    }
    previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;
    for (var prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {
      var messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === ((_b = firstMessageOnFirstLoadedPage.current) === null || _b === void 0 ? void 0 : _b.id);
      if (messageIsFirstOnFirstLoadedPage) {
        previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;
        return previousNumItemsPrepended.current;
      }
    }
    firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    previousNumItemsPrepended.current = 0;
    return 0;
  }, [firstRealMessageIndex, messages, messages === null || messages === void 0 ? void 0 : messages.length]);
  return numItemsPrepended;
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useShouldForceScrollToBottom.js
var import_react220 = __toESM(require_react());
function useShouldForceScrollToBottom(messages, currentUserId) {
  var lastFocusedOwnMessage = (0, import_react220.useRef)("");
  var initialFocusRegistered = (0, import_react220.useRef)(false);
  function recheckForNewOwnMessage() {
    var _a;
    if (messages && messages.length > 0) {
      var lastMessage = messages[messages.length - 1];
      if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) === currentUserId && lastFocusedOwnMessage.current !== lastMessage.id) {
        lastFocusedOwnMessage.current = lastMessage.id;
        return true;
      }
    }
    return false;
  }
  (0, import_react220.useEffect)(function() {
    if (messages && messages.length && !initialFocusRegistered.current) {
      initialFocusRegistered.current = true;
      recheckForNewOwnMessage();
    }
  }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);
  return recheckForNewOwnMessage;
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useGiphyPreview.js
var import_react221 = __toESM(require_react());
var useGiphyPreview = function(separateGiphyPreview) {
  var _a = (0, import_react221.useState)(), giphyPreviewMessage = _a[0], setGiphyPreviewMessage = _a[1];
  var client = useChatContext("useGiphyPreview").client;
  (0, import_react221.useEffect)(function() {
    var handleEvent = function(event) {
      var message = event.message, user = event.user;
      if ((message === null || message === void 0 ? void 0 : message.command) === "giphy" && (user === null || user === void 0 ? void 0 : user.id) === client.userID) {
        setGiphyPreviewMessage(void 0);
      }
    };
    if (separateGiphyPreview)
      client.on("message.new", handleEvent);
    return function() {
      return client.off("message.new", handleEvent);
    };
  }, [client, separateGiphyPreview]);
  return {
    giphyPreviewMessage,
    setGiphyPreviewMessage: separateGiphyPreview ? setGiphyPreviewMessage : void 0
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useMessageSetKey.js
var import_react222 = __toESM(require_react());
var useMessageSetKey = function(_a) {
  var messages = _a.messages;
  var _b = (0, import_react222.useState)(+/* @__PURE__ */ new Date()), messageSetKey = _b[0], setMessageSetKey = _b[1];
  var firstMessageId = (0, import_react222.useRef)();
  (0, import_react222.useEffect)(function() {
    var _a2;
    var continuousSet = messages === null || messages === void 0 ? void 0 : messages.find(function(message) {
      return message.id === firstMessageId.current;
    });
    if (!continuousSet) {
      setMessageSetKey(+/* @__PURE__ */ new Date());
    }
    firstMessageId.current = (_a2 = messages === null || messages === void 0 ? void 0 : messages[0]) === null || _a2 === void 0 ? void 0 : _a2.id;
  }, [messages]);
  return {
    messageSetKey
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useScrollToBottomOnNewMessage.js
var import_react223 = __toESM(require_react());
var useScrollToBottomOnNewMessage = function(_a) {
  var messages = _a.messages, scrollToBottom = _a.scrollToBottom, scrollToLatestMessageOnFocus = _a.scrollToLatestMessageOnFocus;
  var _b = import_react223.default.useState(false), newMessagesReceivedInBackground = _b[0], setNewMessagesReceivedInBackground = _b[1];
  var resetNewMessagesReceivedInBackground = (0, import_react223.useCallback)(function() {
    setNewMessagesReceivedInBackground(false);
  }, []);
  (0, import_react223.useEffect)(function() {
    setNewMessagesReceivedInBackground(true);
  }, [messages]);
  var scrollToBottomIfConfigured = (0, import_react223.useCallback)(function(event) {
    if (!scrollToLatestMessageOnFocus || !newMessagesReceivedInBackground || event.target !== window)
      return;
    setTimeout(scrollToBottom, 100);
  }, [scrollToLatestMessageOnFocus, scrollToBottom, newMessagesReceivedInBackground]);
  (0, import_react223.useEffect)(function() {
    if (typeof window !== "undefined") {
      window.addEventListener("focus", scrollToBottomIfConfigured);
      window.addEventListener("blur", resetNewMessagesReceivedInBackground);
    }
    return function() {
      window.removeEventListener("focus", scrollToBottomIfConfigured);
      window.removeEventListener("blur", resetNewMessagesReceivedInBackground);
    };
  }, [scrollToBottomIfConfigured]);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useUnreadMessagesNotificationVirtualized.js
var import_react224 = __toESM(require_react());
var useUnreadMessagesNotificationVirtualized = function(_a) {
  var lastRead = _a.lastRead, showAlways = _a.showAlways, unreadCount = _a.unreadCount;
  var _b = (0, import_react224.useState)(false), show = _b[0], setShow = _b[1];
  var toggleShowUnreadMessagesNotification = (0, import_react224.useCallback)(function(renderedMessages) {
    if (!unreadCount)
      return;
    var firstRenderedMessage = renderedMessages[0];
    var lastRenderedMessage = renderedMessages.slice(-1)[0];
    if (!(firstRenderedMessage && lastRenderedMessage))
      return;
    var scrolledBelowSeparator = !!lastRead && new Date(firstRenderedMessage.created_at).getTime() > lastRead.getTime();
    var scrolledAboveSeparator = !!lastRead && new Date(lastRenderedMessage.created_at).getTime() < lastRead.getTime();
    setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
  }, [lastRead, showAlways, unreadCount]);
  (0, import_react224.useEffect)(function() {
    if (!unreadCount)
      setShow(false);
  }, [unreadCount]);
  return { show, toggleShowUnreadMessagesNotification };
};

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageListComponents.js
var import_lodash8 = __toESM(require_lodash());
var import_react225 = __toESM(require_react());
var PREPEND_OFFSET = Math.pow(10, 7);
function calculateItemIndex(virtuosoIndex, numItemsPrepended) {
  return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;
}
function calculateFirstItemIndex(numItemsPrepended) {
  return PREPEND_OFFSET - numItemsPrepended;
}
var makeItemsRenderedHandler = function(renderedItemsActions, processedMessages) {
  return (0, import_lodash8.default)(function(items) {
    var renderedMessages = items.map(function(item) {
      if (!item.originalIndex)
        return void 0;
      return processedMessages[calculateItemIndex(item.originalIndex, PREPEND_OFFSET)];
    }).filter(function(msg) {
      return !!msg;
    });
    renderedItemsActions.forEach(function(action) {
      return action(renderedMessages);
    });
  }, 200);
};
var Item3 = function(_a) {
  var _b;
  var _c;
  var context = _a.context, props = __rest(_a, ["context"]);
  if (!context)
    return import_react225.default.createElement(import_react225.default.Fragment, null);
  var message = context.processedMessages[calculateItemIndex(props["data-item-index"], context.numItemsPrepended)];
  var groupStyles = context.messageGroupStyles[message.id];
  return import_react225.default.createElement("div", __assign({}, props, { className: ((_c = context === null || context === void 0 ? void 0 : context.customClasses) === null || _c === void 0 ? void 0 : _c.virtualMessage) || clsx_default("str-chat__virtual-list-message-wrapper str-chat__li", (_b = {}, _b["str-chat__li--".concat(groupStyles)] = groupStyles, _b)) }));
};
var Header = function(_a) {
  var context = _a.context;
  var _b = useComponentContext("VirtualizedMessageListHeader").LoadingIndicator, LoadingIndicator3 = _b === void 0 ? LoadingIndicator2 : _b;
  if (!(context === null || context === void 0 ? void 0 : context.loadingMore))
    return null;
  return LoadingIndicator3 ? import_react225.default.createElement(
    "div",
    { className: "str-chat__virtual-list__loading" },
    import_react225.default.createElement(LoadingIndicator3, { size: 20 })
  ) : (context === null || context === void 0 ? void 0 : context.head) || null;
};
var EmptyPlaceholder = function(_a) {
  var context = _a.context;
  var _b = useComponentContext("VirtualizedMessageList").EmptyStateIndicator, EmptyStateIndicator2 = _b === void 0 ? EmptyStateIndicator : _b;
  return import_react225.default.createElement(import_react225.default.Fragment, null, EmptyStateIndicator2 && import_react225.default.createElement(EmptyStateIndicator2, { listType: (context === null || context === void 0 ? void 0 : context.threadList) ? "thread" : "message" }));
};
var Footer = function() {
  var TypingIndicator2 = useComponentContext("VirtualizedMessageList").TypingIndicator;
  return TypingIndicator2 ? import_react225.default.createElement(TypingIndicator2, { avatarSize: 24 }) : null;
};
var messageRenderer = function(virtuosoIndex, _data, virtuosoContext) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  var additionalMessageInputProps = virtuosoContext.additionalMessageInputProps, closeReactionSelectorOnClick = virtuosoContext.closeReactionSelectorOnClick, customMessageActions = virtuosoContext.customMessageActions, customMessageRenderer = virtuosoContext.customMessageRenderer, DateSeparator2 = virtuosoContext.DateSeparator, firstUnreadMessageId = virtuosoContext.firstUnreadMessageId, formatDate = virtuosoContext.formatDate, lastReadDate = virtuosoContext.lastReadDate, lastReadMessageId = virtuosoContext.lastReadMessageId, lastReceivedMessageId = virtuosoContext.lastReceivedMessageId, MessageUIComponent = virtuosoContext.Message, messageActions = virtuosoContext.messageActions, messageGroupStyles = virtuosoContext.messageGroupStyles, MessageSystem = virtuosoContext.MessageSystem, numItemsPrepended = virtuosoContext.numItemsPrepended, openThread = virtuosoContext.openThread, ownMessagesReadByOthers = virtuosoContext.ownMessagesReadByOthers, messageList = virtuosoContext.processedMessages, reactionDetailsSort = virtuosoContext.reactionDetailsSort, shouldGroupByUser = virtuosoContext.shouldGroupByUser, sortReactionDetails = virtuosoContext.sortReactionDetails, sortReactions = virtuosoContext.sortReactions, _j = virtuosoContext.unreadMessageCount, unreadMessageCount = _j === void 0 ? 0 : _j, UnreadMessagesSeparator2 = virtuosoContext.UnreadMessagesSeparator, virtuosoRef = virtuosoContext.virtuosoRef;
  var streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);
  if (customMessageRenderer) {
    return customMessageRenderer(messageList, streamMessageIndex);
  }
  var message = messageList[streamMessageIndex];
  if (!message)
    return import_react225.default.createElement("div", { style: { height: "1px" } });
  if (isDateSeparatorMessage(message)) {
    return DateSeparator2 ? import_react225.default.createElement(DateSeparator2, { date: message.date, unread: message.unread }) : null;
  }
  if (message.type === "system") {
    return MessageSystem ? import_react225.default.createElement(MessageSystem, { message }) : null;
  }
  var groupedByUser = shouldGroupByUser && streamMessageIndex > 0 && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = messageList[streamMessageIndex - 1].user) === null || _b === void 0 ? void 0 : _b.id);
  var maybePrevMessage = messageList[streamMessageIndex - 1];
  var maybeNextMessage = messageList[streamMessageIndex + 1];
  var firstOfGroup = shouldGroupByUser && (((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = maybePrevMessage === null || maybePrevMessage === void 0 ? void 0 : maybePrevMessage.user) === null || _d === void 0 ? void 0 : _d.id) || maybePrevMessage && isMessageEdited(maybePrevMessage));
  var endOfGroup = shouldGroupByUser && (((_e = message.user) === null || _e === void 0 ? void 0 : _e.id) !== ((_f = maybeNextMessage === null || maybeNextMessage === void 0 ? void 0 : maybeNextMessage.user) === null || _f === void 0 ? void 0 : _f.id) || isMessageEdited(message));
  var createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();
  var lastReadTimestamp = lastReadDate === null || lastReadDate === void 0 ? void 0 : lastReadDate.getTime();
  var isFirstMessage = streamMessageIndex === 0;
  var isNewestMessage = lastReadMessageId === lastReceivedMessageId;
  var isLastReadMessage = message.id === lastReadMessageId || !unreadMessageCount && createdAtTimestamp === lastReadTimestamp;
  var isFirstUnreadMessage = firstUnreadMessageId === message.id || !!unreadMessageCount && createdAtTimestamp && lastReadTimestamp && createdAtTimestamp > lastReadTimestamp && isFirstMessage;
  var showUnreadSeparatorAbove = !lastReadMessageId && isFirstUnreadMessage;
  var showUnreadSeparatorBelow = isLastReadMessage && !isNewestMessage && (firstUnreadMessageId || !!unreadMessageCount);
  return import_react225.default.createElement(
    import_react225.default.Fragment,
    null,
    showUnreadSeparatorAbove && import_react225.default.createElement(
      "div",
      { className: "str-chat__unread-messages-separator-wrapper" },
      import_react225.default.createElement(UnreadMessagesSeparator2, { unreadCount: unreadMessageCount })
    ),
    import_react225.default.createElement(Message, { additionalMessageInputProps, autoscrollToBottom: (_g = virtuosoRef.current) === null || _g === void 0 ? void 0 : _g.autoscrollToBottom, closeReactionSelectorOnClick, customMessageActions, endOfGroup, firstOfGroup, formatDate, groupedByUser, groupStyles: [(_h = messageGroupStyles[message.id]) !== null && _h !== void 0 ? _h : ""], lastReceivedId: lastReceivedMessageId, message, Message: MessageUIComponent, messageActions, openThread, reactionDetailsSort, readBy: ownMessagesReadByOthers[message.id] || [], sortReactionDetails, sortReactions }),
    showUnreadSeparatorBelow && import_react225.default.createElement(
      "div",
      { className: "str-chat__unread-messages-separator-wrapper" },
      import_react225.default.createElement(UnreadMessagesSeparator2, { unreadCount: unreadMessageCount })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js
function captureResizeObserverExceededError(e) {
  if (e.message === "ResizeObserver loop completed with undelivered notifications." || e.message === "ResizeObserver loop limit exceeded") {
    e.stopImmediatePropagation();
  }
}
function useCaptureResizeObserverExceededError() {
  (0, import_react226.useEffect)(function() {
    window.addEventListener("error", captureResizeObserverExceededError);
    return function() {
      window.removeEventListener("error", captureResizeObserverExceededError);
    };
  }, []);
}
function fractionalItemSize(element3) {
  return element3.getBoundingClientRect().height;
}
function findMessageIndex(messages, id) {
  return messages.findIndex(function(message) {
    return message.id === id;
  });
}
function calculateInitialTopMostItemIndex(messages, highlightedMessageId) {
  if (highlightedMessageId) {
    var index4 = findMessageIndex(messages, highlightedMessageId);
    if (index4 !== -1) {
      return { align: "center", index: index4 };
    }
  }
  return messages.length - 1;
}
var VirtualizedMessageListWithContext = function(props) {
  var _a, _b;
  var additionalMessageInputProps = props.additionalMessageInputProps, _c = props.additionalVirtuosoProps, additionalVirtuosoProps = _c === void 0 ? {} : _c, channel = props.channel, channelUnreadUiState = props.channelUnreadUiState, closeReactionSelectorOnClick = props.closeReactionSelectorOnClick, customMessageActions = props.customMessageActions, customMessageRenderer = props.customMessageRenderer, defaultItemHeight = props.defaultItemHeight, _d = props.disableDateSeparator, disableDateSeparator = _d === void 0 ? true : _d, formatDate = props.formatDate, groupStyles = props.groupStyles, hasMoreNewer = props.hasMoreNewer, head = props.head, _e = props.hideDeletedMessages, hideDeletedMessages = _e === void 0 ? false : _e, _f = props.hideNewMessageSeparator, hideNewMessageSeparator = _f === void 0 ? false : _f, highlightedMessageId = props.highlightedMessageId, jumpToLatestMessage = props.jumpToLatestMessage, loadingMore = props.loadingMore, loadMore = props.loadMore, loadMoreNewer = props.loadMoreNewer, maxTimeBetweenGroupedMessages = props.maxTimeBetweenGroupedMessages, MessageUIComponentFromProps = props.Message, messageActions = props.messageActions, _g = props.messageLimit, messageLimit = _g === void 0 ? DEFAULT_NEXT_CHANNEL_PAGE_SIZE : _g, messages = props.messages, notifications = props.notifications, openThread = props.openThread, _h = props.overscan, overscan = _h === void 0 ? 0 : _h, read2 = props.read, _j = props.returnAllReadData, returnAllReadData = _j === void 0 ? false : _j, reviewProcessedMessage = props.reviewProcessedMessage, scrollSeekPlaceHolder = props.scrollSeekPlaceHolder, _k = props.scrollToLatestMessageOnFocus, scrollToLatestMessageOnFocus = _k === void 0 ? false : _k, _l = props.separateGiphyPreview, separateGiphyPreview = _l === void 0 ? false : _l, _m = props.shouldGroupByUser, shouldGroupByUser = _m === void 0 ? false : _m, showUnreadNotificationAlways = props.showUnreadNotificationAlways, reactionDetailsSort = props.reactionDetailsSort, sortReactionDetails = props.sortReactionDetails, sortReactions = props.sortReactions, _o = props.stickToBottomScrollBehavior, stickToBottomScrollBehavior = _o === void 0 ? "smooth" : _o, suppressAutoscroll = props.suppressAutoscroll, threadList = props.threadList;
  var virtuosoComponentsFromProps = additionalVirtuosoProps.components, overridingVirtuosoProps = __rest(additionalVirtuosoProps, ["components"]);
  useCaptureResizeObserverExceededError();
  var _p = useComponentContext("VirtualizedMessageList"), DateSeparator2 = _p.DateSeparator, _q = _p.GiphyPreviewMessage, GiphyPreviewMessage2 = _q === void 0 ? GiphyPreviewMessage : _q, _r = _p.MessageListNotifications, MessageListNotifications2 = _r === void 0 ? MessageListNotifications : _r, _s = _p.MessageNotification, MessageNotification2 = _s === void 0 ? MessageNotification : _s, MessageSystem = _p.MessageSystem, _t = _p.UnreadMessagesNotification, UnreadMessagesNotification2 = _t === void 0 ? UnreadMessagesNotification : _t, UnreadMessagesSeparator2 = _p.UnreadMessagesSeparator, _u = _p.VirtualMessage, MessageUIComponentFromContext = _u === void 0 ? MessageSimple : _u;
  var MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;
  var _v = useChatContext("VirtualizedMessageList"), client = _v.client, customClasses = _v.customClasses;
  var virtuoso = (0, import_react226.useRef)(null);
  var lastRead = (0, import_react226.useMemo)(function() {
    var _a2;
    return (_a2 = channel.lastRead) === null || _a2 === void 0 ? void 0 : _a2.call(channel);
  }, [channel]);
  var _w = useUnreadMessagesNotificationVirtualized({
    lastRead: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: (_a = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) !== null && _a !== void 0 ? _a : 0
  }), showUnreadMessagesNotification = _w.show, toggleShowUnreadMessagesNotification = _w.toggleShowUnreadMessagesNotification;
  var _x = useGiphyPreview(separateGiphyPreview), giphyPreviewMessage = _x.giphyPreviewMessage, setGiphyPreviewMessage = _x.setGiphyPreviewMessage;
  var processedMessages = (0, import_react226.useMemo)(function() {
    if (typeof messages === "undefined") {
      return [];
    }
    if (disableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator && !separateGiphyPreview) {
      return messages;
    }
    return processMessages({
      enableDateSeparator: !disableDateSeparator,
      hideDeletedMessages,
      hideNewMessageSeparator,
      lastRead,
      messages,
      reviewProcessedMessage,
      setGiphyPreviewMessage,
      userId: client.userID || ""
    });
  }, [
    disableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    messages === null || messages === void 0 ? void 0 : messages.length,
    client.userID
  ]);
  var ownMessagesReadByOthers = useLastReadData({
    messages: processedMessages,
    read: read2,
    returnAllReadData,
    userID: client.userID
  });
  var lastReceivedMessageId = (0, import_react226.useMemo)(function() {
    return getLastReceived(processedMessages);
  }, [
    processedMessages
  ]);
  var groupStylesFn = groupStyles || getGroupStyles;
  var messageGroupStyles = (0, import_react226.useMemo)(
    function() {
      return processedMessages.reduce(function(acc, message, i) {
        var style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);
        if (style)
          acc[message.id] = style;
        return acc;
      }, {});
    },
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [maxTimeBetweenGroupedMessages, processedMessages.length, shouldGroupByUser, groupStylesFn]
  );
  var _y = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer), atBottom = _y.atBottom, isMessageListScrolledToBottom = _y.isMessageListScrolledToBottom, newMessagesNotification = _y.newMessagesNotification, setIsMessageListScrolledToBottom = _y.setIsMessageListScrolledToBottom, setNewMessagesNotification = _y.setNewMessagesNotification;
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: !!threadList,
    unreadCount: (_b = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) !== null && _b !== void 0 ? _b : 0,
    wasMarkedUnread: !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id)
  });
  var scrollToBottom = (0, import_react226.useCallback)(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!hasMoreNewer) return [3, 2];
            return [4, jumpToLatestMessage()];
          case 1:
            _a2.sent();
            return [
              2
              /*return*/
            ];
          case 2:
            if (virtuoso.current) {
              virtuoso.current.scrollToIndex(processedMessages.length - 1);
            }
            setNewMessagesNotification(false);
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [
    virtuoso,
    processedMessages,
    setNewMessagesNotification,
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    processedMessages.length,
    hasMoreNewer,
    jumpToLatestMessage
  ]);
  useScrollToBottomOnNewMessage({ messages, scrollToBottom, scrollToLatestMessageOnFocus });
  var numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);
  var messageSetKey = useMessageSetKey({ messages }).messageSetKey;
  var shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);
  var handleItemsRendered = (0, import_react226.useMemo)(function() {
    return makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages);
  }, [processedMessages, toggleShowUnreadMessagesNotification]);
  var followOutput = function(isAtBottom) {
    if (hasMoreNewer || suppressAutoscroll) {
      return false;
    }
    if (shouldForceScrollToBottom()) {
      return isAtBottom ? stickToBottomScrollBehavior : "auto";
    }
    return isAtBottom ? stickToBottomScrollBehavior : false;
  };
  var computeItemKey = (0, import_react226.useCallback)(function(index4, _23, _a2) {
    var numItemsPrepended2 = _a2.numItemsPrepended, processedMessages2 = _a2.processedMessages;
    return processedMessages2[calculateItemIndex(index4, numItemsPrepended2)].id;
  }, []);
  var atBottomStateChange = function(isAtBottom) {
    atBottom.current = isAtBottom;
    setIsMessageListScrolledToBottom(isAtBottom);
    if (isAtBottom) {
      loadMoreNewer === null || loadMoreNewer === void 0 ? void 0 : loadMoreNewer(messageLimit);
      setNewMessagesNotification === null || setNewMessagesNotification === void 0 ? void 0 : setNewMessagesNotification(false);
    }
  };
  var atTopStateChange = function(isAtTop) {
    if (isAtTop) {
      loadMore === null || loadMore === void 0 ? void 0 : loadMore(messageLimit);
    }
  };
  (0, import_react226.useEffect)(function() {
    var scrollTimeout;
    if (highlightedMessageId) {
      var index_1 = findMessageIndex(processedMessages, highlightedMessageId);
      if (index_1 !== -1) {
        scrollTimeout = setTimeout(function() {
          var _a2;
          (_a2 = virtuoso.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToIndex({ align: "center", index: index_1 });
        }, 0);
      }
    }
    return function() {
      clearTimeout(scrollTimeout);
    };
  }, [highlightedMessageId, processedMessages]);
  if (!processedMessages)
    return null;
  return import_react226.default.createElement(
    import_react226.default.Fragment,
    null,
    import_react226.default.createElement(
      MessageListMainPanel,
      null,
      !threadList && showUnreadMessagesNotification && import_react226.default.createElement(UnreadMessagesNotification2, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages }),
      import_react226.default.createElement(
        "div",
        { className: (customClasses === null || customClasses === void 0 ? void 0 : customClasses.virtualizedMessageList) || "str-chat__virtual-list" },
        import_react226.default.createElement(ln, __assign({ atBottomStateChange, atBottomThreshold: 100, atTopStateChange, atTopThreshold: 100, className: "str-chat__message-list-scroll", components: __assign({ EmptyPlaceholder, Footer, Header, Item: Item3 }, virtuosoComponentsFromProps), computeItemKey, context: {
          additionalMessageInputProps,
          closeReactionSelectorOnClick,
          customClasses,
          customMessageActions,
          customMessageRenderer,
          DateSeparator: DateSeparator2,
          firstUnreadMessageId: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id,
          formatDate,
          head,
          lastReadDate: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read,
          lastReadMessageId: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id,
          lastReceivedMessageId,
          loadingMore,
          Message: MessageUIComponent,
          messageActions,
          messageGroupStyles,
          MessageSystem,
          numItemsPrepended,
          openThread,
          ownMessagesReadByOthers,
          processedMessages,
          reactionDetailsSort,
          shouldGroupByUser,
          sortReactionDetails,
          sortReactions,
          threadList,
          unreadMessageCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages,
          UnreadMessagesSeparator: UnreadMessagesSeparator2,
          virtuosoRef: virtuoso
        }, firstItemIndex: calculateFirstItemIndex(numItemsPrepended), followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: messageRenderer, itemSize: fractionalItemSize, itemsRendered: handleItemsRendered, key: messageSetKey, overscan, ref: virtuoso, style: { overflowX: "hidden" }, totalCount: processedMessages.length }, overridingVirtuosoProps, scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}, defaultItemHeight ? { defaultItemHeight } : {}))
      )
    ),
    import_react226.default.createElement(MessageListNotifications2, { hasNewMessages: newMessagesNotification, isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification2, notifications, scrollToBottom, threadList, unreadCount: threadList ? void 0 : channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages }),
    giphyPreviewMessage && import_react226.default.createElement(GiphyPreviewMessage2, { message: giphyPreviewMessage })
  );
};
function VirtualizedMessageList(props) {
  var _a = useChannelActionContext("VirtualizedMessageList"), jumpToLatestMessage = _a.jumpToLatestMessage, loadMore = _a.loadMore, loadMoreNewer = _a.loadMoreNewer;
  var _b = useChannelStateContext("VirtualizedMessageList"), channel = _b.channel, channelUnreadUiState = _b.channelUnreadUiState, hasMore = _b.hasMore, hasMoreNewer = _b.hasMoreNewer, highlightedMessageId = _b.highlightedMessageId, loadingMore = _b.loadingMore, loadingMoreNewer = _b.loadingMoreNewer, contextMessages = _b.messages, notifications = _b.notifications, read2 = _b.read, suppressAutoscroll = _b.suppressAutoscroll;
  var messages = props.messages || contextMessages;
  return import_react226.default.createElement(VirtualizedMessageListWithContext, __assign({ channel, channelUnreadUiState, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId, jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore, loadMoreNewer, messages, notifications, read: read2, suppressAutoscroll }, props));
}

// node_modules/stream-chat-react/dist/components/Channel/hooks/useChannelContainerClasses.js
var useChannelContainerClasses = function(_a) {
  var _b, _c, _d;
  var customClasses = _a.customClasses;
  var useImageFlagEmojisOnWindows = useChatContext("Channel").useImageFlagEmojisOnWindows;
  return {
    channelClass: (_b = customClasses === null || customClasses === void 0 ? void 0 : customClasses.channel) !== null && _b !== void 0 ? _b : "str-chat-channel str-chat__channel",
    chatClass: (_c = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) !== null && _c !== void 0 ? _c : "str-chat",
    chatContainerClass: (_d = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chatContainer) !== null && _d !== void 0 ? _d : "str-chat__container",
    windowsEmojiClass: useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/) ? "str-chat--windows-flags" : ""
  };
};

// node_modules/stream-chat-react/dist/components/Channel/utils.js
var makeAddNotifications = function(setNotifications, notificationTimeouts) {
  return function(text5, type) {
    if (typeof text5 !== "string" || type !== "success" && type !== "error") {
      return;
    }
    var id = nanoid();
    setNotifications(function(prevNotifications) {
      return __spreadArray(__spreadArray([], prevNotifications, true), [{ id, text: text5, type }], false);
    });
    var timeout = setTimeout(function() {
      return setNotifications(function(prevNotifications) {
        return prevNotifications.filter(function(notification) {
          return notification.id !== id;
        });
      });
    }, 5e3);
    notificationTimeouts.push(timeout);
  };
};
var findInMsgSetById = function(targetId, msgSet) {
  for (var i = msgSet.length - 1; i >= 0; i--) {
    var item = msgSet[i];
    if (item.id === targetId) {
      return {
        index: i,
        target: item
      };
    }
  }
  return {
    index: -1
  };
};
var findInMsgSetByDate = function(targetDate, msgSet, exact) {
  var _a, _b;
  if (exact === void 0) {
    exact = false;
  }
  var targetTimestamp = targetDate.getTime();
  var left2 = 0;
  var middle = 0;
  var right2 = msgSet.length - 1;
  while (left2 <= right2) {
    middle = Math.floor((right2 + left2) / 2);
    var middleTimestamp = new Date(msgSet[middle].created_at).getTime();
    var middleLeftTimestamp = ((_a = msgSet[middle - 1]) === null || _a === void 0 ? void 0 : _a.created_at) && new Date(msgSet[middle - 1].created_at).getTime();
    var middleRightTimestamp = ((_b = msgSet[middle + 1]) === null || _b === void 0 ? void 0 : _b.created_at) && new Date(msgSet[middle + 1].created_at).getTime();
    if (middleTimestamp === targetTimestamp || middleLeftTimestamp && middleRightTimestamp && middleLeftTimestamp < targetTimestamp && targetTimestamp < middleRightTimestamp) {
      return { index: middle, target: msgSet[middle] };
    }
    if (middleTimestamp < targetTimestamp)
      left2 = middle + 1;
    else
      right2 = middle - 1;
  }
  if (!exact || new Date(msgSet[left2].created_at).getTime() === targetTimestamp) {
    return { index: left2, target: msgSet[left2] };
  }
  return { index: -1 };
};

// node_modules/stream-chat-react/dist/utils/generateRandomId.js
var generateRandomId = nanoid;

// node_modules/stream-chat-react/dist/utils/getChannel.js
var WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};
var getChannel = function(_a) {
  var channel = _a.channel, client = _a.client, id = _a.id, members = _a.members, options2 = _a.options, type = _a.type;
  return __awaiter(void 0, void 0, void 0, function() {
    var theChannel, originalCid, queryPromise;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (!channel && !type) {
            throw new Error("Channel or channel type have to be provided to query a channel.");
          }
          theChannel = channel || client.channel(type, id, { members });
          originalCid = (theChannel === null || theChannel === void 0 ? void 0 : theChannel.id) ? theChannel.cid : members && members.length ? generateChannelTempCid(theChannel.type, members) : void 0;
          if (!originalCid) {
            throw new Error("Channel ID or channel members array have to be provided to query a channel.");
          }
          queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
          if (!queryPromise) return [3, 2];
          return [4, queryPromise];
        case 1:
          _b.sent();
          return [3, 4];
        case 2:
          WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = theChannel.watch(options2);
          return [4, WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid]];
        case 3:
          _b.sent();
          delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
          _b.label = 4;
        case 4:
          return [2, theChannel];
      }
    });
  });
};
var generateChannelTempCid = function(channelType, members) {
  if (!members)
    return;
  var membersStr = __spreadArray([], members, true).sort().join(",");
  return "".concat(channelType, ":!members-").concat(membersStr);
};

// node_modules/stream-chat-react/dist/components/Attachment/attachment-sizing.js
var getImageAttachmentConfiguration = function(attachment, element3) {
  var newUrl = void 0;
  var urlToTest = attachment.image_url || attachment.thumb_url || "";
  if (test(urlToTest, "url")) {
    var url = new URL(urlToTest);
    var resizeDimensions = getSizingRestrictions(url, element3);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    newUrl = url.href;
  }
  return {
    url: newUrl || ""
  };
};
var getVideoAttachmentConfiguration = function(attachment, element3, shouldGenerateVideoThumbnail) {
  var thumbUrl = void 0;
  if (attachment.thumb_url && shouldGenerateVideoThumbnail && test(attachment.thumb_url, "url")) {
    var url = new URL(attachment.thumb_url);
    var resizeDimensions = getSizingRestrictions(url, element3);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    thumbUrl = url.href;
  }
  return {
    thumbUrl,
    url: attachment.asset_url || ""
  };
};
var getSizingRestrictions = function(url, htmlElement) {
  var urlParams = url.searchParams;
  var originalHeight = Number(urlParams.get("oh")) || 1;
  var originalWidth = Number(urlParams.get("ow")) || 1;
  var cssSizeRestriction = getCSSSizeRestrictions(htmlElement);
  var resizeDimensions;
  if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) && cssSizeRestriction.maxWidth) {
    resizeDimensions = getResizeDimensions(
      originalHeight,
      originalWidth,
      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
      cssSizeRestriction.maxHeight || cssSizeRestriction.height,
      cssSizeRestriction.maxWidth
    );
  } else {
    resizeDimensions = void 0;
  }
  return resizeDimensions;
};
var getResizeDimensions = function(originalHeight, originalWidth, maxHeight, maxWidth) {
  return {
    height: Math.round(Math.max(maxHeight, maxWidth / originalWidth * originalHeight)),
    width: Math.round(Math.max(maxHeight, maxWidth / originalHeight * originalWidth))
  };
};
var getCSSSizeRestrictions = function(htmlElement) {
  var computedStylesheet = getComputedStyle(htmlElement);
  var height = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("height"));
  var maxHeight = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-height"));
  var maxWidth = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-width"));
  if (!((height || maxHeight) && maxWidth)) {
    console.warn("Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/react/message-components/attachment/#image-and-video-sizing");
  }
  return { height, maxHeight, maxWidth };
};
var getValueRepresentationOfCSSProperty = function(property) {
  if (!property.endsWith("px")) {
    return void 0;
  }
  var number2 = parseFloat(property);
  return isNaN(number2) ? void 0 : number2;
};
var addResizingParamsToUrl = function(resizeDimensions, url) {
  url.searchParams.set("h", resizeDimensions.height.toString());
  url.searchParams.set("w", resizeDimensions.width.toString());
};

// node_modules/stream-chat-react/dist/components/EventComponent/EventComponent.js
var import_react227 = __toESM(require_react());
var UnMemoizedEventComponent = function(props) {
  var _a, _b, _c;
  var calendar3 = props.calendar, calendarFormats = props.calendarFormats, _d = props.format, format = _d === void 0 ? "dddd L" : _d, _e = props.Avatar, Avatar2 = _e === void 0 ? Avatar : _e, message = props.message;
  var _f = useTranslationContext("EventComponent"), t2 = _f.t, tDateTimeParser = _f.tDateTimeParser;
  var _g = message.created_at, created_at = _g === void 0 ? "" : _g, event = message.event, text5 = message.text, type = message.type;
  var getDateOptions = { messageCreatedAt: created_at.toString(), tDateTimeParser };
  if (type === "system")
    return import_react227.default.createElement(
      "div",
      { className: "str-chat__message--system", "data-testid": "message-system" },
      import_react227.default.createElement(
        "div",
        { className: "str-chat__message--system__text" },
        import_react227.default.createElement("div", { className: "str-chat__message--system__line" }),
        import_react227.default.createElement("p", null, text5),
        import_react227.default.createElement("div", { className: "str-chat__message--system__line" })
      ),
      import_react227.default.createElement(
        "div",
        { className: "str-chat__message--system__date" },
        import_react227.default.createElement("strong", null, getDateString(__assign(__assign({}, getDateOptions), { calendar: calendar3, calendarFormats, format, t: t2, timestampTranslationKey: "timestamp/SystemMessage" })))
      )
    );
  if ((event === null || event === void 0 ? void 0 : event.type) === "member.removed" || (event === null || event === void 0 ? void 0 : event.type) === "member.added") {
    var name_1 = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = event.user) === null || _b === void 0 ? void 0 : _b.id);
    var sentence = "".concat(name_1, " ").concat(event.type === "member.added" ? "has joined the chat" : "was removed from the chat");
    return import_react227.default.createElement(
      "div",
      { className: "str-chat__event-component__channel-event" },
      import_react227.default.createElement(Avatar2, { image: (_c = event.user) === null || _c === void 0 ? void 0 : _c.image, name: name_1, user: event.user }),
      import_react227.default.createElement(
        "div",
        { className: "str-chat__event-component__channel-event__content" },
        import_react227.default.createElement("em", { className: "str-chat__event-component__channel-event__sentence" }, sentence),
        import_react227.default.createElement("div", { className: "str-chat__event-component__channel-event__date" }, getDateString(__assign(__assign({}, getDateOptions), { format: "LT" })))
      )
    );
  }
  return null;
};
var EventComponent = import_react227.default.memo(UnMemoizedEventComponent);

// node_modules/stream-chat-react/dist/components/DateSeparator/DateSeparator.js
var import_react228 = __toESM(require_react());
var UnMemoizedDateSeparator = function(props) {
  var _a = props.calendar, calendar3 = _a === void 0 ? true : _a, messageCreatedAt = props.date, formatDate = props.formatDate, _b = props.position, position3 = _b === void 0 ? "right" : _b, unread = props.unread, restTimestampFormatterOptions = __rest(props, ["calendar", "date", "formatDate", "position", "unread"]);
  var _c = useTranslationContext("DateSeparator"), t2 = _c.t, tDateTimeParser = _c.tDateTimeParser;
  var formattedDate = getDateString(__assign(__assign({ calendar: calendar3 }, restTimestampFormatterOptions), { formatDate, messageCreatedAt, t: t2, tDateTimeParser, timestampTranslationKey: "timestamp/DateSeparator" }));
  return import_react228.default.createElement(
    "div",
    { className: "str-chat__date-separator", "data-testid": "date-separator" },
    (position3 === "right" || position3 === "center") && import_react228.default.createElement("hr", { className: "str-chat__date-separator-line" }),
    import_react228.default.createElement("div", { className: "str-chat__date-separator-date" }, unread ? "".concat(t2("New"), " - ").concat(formattedDate) : formattedDate),
    (position3 === "left" || position3 === "center") && import_react228.default.createElement("hr", { className: "str-chat__date-separator-line" })
  );
};
var DateSeparator = import_react228.default.memo(UnMemoizedDateSeparator);

// node_modules/stream-chat-react/dist/components/Channel/Channel.js
var isUserResponseArray = function(output2) {
  var _a;
  return ((_a = output2[0]) === null || _a === void 0 ? void 0 : _a.id) != null;
};
var UnMemoizedChannel = function(props) {
  var propsChannel = props.channel, _a = props.EmptyPlaceholder, EmptyPlaceholder2 = _a === void 0 ? null : _a, LoadingErrorIndicator2 = props.LoadingErrorIndicator, _b = props.LoadingIndicator, LoadingIndicator3 = _b === void 0 ? LoadingChannel : _b;
  var _c = useChatContext("Channel"), contextChannel = _c.channel, channelsQueryState = _c.channelsQueryState, customClasses = _c.customClasses, theme = _c.theme;
  var _d = useChannelContainerClasses({
    customClasses
  }), channelClass = _d.channelClass, chatClass = _d.chatClass;
  var channel = propsChannel || contextChannel;
  var className = clsx_default(chatClass, theme, channelClass);
  if (channelsQueryState.queryInProgress === "reload" && LoadingIndicator3) {
    return import_react229.default.createElement(
      "div",
      { className },
      import_react229.default.createElement(LoadingIndicator3, null)
    );
  }
  if (channelsQueryState.error && LoadingErrorIndicator2) {
    return import_react229.default.createElement(
      "div",
      { className },
      import_react229.default.createElement(LoadingErrorIndicator2, { error: channelsQueryState.error })
    );
  }
  if (!(channel === null || channel === void 0 ? void 0 : channel.cid)) {
    return import_react229.default.createElement("div", { className }, EmptyPlaceholder2);
  }
  return import_react229.default.createElement(ChannelInner, __assign({}, props, { channel, key: channel.cid }));
};
var ChannelInner = function(props) {
  var _a;
  var acceptedFiles = props.acceptedFiles, activeUnreadHandler = props.activeUnreadHandler, channel = props.channel, propChannelQueryOptions = props.channelQueryOptions, children = props.children, doDeleteMessageRequest = props.doDeleteMessageRequest, doMarkReadRequest = props.doMarkReadRequest, doSendMessageRequest = props.doSendMessageRequest, doUpdateMessageRequest = props.doUpdateMessageRequest, _b = props.dragAndDropWindow, dragAndDropWindow = _b === void 0 ? false : _b, enrichURLForPreviewConfig = props.enrichURLForPreviewConfig, _c = props.initializeOnMount, initializeOnMount = _c === void 0 ? true : _c, _d = props.LoadingErrorIndicator, LoadingErrorIndicator2 = _d === void 0 ? LoadingErrorIndicator : _d, _e = props.LoadingIndicator, LoadingIndicator3 = _e === void 0 ? LoadingChannel : _e, _f = props.markReadOnMount, markReadOnMount = _f === void 0 ? true : _f, maxNumberOfFiles = props.maxNumberOfFiles, _g = props.multipleUploads, multipleUploads = _g === void 0 ? true : _g, onMentionsClick = props.onMentionsClick, onMentionsHover = props.onMentionsHover, _h = props.optionalMessageInputProps, optionalMessageInputProps = _h === void 0 ? {} : _h, skipMessageDataMemoization = props.skipMessageDataMemoization;
  var channelQueryOptions = (0, import_react229.useMemo)(function() {
    return (0, import_lodash10.default)(propChannelQueryOptions, {
      messages: { limit: DEFAULT_INITIAL_CHANNEL_PAGE_SIZE }
    });
  }, [propChannelQueryOptions]);
  var _j = useChatContext("Channel"), client = _j.client, customClasses = _j.customClasses, latestMessageDatesByChannels = _j.latestMessageDatesByChannels, mutes = _j.mutes, theme = _j.theme;
  var t2 = useTranslationContext("Channel").t;
  var _k = useChannelContainerClasses({ customClasses }), channelClass = _k.channelClass, chatClass = _k.chatClass, chatContainerClass = _k.chatContainerClass, windowsEmojiClass = _k.windowsEmojiClass;
  var _l = (0, import_react229.useState)(channel.getConfig()), channelConfig = _l[0], setChannelConfig = _l[1];
  var _m = (0, import_react229.useState)([]), notifications = _m[0], setNotifications = _m[1];
  var _o = (0, import_react229.useState)(), quotedMessage = _o[0], setQuotedMessage = _o[1];
  var _p = (0, import_react229.useState)(), channelUnreadUiState = _p[0], _setChannelUnreadUiState = _p[1];
  var notificationTimeouts = (0, import_react229.useRef)([]);
  var _q = (0, import_react229.useReducer)(channelReducer, __assign(__assign({}, initialState2), { hasMore: channel.state.messagePagination.hasPrev, loading: !channel.initialized })), state = _q[0], dispatch = _q[1];
  var isMounted = useIsMounted();
  var originalTitle = (0, import_react229.useRef)("");
  var lastRead = (0, import_react229.useRef)();
  var online = (0, import_react229.useRef)(true);
  var channelCapabilitiesArray = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.own_capabilities;
  var throttledCopyStateFromChannel = (0, import_lodash11.default)(function() {
    return dispatch({ channel, type: "copyStateFromChannelOnEvent" });
  }, 500, {
    leading: true,
    trailing: true
  });
  var setChannelUnreadUiState = (0, import_react229.useMemo)(function() {
    return (0, import_lodash11.default)(_setChannelUnreadUiState, 200, {
      leading: true,
      trailing: false
    });
  }, []);
  var markRead = (0, import_react229.useMemo)(function() {
    return (0, import_lodash11.default)(function(options2) {
      return __awaiter(void 0, void 0, void 0, function() {
        var _a2, updateChannelUiUnreadState, markReadResponse, e_1;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              _a2 = (options2 !== null && options2 !== void 0 ? options2 : {}).updateChannelUiUnreadState, updateChannelUiUnreadState = _a2 === void 0 ? true : _a2;
              if (channel.disconnected || !(channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events)) {
                return [
                  2
                  /*return*/
                ];
              }
              lastRead.current = /* @__PURE__ */ new Date();
              _b2.label = 1;
            case 1:
              _b2.trys.push([1, 5, , 6]);
              if (!doMarkReadRequest) return [3, 2];
              doMarkReadRequest(channel, updateChannelUiUnreadState ? setChannelUnreadUiState : void 0);
              return [3, 4];
            case 2:
              return [4, channel.markRead()];
            case 3:
              markReadResponse = _b2.sent();
              if (updateChannelUiUnreadState && markReadResponse) {
                _setChannelUnreadUiState({
                  last_read: lastRead.current,
                  last_read_message_id: markReadResponse.event.last_read_message_id,
                  unread_messages: 0
                });
              }
              _b2.label = 4;
            case 4:
              if (activeUnreadHandler) {
                activeUnreadHandler(0, originalTitle.current);
              } else if (originalTitle.current) {
                document.title = originalTitle.current;
              }
              return [3, 6];
            case 5:
              e_1 = _b2.sent();
              console.error(t2("Failed to mark channel as read"));
              return [3, 6];
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, 500, { leading: true, trailing: false });
  }, [activeUnreadHandler, channel, channelConfig, doMarkReadRequest, setChannelUnreadUiState, t2]);
  var handleEvent = function(event) {
    return __awaiter(void 0, void 0, void 0, function() {
      var mainChannelUpdated, unread, messageDate, cid, oldestID;
      var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _j2;
      return __generator(this, function(_k2) {
        switch (_k2.label) {
          case 0:
            if (event.message) {
              dispatch({
                channel,
                message: event.message,
                type: "updateThreadOnEvent"
              });
            }
            if (event.type === "user.watching.start" || event.type === "user.watching.stop")
              return [
                2
                /*return*/
              ];
            if (event.type === "typing.start" || event.type === "typing.stop") {
              return [2, dispatch({ channel, type: "setTyping" })];
            }
            if (event.type === "connection.changed" && typeof event.online === "boolean") {
              online.current = event.online;
            }
            if (event.type === "message.new") {
              mainChannelUpdated = !((_a2 = event.message) === null || _a2 === void 0 ? void 0 : _a2.parent_id) || ((_b2 = event.message) === null || _b2 === void 0 ? void 0 : _b2.show_in_channel);
              if (mainChannelUpdated) {
                if (document.hidden && (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events) && !channel.muteStatus().muted) {
                  unread = channel.countUnread(lastRead.current);
                  if (activeUnreadHandler) {
                    activeUnreadHandler(unread, originalTitle.current);
                  } else {
                    document.title = "(".concat(unread, ") ").concat(originalTitle.current);
                  }
                }
              }
              if (((_d2 = (_c2 = event.message) === null || _c2 === void 0 ? void 0 : _c2.user) === null || _d2 === void 0 ? void 0 : _d2.id) === client.userID && ((_e2 = event === null || event === void 0 ? void 0 : event.message) === null || _e2 === void 0 ? void 0 : _e2.created_at) && ((_f2 = event === null || event === void 0 ? void 0 : event.message) === null || _f2 === void 0 ? void 0 : _f2.cid)) {
                messageDate = new Date(event.message.created_at);
                cid = event.message.cid;
                if (!latestMessageDatesByChannels[cid] || latestMessageDatesByChannels[cid].getTime() < messageDate.getTime()) {
                  latestMessageDatesByChannels[cid] = messageDate;
                }
              }
            }
            if (!(event.type === "user.deleted")) return [3, 2];
            oldestID = (_j2 = (_h2 = (_g2 = channel.state) === null || _g2 === void 0 ? void 0 : _g2.messages) === null || _h2 === void 0 ? void 0 : _h2[0]) === null || _j2 === void 0 ? void 0 : _j2.id;
            return [4, channel.query({
              messages: { id_lt: oldestID, limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE },
              watchers: { limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE }
            })];
          case 1:
            _k2.sent();
            _k2.label = 2;
          case 2:
            if (event.type === "notification.mark_unread")
              _setChannelUnreadUiState(function(prev) {
                var _a3;
                if (!(event.last_read_at && event.user))
                  return prev;
                return {
                  first_unread_message_id: event.first_unread_message_id,
                  last_read: new Date(event.last_read_at),
                  last_read_message_id: event.last_read_message_id,
                  unread_messages: (_a3 = event.unread_messages) !== null && _a3 !== void 0 ? _a3 : 0
                };
              });
            if (event.type === "channel.truncated" && event.cid === channel.cid) {
              _setChannelUnreadUiState(void 0);
            }
            throttledCopyStateFromChannel();
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  (0, import_react229.useLayoutEffect)(function() {
    var errored = false;
    var done = false;
    (function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var members, _i, _a2, member, userId, _b2, user, user_id, config, e_2, _c2, user, ownReadState;
        var _d2, _e2;
        return __generator(this, function(_f2) {
          switch (_f2.label) {
            case 0:
              if (!(!channel.initialized && initializeOnMount)) return [3, 4];
              _f2.label = 1;
            case 1:
              _f2.trys.push([1, 3, , 4]);
              members = [];
              if (!channel.id && ((_d2 = channel.data) === null || _d2 === void 0 ? void 0 : _d2.members)) {
                for (_i = 0, _a2 = channel.data.members; _i < _a2.length; _i++) {
                  member = _a2[_i];
                  userId = void 0;
                  if (typeof member === "string") {
                    userId = member;
                  } else if (typeof member === "object") {
                    _b2 = member, user = _b2.user, user_id = _b2.user_id;
                    userId = user_id || (user === null || user === void 0 ? void 0 : user.id);
                  }
                  if (userId) {
                    members.push(userId);
                  }
                }
              }
              return [4, getChannel({ channel, client, members, options: channelQueryOptions })];
            case 2:
              _f2.sent();
              config = channel.getConfig();
              setChannelConfig(config);
              return [3, 4];
            case 3:
              e_2 = _f2.sent();
              dispatch({ error: e_2, type: "setError" });
              errored = true;
              return [3, 4];
            case 4:
              done = true;
              originalTitle.current = document.title;
              if (!errored) {
                dispatch({
                  channel,
                  hasMore: channel.state.messagePagination.hasPrev,
                  type: "initStateFromChannel"
                });
                if (((_e2 = client.user) === null || _e2 === void 0 ? void 0 : _e2.id) && channel.state.read[client.user.id]) {
                  _c2 = channel.state.read[client.user.id], user = _c2.user, ownReadState = __rest(_c2, ["user"]);
                  _setChannelUnreadUiState(ownReadState);
                }
                if (channel.countUnread() > 0 && markReadOnMount)
                  markRead({ updateChannelUiUnreadState: false });
                client.on("connection.changed", handleEvent);
                client.on("connection.recovered", handleEvent);
                client.on("user.updated", handleEvent);
                client.on("user.deleted", handleEvent);
                channel.on(handleEvent);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    })();
    var notificationTimeoutsRef = notificationTimeouts.current;
    return function() {
      if (errored || !done)
        return;
      channel === null || channel === void 0 ? void 0 : channel.off(handleEvent);
      client.off("connection.changed", handleEvent);
      client.off("connection.recovered", handleEvent);
      client.off("user.deleted", handleEvent);
      notificationTimeoutsRef.forEach(clearTimeout);
    };
  }, [
    channel.cid,
    channelQueryOptions,
    doMarkReadRequest,
    channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events,
    initializeOnMount
  ]);
  (0, import_react229.useEffect)(function() {
    var _a2;
    if (!state.thread)
      return;
    var message = (_a2 = state.messages) === null || _a2 === void 0 ? void 0 : _a2.find(function(m) {
      var _a3;
      return m.id === ((_a3 = state.thread) === null || _a3 === void 0 ? void 0 : _a3.id);
    });
    if (message)
      dispatch({ message, type: "setThread" });
  }, [state.messages, state.thread]);
  var addNotification = (0, import_react229.useMemo)(function() {
    return makeAddNotifications(setNotifications, notificationTimeouts.current);
  }, []);
  var loadMoreFinished = (0, import_react229.useCallback)((0, import_lodash9.default)(function(hasMore, messages) {
    if (!isMounted.current)
      return;
    dispatch({ hasMore, messages, type: "loadMoreFinished" });
  }, 2e3, { leading: true, trailing: true }), []);
  var loadMore = function(limit) {
    if (limit === void 0) {
      limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE;
    }
    return __awaiter(void 0, void 0, void 0, function() {
      var oldestMessage, oldestID, perPage, queryResponse, e_3;
      var _a2;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasPrev)
              return [2, 0];
            oldestMessage = (_a2 = state === null || state === void 0 ? void 0 : state.messages) === null || _a2 === void 0 ? void 0 : _a2[0];
            if (state.loadingMore || state.loadingMoreNewer || (oldestMessage === null || oldestMessage === void 0 ? void 0 : oldestMessage.status) !== "received") {
              return [2, 0];
            }
            dispatch({ loadingMore: true, type: "setLoadingMore" });
            oldestID = oldestMessage === null || oldestMessage === void 0 ? void 0 : oldestMessage.id;
            perPage = limit;
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 3, , 4]);
            return [4, channel.query({
              messages: { id_lt: oldestID, limit: perPage },
              watchers: { limit: perPage }
            })];
          case 2:
            queryResponse = _b2.sent();
            return [3, 4];
          case 3:
            e_3 = _b2.sent();
            console.warn("message pagination request failed with error", e_3);
            dispatch({ loadingMore: false, type: "setLoadingMore" });
            return [2, 0];
          case 4:
            loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
            return [2, queryResponse.messages.length];
        }
      });
    });
  };
  var loadMoreNewer = function(limit) {
    if (limit === void 0) {
      limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE;
    }
    return __awaiter(void 0, void 0, void 0, function() {
      var newestMessage, newestId, perPage, queryResponse, e_4;
      var _a2, _b2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasNext)
              return [2, 0];
            newestMessage = (_a2 = state === null || state === void 0 ? void 0 : state.messages) === null || _a2 === void 0 ? void 0 : _a2[((_b2 = state === null || state === void 0 ? void 0 : state.messages) === null || _b2 === void 0 ? void 0 : _b2.length) - 1];
            if (state.loadingMore || state.loadingMoreNewer)
              return [2, 0];
            dispatch({ loadingMoreNewer: true, type: "setLoadingMoreNewer" });
            newestId = newestMessage === null || newestMessage === void 0 ? void 0 : newestMessage.id;
            perPage = limit;
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, , 4]);
            return [4, channel.query({
              messages: { id_gt: newestId, limit: perPage },
              watchers: { limit: perPage }
            })];
          case 2:
            queryResponse = _c2.sent();
            return [3, 4];
          case 3:
            e_4 = _c2.sent();
            console.warn("message pagination request failed with error", e_4);
            dispatch({ loadingMoreNewer: false, type: "setLoadingMoreNewer" });
            return [2, 0];
          case 4:
            dispatch({
              hasMoreNewer: channel.state.messagePagination.hasNext,
              messages: channel.state.messages,
              type: "loadMoreNewerFinished"
            });
            return [2, queryResponse.messages.length];
        }
      });
    });
  };
  var clearHighlightedMessageTimeoutId = (0, import_react229.useRef)(null);
  var jumpToMessage = (0, import_react229.useCallback)(function(messageId, messageLimit, highlightDuration) {
    if (messageLimit === void 0) {
      messageLimit = DEFAULT_JUMP_TO_PAGE_SIZE;
    }
    if (highlightDuration === void 0) {
      highlightDuration = DEFAULT_HIGHLIGHT_DURATION;
    }
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            dispatch({ loadingMore: true, type: "setLoadingMore" });
            return [4, channel.state.loadMessageIntoState(messageId, void 0, messageLimit)];
          case 1:
            _a2.sent();
            loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
            dispatch({
              hasMoreNewer: channel.state.messagePagination.hasNext,
              highlightedMessageId: messageId,
              type: "jumpToMessageFinished"
            });
            if (clearHighlightedMessageTimeoutId.current) {
              clearTimeout(clearHighlightedMessageTimeoutId.current);
            }
            clearHighlightedMessageTimeoutId.current = setTimeout(function() {
              clearHighlightedMessageTimeoutId.current = null;
              dispatch({ type: "clearHighlightedMessage" });
            }, highlightDuration);
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [channel, loadMoreFinished]);
  var jumpToLatestMessage = (0, import_react229.useCallback)(function() {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, channel.state.loadMessageIntoState("latest")];
          case 1:
            _a2.sent();
            loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
            dispatch({
              type: "jumpToLatestMessage"
            });
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [channel, loadMoreFinished]);
  var jumpToFirstUnreadMessage = (0, import_react229.useCallback)(function(queryMessageLimit, highlightDuration) {
    if (queryMessageLimit === void 0) {
      queryMessageLimit = DEFAULT_JUMP_TO_PAGE_SIZE;
    }
    if (highlightDuration === void 0) {
      highlightDuration = DEFAULT_HIGHLIGHT_DURATION;
    }
    return __awaiter(void 0, void 0, void 0, function() {
      var lastReadMessageId, firstUnreadMessageId, isInCurrentMessageSet, result, result, lastReadTimestamp, _a2, lastReadMessageIndex, lastReadMessage, messages, e_5, firstMessageWithCreationDate, firstMessageTimestamp, result, targetId_1, indexOfTarget, e_6;
      var _b2, _c2, _d2, _e2;
      return __generator(this, function(_f2) {
        switch (_f2.label) {
          case 0:
            if (!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages))
              return [
                2
                /*return*/
              ];
            lastReadMessageId = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id;
            firstUnreadMessageId = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id;
            isInCurrentMessageSet = false;
            if (!firstUnreadMessageId) return [3, 1];
            result = findInMsgSetById(firstUnreadMessageId, channel.state.messages);
            isInCurrentMessageSet = result.index !== -1;
            return [3, 8];
          case 1:
            if (!lastReadMessageId) return [3, 2];
            result = findInMsgSetById(lastReadMessageId, channel.state.messages);
            isInCurrentMessageSet = !!result.target;
            firstUnreadMessageId = result.index > -1 ? (_b2 = channel.state.messages[result.index + 1]) === null || _b2 === void 0 ? void 0 : _b2.id : void 0;
            return [3, 8];
          case 2:
            lastReadTimestamp = channelUnreadUiState.last_read.getTime();
            _a2 = findInMsgSetByDate(channelUnreadUiState.last_read, channel.state.messages, true), lastReadMessageIndex = _a2.index, lastReadMessage = _a2.target;
            if (!lastReadMessage) return [3, 3];
            firstUnreadMessageId = (_c2 = channel.state.messages[lastReadMessageIndex + 1]) === null || _c2 === void 0 ? void 0 : _c2.id;
            isInCurrentMessageSet = !!firstUnreadMessageId;
            lastReadMessageId = lastReadMessage.id;
            return [3, 8];
          case 3:
            dispatch({ loadingMore: true, type: "setLoadingMore" });
            messages = void 0;
            _f2.label = 4;
          case 4:
            _f2.trys.push([4, 6, , 7]);
            return [4, channel.query({
              messages: {
                created_at_around: channelUnreadUiState.last_read.toISOString(),
                limit: queryMessageLimit
              }
            }, "new")];
          case 5:
            messages = _f2.sent().messages;
            return [3, 7];
          case 6:
            e_5 = _f2.sent();
            addNotification(t2("Failed to jump to the first unread message"), "error");
            loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
            return [
              2
              /*return*/
            ];
          case 7:
            firstMessageWithCreationDate = messages.find(function(msg) {
              return msg.created_at;
            });
            if (!firstMessageWithCreationDate) {
              addNotification(t2("Failed to jump to the first unread message"), "error");
              loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
              return [
                2
                /*return*/
              ];
            }
            firstMessageTimestamp = new Date(firstMessageWithCreationDate.created_at).getTime();
            if (lastReadTimestamp < firstMessageTimestamp) {
              firstUnreadMessageId = firstMessageWithCreationDate.id;
            } else {
              result = findInMsgSetByDate(channelUnreadUiState.last_read, messages);
              lastReadMessageId = (_d2 = result.target) === null || _d2 === void 0 ? void 0 : _d2.id;
            }
            loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
            _f2.label = 8;
          case 8:
            if (!firstUnreadMessageId && !lastReadMessageId) {
              addNotification(t2("Failed to jump to the first unread message"), "error");
              return [
                2
                /*return*/
              ];
            }
            if (!!isInCurrentMessageSet) return [3, 12];
            dispatch({ loadingMore: true, type: "setLoadingMore" });
            _f2.label = 9;
          case 9:
            _f2.trys.push([9, 11, , 12]);
            targetId_1 = firstUnreadMessageId !== null && firstUnreadMessageId !== void 0 ? firstUnreadMessageId : lastReadMessageId;
            return [4, channel.state.loadMessageIntoState(targetId_1, void 0, queryMessageLimit)];
          case 10:
            _f2.sent();
            indexOfTarget = channel.state.messages.findIndex(function(message) {
              return message.id === targetId_1;
            });
            loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
            firstUnreadMessageId = firstUnreadMessageId !== null && firstUnreadMessageId !== void 0 ? firstUnreadMessageId : (_e2 = channel.state.messages[indexOfTarget + 1]) === null || _e2 === void 0 ? void 0 : _e2.id;
            return [3, 12];
          case 11:
            e_6 = _f2.sent();
            addNotification(t2("Failed to jump to the first unread message"), "error");
            loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
            return [
              2
              /*return*/
            ];
          case 12:
            if (!firstUnreadMessageId) {
              addNotification(t2("Failed to jump to the first unread message"), "error");
              return [
                2
                /*return*/
              ];
            }
            if (!channelUnreadUiState.first_unread_message_id)
              _setChannelUnreadUiState(__assign(__assign({}, channelUnreadUiState), { first_unread_message_id: firstUnreadMessageId, last_read_message_id: lastReadMessageId }));
            dispatch({
              hasMoreNewer: channel.state.messagePagination.hasNext,
              highlightedMessageId: firstUnreadMessageId,
              type: "jumpToMessageFinished"
            });
            if (clearHighlightedMessageTimeoutId.current) {
              clearTimeout(clearHighlightedMessageTimeoutId.current);
            }
            clearHighlightedMessageTimeoutId.current = setTimeout(function() {
              clearHighlightedMessageTimeoutId.current = null;
              dispatch({ type: "clearHighlightedMessage" });
            }, highlightDuration);
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [addNotification, channel, loadMoreFinished, t2, channelUnreadUiState]);
  var deleteMessage = (0, import_react229.useCallback)(function(message) {
    return __awaiter(void 0, void 0, void 0, function() {
      var deletedMessage, result;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!(message === null || message === void 0 ? void 0 : message.id)) {
              throw new Error("Cannot delete a message - missing message ID.");
            }
            if (!doDeleteMessageRequest) return [3, 2];
            return [4, doDeleteMessageRequest(message)];
          case 1:
            deletedMessage = _a2.sent();
            return [3, 4];
          case 2:
            return [4, client.deleteMessage(message.id)];
          case 3:
            result = _a2.sent();
            deletedMessage = result.message;
            _a2.label = 4;
          case 4:
            return [2, deletedMessage];
        }
      });
    });
  }, [client, doDeleteMessageRequest]);
  var updateMessage = function(updatedMessage) {
    channel.state.addMessageSorted(updatedMessage, true);
    dispatch({
      channel,
      parentId: state.thread && updatedMessage.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  var doSendMessage = function(message, customMessageData, options2) {
    return __awaiter(void 0, void 0, void 0, function() {
      var attachments, id, _a2, mentioned_users, parent_id, text5, mentions, messageData, messageResponse, existingMessage, i, msg, responseTimestamp, existingMessageTimestamp, responseIsTheNewest, error_1, stringError, parsedError;
      var _b2, _c2;
      return __generator(this, function(_d2) {
        switch (_d2.label) {
          case 0:
            attachments = message.attachments, id = message.id, _a2 = message.mentioned_users, mentioned_users = _a2 === void 0 ? [] : _a2, parent_id = message.parent_id, text5 = message.text;
            mentions = isUserResponseArray(mentioned_users) ? mentioned_users.map(function(_a3) {
              var id2 = _a3.id;
              return id2;
            }) : mentioned_users;
            messageData = __assign({ attachments, id, mentioned_users: mentions, parent_id, quoted_message_id: parent_id === (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.parent_id) ? quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.id : void 0, text: text5 }, customMessageData);
            _d2.label = 1;
          case 1:
            _d2.trys.push([1, 6, , 7]);
            messageResponse = void 0;
            if (!doSendMessageRequest) return [3, 3];
            return [4, doSendMessageRequest(channel, messageData, options2)];
          case 2:
            messageResponse = _d2.sent();
            return [3, 5];
          case 3:
            return [4, channel.sendMessage(messageData, options2)];
          case 4:
            messageResponse = _d2.sent();
            _d2.label = 5;
          case 5:
            existingMessage = void 0;
            for (i = channel.state.messages.length - 1; i >= 0; i--) {
              msg = channel.state.messages[i];
              if (msg.id && msg.id === messageData.id) {
                existingMessage = msg;
                break;
              }
            }
            responseTimestamp = new Date(((_b2 = messageResponse === null || messageResponse === void 0 ? void 0 : messageResponse.message) === null || _b2 === void 0 ? void 0 : _b2.updated_at) || 0).getTime();
            existingMessageTimestamp = ((_c2 = existingMessage === null || existingMessage === void 0 ? void 0 : existingMessage.updated_at) === null || _c2 === void 0 ? void 0 : _c2.getTime()) || 0;
            responseIsTheNewest = responseTimestamp > existingMessageTimestamp;
            if ((messageResponse === null || messageResponse === void 0 ? void 0 : messageResponse.message) && (responseIsTheNewest || (existingMessage === null || existingMessage === void 0 ? void 0 : existingMessage.status) === "sending")) {
              updateMessage(__assign(__assign({}, messageResponse.message), { status: "received" }));
            }
            if (quotedMessage && parent_id === (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.parent_id))
              setQuotedMessage(void 0);
            return [3, 7];
          case 6:
            error_1 = _d2.sent();
            stringError = JSON.stringify(error_1);
            parsedError = stringError ? JSON.parse(stringError) : {};
            if (parsedError.code === 4 && error_1 instanceof Error && error_1.message.includes("already exists")) {
              updateMessage(__assign(__assign({}, message), { status: "received" }));
            } else {
              updateMessage(__assign(__assign({}, message), { error: parsedError, errorStatusCode: parsedError.status || void 0, status: "failed" }));
            }
            return [3, 7];
          case 7:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var sendMessage = function(_a2, customMessageData, options2) {
    var _b2 = _a2.attachments, attachments = _b2 === void 0 ? [] : _b2, _c2 = _a2.mentioned_users, mentioned_users = _c2 === void 0 ? [] : _c2, parent = _a2.parent, _d2 = _a2.text, text5 = _d2 === void 0 ? "" : _d2;
    return __awaiter(void 0, void 0, void 0, function() {
      var messagePreview;
      var _e2;
      return __generator(this, function(_f2) {
        switch (_f2.label) {
          case 0:
            channel.state.filterErrorMessages();
            messagePreview = __assign({ __html: text5, attachments, created_at: /* @__PURE__ */ new Date(), html: text5, id: (_e2 = customMessageData === null || customMessageData === void 0 ? void 0 : customMessageData.id) !== null && _e2 !== void 0 ? _e2 : "".concat(client.userID, "-").concat(nanoid()), mentioned_users, reactions: [], status: "sending", text: text5, type: "regular", user: client.user }, (parent === null || parent === void 0 ? void 0 : parent.id) ? { parent_id: parent.id } : null);
            updateMessage(messagePreview);
            return [4, doSendMessage(messagePreview, customMessageData, options2)];
          case 1:
            _f2.sent();
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var retrySendMessage = function(message) {
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            updateMessage(__assign(__assign({}, message), { errorStatusCode: void 0, status: "sending" }));
            if (message.attachments) {
              message.attachments = message.attachments.filter(function(attachment) {
                return !attachment.og_scrape_url;
              });
            }
            return [4, doSendMessage(message)];
          case 1:
            _a2.sent();
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var removeMessage = function(message) {
    channel.state.removeMessage(message);
    dispatch({
      channel,
      parentId: state.thread && message.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  var openThread = function(message, event) {
    event === null || event === void 0 ? void 0 : event.preventDefault();
    setQuotedMessage(function(current) {
      if ((current === null || current === void 0 ? void 0 : current.parent_id) !== (message === null || message === void 0 ? void 0 : message.parent_id)) {
        return void 0;
      } else {
        return current;
      }
    });
    dispatch({ channel, message, type: "openThread" });
  };
  var closeThread = function(event) {
    event === null || event === void 0 ? void 0 : event.preventDefault();
    dispatch({ type: "closeThread" });
  };
  var loadMoreThreadFinished = (0, import_react229.useCallback)((0, import_lodash9.default)(function(threadHasMore, threadMessages) {
    dispatch({
      threadHasMore,
      threadMessages,
      type: "loadMoreThreadFinished"
    });
  }, 2e3, { leading: true, trailing: true }), []);
  var loadMoreThread = function(limit) {
    if (limit === void 0) {
      limit = DEFAULT_THREAD_PAGE_SIZE;
    }
    return __awaiter(void 0, void 0, void 0, function() {
      var parentId, oldMessages, oldestMessageId, queryResponse, threadHasMoreMessages, newThreadMessages, e_7;
      var _a2;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            if (state.threadLoadingMore || !state.thread || !state.threadHasMore)
              return [
                2
                /*return*/
              ];
            dispatch({ type: "startLoadingThread" });
            parentId = state.thread.id;
            if (!parentId) {
              return [2, dispatch({ type: "closeThread" })];
            }
            oldMessages = channel.state.threads[parentId] || [];
            oldestMessageId = (_a2 = oldMessages[0]) === null || _a2 === void 0 ? void 0 : _a2.id;
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 3, , 4]);
            return [4, channel.getReplies(parentId, {
              id_lt: oldestMessageId,
              limit
            })];
          case 2:
            queryResponse = _b2.sent();
            threadHasMoreMessages = hasMoreMessagesProbably(queryResponse.messages.length, limit);
            newThreadMessages = channel.state.threads[parentId] || [];
            loadMoreThreadFinished(threadHasMoreMessages, newThreadMessages);
            return [3, 4];
          case 3:
            e_7 = _b2.sent();
            loadMoreThreadFinished(false, oldMessages);
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var onMentionsHoverOrClick = useMentionsHandlers(onMentionsHover, onMentionsClick);
  var editMessage = useEditMessageHandler(doUpdateMessageRequest);
  var typing = state.typing, restState = __rest(state, ["typing"]);
  var channelStateContextValue = useCreateChannelStateContext(__assign(__assign({}, restState), { acceptedFiles, channel, channelCapabilitiesArray, channelConfig, channelUnreadUiState, debounceURLEnrichmentMs: enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.debounceURLEnrichmentMs, dragAndDropWindow, enrichURLForPreview: props.enrichURLForPreview, findURLFn: enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.findURLFn, giphyVersion: props.giphyVersion || "fixed_height", imageAttachmentSizeHandler: props.imageAttachmentSizeHandler || getImageAttachmentConfiguration, maxNumberOfFiles, multipleUploads, mutes, notifications, onLinkPreviewDismissed: enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.onLinkPreviewDismissed, quotedMessage, shouldGenerateVideoThumbnail: props.shouldGenerateVideoThumbnail || true, videoAttachmentSizeHandler: props.videoAttachmentSizeHandler || getVideoAttachmentConfiguration, watcher_count: state.watcherCount }));
  var channelActionContextValue = (0, import_react229.useMemo)(
    function() {
      return {
        addNotification,
        closeThread,
        deleteMessage,
        dispatch,
        editMessage,
        jumpToFirstUnreadMessage,
        jumpToLatestMessage,
        jumpToMessage,
        loadMore,
        loadMoreNewer,
        loadMoreThread,
        markRead,
        onMentionsClick: onMentionsHoverOrClick,
        onMentionsHover: onMentionsHoverOrClick,
        openThread,
        removeMessage,
        retrySendMessage,
        sendMessage,
        setChannelUnreadUiState,
        setQuotedMessage,
        skipMessageDataMemoization,
        updateMessage
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channel.cid,
      deleteMessage,
      enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.findURLFn,
      enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.onLinkPreviewDismissed,
      loadMore,
      loadMoreNewer,
      markRead,
      quotedMessage,
      jumpToFirstUnreadMessage,
      jumpToMessage,
      jumpToLatestMessage,
      setChannelUnreadUiState
    ]
  );
  var componentContextValue = (0, import_react229.useMemo)(
    function() {
      var _a2;
      return {
        Attachment: props.Attachment || Attachment,
        AttachmentPreviewList: props.AttachmentPreviewList,
        AudioRecorder: props.AudioRecorder,
        AutocompleteSuggestionHeader: props.AutocompleteSuggestionHeader,
        AutocompleteSuggestionItem: props.AutocompleteSuggestionItem,
        AutocompleteSuggestionList: props.AutocompleteSuggestionList,
        Avatar: props.Avatar,
        BaseImage: props.BaseImage,
        CooldownTimer: props.CooldownTimer,
        CustomMessageActionsList: props.CustomMessageActionsList,
        DateSeparator: props.DateSeparator || DateSeparator,
        EditMessageInput: props.EditMessageInput,
        EmojiPicker: props.EmojiPicker,
        emojiSearchIndex: props.emojiSearchIndex,
        EmptyStateIndicator: props.EmptyStateIndicator,
        FileUploadIcon: props.FileUploadIcon,
        GiphyPreviewMessage: props.GiphyPreviewMessage,
        HeaderComponent: props.HeaderComponent,
        Input: props.Input,
        LinkPreviewList: props.LinkPreviewList,
        LoadingIndicator: props.LoadingIndicator,
        Message: props.Message || MessageSimple,
        MessageBouncePrompt: props.MessageBouncePrompt,
        MessageDeleted: props.MessageDeleted,
        MessageListNotifications: props.MessageListNotifications,
        MessageNotification: props.MessageNotification,
        MessageOptions: props.MessageOptions,
        MessageRepliesCountButton: props.MessageRepliesCountButton,
        MessageStatus: props.MessageStatus,
        MessageSystem: props.MessageSystem || EventComponent,
        MessageTimestamp: props.MessageTimestamp,
        ModalGallery: props.ModalGallery,
        PinIndicator: props.PinIndicator,
        QuotedMessage: props.QuotedMessage,
        QuotedMessagePreview: props.QuotedMessagePreview,
        reactionOptions: (_a2 = props.reactionOptions) !== null && _a2 !== void 0 ? _a2 : defaultReactionOptions,
        ReactionSelector: props.ReactionSelector,
        ReactionsList: props.ReactionsList,
        SendButton: props.SendButton,
        StartRecordingAudioButton: props.StartRecordingAudioButton,
        ThreadHead: props.ThreadHead,
        ThreadHeader: props.ThreadHeader,
        ThreadStart: props.ThreadStart,
        Timestamp: props.Timestamp,
        TriggerProvider: props.TriggerProvider,
        TypingIndicator: props.TypingIndicator,
        UnreadMessagesNotification: props.UnreadMessagesNotification,
        UnreadMessagesSeparator: props.UnreadMessagesSeparator || UnreadMessagesSeparator,
        VirtualMessage: props.VirtualMessage
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [props.reactionOptions]
  );
  var typingContextValue = useCreateTypingContext({
    typing
  });
  var className = clsx_default(chatClass, theme, channelClass);
  if (state.error) {
    return import_react229.default.createElement(
      "div",
      { className },
      import_react229.default.createElement(LoadingErrorIndicator2, { error: state.error })
    );
  }
  if (state.loading) {
    return import_react229.default.createElement(
      "div",
      { className },
      import_react229.default.createElement(LoadingIndicator3, null)
    );
  }
  if (!channel.watch) {
    return import_react229.default.createElement(
      "div",
      { className },
      import_react229.default.createElement("div", null, t2("Channel Missing"))
    );
  }
  return import_react229.default.createElement(
    "div",
    { className: clsx_default(className, windowsEmojiClass) },
    import_react229.default.createElement(
      ChannelStateProvider,
      { value: channelStateContextValue },
      import_react229.default.createElement(
        ChannelActionProvider,
        { value: channelActionContextValue },
        import_react229.default.createElement(
          ComponentProvider,
          { value: componentContextValue },
          import_react229.default.createElement(
            TypingProvider,
            { value: typingContextValue },
            import_react229.default.createElement(
              "div",
              { className: "".concat(chatContainerClass) },
              dragAndDropWindow && import_react229.default.createElement(DropzoneProvider, __assign({}, optionalMessageInputProps), children),
              !dragAndDropWindow && import_react229.default.createElement(import_react229.default.Fragment, null, children)
            )
          )
        )
      )
    )
  );
};
var Channel = import_react229.default.memo(UnMemoizedChannel);

// node_modules/stream-chat-react/dist/components/ChannelHeader/ChannelHeader.js
var import_react233 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelHeader/icons.js
var import_react230 = __toESM(require_react());
var MenuIcon = function(_a) {
  var title = _a.title;
  var t2 = useTranslationContext("MenuIcon").t;
  return import_react230.default.createElement(
    "svg",
    { "data-testid": "menu-icon", viewBox: "0 0 448 512", xmlns: "http://www.w3.org/2000/svg" },
    import_react230.default.createElement("title", null, title !== null && title !== void 0 ? title : t2("Menu")),
    import_react230.default.createElement("path", { d: "M0 88C0 74.75 10.75 64 24 64H424C437.3 64 448 74.75 448 88C448 101.3 437.3 112 424 112H24C10.75 112 0 101.3 0 88zM0 248C0 234.7 10.75 224 24 224H424C437.3 224 448 234.7 448 248C448 261.3 437.3 272 424 272H24C10.75 272 0 261.3 0 248zM424 432H24C10.75 432 0 421.3 0 408C0 394.7 10.75 384 24 384H424C437.3 384 448 394.7 448 408C448 421.3 437.3 432 424 432z", fill: "currentColor" })
  );
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useChannelPreviewInfo.js
var import_react232 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/utils.js
var import_react231 = __toESM(require_react());
var renderPreviewText = function(text5) {
  return import_react231.default.createElement(ReactMarkdown, { skipHtml: true }, text5);
};
var getLatestMessagePreview = function(channel, t2, userLanguage) {
  var _a, _b;
  if (userLanguage === void 0) {
    userLanguage = "en";
  }
  var latestMessage = channel.state.latestMessages[channel.state.latestMessages.length - 1];
  var previewTextToRender = ((_a = latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.i18n) === null || _a === void 0 ? void 0 : _a["".concat(userLanguage, "_text")]) || (latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.text);
  if (!latestMessage) {
    return t2("Nothing yet...");
  }
  if (latestMessage.deleted_at) {
    return t2("Message deleted");
  }
  if (previewTextToRender) {
    return renderPreviewText(previewTextToRender);
  }
  if (latestMessage.command) {
    return "/".concat(latestMessage.command);
  }
  if ((_b = latestMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) {
    return t2("🏙 Attachment...");
  }
  return t2("Empty message...");
};
var getChannelDisplayInfo = function(info, channel, currentUser) {
  var _a, _b;
  if ((_a = channel.data) === null || _a === void 0 ? void 0 : _a[info])
    return channel.data[info];
  var members = Object.values(channel.state.members);
  if (members.length !== 2)
    return;
  var otherMember = members.find(function(member) {
    var _a2;
    return ((_a2 = member.user) === null || _a2 === void 0 ? void 0 : _a2.id) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);
  });
  return (_b = otherMember === null || otherMember === void 0 ? void 0 : otherMember.user) === null || _b === void 0 ? void 0 : _b[info];
};
var getDisplayTitle = function(channel, currentUser) {
  return getChannelDisplayInfo("name", channel, currentUser);
};
var getDisplayImage = function(channel, currentUser) {
  return getChannelDisplayInfo("image", channel, currentUser);
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useChannelPreviewInfo.js
var useChannelPreviewInfo = function(props) {
  var channel = props.channel, overrideImage = props.overrideImage, overrideTitle = props.overrideTitle;
  var client = useChatContext("useChannelPreviewInfo").client;
  var _a = (0, import_react232.useState)(function() {
    return overrideTitle || getDisplayTitle(channel, client.user);
  }), displayTitle = _a[0], setDisplayTitle = _a[1];
  var _b = (0, import_react232.useState)(function() {
    return overrideImage || getDisplayImage(channel, client.user);
  }), displayImage = _b[0], setDisplayImage = _b[1];
  (0, import_react232.useEffect)(function() {
    if (overrideTitle && overrideImage)
      return;
    var updateTitles = function() {
      if (!overrideTitle)
        setDisplayTitle(getDisplayTitle(channel, client.user));
      if (!overrideImage)
        setDisplayImage(getDisplayImage(channel, client.user));
    };
    updateTitles();
    client.on("user.updated", updateTitles);
    return function() {
      client.off("user.updated", updateTitles);
    };
  }, [channel, channel.data, client, overrideImage, overrideTitle]);
  return {
    displayImage: overrideImage || displayImage,
    displayTitle: overrideTitle || displayTitle
  };
};

// node_modules/stream-chat-react/dist/components/ChannelHeader/ChannelHeader.js
var ChannelHeader = function(props) {
  var _a = props.Avatar, Avatar2 = _a === void 0 ? Avatar : _a, _b = props.MenuIcon, MenuIcon3 = _b === void 0 ? MenuIcon : _b, overrideImage = props.image, live = props.live, overrideTitle = props.title;
  var _c = useChannelStateContext("ChannelHeader"), channel = _c.channel, watcher_count = _c.watcher_count;
  var openMobileNav = useChatContext("ChannelHeader").openMobileNav;
  var t2 = useTranslationContext("ChannelHeader").t;
  var _d = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  }), displayImage = _d.displayImage, displayTitle = _d.displayTitle;
  var _e = (channel === null || channel === void 0 ? void 0 : channel.data) || {}, member_count = _e.member_count, subtitle = _e.subtitle;
  return import_react233.default.createElement(
    "div",
    { className: "str-chat__header-livestream str-chat__channel-header" },
    import_react233.default.createElement(
      "button",
      { "aria-label": t2("aria/Menu"), className: "str-chat__header-hamburger", onClick: openMobileNav },
      import_react233.default.createElement(MenuIcon3, null)
    ),
    import_react233.default.createElement(Avatar2, { image: displayImage, name: displayTitle, shape: "rounded", size: (channel === null || channel === void 0 ? void 0 : channel.type) === "commerce" ? 60 : 40 }),
    import_react233.default.createElement(
      "div",
      { className: "str-chat__header-livestream-left str-chat__channel-header-end" },
      import_react233.default.createElement(
        "p",
        { className: "str-chat__header-livestream-left--title str-chat__channel-header-title" },
        displayTitle,
        " ",
        live && import_react233.default.createElement("span", { className: "str-chat__header-livestream-left--livelabel" }, t2("live"))
      ),
      subtitle && import_react233.default.createElement("p", { className: "str-chat__header-livestream-left--subtitle" }, subtitle),
      import_react233.default.createElement(
        "p",
        { className: "str-chat__header-livestream-left--members str-chat__channel-header-info" },
        !live && !!member_count && member_count > 0 && import_react233.default.createElement(
          import_react233.default.Fragment,
          null,
          t2("{{ memberCount }} members", {
            memberCount: member_count
          }),
          ",",
          " "
        ),
        t2("{{ watcherCount }} online", { watcherCount: watcher_count })
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js
var import_react262 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelListMessenger.js
var import_react236 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChatDown/ChatDown.js
var import_react235 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChatDown/icons.js
var import_react234 = __toESM(require_react());
var ConnectionErrorIcon = function() {
  return import_react234.default.createElement(
    "svg",
    { height: "78px", version: "1.1", viewBox: "0 0 78 78", width: "78px", xmlns: "http://www.w3.org/2000/svg" },
    import_react234.default.createElement("title", null, "Connection Error"),
    import_react234.default.createElement(
      "g",
      { fill: "none", fillRule: "evenodd", id: "Interactions", stroke: "none", strokeWidth: "1" },
      import_react234.default.createElement(
        "g",
        { fill: "#CF1F25", id: "Connection-Error-_-Connectivity", transform: "translate(-270.000000, -30.000000)" },
        import_react234.default.createElement(
          "g",
          { id: "109-network-connection", transform: "translate(270.000000, 30.000000)" },
          import_react234.default.createElement("path", { d: "M66.4609744,11.414231 C81.6225232,26.5757798 81.6225232,51.157545 66.4609744,66.3188467 C51.2994256,81.4803954 26.7176604,81.4803954 11.5563587,66.3188467 C-3.60519004,51.1572979 -3.60519004,26.5755327 11.5563587,11.414231 C26.7179075,-3.74731776 51.2996727,-3.74731776 66.4609744,11.414231 Z M54.7853215,45.8823776 L54.7853215,40.5882574 C54.7853215,39.613638 53.9952341,38.8235506 53.0206147,38.8235506 L44.9576695,38.8235506 L41.428256,42.3529641 L51.255555,42.3529641 L51.255555,45.8823776 L54.7853215,45.8823776 Z M40.6659027,43.1153174 L37.8988425,45.8823776 L40.6659027,45.8823776 L40.6659027,43.1153174 Z M51.1764962,56.4702653 L58.2353232,56.4702653 C59.2099355,56.4702653 60.00003,55.6801708 60.00003,54.7055585 L60.00003,51.176145 C60.00003,50.2015327 59.2099355,49.4114382 58.2353232,49.4114382 L51.1764962,49.4114382 C50.2018839,49.4114382 49.4117894,50.2015327 49.4117894,51.176145 L49.4117894,54.7055585 C49.4117894,55.6801708 50.2018839,56.4702653 51.1764962,56.4702653 Z M35.2941353,56.4702653 L42.3529624,56.4702653 C43.3275746,56.4702653 44.1176691,55.6801708 44.1176691,54.7055585 L44.1176691,51.176145 C44.1176691,50.2015327 43.3275746,49.4114382 42.3529624,49.4114382 L35.2941353,49.4114382 C34.319523,49.4114382 33.5294285,50.2015327 33.5294285,51.176145 L33.5294285,54.7055585 C33.5294285,55.6801708 34.319523,56.4702653 35.2941353,56.4702653 Z M56.6964989,19.0874231 C56.007381,18.3985134 54.8903216,18.3985134 54.2012036,19.087423 L45.882376,27.4062507 L45.882376,19.4117761 C45.882376,18.4371568 45.0922885,17.6470693 44.1176692,17.6470693 L33.5294286,17.6470693 C32.5548092,17.6470694 31.7647218,18.4371568 31.7647218,19.4117761 L31.7647218,30.0000167 C31.7647219,30.9746363 32.5548092,31.7647237 33.5294285,31.7647237 L41.5239031,31.7647237 L34.4650761,38.8235508 L24.7058947,38.8235508 C23.7312753,38.8235508 22.9411879,39.6136382 22.9411879,40.5882575 L22.9411879,45.8823778 L26.4706014,45.8823778 L26.4706014,42.3529643 L30.9356624,42.3529643 L23.8768354,49.4117914 L19.4117743,49.4117914 C18.4371549,49.4117914 17.6470675,50.2018788 17.6470675,51.1764981 L17.6470675,54.7059117 C17.6504049,54.9674302 17.7129076,55.2248042 17.8298886,55.4587302 L16.4456526,56.8429662 C15.7446193,57.5200453 15.7252005,58.6372282 16.4022825,59.3382615 C17.0793616,60.0392948 18.1965445,60.0587136 18.8975778,59.3816316 C18.9122847,59.3674273 18.9267436,59.3529684 18.940948,59.3382615 L56.6964963,21.5830662 C57.3856425,20.8939094 57.3856425,19.7765747 56.6964963,19.0874179 Z", id: "Combined-Shape" })
        )
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/ChatDown/ChatDown.js
var UnMemoizedChatDown = function(_a) {
  var _b = _a.image, image2 = _b === void 0 ? import_react235.default.createElement(ConnectionErrorIcon, null) : _b, text5 = _a.text, _c = _a.type, type = _c === void 0 ? "Error" : _c;
  var t2 = useTranslationContext("ChatDown").t;
  return import_react235.default.createElement(
    "div",
    { className: "str-chat__down" },
    import_react235.default.createElement(
      "div",
      { className: "str-chat__down-main" },
      typeof image2 === "string" ? import_react235.default.createElement("img", { alt: "Connection error", "data-testid": "chatdown-img", src: image2 }) : image2,
      import_react235.default.createElement("h1", null, type),
      import_react235.default.createElement("h3", { "aria-live": "assertive" }, text5 || t2("Error connecting to chat, refresh the page to try again."))
    )
  );
};
var ChatDown = import_react235.default.memo(UnMemoizedChatDown);

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelListMessenger.js
var ChannelListMessenger = function(props) {
  var children = props.children, _a = props.error, error2 = _a === void 0 ? null : _a, loading = props.loading, _b = props.LoadingErrorIndicator, LoadingErrorIndicator2 = _b === void 0 ? ChatDown : _b, _c = props.LoadingIndicator, LoadingIndicator3 = _c === void 0 ? LoadingChannels : _c;
  var t2 = useTranslationContext("ChannelListMessenger").t;
  if (error2) {
    return import_react236.default.createElement(LoadingErrorIndicator2, { type: "Connection Error" });
  }
  if (loading) {
    return import_react236.default.createElement(LoadingIndicator3, null);
  }
  return import_react236.default.createElement(
    "div",
    { className: "str-chat__channel-list-messenger str-chat__channel-list-messenger-react" },
    import_react236.default.createElement("div", { "aria-label": t2("aria/Channel list"), className: "str-chat__channel-list-messenger__main str-chat__channel-list-messenger-react__main", role: "listbox" }, children)
  );
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelDeletedListener.js
var import_react237 = __toESM(require_react());
var useChannelDeletedListener = function(setChannels, customHandler) {
  var client = useChatContext("useChannelDeletedListener").client;
  (0, import_react237.useEffect)(function() {
    var handleEvent = function(event) {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels(function(channels) {
          var channelIndex = channels.findIndex(function(channel) {
            return channel.cid === event.cid;
          });
          if (channelIndex < 0)
            return __spreadArray([], channels, true);
          channels.splice(channelIndex, 1);
          return __spreadArray([], channels, true);
        });
      }
    };
    client.on("channel.deleted", handleEvent);
    return function() {
      client.off("channel.deleted", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelHiddenListener.js
var import_react238 = __toESM(require_react());
var useChannelHiddenListener = function(setChannels, customHandler) {
  var client = useChatContext("useChannelHiddenListener").client;
  (0, import_react238.useEffect)(function() {
    var handleEvent = function(event) {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels(function(channels) {
          var channelIndex = channels.findIndex(function(channel) {
            return channel.cid === event.cid;
          });
          if (channelIndex < 0)
            return __spreadArray([], channels, true);
          channels.splice(channelIndex, 1);
          return __spreadArray([], channels, true);
        });
      }
    };
    client.on("channel.hidden", handleEvent);
    return function() {
      client.off("channel.hidden", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelTruncatedListener.js
var import_react239 = __toESM(require_react());
var useChannelTruncatedListener = function(setChannels, customHandler, forceUpdate) {
  var client = useChatContext("useChannelTruncatedListener").client;
  (0, import_react239.useEffect)(function() {
    var handleEvent = function(event) {
      setChannels(function(channels) {
        return __spreadArray([], channels, true);
      });
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("channel.truncated", handleEvent);
    return function() {
      client.off("channel.truncated", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelUpdatedListener.js
var import_react240 = __toESM(require_react());
var useChannelUpdatedListener = function(setChannels, customHandler, forceUpdate) {
  var client = useChatContext("useChannelUpdatedListener").client;
  (0, import_react240.useEffect)(function() {
    var handleEvent = function(event) {
      setChannels(function(channels) {
        var _a, _b, _c, _d, _e, _f;
        var channelIndex = channels.findIndex(function(channel) {
          var _a2;
          return channel.cid === ((_a2 = event.channel) === null || _a2 === void 0 ? void 0 : _a2.cid);
        });
        if (channelIndex > -1 && event.channel) {
          var newChannels = channels;
          newChannels[channelIndex].data = __assign(__assign({}, event.channel), { hidden: (_b = (_a = event.channel) === null || _a === void 0 ? void 0 : _a.hidden) !== null && _b !== void 0 ? _b : (_c = newChannels[channelIndex].data) === null || _c === void 0 ? void 0 : _c.hidden, own_capabilities: (_e = (_d = event.channel) === null || _d === void 0 ? void 0 : _d.own_capabilities) !== null && _e !== void 0 ? _e : (_f = newChannels[channelIndex].data) === null || _f === void 0 ? void 0 : _f.own_capabilities });
          return __spreadArray([], newChannels, true);
        }
        return channels;
      });
      if (forceUpdate) {
        forceUpdate();
      }
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
    };
    client.on("channel.updated", handleEvent);
    return function() {
      client.off("channel.updated", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelVisibleListener.js
var import_react241 = __toESM(require_react());
var import_lodash12 = __toESM(require_lodash2());
var useChannelVisibleListener = function(setChannels, customHandler) {
  var client = useChatContext("useChannelVisibleListener").client;
  (0, import_react241.useEffect)(function() {
    var handleEvent = function(event) {
      return __awaiter(void 0, void 0, void 0, function() {
        var channel_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!(customHandler && typeof customHandler === "function")) return [3, 1];
              customHandler(setChannels, event);
              return [3, 3];
            case 1:
              if (!(event.type && event.channel_type && event.channel_id)) return [3, 3];
              return [4, getChannel({
                client,
                id: event.channel_id,
                type: event.channel_type
              })];
            case 2:
              channel_1 = _a.sent();
              setChannels(function(channels) {
                return (0, import_lodash12.default)(__spreadArray([channel_1], channels, true), "cid");
              });
              _a.label = 3;
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    client.on("channel.visible", handleEvent);
    return function() {
      client.off("channel.visible", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useConnectionRecoveredListener.js
var import_react242 = __toESM(require_react());
var useConnectionRecoveredListener = function(forceUpdate) {
  var client = useChatContext("useConnectionRecoveredListener").client;
  (0, import_react242.useEffect)(function() {
    var handleEvent = function() {
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("connection.recovered", handleEvent);
    return function() {
      client.off("connection.recovered", handleEvent);
    };
  }, []);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js
var import_react243 = __toESM(require_react());
var import_lodash14 = __toESM(require_lodash2());

// node_modules/stream-chat-react/dist/components/ChannelList/utils.js
var import_lodash13 = __toESM(require_lodash2());
var MAX_QUERY_CHANNELS_LIMIT = 30;
var moveChannelUp = function(_a) {
  var activeChannel = _a.activeChannel, channels = _a.channels, cid = _a.cid;
  var channelIndex = channels.findIndex(function(channel2) {
    return channel2.cid === cid;
  });
  if (!activeChannel && channelIndex <= 0)
    return channels;
  var channel = activeChannel || channels[channelIndex];
  return (0, import_lodash13.default)(__spreadArray([channel], channels, true), "cid");
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js
var useMessageNewListener = function(setChannels, customHandler, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {
  if (lockChannelOrder === void 0) {
    lockChannelOrder = false;
  }
  if (allowNewMessagesFromUnfilteredChannels === void 0) {
    allowNewMessagesFromUnfilteredChannels = true;
  }
  var client = useChatContext("useMessageNewListener").client;
  (0, import_react243.useEffect)(function() {
    var handleEvent = function(event) {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels(function(channels) {
          var channelInList = channels.filter(function(channel2) {
            return channel2.cid === event.cid;
          }).length > 0;
          if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {
            var channel = client.channel(event.channel_type, event.channel_id);
            return (0, import_lodash14.default)(__spreadArray([channel], channels, true), "cid");
          }
          if (!lockChannelOrder)
            return moveChannelUp({ channels, cid: event.cid || "" });
          return channels;
        });
      }
    };
    client.on("message.new", handleEvent);
    return function() {
      client.off("message.new", handleEvent);
    };
  }, [lockChannelOrder]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMobileNavigation.js
var import_react244 = __toESM(require_react());
var useMobileNavigation = function(channelListRef, navOpen, closeMobileNav) {
  (0, import_react244.useEffect)(function() {
    var handleClickOutside = function(event) {
      if (closeMobileNav && channelListRef.current && !channelListRef.current.contains(event.target) && navOpen) {
        closeMobileNav();
      }
    };
    document.addEventListener("click", handleClickOutside);
    return function() {
      document.removeEventListener("click", handleClickOutside);
    };
  }, [channelListRef, closeMobileNav, navOpen]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationAddedToChannelListener.js
var import_react245 = __toESM(require_react());
var import_lodash15 = __toESM(require_lodash2());
var useNotificationAddedToChannelListener = function(setChannels, customHandler, allowNewMessagesFromUnfilteredChannels) {
  if (allowNewMessagesFromUnfilteredChannels === void 0) {
    allowNewMessagesFromUnfilteredChannels = true;
  }
  var client = useChatContext("useNotificationAddedToChannelListener").client;
  (0, import_react245.useEffect)(function() {
    var handleEvent = function(event) {
      return __awaiter(void 0, void 0, void 0, function() {
        var channel_1;
        var _a, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              if (!(customHandler && typeof customHandler === "function")) return [3, 1];
              customHandler(setChannels, event);
              return [3, 3];
            case 1:
              if (!(allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.type))) return [3, 3];
              return [4, getChannel({
                client,
                id: event.channel.id,
                members: (_b = event.channel.members) === null || _b === void 0 ? void 0 : _b.reduce(function(acc, _a2) {
                  var user = _a2.user, user_id = _a2.user_id;
                  var userId = user_id || (user === null || user === void 0 ? void 0 : user.id);
                  if (userId) {
                    acc.push(userId);
                  }
                  return acc;
                }, []),
                type: event.channel.type
              })];
            case 2:
              channel_1 = _c.sent();
              setChannels(function(channels) {
                return (0, import_lodash15.default)(__spreadArray([channel_1], channels, true), "cid");
              });
              _c.label = 3;
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    client.on("notification.added_to_channel", handleEvent);
    return function() {
      client.off("notification.added_to_channel", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationMessageNewListener.js
var import_react246 = __toESM(require_react());
var import_lodash16 = __toESM(require_lodash2());
var useNotificationMessageNewListener = function(setChannels, customHandler, allowNewMessagesFromUnfilteredChannels) {
  if (allowNewMessagesFromUnfilteredChannels === void 0) {
    allowNewMessagesFromUnfilteredChannels = true;
  }
  var client = useChatContext("useNotificationMessageNewListener").client;
  (0, import_react246.useEffect)(function() {
    var handleEvent = function(event) {
      return __awaiter(void 0, void 0, void 0, function() {
        var channel_1;
        var _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!(customHandler && typeof customHandler === "function")) return [3, 1];
              customHandler(setChannels, event);
              return [3, 3];
            case 1:
              if (!(allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.type))) return [3, 3];
              return [4, getChannel({
                client,
                id: event.channel.id,
                type: event.channel.type
              })];
            case 2:
              channel_1 = _b.sent();
              setChannels(function(channels) {
                return (0, import_lodash16.default)(__spreadArray([channel_1], channels, true), "cid");
              });
              _b.label = 3;
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    client.on("notification.message_new", handleEvent);
    return function() {
      client.off("notification.message_new", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationRemovedFromChannelListener.js
var import_react247 = __toESM(require_react());
var useNotificationRemovedFromChannelListener = function(setChannels, customHandler) {
  var client = useChatContext("useNotificationRemovedFromChannelListener").client;
  (0, import_react247.useEffect)(function() {
    var handleEvent = function(event) {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels(function(channels) {
          return channels.filter(function(channel) {
            var _a;
            return channel.cid !== ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid);
          });
        });
      }
    };
    client.on("notification.removed_from_channel", handleEvent);
    return function() {
      client.off("notification.removed_from_channel", handleEvent);
    };
  }, [customHandler]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/usePaginatedChannels.js
var import_react248 = __toESM(require_react());
var import_lodash17 = __toESM(require_lodash2());
var RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 5e3;
var MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 2e3;
var usePaginatedChannels = function(client, filters, sort2, options2, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels) {
  if (recoveryThrottleIntervalMs === void 0) {
    recoveryThrottleIntervalMs = RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS;
  }
  var _a = useChatContext("usePaginatedChannels").channelsQueryState, error2 = _a.error, setError = _a.setError, setQueryInProgress = _a.setQueryInProgress;
  var _b = (0, import_react248.useState)([]), channels = _b[0], setChannels = _b[1];
  var _c = (0, import_react248.useState)(true), hasNextPage = _c[0], setHasNextPage = _c[1];
  var lastRecoveryTimestamp = (0, import_react248.useRef)();
  var recoveryThrottleInterval = recoveryThrottleIntervalMs < MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS ? MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS : recoveryThrottleIntervalMs !== null && recoveryThrottleIntervalMs !== void 0 ? recoveryThrottleIntervalMs : RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS;
  var filterString = (0, import_react248.useMemo)(function() {
    return JSON.stringify(filters);
  }, [filters]);
  var sortString = (0, import_react248.useMemo)(function() {
    return JSON.stringify(sort2);
  }, [sort2]);
  var queryChannels = function(queryType) {
    if (queryType === void 0) {
      queryType = "load-more";
    }
    return __awaiter(void 0, void 0, void 0, function() {
      var offset2, newOptions, channelQueryResponse, newChannels, err_1;
      var _a2, _b2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            setError(null);
            if (queryType === "reload") {
              setChannels([]);
            }
            setQueryInProgress(queryType);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 6, , 7]);
            if (!customQueryChannels) return [3, 3];
            return [4, customQueryChannels({
              currentChannels: channels,
              queryType,
              setChannels,
              setHasNextPage
            })];
          case 2:
            _c2.sent();
            return [3, 5];
          case 3:
            offset2 = queryType === "reload" ? 0 : channels.length;
            newOptions = __assign({ limit: (_a2 = options2 === null || options2 === void 0 ? void 0 : options2.limit) !== null && _a2 !== void 0 ? _a2 : MAX_QUERY_CHANNELS_LIMIT, message_limit: (_b2 = options2 === null || options2 === void 0 ? void 0 : options2.message_limit) !== null && _b2 !== void 0 ? _b2 : DEFAULT_INITIAL_CHANNEL_PAGE_SIZE, offset: offset2 }, options2);
            return [4, client.queryChannels(filters, sort2 || {}, newOptions)];
          case 4:
            channelQueryResponse = _c2.sent();
            newChannels = queryType === "reload" ? channelQueryResponse : (0, import_lodash17.default)(__spreadArray(__spreadArray([], channels, true), channelQueryResponse, true), "cid");
            setChannels(newChannels);
            setHasNextPage(channelQueryResponse.length >= newOptions.limit);
            if (!offset2 && activeChannelHandler) {
              activeChannelHandler(newChannels, setChannels);
            }
            _c2.label = 5;
          case 5:
            return [3, 7];
          case 6:
            err_1 = _c2.sent();
            console.warn(err_1);
            setError(err_1);
            return [3, 7];
          case 7:
            setQueryInProgress(null);
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var throttleRecover = (0, import_react248.useCallback)(function() {
    var now = Date.now();
    var isFirstRecovery = !lastRecoveryTimestamp.current;
    var timeElapsedSinceLastRecoveryMs = lastRecoveryTimestamp.current ? now - lastRecoveryTimestamp.current : 0;
    if (!isFirstRecovery && timeElapsedSinceLastRecoveryMs < recoveryThrottleInterval && !error2) {
      return;
    }
    lastRecoveryTimestamp.current = now;
    queryChannels("reload");
  }, [error2, queryChannels, recoveryThrottleInterval]);
  var loadNextPage = function() {
    queryChannels();
  };
  (0, import_react248.useEffect)(function() {
    if (client.recoverStateOnReconnect)
      return;
    var unsubscribe = client.on("connection.recovered", throttleRecover).unsubscribe;
    return function() {
      unsubscribe();
    };
  }, [client, throttleRecover]);
  (0, import_react248.useEffect)(function() {
    queryChannels("reload");
  }, [filterString, sortString]);
  return {
    channels,
    hasNextPage,
    loadNextPage,
    setChannels
  };
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useUserPresenceChangedListener.js
var import_react249 = __toESM(require_react());
var useUserPresenceChangedListener = function(setChannels) {
  var client = useChatContext("useUserPresenceChangedListener").client;
  (0, import_react249.useEffect)(function() {
    var handleEvent = function(event) {
      setChannels(function(channels) {
        var newChannels = channels.map(function(channel) {
          var _a;
          if (!((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) || !channel.state.members[event.user.id]) {
            return channel;
          }
          var newChannel = channel;
          newChannel.state.members[event.user.id].user = event.user;
          return newChannel;
        });
        return __spreadArray([], newChannels, true);
      });
    };
    client.on("user.presence.changed", handleEvent);
    return function() {
      client.off("user.presence.changed", handleEvent);
    };
  }, []);
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js
var import_lodash18 = __toESM(require_lodash());
var import_react253 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewMessenger.js
var import_react250 = __toESM(require_react());
var UnMemoizedChannelPreviewMessenger = function(props) {
  var _a, _b;
  var active = props.active, _c = props.Avatar, Avatar2 = _c === void 0 ? Avatar : _c, channel = props.channel, _d = props.className, customClassName = _d === void 0 ? "" : _d, displayImage = props.displayImage, displayTitle = props.displayTitle, latestMessagePreview = props.latestMessagePreview, customOnSelectChannel = props.onSelect, setActiveChannel = props.setActiveChannel, unread = props.unread, watchers = props.watchers;
  var channelPreviewButton = (0, import_react250.useRef)(null);
  var avatarName = displayTitle || ((_b = (_a = channel.state.messages[channel.state.messages.length - 1]) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id);
  var onSelectChannel = function(e) {
    if (customOnSelectChannel) {
      customOnSelectChannel(e);
    } else if (setActiveChannel) {
      setActiveChannel(channel, watchers);
    }
    if (channelPreviewButton === null || channelPreviewButton === void 0 ? void 0 : channelPreviewButton.current) {
      channelPreviewButton.current.blur();
    }
  };
  return import_react250.default.createElement(
    "button",
    { "aria-label": "Select Channel: ".concat(displayTitle || ""), "aria-selected": active, className: clsx_default("str-chat__channel-preview-messenger str-chat__channel-preview", active && "str-chat__channel-preview-messenger--active", unread && unread >= 1 && "str-chat__channel-preview-messenger--unread", customClassName), "data-testid": "channel-preview-button", onClick: onSelectChannel, ref: channelPreviewButton, role: "option" },
    import_react250.default.createElement(
      "div",
      { className: "str-chat__channel-preview-messenger--left" },
      import_react250.default.createElement(Avatar2, { image: displayImage, name: avatarName, size: 40 })
    ),
    import_react250.default.createElement(
      "div",
      { className: "str-chat__channel-preview-messenger--right str-chat__channel-preview-end" },
      import_react250.default.createElement(
        "div",
        { className: "str-chat__channel-preview-end-first-row" },
        import_react250.default.createElement(
          "div",
          { className: "str-chat__channel-preview-messenger--name" },
          import_react250.default.createElement("span", null, displayTitle)
        ),
        !!unread && import_react250.default.createElement("div", { className: "str-chat__channel-preview-unread-badge", "data-testid": "unread-badge" }, unread)
      ),
      import_react250.default.createElement("div", { className: "str-chat__channel-preview-messenger--last-message" }, latestMessagePreview)
    )
  );
};
var ChannelPreviewMessenger = import_react250.default.memo(UnMemoizedChannelPreviewMessenger);

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useIsChannelMuted.js
var import_react251 = __toESM(require_react());
var useIsChannelMuted = function(channel) {
  var client = useChatContext("useIsChannelMuted").client;
  var _a = (0, import_react251.useState)(channel.muteStatus()), muted = _a[0], setMuted = _a[1];
  (0, import_react251.useEffect)(function() {
    var handleEvent = function() {
      return setMuted(channel.muteStatus());
    };
    client.on("notification.channel_mutes_updated", handleEvent);
    return function() {
      return client.off("notification.channel_mutes_updated", handleEvent);
    };
  }, [muted]);
  return muted;
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useMessageDeliveryStatus.js
var import_react252 = __toESM(require_react());
var MessageDeliveryStatus;
(function(MessageDeliveryStatus2) {
  MessageDeliveryStatus2["DELIVERED"] = "delivered";
  MessageDeliveryStatus2["READ"] = "read";
})(MessageDeliveryStatus || (MessageDeliveryStatus = {}));
var useMessageDeliveryStatus = function(_a) {
  var channel = _a.channel, lastMessage = _a.lastMessage;
  var client = useChatContext().client;
  var _b = (0, import_react252.useState)(), messageDeliveryStatus = _b[0], setMessageDeliveryStatus = _b[1];
  var isOwnMessage = (0, import_react252.useCallback)(function(message) {
    var _a2;
    return client.user && ((_a2 = message === null || message === void 0 ? void 0 : message.user) === null || _a2 === void 0 ? void 0 : _a2.id) === client.user.id;
  }, [client]);
  (0, import_react252.useEffect)(function() {
    var lastMessageIsOwn = isOwnMessage(lastMessage);
    if (!(lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.created_at) || !lastMessageIsOwn)
      return;
    var lastMessageCreatedAtDate = typeof lastMessage.created_at === "string" ? new Date(lastMessage.created_at) : lastMessage.created_at;
    var channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(function(_a2) {
      var channelLastMarkedReadDate = _a2.last_read, user = _a2.user;
      var ignoreOwnReadStatus = client.user && user.id !== client.user.id;
      return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;
    });
    setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate ? MessageDeliveryStatus.READ : MessageDeliveryStatus.DELIVERED);
  }, [channel.state.read, client, isOwnMessage, lastMessage]);
  (0, import_react252.useEffect)(function() {
    var handleMessageNew = function(event) {
      if (!isOwnMessage(event.message)) {
        return setMessageDeliveryStatus(void 0);
      }
      return setMessageDeliveryStatus(MessageDeliveryStatus.DELIVERED);
    };
    channel.on("message.new", handleMessageNew);
    return function() {
      channel.off("message.new", handleMessageNew);
    };
  }, [channel, client, isOwnMessage]);
  (0, import_react252.useEffect)(function() {
    if (!isOwnMessage(lastMessage))
      return;
    var handleMarkRead = function(event) {
      var _a2, _b2;
      if (((_a2 = event.user) === null || _a2 === void 0 ? void 0 : _a2.id) !== ((_b2 = client.user) === null || _b2 === void 0 ? void 0 : _b2.id))
        setMessageDeliveryStatus(MessageDeliveryStatus.READ);
    };
    channel.on("message.read", handleMarkRead);
    return function() {
      channel.off("message.read", handleMarkRead);
    };
  }, [channel, client, lastMessage, isOwnMessage]);
  return {
    messageDeliveryStatus
  };
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js
var ChannelPreview = function(props) {
  var channel = props.channel, _a = props.Preview, Preview = _a === void 0 ? ChannelPreviewMessenger : _a, channelUpdateCount = props.channelUpdateCount, _b = props.getLatestMessagePreview, getLatestMessagePreview2 = _b === void 0 ? getLatestMessagePreview : _b;
  var _c = useChatContext("ChannelPreview"), activeChannel = _c.channel, client = _c.client, setActiveChannel = _c.setActiveChannel;
  var _d = useTranslationContext("ChannelPreview"), t2 = _d.t, userLanguage = _d.userLanguage;
  var _e = useChannelPreviewInfo({ channel }), displayImage = _e.displayImage, displayTitle = _e.displayTitle;
  var _f = (0, import_react253.useState)(channel.state.messages[channel.state.messages.length - 1]), lastMessage = _f[0], setLastMessage = _f[1];
  var _g = (0, import_react253.useState)(0), unread = _g[0], setUnread = _g[1];
  var messageDeliveryStatus = useMessageDeliveryStatus({
    channel,
    lastMessage
  }).messageDeliveryStatus;
  var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;
  var muted = useIsChannelMuted(channel).muted;
  (0, import_react253.useEffect)(function() {
    var handleEvent = function(event) {
      if (!event.cid)
        return setUnread(0);
      if (channel.cid === event.cid)
        setUnread(0);
    };
    client.on("notification.mark_read", handleEvent);
    return function() {
      return client.off("notification.mark_read", handleEvent);
    };
  }, []);
  (0, import_react253.useEffect)(function() {
    var handleEvent = function(event) {
      var _a2, _b2;
      if (channel.cid !== event.cid)
        return;
      if (((_a2 = event.user) === null || _a2 === void 0 ? void 0 : _a2.id) !== ((_b2 = client.user) === null || _b2 === void 0 ? void 0 : _b2.id))
        return;
      setUnread(channel.countUnread());
    };
    channel.on("notification.mark_unread", handleEvent);
    return function() {
      channel.off("notification.mark_unread", handleEvent);
    };
  }, [channel, client]);
  var refreshUnreadCount = (0, import_react253.useMemo)(function() {
    return (0, import_lodash18.default)(function() {
      if (muted) {
        setUnread(0);
      } else {
        setUnread(channel.countUnread());
      }
    }, 400);
  }, [channel, muted]);
  (0, import_react253.useEffect)(function() {
    refreshUnreadCount();
    var handleEvent = function() {
      setLastMessage(channel.state.latestMessages[channel.state.latestMessages.length - 1]);
      refreshUnreadCount();
    };
    channel.on("message.new", handleEvent);
    channel.on("message.updated", handleEvent);
    channel.on("message.deleted", handleEvent);
    channel.on("message.undeleted", handleEvent);
    channel.on("channel.truncated", handleEvent);
    return function() {
      channel.off("message.new", handleEvent);
      channel.off("message.updated", handleEvent);
      channel.off("message.deleted", handleEvent);
      channel.off("message.undeleted", handleEvent);
      channel.off("channel.truncated", handleEvent);
    };
  }, [channel, refreshUnreadCount, channelUpdateCount]);
  if (!Preview)
    return null;
  var latestMessagePreview = getLatestMessagePreview2(channel, t2, userLanguage);
  return import_react253.default.createElement(Preview, __assign({}, props, { active: isActive, displayImage, displayTitle, lastMessage, latestMessage: latestMessagePreview, latestMessagePreview, messageDeliveryStatus, setActiveChannel, unread }));
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/ChannelSearch.js
var import_react259 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js
var import_react254 = __toESM(require_react());
var import_lodash19 = __toESM(require_lodash3());
var import_lodash20 = __toESM(require_lodash2());

// node_modules/stream-chat-react/dist/components/ChannelSearch/utils.js
var isChannel = function(output2) {
  return output2.cid != null;
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js
var useChannelSearch = function(_a) {
  var _b = _a.channelType, channelType = _b === void 0 ? "messaging" : _b, _c = _a.clearSearchOnClickOutside, clearSearchOnClickOutside = _c === void 0 ? true : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, onSearchCallback = _a.onSearch, onSearchExit = _a.onSearchExit, onSelectResult = _a.onSelectResult, _e = _a.searchDebounceIntervalMs, searchDebounceIntervalMs = _e === void 0 ? 300 : _e, _f = _a.searchForChannels, searchForChannels = _f === void 0 ? false : _f, searchFunction = _a.searchFunction, searchQueryParams = _a.searchQueryParams, setChannels = _a.setChannels;
  var _g = useChatContext("useChannelSearch"), client = _g.client, setActiveChannel = _g.setActiveChannel, themeVersion = _g.themeVersion;
  var _h = (0, import_react254.useState)(false), inputIsFocused = _h[0], setInputIsFocused = _h[1];
  var _j = (0, import_react254.useState)(""), query = _j[0], setQuery = _j[1];
  var _k = (0, import_react254.useState)([]), results = _k[0], setResults = _k[1];
  var _l = (0, import_react254.useState)(false), searching = _l[0], setSearching = _l[1];
  var searchQueryPromiseInProgress = (0, import_react254.useRef)();
  var shouldIgnoreQueryResults = (0, import_react254.useRef)(false);
  var inputRef = (0, import_react254.useRef)(null);
  var searchBarRef = (0, import_react254.useRef)(null);
  var clearState = (0, import_react254.useCallback)(function() {
    setQuery("");
    setResults([]);
    setSearching(false);
    if (searchQueryPromiseInProgress.current) {
      shouldIgnoreQueryResults.current = true;
    }
  }, []);
  var activateSearch = (0, import_react254.useCallback)(function() {
    setInputIsFocused(true);
  }, []);
  var exitSearch = (0, import_react254.useCallback)(function() {
    var _a2;
    setInputIsFocused(false);
    (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.blur();
    clearState();
    onSearchExit === null || onSearchExit === void 0 ? void 0 : onSearchExit();
  }, [clearState, onSearchExit]);
  (0, import_react254.useEffect)(function() {
    if (disabled)
      return;
    var clickListener = function(event) {
      var _a2, _b2;
      if (!(event.target instanceof HTMLElement))
        return;
      var isInputClick = themeVersion === "2" ? (_a2 = searchBarRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target) : (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.contains(event.target);
      if (isInputClick)
        return;
      if (inputIsFocused && !query || clearSearchOnClickOutside) {
        exitSearch();
      }
    };
    document.addEventListener("click", clickListener);
    return function() {
      return document.removeEventListener("click", clickListener);
    };
  }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);
  (0, import_react254.useEffect)(function() {
    if (!inputRef.current || disabled)
      return;
    var handleKeyDown = function(event) {
      if (event.key === "Escape")
        return exitSearch();
    };
    inputRef.current.addEventListener("keydown", handleKeyDown);
    return function() {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener("keydown", handleKeyDown);
    };
  }, [disabled]);
  var selectResult = (0, import_react254.useCallback)(
    function(result) {
      return __awaiter(void 0, void 0, void 0, function() {
        var selectedChannel, newChannel;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!client.userID)
                return [
                  2
                  /*return*/
                ];
              if (!onSelectResult) return [3, 2];
              return [4, onSelectResult({
                setQuery,
                setResults,
                setSearching
              }, result)];
            case 1:
              _a2.sent();
              return [
                2
                /*return*/
              ];
            case 2:
              if (!isChannel(result)) return [3, 3];
              setActiveChannel(result);
              selectedChannel = result;
              return [3, 5];
            case 3:
              newChannel = client.channel(channelType, { members: [client.userID, result.id] });
              return [4, newChannel.watch()];
            case 4:
              _a2.sent();
              setActiveChannel(newChannel);
              selectedChannel = newChannel;
              _a2.label = 5;
            case 5:
              setChannels === null || setChannels === void 0 ? void 0 : setChannels(function(channels) {
                return (0, import_lodash20.default)(__spreadArray([selectedChannel], channels, true), "cid");
              });
              if (clearSearchOnClickOutside) {
                exitSearch();
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [clearSearchOnClickOutside, client, exitSearch, onSelectResult, setActiveChannel, setChannels]
  );
  var getChannels = (0, import_react254.useCallback)(function(text5) {
    return __awaiter(void 0, void 0, void 0, function() {
      var results2, userQueryPromise, users, channelQueryPromise, _a2, channels, users, error_1;
      var _b2, _c2, _d2, _e2, _f2, _g2;
      return __generator(this, function(_h2) {
        switch (_h2.label) {
          case 0:
            results2 = [];
            _h2.label = 1;
          case 1:
            _h2.trys.push([1, 6, , 7]);
            userQueryPromise = client.queryUsers(__assign({ $or: [{ id: { $autocomplete: text5 } }, { name: { $autocomplete: text5 } }], id: { $ne: client.userID } }, (_b2 = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _b2 === void 0 ? void 0 : _b2.filters), __assign({ id: 1 }, (_c2 = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _c2 === void 0 ? void 0 : _c2.sort), __assign({ limit: 8 }, (_d2 = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _d2 === void 0 ? void 0 : _d2.options));
            if (!!searchForChannels) return [3, 3];
            searchQueryPromiseInProgress.current = userQueryPromise;
            return [4, searchQueryPromiseInProgress.current];
          case 2:
            users = _h2.sent().users;
            results2 = users;
            return [3, 5];
          case 3:
            channelQueryPromise = client.queryChannels(__assign({ name: { $autocomplete: text5 } }, (_e2 = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _e2 === void 0 ? void 0 : _e2.filters), ((_f2 = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _f2 === void 0 ? void 0 : _f2.sort) || {}, __assign({ limit: 5 }, (_g2 = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _g2 === void 0 ? void 0 : _g2.options));
            searchQueryPromiseInProgress.current = Promise.all([
              channelQueryPromise,
              userQueryPromise
            ]);
            return [4, searchQueryPromiseInProgress.current];
          case 4:
            _a2 = _h2.sent(), channels = _a2[0], users = _a2[1].users;
            results2 = __spreadArray(__spreadArray([], channels, true), users, true);
            _h2.label = 5;
          case 5:
            return [3, 7];
          case 6:
            error_1 = _h2.sent();
            console.error(error_1);
            return [3, 7];
          case 7:
            setSearching(false);
            if (!shouldIgnoreQueryResults.current) {
              setResults(results2);
            } else {
              shouldIgnoreQueryResults.current = false;
            }
            searchQueryPromiseInProgress.current = void 0;
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [client, searchForChannels, searchQueryParams]);
  var scheduleGetChannels = (0, import_react254.useCallback)((0, import_lodash19.default)(getChannels, searchDebounceIntervalMs), [
    getChannels,
    searchDebounceIntervalMs
  ]);
  var onSearch = (0, import_react254.useCallback)(function(event) {
    event.preventDefault();
    if (disabled)
      return;
    if (searchFunction) {
      searchFunction({
        setQuery,
        setResults,
        setSearching
      }, event);
    } else if (event.target.value) {
      setSearching(true);
      setQuery(event.target.value);
      scheduleGetChannels(event.target.value);
    } else if (!event.target.value) {
      clearState();
      scheduleGetChannels.cancel();
    }
    onSearchCallback === null || onSearchCallback === void 0 ? void 0 : onSearchCallback(event);
  }, [clearState, disabled, scheduleGetChannels, onSearchCallback, searchFunction]);
  return {
    activateSearch,
    clearState,
    exitSearch,
    inputIsFocused,
    inputRef,
    onSearch,
    query,
    results,
    searchBarRef,
    searching,
    selectResult
  };
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchBar.js
var import_react257 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelSearch/icons.js
var import_react255 = __toESM(require_react());
var MenuIcon2 = function() {
  return import_react255.default.createElement(
    "svg",
    { "data-testid": "menu-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react255.default.createElement("path", { clipRule: "evenodd", d: "M3 8V6H21V8H3ZM3 13H21V11H3V13ZM3 18H21V16H3V18Z", fill: "black", fillRule: "evenodd" })
  );
};
var ReturnIcon = function() {
  return import_react255.default.createElement(
    "svg",
    { "data-testid": "return-icon", fill: "none", height: "20", viewBox: "0 0 22 22", width: "20", xmlns: "http://www.w3.org/2000/svg" },
    import_react255.default.createElement("path", { d: "M21.6668 9.66666V12.3333H5.6529L12.9932 19.6736L11.1076 21.5592L0.54834 11L11.1076 0.440765L12.9932 2.32638L5.6529 9.66666H21.6668Z", fill: "#080707" })
  );
};
var XIcon = function() {
  return import_react255.default.createElement(
    "svg",
    { fill: "none", height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg" },
    import_react255.default.createElement("path", { d: "M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z", fill: "#747881" })
  );
};
var SearchIcon = function(_a) {
  var className = _a.className;
  return import_react255.default.createElement(
    "svg",
    { className, fill: "none", height: "18", viewBox: "0 0 18 18", width: "18", xmlns: "http://www.w3.org/2000/svg" },
    import_react255.default.createElement("path", { d: "M12.7549 11.255H11.9649L11.6849 10.985C12.6649 9.845 13.2549 8.365 13.2549 6.755C13.2549 3.165 10.3449 0.255005 6.75488 0.255005C3.16488 0.255005 0.254883 3.165 0.254883 6.755C0.254883 10.345 3.16488 13.255 6.75488 13.255C8.36488 13.255 9.84488 12.665 10.9849 11.685L11.2549 11.965V12.755L16.2549 17.745L17.7449 16.255L12.7549 11.255ZM6.75488 11.255C4.26488 11.255 2.25488 9.245 2.25488 6.755C2.25488 4.26501 4.26488 2.255 6.75488 2.255C9.24488 2.255 11.2549 4.26501 11.2549 6.755C11.2549 9.245 9.24488 11.255 6.75488 11.255Z", fill: "#747881" })
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchInput.js
var import_react256 = __toESM(require_react());
var SearchInput = function(props) {
  var disabled = props.disabled, inputRef = props.inputRef, onSearch = props.onSearch, placeholder = props.placeholder, query = props.query;
  var t2 = useTranslationContext("SearchInput").t;
  return import_react256.default.createElement("input", { className: "str-chat__channel-search-input", "data-testid": "search-input", disabled, onChange: onSearch, placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : t2("Search"), ref: inputRef, type: "text", value: query });
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchBar.js
var SearchBarButton = function(_a) {
  var children = _a.children, className = _a.className, onClick = _a.onClick;
  return import_react257.default.createElement("button", { className: clsx_default("str-chat__channel-search-bar-button", className), "data-testid": "search-bar-button", onClick }, children);
};
var SearchBar = function(props) {
  var activateSearch = props.activateSearch, AppMenu = props.AppMenu, _a = props.ClearInputIcon, ClearInputIcon = _a === void 0 ? XIcon : _a, exitSearch = props.exitSearch, _b = props.ExitSearchIcon, ExitSearchIcon = _b === void 0 ? ReturnIcon : _b, inputIsFocused = props.inputIsFocused, _c = props.MenuIcon, MenuIcon3 = _c === void 0 ? MenuIcon2 : _c, searchBarRef = props.searchBarRef, _d = props.SearchInput, SearchInput2 = _d === void 0 ? SearchInput : _d, _e = props.SearchInputIcon, SearchInputIcon = _e === void 0 ? SearchIcon : _e, inputProps = __rest(props, ["activateSearch", "AppMenu", "ClearInputIcon", "exitSearch", "ExitSearchIcon", "inputIsFocused", "MenuIcon", "searchBarRef", "SearchInput", "SearchInputIcon"]);
  var _f = (0, import_react257.useState)(false), menuIsOpen = _f[0], setMenuIsOpen = _f[1];
  var appMenuRef = (0, import_react257.useRef)(null);
  (0, import_react257.useEffect)(function() {
    if (!appMenuRef.current)
      return;
    var handleKeyDown = function(event) {
      if (menuIsOpen && event.key === "Escape") {
        setMenuIsOpen(false);
      }
    };
    var clickListener = function(e) {
      var _a2;
      if (!(e.target instanceof HTMLElement) || !menuIsOpen || ((_a2 = appMenuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(e.target)))
        return;
      setMenuIsOpen(false);
    };
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("click", clickListener);
    return function() {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("click", clickListener);
    };
  }, [menuIsOpen]);
  (0, import_react257.useEffect)(function() {
    if (!props.inputRef.current)
      return;
    var handleFocus = function() {
      activateSearch();
    };
    var handleBlur = function(e) {
      e.stopPropagation();
    };
    props.inputRef.current.addEventListener("focus", handleFocus);
    props.inputRef.current.addEventListener("blur", handleBlur);
    return function() {
      var _a2, _b2;
      (_a2 = props.inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener("focus", handleFocus);
      (_b2 = props.inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.addEventListener("blur", handleBlur);
    };
  }, []);
  var handleClearClick = (0, import_react257.useCallback)(function() {
    var _a2;
    exitSearch();
    (_a2 = inputProps.inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, []);
  var closeAppMenu = (0, import_react257.useCallback)(function() {
    return setMenuIsOpen(false);
  }, []);
  return import_react257.default.createElement(
    "div",
    { className: "str-chat__channel-search-bar", "data-testid": "search-bar", ref: searchBarRef },
    inputIsFocused ? import_react257.default.createElement(
      SearchBarButton,
      { className: "str-chat__channel-search-bar-button--exit-search", onClick: exitSearch },
      import_react257.default.createElement(ExitSearchIcon, null)
    ) : AppMenu ? import_react257.default.createElement(
      SearchBarButton,
      { className: "str-chat__channel-search-bar-button--menu", onClick: function() {
        return setMenuIsOpen(function(prev) {
          return !prev;
        });
      } },
      import_react257.default.createElement(MenuIcon3, null)
    ) : null,
    import_react257.default.createElement(
      "div",
      { className: clsx_default("str-chat__channel-search-input--wrapper", inputProps.query && "str-chat__channel-search-input--wrapper-active") },
      import_react257.default.createElement(
        "div",
        { className: "str-chat__channel-search-input--icon" },
        import_react257.default.createElement(SearchInputIcon, null)
      ),
      import_react257.default.createElement(SearchInput2, __assign({}, inputProps)),
      import_react257.default.createElement(
        "button",
        { className: "str-chat__channel-search-input--clear-button", "data-testid": "clear-input-button", disabled: !inputProps.query, onClick: handleClearClick },
        import_react257.default.createElement(ClearInputIcon, null)
      )
    ),
    menuIsOpen && AppMenu && import_react257.default.createElement(
      "div",
      { ref: appMenuRef },
      import_react257.default.createElement(AppMenu, { close: closeAppMenu })
    )
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchResults.js
var import_react258 = __toESM(require_react());
var DefaultSearchEmpty = function() {
  var t2 = useTranslationContext("SearchResults").t;
  return import_react258.default.createElement(
    "div",
    { "aria-live": "polite", className: "str-chat__channel-search-container-empty" },
    import_react258.default.createElement(SearchIcon, null),
    t2("No results found")
  );
};
var DefaultSearchResultsHeader = function(_a) {
  var results = _a.results;
  var t2 = useTranslationContext("SearchResultsHeader").t;
  return import_react258.default.createElement("div", { className: "str-chat__channel-search-results-header", "data-testid": "channel-search-results-header" }, t2("searchResultsCount", {
    count: results.length
  }));
};
var DefaultSearchResultsList = function(props) {
  var focusedUser = props.focusedUser, results = props.results, SearchResultItem = props.SearchResultItem, selectResult = props.selectResult;
  return import_react258.default.createElement(import_react258.default.Fragment, null, results.map(function(result, index4) {
    return import_react258.default.createElement(SearchResultItem, { focusedUser, index: index4, key: index4, result, selectResult });
  }));
};
var DefaultSearchResultItem = function(props) {
  var _a, _b;
  var focusedUser = props.focusedUser, index4 = props.index, result = props.result, selectResult = props.selectResult;
  var focused = focusedUser === index4;
  var themeVersion = useChatContext().themeVersion;
  var className = clsx_default("str-chat__channel-search-result", focused && "str-chat__channel-search-result--focused focused");
  if (isChannel(result)) {
    var channel_1 = result;
    return themeVersion === "2" ? import_react258.default.createElement(ChannelPreview, { channel: channel_1, className, onSelect: function() {
      return selectResult(channel_1);
    } }) : import_react258.default.createElement(
      "button",
      { "aria-label": "Select Channel: ".concat(((_a = channel_1.data) === null || _a === void 0 ? void 0 : _a.name) || ""), className, "data-testid": "channel-search-result-channel", onClick: function() {
        return selectResult(channel_1);
      }, role: "option" },
      import_react258.default.createElement("div", { className: "result-hashtag" }, "#"),
      import_react258.default.createElement("p", { className: "channel-search__result-text" }, (_b = channel_1.data) === null || _b === void 0 ? void 0 : _b.name)
    );
  } else {
    return import_react258.default.createElement(
      "button",
      { "aria-label": "Select User Channel: ".concat(result.name || ""), className, "data-testid": "channel-search-result-user", onClick: function() {
        return selectResult(result);
      }, role: "option" },
      import_react258.default.createElement(Avatar, { image: result.image, name: result.name || result.id, size: themeVersion === "2" ? 40 : void 0, user: result }),
      import_react258.default.createElement("div", { className: "str-chat__channel-search-result--display-name" }, result.name || result.id)
    );
  }
};
var ResultsContainer = function(_a) {
  var children = _a.children, popupResults = _a.popupResults;
  var t2 = useTranslationContext("ResultsContainer").t;
  return import_react258.default.createElement("div", { "aria-label": t2("aria/Channel search results"), className: clsx_default("str-chat__channel-search-container str-chat__channel-search-result-list", popupResults ? "popup" : "inline") }, children);
};
var SearchResults = function(props) {
  var popupResults = props.popupResults, results = props.results, searching = props.searching, _a = props.SearchEmpty, SearchEmpty = _a === void 0 ? DefaultSearchEmpty : _a, _b = props.SearchResultsHeader, SearchResultsHeader = _b === void 0 ? DefaultSearchResultsHeader : _b, SearchLoading = props.SearchLoading, _c = props.SearchResultItem, SearchResultItem = _c === void 0 ? DefaultSearchResultItem : _c, _d = props.SearchResultsList, SearchResultsList = _d === void 0 ? DefaultSearchResultsList : _d, selectResult = props.selectResult;
  var t2 = useTranslationContext("SearchResults").t;
  var _e = (0, import_react258.useState)(), focusedResult = _e[0], setFocusedResult = _e[1];
  var handleKeyDown = (0, import_react258.useCallback)(
    function(event) {
      if (event.key === "ArrowUp") {
        setFocusedResult(function(prevFocused) {
          if (prevFocused === void 0)
            return 0;
          return prevFocused === 0 ? results.length - 1 : prevFocused - 1;
        });
      }
      if (event.key === "ArrowDown") {
        setFocusedResult(function(prevFocused) {
          if (prevFocused === void 0)
            return 0;
          return prevFocused === results.length - 1 ? 0 : prevFocused + 1;
        });
      }
      if (event.key === "Enter") {
        event.preventDefault();
        if (focusedResult !== void 0) {
          selectResult(results[focusedResult]);
          return setFocusedResult(void 0);
        }
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [focusedResult]
  );
  (0, import_react258.useEffect)(function() {
    document.addEventListener("keydown", handleKeyDown, false);
    return function() {
      return document.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleKeyDown]);
  if (searching) {
    return import_react258.default.createElement(ResultsContainer, { popupResults }, SearchLoading ? import_react258.default.createElement(SearchLoading, null) : import_react258.default.createElement("div", { className: "str-chat__channel-search-container-searching", "data-testid": "search-in-progress-indicator" }, t2("Searching...")));
  }
  if (!results.length) {
    return import_react258.default.createElement(
      ResultsContainer,
      { popupResults },
      import_react258.default.createElement(SearchEmpty, null)
    );
  }
  return import_react258.default.createElement(
    ResultsContainer,
    { popupResults },
    import_react258.default.createElement(SearchResultsHeader, { results }),
    import_react258.default.createElement(SearchResultsList, { focusedUser: focusedResult, results, SearchResultItem, selectResult })
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/ChannelSearch.js
var UnMemoizedChannelSearch = function(props) {
  var AppMenu = props.AppMenu, ClearInputIcon = props.ClearInputIcon, ExitSearchIcon = props.ExitSearchIcon, MenuIcon3 = props.MenuIcon, placeholder = props.placeholder, _a = props.popupResults, popupResults = _a === void 0 ? false : _a, _b = props.SearchBar, SearchBar2 = _b === void 0 ? SearchBar : _b, SearchEmpty = props.SearchEmpty, _c = props.SearchInput, SearchInput2 = _c === void 0 ? SearchInput : _c, SearchLoading = props.SearchLoading, SearchInputIcon = props.SearchInputIcon, SearchResultItem = props.SearchResultItem, SearchResultsList = props.SearchResultsList, SearchResultsHeader = props.SearchResultsHeader, channelSearchParams = __rest(props, ["AppMenu", "ClearInputIcon", "ExitSearchIcon", "MenuIcon", "placeholder", "popupResults", "SearchBar", "SearchEmpty", "SearchInput", "SearchLoading", "SearchInputIcon", "SearchResultItem", "SearchResultsList", "SearchResultsHeader"]);
  var themeVersion = useChatContext("ChannelSearch").themeVersion;
  var _d = useChannelSearch(channelSearchParams), activateSearch = _d.activateSearch, clearState = _d.clearState, exitSearch = _d.exitSearch, inputIsFocused = _d.inputIsFocused, inputRef = _d.inputRef, onSearch = _d.onSearch, query = _d.query, results = _d.results, searchBarRef = _d.searchBarRef, searching = _d.searching, selectResult = _d.selectResult;
  var showSearchBarV2 = themeVersion === "2";
  return import_react259.default.createElement(
    "div",
    { className: clsx_default("str-chat__channel-search", popupResults ? "str-chat__channel-search--popup" : "str-chat__channel-search--inline", {
      "str-chat__channel-search--with-results": results.length > 0
    }), "data-testid": "channel-search" },
    showSearchBarV2 ? import_react259.default.createElement(SearchBar2, { activateSearch, AppMenu, ClearInputIcon, clearState, disabled: channelSearchParams.disabled, exitSearch, ExitSearchIcon, inputIsFocused, inputRef, MenuIcon: MenuIcon3, onSearch, placeholder, query, searchBarRef, SearchInput: SearchInput2, SearchInputIcon }) : import_react259.default.createElement(SearchInput2, { clearState, disabled: channelSearchParams.disabled, inputRef, onSearch, placeholder, query }),
    query && import_react259.default.createElement(SearchResults, { popupResults, results, SearchEmpty, searching, SearchLoading, SearchResultItem, SearchResultsHeader, SearchResultsList, selectResult })
  );
};
var ChannelSearch = import_react259.default.memo(UnMemoizedChannelSearch);

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMorePaginator.js
var import_react261 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMoreButton.js
var import_react260 = __toESM(require_react());
var UnMemoizedLoadMoreButton = function(_a) {
  var children = _a.children, isLoading = _a.isLoading, onClick = _a.onClick, refreshing = _a.refreshing;
  var t2 = useTranslationContext("UnMemoizedLoadMoreButton").t;
  var childrenOrDefaultString = children !== null && children !== void 0 ? children : t2("Load more");
  var loading = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react260.useEffect)(function() {
    deprecationAndReplacementWarning([[{ refreshing }, { isLoading }]], "LoadMoreButton");
  }, []);
  return import_react260.default.createElement(
    "div",
    { className: "str-chat__load-more-button" },
    import_react260.default.createElement("button", { "aria-label": t2("aria/Load More Channels"), className: "str-chat__load-more-button__button str-chat__cta-button", "data-testid": "load-more-button", disabled: loading, onClick }, loading ? import_react260.default.createElement(LoadingIndicator2, null) : childrenOrDefaultString)
  );
};
var LoadMoreButton = import_react260.default.memo(UnMemoizedLoadMoreButton);

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMorePaginator.js
var UnMemoizedLoadMorePaginator = function(props) {
  var children = props.children, hasNextPage = props.hasNextPage, isLoading = props.isLoading, _a = props.LoadMoreButton, LoadMoreButton2 = _a === void 0 ? LoadMoreButton : _a, loadNextPage = props.loadNextPage, refreshing = props.refreshing, reverse = props.reverse;
  var loadingState = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react261.useEffect)(function() {
    deprecationAndReplacementWarning([[{ refreshing }, { isLoading }]], "LoadMorePaginator");
  }, []);
  return import_react261.default.createElement(
    import_react261.default.Fragment,
    null,
    !reverse && children,
    hasNextPage && import_react261.default.createElement(LoadMoreButton2, { isLoading: loadingState, onClick: loadNextPage }),
    reverse && children
  );
};
var LoadMorePaginator = import_react261.default.memo(UnMemoizedLoadMorePaginator);

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js
var DEFAULT_FILTERS = {};
var DEFAULT_OPTIONS2 = {};
var DEFAULT_SORT = {};
var UnMemoizedChannelList = function(props) {
  var _a, _b;
  var additionalChannelSearchProps = props.additionalChannelSearchProps, _c = props.Avatar, Avatar2 = _c === void 0 ? Avatar : _c, allowNewMessagesFromUnfilteredChannels = props.allowNewMessagesFromUnfilteredChannels, channelRenderFilterFn = props.channelRenderFilterFn, _d = props.ChannelSearch, ChannelSearch2 = _d === void 0 ? ChannelSearch : _d, customActiveChannel = props.customActiveChannel, customQueryChannels = props.customQueryChannels, _e = props.EmptyStateIndicator, EmptyStateIndicator2 = _e === void 0 ? EmptyStateIndicator : _e, filters = props.filters, getLatestMessagePreview2 = props.getLatestMessagePreview, _f = props.LoadingErrorIndicator, LoadingErrorIndicator2 = _f === void 0 ? ChatDown : _f, _g = props.LoadingIndicator, LoadingIndicator3 = _g === void 0 ? LoadingChannels : _g, _h = props.List, List2 = _h === void 0 ? ChannelListMessenger : _h, lockChannelOrder = props.lockChannelOrder, onAddedToChannel = props.onAddedToChannel, onChannelDeleted = props.onChannelDeleted, onChannelHidden = props.onChannelHidden, onChannelTruncated = props.onChannelTruncated, onChannelUpdated = props.onChannelUpdated, onChannelVisible = props.onChannelVisible, onMessageNew = props.onMessageNew, onMessageNewHandler = props.onMessageNewHandler, onRemovedFromChannel = props.onRemovedFromChannel, options2 = props.options, _j = props.Paginator, Paginator = _j === void 0 ? LoadMorePaginator : _j, Preview = props.Preview, recoveryThrottleIntervalMs = props.recoveryThrottleIntervalMs, renderChannels = props.renderChannels, _k = props.sendChannelsToList, sendChannelsToList = _k === void 0 ? false : _k, _l = props.setActiveChannelOnMount, setActiveChannelOnMount = _l === void 0 ? true : _l, _m = props.showChannelSearch, showChannelSearch = _m === void 0 ? false : _m, _o = props.sort, sort2 = _o === void 0 ? DEFAULT_SORT : _o, _p = props.watchers, watchers = _p === void 0 ? {} : _p;
  var _q = useChatContext("ChannelList"), channel = _q.channel, channelsQueryState = _q.channelsQueryState, client = _q.client, closeMobileNav = _q.closeMobileNav, customClasses = _q.customClasses, _r = _q.navOpen, navOpen = _r === void 0 ? false : _r, setActiveChannel = _q.setActiveChannel, theme = _q.theme, useImageFlagEmojisOnWindows = _q.useImageFlagEmojisOnWindows;
  var channelListRef = (0, import_react262.useRef)(null);
  var _s = (0, import_react262.useState)(0), channelUpdateCount = _s[0], setChannelUpdateCount = _s[1];
  var _t = (0, import_react262.useState)(false), searchActive = _t[0], setSearchActive = _t[1];
  var activeChannelHandler = function(channels2, setChannels2) {
    return __awaiter(void 0, void 0, void 0, function() {
      var customActiveChannelObject, newChannels;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!channels2.length || channels2.length > ((options2 === null || options2 === void 0 ? void 0 : options2.limit) || MAX_QUERY_CHANNELS_LIMIT)) {
              return [
                2
                /*return*/
              ];
            }
            if (!customActiveChannel) return [3, 3];
            customActiveChannelObject = channels2.find(function(chan) {
              return chan.id === customActiveChannel;
            });
            if (!!customActiveChannelObject) return [3, 2];
            return [4, client.queryChannels({ id: customActiveChannel })];
          case 1:
            customActiveChannelObject = _a2.sent()[0];
            _a2.label = 2;
          case 2:
            if (customActiveChannelObject) {
              setActiveChannel(customActiveChannelObject, watchers);
              newChannels = moveChannelUp({
                activeChannel: customActiveChannelObject,
                channels: channels2,
                cid: customActiveChannelObject.cid
              });
              setChannels2(newChannels);
            }
            return [
              2
              /*return*/
            ];
          case 3:
            if (setActiveChannelOnMount) {
              setActiveChannel(channels2[0], watchers);
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var forceUpdate = function() {
    return setChannelUpdateCount(function(count) {
      return count + 1;
    });
  };
  var onSearch = (0, import_react262.useCallback)(function(event) {
    var _a2;
    if (!event.target.value) {
      setSearchActive(false);
    } else {
      setSearchActive(true);
    }
    (_a2 = additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.onSearch) === null || _a2 === void 0 ? void 0 : _a2.call(additionalChannelSearchProps, event);
  }, []);
  var onSearchExit = (0, import_react262.useCallback)(function() {
    var _a2;
    setSearchActive(false);
    (_a2 = additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.onSearchExit) === null || _a2 === void 0 ? void 0 : _a2.call(additionalChannelSearchProps);
  }, []);
  var _u = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort2 || DEFAULT_SORT, options2 || DEFAULT_OPTIONS2, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels), channels = _u.channels, hasNextPage = _u.hasNextPage, loadNextPage = _u.loadNextPage, setChannels = _u.setChannels;
  var loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;
  useMobileNavigation(channelListRef, navOpen, closeMobileNav);
  useMessageNewListener(setChannels, onMessageNewHandler, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);
  useNotificationMessageNewListener(setChannels, onMessageNew, allowNewMessagesFromUnfilteredChannels);
  useNotificationAddedToChannelListener(setChannels, onAddedToChannel, allowNewMessagesFromUnfilteredChannels);
  useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);
  useChannelDeletedListener(setChannels, onChannelDeleted);
  useChannelHiddenListener(setChannels, onChannelHidden);
  useChannelVisibleListener(setChannels, onChannelVisible);
  useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);
  useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);
  useConnectionRecoveredListener(forceUpdate);
  useUserPresenceChangedListener(setChannels);
  (0, import_react262.useEffect)(function() {
    var handleEvent = function(event) {
      if (event.cid === (channel === null || channel === void 0 ? void 0 : channel.cid)) {
        setActiveChannel();
      }
    };
    client.on("channel.deleted", handleEvent);
    client.on("channel.hidden", handleEvent);
    return function() {
      client.off("channel.deleted", handleEvent);
      client.off("channel.hidden", handleEvent);
    };
  }, [channel === null || channel === void 0 ? void 0 : channel.cid]);
  var renderChannel = function(item) {
    var previewProps = {
      activeChannel: channel,
      Avatar: Avatar2,
      channel: item,
      // forces the update of preview component on channel update
      channelUpdateCount,
      getLatestMessagePreview: getLatestMessagePreview2,
      key: item.cid,
      Preview,
      setActiveChannel,
      watchers
    };
    return import_react262.default.createElement(ChannelPreview, __assign({}, previewProps));
  };
  var className = clsx_default((_a = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) !== null && _a !== void 0 ? _a : "str-chat", theme, (_b = customClasses === null || customClasses === void 0 ? void 0 : customClasses.channelList) !== null && _b !== void 0 ? _b : "str-chat-channel-list str-chat__channel-list str-chat__channel-list-react", {
    "str-chat--windows-flags": useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),
    "str-chat-channel-list--open": navOpen
  });
  var showChannelList = !searchActive || (additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.popupResults);
  return import_react262.default.createElement(
    ChannelListContextProvider,
    { value: { channels, setChannels } },
    import_react262.default.createElement(
      "div",
      { className, ref: channelListRef },
      showChannelSearch && import_react262.default.createElement(ChannelSearch2, __assign({ onSearch, onSearchExit, setChannels }, additionalChannelSearchProps)),
      showChannelList && import_react262.default.createElement(List2, { error: channelsQueryState.error, loadedChannels: sendChannelsToList ? loadedChannels : void 0, loading: !!channelsQueryState.queryInProgress && ["reload", "uninitialized"].includes(channelsQueryState.queryInProgress), LoadingErrorIndicator: LoadingErrorIndicator2, LoadingIndicator: LoadingIndicator3, setChannels }, !(loadedChannels === null || loadedChannels === void 0 ? void 0 : loadedChannels.length) ? import_react262.default.createElement(EmptyStateIndicator2, { listType: "channel" }) : import_react262.default.createElement(Paginator, { hasNextPage, isLoading: channelsQueryState.queryInProgress === "load-more", loadNextPage }, renderChannels ? renderChannels(loadedChannels, renderChannel) : loadedChannels.map(function(channel2) {
        return renderChannel(channel2);
      })))
    )
  );
};
var ChannelList = import_react262.default.memo(UnMemoizedChannelList);

// node_modules/stream-chat-react/dist/components/Chat/Chat.js
var import_react266 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Chat/hooks/useChat.js
var import_react263 = __toESM(require_react());

// node_modules/stream-chat-react/dist/version.js
var version = "11.24.1";

// node_modules/stream-chat-react/dist/components/Chat/hooks/useChat.js
var useChat = function(_a) {
  var _b, _c;
  var client = _a.client, _d = _a.defaultLanguage, defaultLanguage = _d === void 0 ? "en" : _d, i18nInstance = _a.i18nInstance, initialNavOpen = _a.initialNavOpen;
  var _e = (0, import_react263.useState)({
    t: function(key) {
      return key;
    },
    tDateTimeParser: defaultDateTimeParser,
    userLanguage: "en"
  }), translators = _e[0], setTranslators = _e[1];
  var _f = (0, import_react263.useState)(), channel = _f[0], setChannel = _f[1];
  var _g = (0, import_react263.useState)([]), mutes = _g[0], setMutes = _g[1];
  var _h = (0, import_react263.useState)(initialNavOpen), navOpen = _h[0], setNavOpen = _h[1];
  var _j = (0, import_react263.useState)({}), latestMessageDatesByChannels = _j[0], setLatestMessageDatesByChannels = _j[1];
  var clientMutes = ((_b = client.user) === null || _b === void 0 ? void 0 : _b.mutes) || [];
  var closeMobileNav = function() {
    return setNavOpen(false);
  };
  var openMobileNav = function() {
    return setTimeout(function() {
      return setNavOpen(true);
    }, 100);
  };
  var appSettings = (0, import_react263.useRef)(null);
  var getAppSettings = function() {
    if (appSettings.current) {
      return appSettings.current;
    }
    appSettings.current = client.getAppSettings();
    return appSettings.current;
  };
  (0, import_react263.useEffect)(function() {
    if (client) {
      var userAgent = client.getUserAgent();
      if (!userAgent.includes("stream-chat-react")) {
        client.setUserAgent("stream-chat-react-".concat(version, "-").concat(userAgent));
      }
    }
  }, [client]);
  (0, import_react263.useEffect)(function() {
    setMutes(clientMutes);
    var handleEvent = function(event) {
      var _a2;
      setMutes(((_a2 = event.me) === null || _a2 === void 0 ? void 0 : _a2.mutes) || []);
    };
    client.on("notification.mutes_updated", handleEvent);
    return function() {
      return client.off("notification.mutes_updated", handleEvent);
    };
  }, [clientMutes === null || clientMutes === void 0 ? void 0 : clientMutes.length]);
  (0, import_react263.useEffect)(function() {
    var _a2;
    var userLanguage = (_a2 = client.user) === null || _a2 === void 0 ? void 0 : _a2.language;
    if (!userLanguage) {
      var browserLanguage = window.navigator.language.slice(0, 2);
      userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;
    }
    var streami18n = i18nInstance || new Streami18n({ language: userLanguage });
    streami18n.registerSetLanguageCallback(function(t2) {
      return setTranslators(function(prevTranslator) {
        return __assign(__assign({}, prevTranslator), { t: t2 });
      });
    });
    streami18n.getTranslators().then(function(translator) {
      setTranslators(__assign(__assign({}, translator), { userLanguage: userLanguage || defaultLanguage }));
    });
  }, [i18nInstance]);
  var setActiveChannel = (0, import_react263.useCallback)(function(activeChannel, watchers, event) {
    if (watchers === void 0) {
      watchers = {};
    }
    return __awaiter(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (event && event.preventDefault)
              event.preventDefault();
            if (!(activeChannel && Object.keys(watchers).length)) return [3, 2];
            return [4, activeChannel.query({ watch: true, watchers })];
          case 1:
            _a2.sent();
            _a2.label = 2;
          case 2:
            setChannel(activeChannel);
            closeMobileNav();
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, []);
  (0, import_react263.useEffect)(function() {
    setLatestMessageDatesByChannels({});
  }, [(_c = client.user) === null || _c === void 0 ? void 0 : _c.id]);
  return {
    channel,
    closeMobileNav,
    getAppSettings,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    setActiveChannel,
    translators
  };
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatContext.js
var import_react264 = __toESM(require_react());
var useCreateChatContext = function(value) {
  var _a;
  var channel = value.channel, channelsQueryState = value.channelsQueryState, client = value.client, closeMobileNav = value.closeMobileNav, customClasses = value.customClasses, getAppSettings = value.getAppSettings, latestMessageDatesByChannels = value.latestMessageDatesByChannels, mutes = value.mutes, navOpen = value.navOpen, openMobileNav = value.openMobileNav, setActiveChannel = value.setActiveChannel, theme = value.theme, themeVersion = value.themeVersion, useImageFlagEmojisOnWindows = value.useImageFlagEmojisOnWindows;
  var channelCid = channel === null || channel === void 0 ? void 0 : channel.cid;
  var channelsQueryError = channelsQueryState.error;
  var channelsQueryInProgress = channelsQueryState.queryInProgress;
  var clientValues = "".concat(client.clientID).concat(Object.keys(client.activeChannels).length).concat(Object.keys(client.listeners).length).concat(client.mutedChannels.length, "\n  ").concat((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);
  var mutedUsersLength = mutes.length;
  var chatContext = (0, import_react264.useMemo)(
    function() {
      return {
        channel,
        channelsQueryState,
        client,
        closeMobileNav,
        customClasses,
        getAppSettings,
        latestMessageDatesByChannels,
        mutes,
        navOpen,
        openMobileNav,
        setActiveChannel,
        theme,
        themeVersion,
        useImageFlagEmojisOnWindows
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channelCid,
      channelsQueryError,
      channelsQueryInProgress,
      clientValues,
      getAppSettings,
      mutedUsersLength,
      navOpen
    ]
  );
  return chatContext;
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useChannelsQueryState.js
var import_react265 = __toESM(require_react());
var useChannelsQueryState = function() {
  var _a = (0, import_react265.useState)(null), error2 = _a[0], setError = _a[1];
  var _b = (0, import_react265.useState)("uninitialized"), queryInProgress = _b[0], setQueryInProgress = _b[1];
  return {
    error: error2,
    queryInProgress,
    setError,
    setQueryInProgress
  };
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useCustomStyles.js
var darkModeTheme = {
  "--bg-gradient-end": "#101214",
  "--bg-gradient-start": "#070a0d",
  "--black": "#ffffff",
  "--blue-alice": "#00193d",
  "--border": "#141924",
  "--button-background": "#ffffff",
  "--button-text": "#005fff",
  "--grey": "#7a7a7a",
  "--grey-gainsboro": "#2d2f2f",
  "--grey-whisper": "#1c1e22",
  "--modal-shadow": "#000000",
  "--overlay": "#00000066",
  "--overlay-dark": "#ffffffcc",
  "--shadow-icon": "#00000080",
  "--targetedMessageBackground": "#302d22",
  "--transparent": "transparent",
  "--white": "#101418",
  "--white-smoke": "#13151b",
  "--white-snow": "#070a0d"
};
var useCustomStyles = function(customStyles) {
  if (!customStyles)
    return;
  for (var _i = 0, _a = Object.entries(customStyles); _i < _a.length; _i++) {
    var _b = _a[_i], key = _b[0], value = _b[1];
    document.documentElement.style.setProperty(key, value);
  }
};

// node_modules/stream-chat-react/dist/components/Chat/Chat.js
var Chat = function(props) {
  var children = props.children, client = props.client, customClasses = props.customClasses, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, defaultLanguage = props.defaultLanguage, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? "messaging light" : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;
  var _e = useChat({ client, defaultLanguage, i18nInstance, initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, getAppSettings = _e.getAppSettings, latestMessageDatesByChannels = _e.latestMessageDatesByChannels, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;
  var channelsQueryState = useChannelsQueryState();
  var themeVersion = typeof window !== "undefined" ? window.getComputedStyle(document.documentElement).getPropertyValue("--str-chat__theme-version").replace(" ", "") || "1" : "1";
  useCustomStyles(darkMode ? darkModeTheme : customStyles);
  var chatContextValue = useCreateChatContext({
    channel,
    channelsQueryState,
    client,
    closeMobileNav,
    customClasses,
    getAppSettings,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    setActiveChannel,
    theme,
    themeVersion,
    useImageFlagEmojisOnWindows
  });
  if (!translators.t)
    return null;
  return import_react266.default.createElement(
    ChatProvider,
    { value: chatContextValue },
    import_react266.default.createElement(TranslationProvider, { value: translators }, children)
  );
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatClient.js
var import_react267 = __toESM(require_react());
var useCreateChatClient = function(_a) {
  var apiKey = _a.apiKey, options2 = _a.options, tokenOrProvider = _a.tokenOrProvider, userData = _a.userData;
  var _b = (0, import_react267.useState)(null), chatClient = _b[0], setChatClient = _b[1];
  var _c = (0, import_react267.useState)(userData), cachedUserData = _c[0], setCachedUserData = _c[1];
  if (userData.id !== cachedUserData.id) {
    setCachedUserData(userData);
  }
  var cachedOptions = (0, import_react267.useState)(options2)[0];
  (0, import_react267.useEffect)(function() {
    var client = new StreamChat(apiKey, void 0, cachedOptions);
    var didUserConnectInterrupt = false;
    var connectionPromise = client.connectUser(cachedUserData, tokenOrProvider).then(function() {
      if (!didUserConnectInterrupt)
        setChatClient(client);
    });
    return function() {
      didUserConnectInterrupt = true;
      setChatClient(null);
      connectionPromise.then(function() {
        return client.disconnectUser();
      }).then(function() {
        console.log('Connection for user "'.concat(cachedUserData.id, '" has been closed'));
      });
    };
  }, [apiKey, cachedUserData, cachedOptions, tokenOrProvider]);
  return chatClient;
};

// node_modules/stream-chat-react/dist/components/Thread/Thread.js
var import_react272 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/ThreadHeader.js
var import_react269 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/icons.js
var import_react268 = __toESM(require_react());
var CloseIcon4 = function(_a) {
  var title = _a.title;
  var t2 = useTranslationContext("CloseIcon").t;
  return import_react268.default.createElement(
    "svg",
    { "data-testid": "close-no-outline", fill: "none", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
    import_react268.default.createElement("title", null, title !== null && title !== void 0 ? title : t2("Close")),
    import_react268.default.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "black" })
  );
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHeader.js
var ThreadHeader = function(props) {
  var closeThread = props.closeThread, overrideImage = props.overrideImage, overrideTitle = props.overrideTitle;
  var t2 = useTranslationContext("ThreadHeader").t;
  var channel = useChannelStateContext("").channel;
  var displayTitle = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  }).displayTitle;
  return import_react269.default.createElement(
    "div",
    { className: "str-chat__thread-header" },
    import_react269.default.createElement(
      "div",
      { className: "str-chat__thread-header-details" },
      import_react269.default.createElement("div", { className: "str-chat__thread-header-title" }, t2("Thread")),
      import_react269.default.createElement("div", { className: "str-chat__thread-header-subtitle" }, displayTitle)
    ),
    import_react269.default.createElement(
      "button",
      { "aria-label": t2("aria/Close thread"), className: "str-chat__square-button str-chat__close-thread-button", "data-testid": "close-button", onClick: closeThread },
      import_react269.default.createElement(CloseIcon4, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHead.js
var import_react271 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/ThreadStart.js
var import_react270 = __toESM(require_react());
var ThreadStart = function() {
  var thread = useChannelStateContext("ThreadStart").thread;
  var t2 = useTranslationContext("ThreadStart").t;
  if (!(thread === null || thread === void 0 ? void 0 : thread.reply_count))
    return null;
  return import_react270.default.createElement("div", { className: "str-chat__thread-start" }, t2("replyCount", { count: thread.reply_count }));
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHead.js
var ThreadHead = function(props) {
  var _a = useComponentContext("ThreadHead").ThreadStart, ThreadStart2 = _a === void 0 ? ThreadStart : _a;
  return import_react271.default.createElement(
    "div",
    { className: "str-chat__parent-message-li" },
    import_react271.default.createElement(Message, __assign({ initialMessage: true, threadList: true }, props)),
    import_react271.default.createElement(ThreadStart2, null)
  );
};

// node_modules/stream-chat-react/dist/components/Thread/Thread.js
var Thread = function(props) {
  var _a = useChannelStateContext("Thread"), channel = _a.channel, channelConfig = _a.channelConfig, thread = _a.thread;
  if (!thread || (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.replies) === false)
    return null;
  return import_react272.default.createElement(ThreadInner, __assign({}, props, { key: "thread-".concat(thread.id, "-").concat(channel === null || channel === void 0 ? void 0 : channel.cid) }));
};
var ThreadInner = function(props) {
  var _a, _b;
  var additionalMessageInputProps = props.additionalMessageInputProps, additionalMessageListProps = props.additionalMessageListProps, additionalParentMessageProps = props.additionalParentMessageProps, additionalVirtualizedMessageListProps = props.additionalVirtualizedMessageListProps, _c = props.autoFocus, autoFocus = _c === void 0 ? true : _c, _d = props.enableDateSeparator, enableDateSeparator = _d === void 0 ? false : _d, _e = props.fullWidth, fullWidth = _e === void 0 ? false : _e, PropInput = props.Input, PropMessage = props.Message, _f = props.messageActions, messageActions = _f === void 0 ? Object.keys(MESSAGE_ACTIONS) : _f, virtualized = props.virtualized;
  var _g = useChannelStateContext("Thread"), thread = _g.thread, threadHasMore = _g.threadHasMore, threadLoadingMore = _g.threadLoadingMore, threadMessages = _g.threadMessages, threadSuppressAutoscroll = _g.threadSuppressAutoscroll;
  var _h = useChannelActionContext("Thread"), closeThread = _h.closeThread, loadMoreThread = _h.loadMoreThread;
  var _j = useChatContext("Thread"), customClasses = _j.customClasses, themeVersion = _j.themeVersion;
  var _k = useComponentContext("Thread"), ContextInput = _k.ThreadInput, ContextMessage = _k.Message, _l = _k.ThreadHead, ThreadHead2 = _l === void 0 ? ThreadHead : _l, _m = _k.ThreadHeader, ThreadHeader2 = _m === void 0 ? ThreadHeader : _m, VirtualMessage = _k.VirtualMessage;
  var ThreadInput = (_b = (_a = PropInput !== null && PropInput !== void 0 ? PropInput : additionalMessageInputProps === null || additionalMessageInputProps === void 0 ? void 0 : additionalMessageInputProps.Input) !== null && _a !== void 0 ? _a : ContextInput) !== null && _b !== void 0 ? _b : themeVersion === "2" ? MessageInputFlat : MessageInputSmall;
  var ThreadMessage = PropMessage || (additionalMessageListProps === null || additionalMessageListProps === void 0 ? void 0 : additionalMessageListProps.Message);
  var FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;
  var MessageUIComponent = ThreadMessage || FallbackMessage;
  var ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;
  (0, import_react272.useEffect)(function() {
    if ((thread === null || thread === void 0 ? void 0 : thread.id) && (thread === null || thread === void 0 ? void 0 : thread.reply_count)) {
      loadMoreThread();
    }
  }, []);
  if (!thread)
    return null;
  var threadClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.thread) || clsx_default("str-chat__thread-container str-chat__thread", {
    "str-chat__thread--full": fullWidth,
    "str-chat__thread--virtualized": virtualized
  });
  var head = import_react272.default.createElement(ThreadHead2, __assign({ key: thread.id, message: thread, Message: MessageUIComponent }, additionalParentMessageProps));
  return import_react272.default.createElement(
    "div",
    { className: threadClass },
    import_react272.default.createElement(ThreadHeader2, { closeThread, thread }),
    import_react272.default.createElement(ThreadMessageList, __assign({ disableDateSeparator: !enableDateSeparator, hasMore: threadHasMore, head, loadingMore: threadLoadingMore, loadMore: loadMoreThread, Message: MessageUIComponent, messageActions, messages: threadMessages || [], suppressAutoscroll: threadSuppressAutoscroll, threadList: true }, virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps)),
    import_react272.default.createElement(MessageInput, __assign({ focus: autoFocus, Input: ThreadInput, parent: thread, publishTypingEvent: false }, additionalMessageInputProps))
  );
};

// node_modules/stream-chat-react/dist/components/Window/Window.js
var import_react273 = __toESM(require_react());
var UnMemoizedWindow = function(props) {
  var children = props.children, _a = props.hideOnThread, hideOnThread = _a === void 0 ? false : _a, propThread = props.thread;
  var contextThread = useChannelStateContext("Window").thread;
  return import_react273.default.createElement("div", { className: clsx_default("str-chat__main-panel", {
    "str-chat__main-panel--hideOnThread": hideOnThread && (contextThread || propThread)
  }) }, children);
};
var Window = import_react273.default.memo(UnMemoizedWindow);
export {
  ACTIONS_NOT_WORKING_IN_THREAD,
  ATTACHMENT_GROUPS_ORDER,
  ActionsIcon,
  Attachment,
  AttachmentActions,
  AttachmentActionsContainer,
  AttachmentPreviewList,
  AttachmentWithinContainer,
  Audio,
  AudioContainer,
  AudioRecorder,
  ReactTextareaAutocomplete as AutoCompleteTextarea,
  Avatar,
  BaseImage,
  BinIcon,
  Card,
  CardAudio,
  CardContainer,
  Channel,
  ChannelActionContext,
  ChannelActionProvider,
  ChannelHeader,
  ChannelList,
  ChannelListContext,
  ChannelListContextProvider,
  ChannelListMessenger,
  ChannelPreview,
  ChannelPreviewMessenger,
  ChannelSearch,
  ChannelStateContext,
  ChannelStateProvider,
  Chat,
  ChatAutoComplete,
  ChatContext,
  ChatDown,
  ChatProvider,
  CheckSignIcon,
  CloseIcon2 as CloseIcon,
  CommandItem,
  ComponentContext,
  ComponentProvider,
  ConnectionStatus,
  CooldownTimer,
  CustomMessageActionsList,
  DateSeparator,
  List as DefaultSuggestionList,
  DefaultSuggestionListHeader,
  Item as DefaultSuggestionListItem,
  DefaultTriggerProvider,
  DeliveredCheckIcon,
  DownloadButton,
  DownloadIcon2 as DownloadIcon,
  EditMessageForm,
  EmojiIconLarge,
  EmojiIconSmall,
  EmojiPickerIcon,
  EmoticonItem,
  EmptyStateIndicator,
  ErrorIcon,
  EventComponent,
  FileAttachment,
  FileContainer,
  FileSizeIndicator,
  FileUploadIcon,
  FileUploadIconFlat,
  FixedHeightMessage,
  Gallery,
  GalleryContainer,
  GiphyPreviewMessage,
  ImageComponent,
  ImageContainer,
  InfiniteScroll,
  LinkIcon,
  LinkPreviewList,
  LinkPreviewState,
  LoadMoreButton,
  LoadMorePaginator,
  LoadingChannels,
  LoadingErrorIndicator,
  LoadingIndicator2 as LoadingIndicator,
  LoadingIndicatorIcon,
  MAX_MESSAGE_REACTIONS_TO_FETCH,
  MAX_QUERY_CHANNELS_LIMIT,
  MESSAGE_ACTIONS,
  MML,
  MediaContainer,
  MediaRecordingState,
  Message,
  MessageActions,
  MessageActionsBox,
  MessageBounceProvider,
  MessageContext,
  MessageDeleted,
  MessageDeliveredIcon,
  MessageDeliveryStatus,
  MessageErrorIcon,
  MessageInput,
  MessageInputContext,
  MessageInputContextProvider,
  MessageInputFlat,
  MessageInputSmall,
  MessageList,
  MessageListContext,
  MessageListContextProvider,
  MessageListNotifications,
  MessageNotification,
  MessageOptions,
  MessageProvider,
  MessageRepliesCountButton,
  MessageSimple,
  MessageStatus,
  MessageText,
  MessageTimestamp,
  MicIcon,
  Modal,
  ModalGallery,
  NullComponent,
  PauseIcon2 as PauseIcon,
  PinIcon,
  PinIndicator,
  PlayButton,
  PlayIcon,
  PlaybackRateButton,
  PopperTooltip,
  ProgressBar,
  QuotedMessage,
  QuotedMessagePreview,
  QuotedMessagePreviewHeader,
  ReactionIcon,
  ReactionSelector,
  ReactionsList,
  RecordingPermission,
  RecordingPermissionDeniedNotification,
  RecordingTimer,
  ReplyIcon,
  RetryIcon2 as RetryIcon,
  SUPPORTED_VIDEO_FORMATS,
  SafeAnchor,
  ScrollToBottomButton,
  SearchBar,
  SearchInput,
  SearchResults,
  SendButton,
  SendIconV1,
  SendIconV2,
  SetLinkPreviewMode,
  SimpleReactionsList,
  SpriteImage,
  StartRecordingAudioButton,
  StreamEmoji,
  Streami18n,
  Thread,
  ThreadHeader,
  ThreadIcon,
  ThreadStart,
  Tooltip,
  TranslationContext,
  TranslationProvider,
  TypingContext,
  TypingIndicator,
  TypingProvider,
  UNREAD_MESSAGE_SEPARATOR_CLASS,
  UnMemoizedLoadMorePaginator,
  UnreadMessagesNotification,
  UnreadMessagesSeparator,
  UnsupportedAttachment,
  UnsupportedAttachmentContainer,
  UploadButton,
  UploadIcon,
  UploadsPreview,
  UserItem,
  VirtualizedMessageList,
  VoiceRecordingContainer,
  WaveProgressBar,
  Window,
  areMessagePropsEqual,
  areMessageUIPropsEqual,
  darkModeTheme,
  de_default as deTranslations,
  defaultAllowedTagNames,
  defaultDateTimeParser,
  defaultPinPermissions,
  defaultReactionOptions,
  defaultRenderMessages,
  defaultScrollToItem,
  defaultTimestampFormat2 as defaultTimestampFormat,
  defaultTranslatorFunction,
  displayDuration,
  divMod,
  downSample,
  emojiMarkdownPlugin,
  en_default as enTranslations,
  es_default as esTranslations,
  escapeRegExp,
  fr_default as frTranslations,
  generateRandomId,
  getChannel,
  getDisplayImage,
  getDisplayTitle,
  getGroupStyles,
  getImages,
  getLastReceived,
  getLatestMessagePreview,
  getMessageActions,
  getNonImageAttachments,
  getReadByTooltipText,
  getReadStates,
  getWholeChar,
  handleActionWarning,
  hasMoreMessagesProbably,
  hasNotMoreMessages,
  hi_default as hiTranslations,
  htmlToTextPlugin,
  insertIntro,
  isAudioAttachment,
  isChannel,
  isDate,
  isDateSeparatorMessage,
  isDayOrMoment,
  isFileAttachment,
  isGalleryAttachmentType,
  isLanguageSupported,
  isLocalAttachment,
  isLocalAudioAttachment,
  isLocalFileAttachment,
  isLocalImageAttachment,
  isLocalMediaAttachment,
  isLocalVoiceRecordingAttachment,
  isMediaAttachment,
  isMessageBounced,
  isMessageEdited,
  isNumberOrString,
  isOnlyEmojis,
  isScrapedContent,
  isSvgAttachment,
  isUploadedImage,
  isUserMuted,
  isVoiceRecordingAttachment,
  it_default as itTranslations,
  ja_default as jaTranslations,
  keepLineBreaksPlugin,
  ko_default as koTranslations,
  makeDateMessageId,
  mapToUserNameOrId,
  markDownRenderers,
  matchMarkdownLinks,
  mentionsMarkdownPlugin,
  messageCodeBlocks,
  messageHasAttachments,
  messageHasReactions,
  missingUseFlagHandlerParameterWarning,
  missingUseMuteHandlerParamsWarning,
  moveChannelUp,
  nl_default as nlTranslations,
  processMessages,
  pt_default as ptTranslations,
  reactionHandlerWarning,
  renderAttachmentActions,
  renderAttachmentWithinContainer,
  renderAudio,
  renderCard,
  renderFile,
  renderGallery,
  renderImage,
  renderMedia,
  renderPreviewText,
  renderText,
  resampleWaveformData,
  ru_default as ruTranslations,
  shouldRenderMessageActions,
  showMessageActionsBox,
  tr_default as trTranslations,
  upSample,
  useActionHandler,
  useChannelActionContext,
  useChannelDeletedListener,
  useEditMessageHandler as useChannelEditMessageHandler,
  useChannelHiddenListener,
  useChannelListContext,
  useMentionsHandlers as useChannelMentionsHandler,
  useChannelPreviewInfo,
  useChannelStateContext,
  useChannelTruncatedListener,
  useChannelUpdatedListener,
  useChannelVisibleListener,
  useChat,
  useChatContext,
  useComponentContext,
  useConnectionRecoveredListener,
  useCooldownTimer,
  useCreateChatClient,
  useCustomStyles,
  useDeleteHandler,
  useEditHandler,
  useEnrichedMessages,
  useFlagHandler,
  useLastReadData,
  useMarkUnreadHandler,
  useMentionsHandler,
  useMessageBounceContext,
  useMessageContext,
  useMessageInputContext,
  useMessageInputState,
  useMessageListContext,
  useMessageListElements,
  useMessageListScrollManager,
  useMessageNewListener,
  useMobileNavigation,
  useMuteHandler,
  useNewMessageNotification,
  useNotificationAddedToChannelListener,
  useNotificationMessageNewListener,
  useNotificationRemovedFromChannelListener,
  useOpenThreadHandler,
  usePaginatedChannels,
  usePinHandler,
  usePrependedMessagesCount,
  useReactionClick,
  useReactionHandler,
  useReactionsFetcher,
  useRetryHandler,
  useScrollLocationLogic,
  useShouldForceScrollToBottom,
  useTranslationContext,
  useTypingContext,
  useUserHandler,
  useUserPresenceChangedListener,
  useUserRole,
  validateAndGetMessage,
  withChannelActionContext,
  withChannelStateContext,
  withChatContext,
  withComponentContext,
  withMessageContext,
  withTranslationContext,
  withTypingContext
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=stream-chat-react.js.map
